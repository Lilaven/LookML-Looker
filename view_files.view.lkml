view: of_dep_sched_smry {
  sql_table_name: `ONEFORCE.OF_DEP_SCHED_SMRY`
    ;;

  dimension: bsa_ttl_teu_quantity {
    label: "BSA TTL TEU Quantity"
    type: number
    sql: ${TABLE}.BSA_TTL_TEU_Quantity ;;
  }

  dimension: delay {
    label: "Delay"
    type: number
    sql: ${TABLE}.Delay ;;
  }

  dimension: dominant_leg_flag {
    label: "DOM/N-DOM"
    type: string
    sql: ${TABLE}.Dominant_Leg_Flag ;;
  }

  dimension: record_id {
    primary_key: yes
    label: "Record Id"
    type: string
    sql: ${TABLE}.Record_Id ;;
    hidden: yes
  }

  dimension: sales_week {
    label: "Scheduled Week"
    type: string
    sql: ${TABLE}.Sales_Week ;;
  }

  dimension: seq_check {
    label: "Seq Check"
    type: string
    sql: ${TABLE}.SEQ_CHECK ;;
  }

  dimension: service_lane {
    label: "Service Lane (Rev)"
    type: string
    sql: ${TABLE}.Service_Lane ;;
  }

  dimension: trade_code {
    label: "Service Scope Group"
    type: string
    sql: ${TABLE}.Trade_Code ;;
  }

  dimension: schedule_status {
    label: "Schedule Status"
    type: string
    sql: ${TABLE}.Schedule_Status ;;
  }

  dimension: is_loader {
    label: "Is Loader"
    type: string
    sql: ${TABLE}.Is_Loader ;;
  }

  measure: c_loader {
    label: "No of Loader Sailing"
    type: count
    filters: [is_loader: "Yes", schedule_status: "Scheduled"]
    drill_fields: []
  }
  measure: c_sailing {
    label: "No of Total Sailing"
    type: count
  }

  measure: sailing_satus {
    label: "Sailing Status"
    type: list
    list_field: schedule_status
  }
  measure: c_scheduled {
    label: "No of Scheduled Sailing"
    type: count
    filters: [schedule_status: "Scheduled"]
    drill_fields: []
  }

  measure: c_scheduled_wo_ldr {
    label: "No of Scheduled without Loader"
    type: number
    sql:  ${c_scheduled}-${c_loader} ;;
    drill_fields: []
  }

  measure: c_void {
    label: "No of Void Sailing"
    type: count
    filters: [schedule_status: "Void"]
    drill_fields: []
  }

  measure: c_void_wo_ldr {
    label: "No of Void Sailing without Loader"
    type: number
    sql:
      CASE
        WHEN ${c_void} > 0 THEN ${c_void}-${c_loader}
        ELSE ${c_void}
      END ;;
  }

  measure: c_phaseout {
    label: "No of Phaseout Sailing"
    type: count
    filters: [schedule_status: "No Schedule"]
    drill_fields: []
  }

  measure: total_schedule {
    label: "Total Schedule"
    type: number
    sql: ${c_scheduled}+${c_void};;
  }
  measure: scheduled_wo_wk_perc {
    label: "Sailing without loader %"
    type: number
    sql: (${c_scheduled_wo_ldr}/NULLIF(${c_scheduled}+${c_void},0))*100;;
    #value_format_name: decimal_0
    #DCN-484 : correct the format
    value_format: "0\%"
  }
  measure: scheduled_wk_perc {
    label: "Schedule %"
    type: number
    sql: (${c_scheduled}/NULLIF(${c_scheduled}+${c_void_wo_ldr},0))*100;;
    value_format_name: decimal_0
    #DCN-484 : temporarily changed it to decimal_2 for checking
    #value_format_name: decimal_2
  }
  measure: vms_wk_perc {
    label: "Void without loader %"
    type: number
    sql: (${c_void_wo_ldr}/NULLIF(${c_scheduled}+${c_void},0))*100;;
    #value_format_name: decimal_0
    #DCN-484 : correct the format
    value_format: "0\%"
  }

  measure: loader_wk_perc {
    label: "Loader %"
    type: number
    sql: (${c_loader}/NULLIF(${c_scheduled}+${c_void},0))*100;;
    #value_format_name: decimal_0
    #DCN-484 : correct the format
    value_format: "0.00\%"
  }


  parameter: show_or_hide_vms_target {
# change by Helen on 20210823
  label: "Target(with VMS adjustment)"
  type: string
  allowed_value: {
    label: "Yes"
    value: "Show"
  }
  allowed_value: {
    label: "No"
    value: "Hide"
  }
# end change by Helen on 20210823
  default_value: "Hide"
}

measure: sched_target{
  #label: "Target (without VMS) TEU" #Jack DCN-484 - correct label
  label: "Adjusted Target (TEU)"
  type: number
#    sql:
#        CASE
#            WHEN {% parameter show_or_hide_vms_target %} = 'Show' THEN
#                  (${of_consolidated.total_target_teu} * ceiling(${scheduled_wk_perc}))/100
#            WHEN {% parameter show_or_hide_vms_target %} = 'Hide' THEN NULL
#        END ;;
#Jack DCN-484 : to handle looker issue of wrongly generating NULL as 'cast(null as numerci(38,0) )'
  sql:
      {% if show_or_hide_vms_target._parameter_value == "'Show'" %}
        (${of_consolidated.total_target_teu} * ceiling(${scheduled_wk_perc}))/100
      {% else %}
        NULL
      {% endif %};;
  value_format_name: decimal_0
}

#Jack DCN-484 : start

measure: sched_target_till_last_complete_mth{
  label: "Adjusted Target (TEU) - Till Last Mth"
  type: number
#    sql:
#        CASE
#            WHEN {% parameter show_or_hide_vms_target %} = 'Show' THEN
#                  (${of_consolidated.total_target_teu_till_last_complete_mth} * ceiling(${scheduled_wk_perc}))/100
#            WHEN {% parameter show_or_hide_vms_target %} = 'Hide' THEN NULL
#        END ;;
#Jack DCN-484 : to handle looker issue of wrongly generating NULL as 'cast(null as numerci(38,0) )'
  sql:
      {% if show_or_hide_vms_target._parameter_value == "'Show'" %}
        (${of_consolidated.total_target_teu_till_last_complete_mth} * ceiling(${scheduled_wk_perc}))/100
      {% else %}
        NULL
      {% endif %};;
  value_format_name: decimal_0
}

#Jack DCN-484 : end


##  measure: teu_sched_achievement {
##    label: "Achievement (without VMS)"
##    type: number
##    sql:
##      CASE
##        WHEN {% parameter show_or_hide_vms_target %} = 'Show' THEN
##          ${of_consolidated.total_actual_teu} / NULLIF(${sched_target},0)
##        ELSE
##          NULL
##      END ;;
##    value_format_name: percent_0
##  }

measure: teu_sched_achievement {
  #label: "Achievement (without VMS)" #Jack DCN-484 - correct label
  label: "Adjusted Achievement"
  type: number
#    sql:
#      CASE
#        WHEN {% parameter show_or_hide_vms_target %} = 'Show' THEN
#          ${of_consolidated.total_booking_teu} / NULLIF(${sched_target},0)
#        ELSE
#          NULL
#      END ;;
#Jack DCN-484 : to handle looker issue of wrongly generating NULL as 'cast(null as numerci(38,0) )'
  sql:
      {% if show_or_hide_vms_target._parameter_value == "'Show'" %}
        ${of_consolidated.total_booking_teu} / NULLIF(${sched_target},0)
      {% else %}
        NULL
      {% endif %};;
  value_format_name: percent_0
}

#Jack DCN-484 : start

measure: teu_sched_achievement_till_last_complete_mth {
  #label: "Achievement (without VMS)" #Jack DCN-484 - correct label
  label: "Adjusted Achievement - till last complete mth"
  type: number
  sql:
      {% if show_or_hide_vms_target._parameter_value == "'Show'" %}
        ${of_consolidated.total_booking_teu_till_last_complete_mth} / NULLIF(${sched_target_till_last_complete_mth},0)
      {% else %}
        NULL
      {% endif %};;
  value_format_name: percent_0
}

#Jack DCN-484 : end


##  measure: teu_sched_variance {
##    label: "Variance (without VMS)"
##    type: number
##    sql:
##      CASE
##        WHEN {% parameter show_or_hide_vms_target %} = 'Show' THEN
##           ${of_consolidated.total_actual_teu} - ${sched_target}
##        ELSE
##         NULL
##        END ;;
##    value_format_name: decimal_0
##  }

measure: teu_sched_variance {
  label: "Variance (without VMS)"
  type: number
  sql:
      CASE
        WHEN {% parameter show_or_hide_vms_target %} = 'Show' THEN
           ${of_consolidated.total_booking_teu} - ${sched_target}
        ELSE
         NULL
        END ;;
  value_format_name: decimal_0
}

}

view: of_dep_sched_smry2 {
  sql_table_name: `ONEFORCE.OF_DEP_SCHED_SMRY`
    ;;

  dimension: bsa_ttl_teu_quantity {
    label: "BSA TTL TEU Quantity"
    type: number
    sql: ${TABLE}.BSA_TTL_TEU_Quantity ;;
  }

  dimension: delay {
    label: "Delay"
    type: number
    sql: ${TABLE}.Delay ;;
  }

  dimension: dominant_leg_flag {
    label: "DOM/N-DOM"
    type: string
    sql: ${TABLE}.Dominant_Leg_Flag ;;
  }

  dimension: record_id {
    primary_key: yes
    label: "Record Id"
    type: string
    sql: ${TABLE}.Record_Id ;;
    hidden: yes
  }

  dimension: sales_week {
    label: "Scheduled Week"
    type: string
    sql: ${TABLE}.Sales_Week ;;
  }

  dimension: seq_check {
    label: "Seq Check"
    type: string
    sql: ${TABLE}.SEQ_CHECK ;;
  }

  dimension: service_lane {
    label: "Service Lane (Rev)"
    type: string
    sql: ${TABLE}.Service_Lane ;;
  }

  dimension: trade_code {
    label: "Service Scope Group"
    type: string
    sql: ${TABLE}.Trade_Code ;;
  }

  dimension: schedule_status {
    label: "Schedule Status"
    type: string
    sql: ${TABLE}.Schedule_Status ;;
  }

  dimension: is_loader {
    label: "Is Loader"
    type: string
    sql: ${TABLE}.Is_Loader ;;
  }

  measure: c_loader {
    label: "No of Loader Sailing"
    type: count
    filters: [is_loader: "Yes", schedule_status: "Scheduled"]
    drill_fields: []
  }
  measure: c_sailing {
    label: "No of Total Sailing"
    type: count
  }

  measure: sailing_satus {
    label: "Sailing Status"
    type: list
    list_field: schedule_status
  }
  measure: c_scheduled {
    label: "No of Scheduled Sailing"
    type: count
    filters: [schedule_status: "Scheduled"]
    drill_fields: []
  }

  measure: c_scheduled_wo_ldr {
    label: "No of Scheduled without Loader"
    type: number
    sql:  ${c_scheduled}-${c_loader} ;;
    drill_fields: []
  }

  measure: c_void {
    label: "No of Void Sailing"
    type: count
    filters: [schedule_status: "Void"]
    drill_fields: []
  }

  measure: c_void_wo_ldr {
    label: "No of Void Sailing without Loader"
    type: number
    sql:
      CASE
        WHEN ${c_void} > 0 THEN ${c_void}-${c_loader}
        ELSE ${c_void}
      END ;;
  }

  measure: c_phaseout {
    label: "No of Phaseout Sailing"
    type: count
    filters: [schedule_status: "No Schedule"]
    drill_fields: []
  }

  measure: total_schedule {
    label: "Total Schedule"
    type: number
    sql: ${c_scheduled}+${c_void};;
  }
  measure: scheduled_wo_wk_perc {
    label: "Sailing without loader %"
    type: number
    sql: (${c_scheduled_wo_ldr}/NULLIF(${c_scheduled}+${c_void},0))*100;;
    #value_format_name: decimal_0
    #DCN-484 : correct the format
    value_format: "0\%"
  }
  measure: scheduled_wk_perc {
    label: "Schedule %"
    type: number
    sql: (${c_scheduled}/NULLIF(${c_scheduled}+${c_void_wo_ldr},0))*100;;
    value_format_name: decimal_0
    #DCN-484 : temporarily changed it to decimal_2 for checking
    #value_format_name: decimal_2
  }
  measure: vms_wk_perc {
    label: "Void without loader %"
    type: number
    sql: (${c_void_wo_ldr}/NULLIF(${c_scheduled}+${c_void},0))*100;;
    #value_format_name: decimal_0
    #DCN-484 : correct the format
    value_format: "0\%"
  }

  measure: loader_wk_perc {
    label: "Loader %"
    type: number
    sql: (${c_loader}/NULLIF(${c_scheduled}+${c_void},0))*100;;
    #value_format_name: decimal_0
    #DCN-484 : correct the format
    value_format: "0.00\%"
  }


  parameter: show_or_hide_vms_target {
# change by Helen on 20210823
  label: "Target(with VMS adjustment)"
  type: string
  allowed_value: {
    label: "Yes"
    value: "Show"
  }
  allowed_value: {
    label: "No"
    value: "Hide"
  }
# end change by Helen on 20210823
  default_value: "Hide"
}

#measure: sched_target{
#  label: "Adjusted Target (TEU)"
#  type: number
#  sql:
#      {% if show_or_hide_vms_target._parameter_value == "'Show'" %}
#        (${of_consolidated2.total_target_teu} * ceiling(${scheduled_wk_perc}))/100
#      {% else %}
#        NULL
#      {% endif %};;
#  value_format_name: decimal_0
#}


#measure: teu_sched_achievement {
#  #label: "Achievement (without VMS)" #Jack DCN-484 - correct label
#  label: "Adjusted Achievement"
#  type: number
#  sql:
#      {% if show_or_hide_vms_target._parameter_value == "'Show'" %}
#        ${of_consolidated2.total_booking_teu} / NULLIF(${sched_target},0)
#      {% else %}
#        NULL
#      {% endif %};;
#  value_format_name: percent_0
#}

#measure: teu_sched_variance {
#  label: "Variance (without VMS)"
#  type: number
#  sql:
#      CASE
#        WHEN {% parameter show_or_hide_vms_target %} = 'Show' THEN
#           ${of_consolidated2.total_booking_teu} - ${sched_target}
#        ELSE
#         NULL
#        END ;;
#  value_format_name: decimal_0
#}

### Measures till last complete week <<start>>
measure: c_loader_till_last_cmpl_wk {
  type: count
  filters: [is_loader: "Yes", schedule_status: "Scheduled", of_sales_week_master.is_till_last_cmpl_wk: "yes"]
  drill_fields: []
}

measure: c_void_till_last_cmpl_wk {
  type: count
  filters: [schedule_status: "Void", of_sales_week_master.is_till_last_cmpl_wk: "yes"]
  drill_fields: []
}

measure: c_scheduled_till_last_cmpl_wk {
  type: count
  filters: [schedule_status: "Scheduled", of_sales_week_master.is_till_last_cmpl_wk: "yes"]
  drill_fields: []
}

measure: c_void_wo_ldr_till_last_cmpl_wk {
  type: number
  sql:
      CASE
        WHEN ${c_void_till_last_cmpl_wk} > 0 THEN ${c_void_till_last_cmpl_wk}-${c_loader_till_last_cmpl_wk}
        ELSE ${c_void_till_last_cmpl_wk}
      END ;;
}

measure: scheduled_wk_perc_last_cmpl_wk {
  type: number
  sql: (${c_scheduled_till_last_cmpl_wk}/NULLIF(${c_scheduled_till_last_cmpl_wk}+${c_void_wo_ldr_till_last_cmpl_wk},0))*100;;
  value_format_name: decimal_0
}


### Measures till last complete week <<end>>

}

view: of_plan_week {

  #sql_table_name:  `ONEFORCE.OF_PLAN_WEEK`;; change for dcn591 extend AP DB visibilty to 6 weeks ahead.
  derived_table: {
    sql: select sales_week from ONEFORCE.OF_PLAN_WEEK
         union all
         (select cast(sales_week as int64)
          from ONEFORCE.OF_SALES_WEEK_MASTER
          where cast ( sales_week as int64)  > ( select max(sales_week) from ONEFORCE.OF_PLAN_WEEK) order by 1 limit 6)
;;
  }


  dimension: sales_week {
    hidden: yes
    primary_key: yes
    type: number
    sql: ${TABLE}.Sales_Week ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }
}

view: of_vms_smry {
  sql_table_name: `ONEFORCE.OF_VMS_SMRY`
    ;;

  dimension: schedule_status {
    type: string
    sql: ${TABLE}.Schedule_Status ;;
  }

  dimension: record_id {
    type: string
    sql: ${TABLE}.Record_Id ;;
  }

  dimension: sales_week {
    type: string
    sql: ${TABLE}.Sales_Week ;;
  }

  dimension: service_lane {
    type: string
    sql: ${TABLE}.Service_Lane ;;
  }

  measure: schedule_id {
    type: list
    list_field: schedule_status
  }

  measure: count {
    type: count
    drill_fields: []
  }

}

view: first_case_transfer_history {
  derived_table: {
    sql:
    SELECT *EXCEPT(RowNumber) FROM
      (SELECT DISTINCT
        of_case.CaseNumber AS CaseNumber,
        case when
            ((CASE WHEN transfer_by.FirstName IS NULL THEN transfer_by.LastName
               WHEN transfer_by.LastName IS NULL THEN transfer_by.FirstName
               ELSE  concat(transfer_by.FirstName," ",transfer_by.LastName) END)) is not null
        then ((CASE WHEN transfer_by.FirstName IS NULL THEN transfer_by.LastName
                    WHEN transfer_by.LastName IS NULL THEN transfer_by.FirstName
                    ELSE  concat(transfer_by.FirstName," ",transfer_by.LastName) END)) end AS Transfer_by_name,
        transfer_by.office_code_number  AS Transfer_by_office,
        case_transfer_history.Transfer_Reason,
        case_transfer_history.Transfer_Date_Time,
        ROW_NUMBER() OVER(PARTITION BY of_case.CaseNumber ORDER BY case_transfer_history.Transfer_Date_Time ASC) as RowNumber
        FROM `ONEFORCE.OF_CASE`
           AS of_case
        LEFT JOIN `ONEFORCE.OF_CASE_TRANSFER_HISTORY`
           AS case_transfer_history ON case_transfer_history.Case = of_case.ONEForce_Id
        LEFT JOIN `ONEFORCE.OF_USER`
          AS transfer_by ON transfer_by.ONEForce_ID = case_transfer_history.Transfer_by
        WHERE of_case.IsTransfer = 'true')
    WHERE RowNumber = 1
    ORDER BY CaseNumber
    ;;

    persist_for: "2 hours"
  }

  dimension: Transfer_by_name {
    label:"Transfer by Name"
    type: string
    sql: ${TABLE}.Transfer_by_name ;;
  }

  dimension: Transfer_by_office {
    label:"Transfer by Office"
    type: string
    sql: ${TABLE}.Transfer_by_office ;;
  }

  dimension: Transfer_Reason {
    label:"Transfer Reason"
    type: string
    sql: ${TABLE}.Transfer_Reason ;;
  }

  dimension: CaseNumber {
    label:"Case Number"
    type: string
    sql: ${TABLE}.CaseNumber ;;
  }
}

view: tender_contract_current {
  derived_table: {
    sql: select 'CURR' as record_type, PARSE_DATE("%m/%d/%Y",a.report_dt) report_dt,
              g.cust_grp_nm as cust_grp_nm,
              a.cust_grp_id,
              a.tender_nm,
              a.ckam,
              a.manual_actual_flag,
              trim(b) as svc_cont_no,
              a.record_id,
              PARSE_DATE("%m/%d/%Y",a.curr_cont_start_dt) as cont_start_dt,
              PARSE_DATE("%m/%d/%Y",a.curr_cont_end_dt) as cont_end_dt,
              FORMAT_DATE("%Y%m",PARSE_DATE("%m/%d/%Y",a.curr_cont_end_dt)) as cont_end_month,
              date_diff(PARSE_DATE("%m/%d/%Y",a.curr_cont_end_dt),PARSE_DATE("%m/%d/%Y",a.curr_cont_start_dt),MONTH)+1 as cont_duration,
              least(12,date_diff(PARSE_DATE("%m/%d/%Y",a.curr_cont_end_dt),PARSE_DATE("%m/%d/%Y",a.curr_cont_start_dt),MONTH)+1) as cont_dur_uplmt,
              w2.sales_week,
              w.fiscal_year,
              RIGHT(a.curr_cont_start_dt,4) as calendar_year,
              a.remarks,
              coalesce(a.visible,'C') as visible,
              FORMAT_DATE("%Y%m",PARSE_DATE("%m/%d/%Y", a.curr_cont_start_dt))  as scrfa_start_month
              from `ONEFORCE.V_TENDER_CONTRACT` a,
              unnest(split(curr_svc_cont_no,",")) b
              inner join ${of_sales_week_master.SQL_TABLE_NAME} w  on PARSE_DATE("%m/%d/%Y", a.curr_cont_start_dt) between w.week_start_date and w.week_end_date
              inner join ${of_sales_week_master.SQL_TABLE_NAME} w2  on PARSE_DATE("%m/%d/%Y", a.report_dt) between w2.week_start_date and w2.week_end_date
              inner join ${of_customer_group.SQL_TABLE_NAME} g on a.cust_grp_id = g.cust_grp_id
              where coalesce(a.visible,'C') <> 'N'
              union distinct
            select
            'CURR' as record_type, PARSE_DATE("%m/%d/%Y",a.report_dt) report_dt,
              g.cust_grp_nm as cust_grp_nm,
              a.cust_grp_id,
              a.tender_nm,
              a.ckam,
              a.manual_actual_flag,
              null as svc_cont_no,
              a.record_id,
              PARSE_DATE("%m/%d/%Y",a.curr_cont_start_dt)  as cont_start_dt,
              PARSE_DATE("%m/%d/%Y",a.curr_cont_end_dt) as cont_end_dt,
              FORMAT_DATE("%Y%m",PARSE_DATE("%m/%d/%Y",a.curr_cont_end_dt)) as cont_end_month,
              date_diff(PARSE_DATE("%m/%d/%Y",a.curr_cont_end_dt),PARSE_DATE("%m/%d/%Y",a.curr_cont_start_dt),MONTH)+1 as cont_duration,
              least(12,date_diff(PARSE_DATE("%m/%d/%Y",a.curr_cont_end_dt),PARSE_DATE("%m/%d/%Y",a.curr_cont_start_dt),MONTH)+1) as cont_dur_uplmt,
              w2.sales_week,
              w.fiscal_year,
              RIGHT(a.curr_cont_start_dt,4) as calendar_year,
              a.remarks,
              coalesce(a.visible,'C') as visible,
              null as scrfa_start_month
              from `ONEFORCE.V_TENDER_CONTRACT` a
              inner join ${of_sales_week_master.SQL_TABLE_NAME} w  on PARSE_DATE("%m/%d/%Y", a.curr_cont_start_dt) between w.week_start_date and w.week_end_date
              inner join ${of_sales_week_master.SQL_TABLE_NAME} w2 on PARSE_DATE("%m/%d/%Y", a.report_dt) between w2.week_start_date and w2.week_end_date
              inner join ${of_customer_group.SQL_TABLE_NAME} g on a.cust_grp_id = g.cust_grp_id
              where curr_svc_cont_no is null
              and coalesce(a.visible,'C') <> 'N'
  ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
    hidden: yes
  }

  dimension: record_id {
    type: string
    sql: ${TABLE}.record_id
      primary key: yes;;
    hidden: yes
  }

  dimension: record_type {
    type: string
    sql: ${TABLE}.record_type ;;
    hidden: yes
  }

  dimension: report_dt {
    label: "Current: Report Date"
    type: date
    datatype: date
    sql: ${TABLE}.report_dt ;;
  }

  dimension: cust_grp_nm {
    label: "Current: Group Customer Name"
    type: string
    sql: ${TABLE}.cust_grp_nm ;;
  }

  dimension: cust_grp_id {
    label: "Current: Group Customer Code"
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: tender_nm {
    label: "Current: Tender Name"
    type: string
    sql: ${TABLE}.tender_nm ;;
  }

  dimension: visible {
    label: "Current: Visible"
    type: string
    sql: ${TABLE}.visible ;;
  }

  dimension: ckam {
    label: "Current: CKAM"
    type: string
    sql: ${TABLE}.ckam ;;
  }

  dimension: manual_actual_flag {
    label: "Current: Manual Actual Flag"
    type: string
    sql: ${TABLE}.manual_actual_flag ;;
  }

  dimension: svc_cont_no {
    label: "Current: SC/RFA Number"
    type: string
    sql: ${TABLE}.svc_cont_no ;;
  }

  dimension: cont_end_month {
    label: "Current: SC/RFA End Month"
    type: string
    sql: ${TABLE}.cont_start_month ;;
  }

  dimension: scrfa_start_month {
    label: "Current: SC/RFA Start Month"
    type: string
    sql: ${TABLE}.scrfa_start_month ;;
  }

  dimension: cont_start_dt {
    label: "Current: SC/RFA Eff Date"
    type: date
    datatype: date
    sql: ${TABLE}.cont_start_dt ;;
  }

  dimension: cont_end_dt {
    label: "Current: SC/RFA Exp Date"
    type: date
    datatype: date
    sql: ${TABLE}.cont_end_dt ;;
  }

  dimension: cont_duration {
    label: "Current: SC/RFA Duration"
    type: number
    sql: ${TABLE}.cont_duration ;;
  }

  dimension: cont_dur_uplmt {
    label: "Current: SC/RFA Duration Upper Limit"
    type: number
    sql: ${TABLE}.cont_dur_uplmt ;;
    hidden: yes
  }

  dimension: sales_week {
    label: "Current: Sales Week"
    type: string
    sql: ${TABLE}.sales_week ;;
  }

  dimension: fiscal_year {
    label: "Current: Fiscal Year"
    type: string
    sql: ${TABLE}.fiscal_year ;;
  }

  dimension: calendar_year {
    label: "Current: Calendar Year"
    type: string
    sql: ${TABLE}.calendar_year ;;
  }

  dimension: remarks {
    label: "Current: Remarks"
    type: string
    sql: ${TABLE}.remarks ;;
  }

  set: detail {
    fields: [
      report_dt,
      cust_grp_nm,
      cust_grp_id,
      tender_nm,
      svc_cont_no,
      cont_start_dt,
      cont_end_dt
    ]
  }
}

view: tender_contract_previous {
  derived_table: {
    sql:select 'PREV' as record_type, PARSE_DATE("%m/%d/%Y",c.report_dt) report_dt,
              g.cust_grp_nm,
              c.cust_grp_id,
              c.tender_nm,
              c.ckam,
              c.manual_actual_flag,
              trim(d) as svc_cont_no,
              c.record_id,
              PARSE_DATE("%m/%d/%Y",c.prev_cont_start_dt) as cont_start_dt,
              PARSE_DATE("%m/%d/%Y",c.prev_cont_end_dt) as cont_end_dt,
              date_diff(PARSE_DATE("%m/%d/%Y",c.prev_cont_end_dt),PARSE_DATE("%m/%d/%Y",c.prev_cont_start_dt),MONTH)+1 as cont_duration,
              least(12,date_diff(PARSE_DATE("%m/%d/%Y",c.prev_cont_end_dt),PARSE_DATE("%m/%d/%Y",c.prev_cont_start_dt),MONTH)+1) as cont_dur_uplmt,
              w2.sales_week,
              w.fiscal_year,
              cast(cast(RIGHT(c.curr_cont_start_dt,4) as int64) - 1 as string) as calendar_year,
              c.remarks,
              coalesce(c.visible,'C') as visible,
              FORMAT_DATE("%Y%m",PARSE_DATE("%m/%d/%Y",c.curr_cont_start_dt)) as curr_scrfa_start_month
          from `ONEFORCE.V_TENDER_CONTRACT` c,
          unnest(split(prev_svc_cont_no,",")) d
          inner join ${of_sales_week_master.SQL_TABLE_NAME} w on PARSE_DATE("%m/%d/%Y", c.curr_cont_start_dt) between w.week_start_date and w.week_end_date
          inner join ${of_sales_week_master.SQL_TABLE_NAME} w2 on PARSE_DATE("%m/%d/%Y", c.report_dt) between w2.week_start_date and w2.week_end_date
          inner join ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = c.cust_grp_id
          where coalesce(c.visible,'C') = 'C'
          union all
          select 'PREV' as record_type, PARSE_DATE("%m/%d/%Y",c1.report_dt) report_dt,
                  g1.cust_grp_nm,
                  c1.cust_grp_id,
                  c1.tender_nm,
                  c1.ckam,
                  c1.manual_actual_flag,
                  null as svc_cont_no,
                  c1.record_id,
                  PARSE_DATE("%m/%d/%Y",c1.prev_cont_start_dt) as cont_start_dt,
                  PARSE_DATE("%m/%d/%Y",c1.prev_cont_end_dt) as cont_end_dt,
                  date_diff(PARSE_DATE("%m/%d/%Y",c1.prev_cont_end_dt),PARSE_DATE("%m/%d/%Y",c1.prev_cont_start_dt),MONTH)+1 as cont_duration,
                  least(12,date_diff(PARSE_DATE("%m/%d/%Y",c1.prev_cont_end_dt),PARSE_DATE("%m/%d/%Y",c1.prev_cont_start_dt),MONTH)+1) as cont_dur_uplmt,
                  w21.sales_week,
                  w1.fiscal_year,
                  cast(cast(RIGHT(c1.curr_cont_start_dt,4) as int64) - 1 as string) as calendar_year,
                  c1.remarks,
                  coalesce(c1.visible,'C') as visible,
                  FORMAT_DATE("%Y%m",PARSE_DATE("%m/%d/%Y",c1.curr_cont_start_dt)) as curr_scrfa_start_month
          from `ONEFORCE.V_TENDER_CONTRACT` c1
          inner join ${of_sales_week_master.SQL_TABLE_NAME} w1 on PARSE_DATE("%m/%d/%Y", c1.curr_cont_start_dt) between w1.week_start_date and w1.week_end_date
          inner join ${of_sales_week_master.SQL_TABLE_NAME} w21 on PARSE_DATE("%m/%d/%Y", c1.report_dt) between w21.week_start_date and w21.week_end_date
          inner join ${of_customer_group.SQL_TABLE_NAME} g1 on g1.cust_grp_id = c1.cust_grp_id
          where coalesce(c1.visible,'C') = 'Y'
;;

  }

  measure: count {
    type: count
    drill_fields: [detail*]
    hidden: yes
  }

  dimension: record_id {
    type: string
    sql: ${TABLE}.record_id
      primary key: yes;;
    hidden: yes
  }

  dimension: record_type {
    type: string
    sql: ${TABLE}.record_type ;;
    hidden: yes
  }

  dimension: report_dt {
    type: date
    datatype: date
    sql: ${TABLE}.report_dt ;;
  }

  dimension: cust_grp_nm {
    label: "Previous: Group Customer Name"
    type: string
    sql: ${TABLE}.cust_grp_nm ;;
  }

  dimension: cust_grp_id {
    label: "Previous: Group Customer Code"
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: tender_nm {
    label: "Previous: Tender Name"
    type: string
    sql: ${TABLE}.tender_nm ;;
  }

  dimension: visible {
    label: "Previous: Visible"
    type: string
    sql: ${TABLE}.visible ;;
  }

  dimension: ckam {
    label: "Previous: CKAM"
    type: string
    sql: ${TABLE}.ckam ;;
  }

  dimension: manual_actual_flag {
    label: "Previous: Manual Actual Flag"
    type: string
    sql: ${TABLE}.manual_actual_flag ;;
  }

  dimension: svc_cont_no {
    label: "Previous: SC/RFA Number"
    type: string
    sql: ${TABLE}.svc_cont_no ;;
  }

  dimension: cont_start_dt {
    label: "Previous: SC/RFA Eff Date"
    type: date
    datatype: date
    sql: ${TABLE}.cont_start_dt ;;
  }

  dimension: cont_end_dt {
    label: "Previous: SC/RFA Exp Date"
    type: date
    datatype: date
    sql: ${TABLE}.cont_end_dt ;;
  }

  dimension: cont_duration {
    label: "Previous: SC/RFA Duration"
    type: number
    sql: ${TABLE}.cont_duration ;;
  }

  dimension: cont_dur_uplmt {
    label: "Previous: SC/RFA Duration Upper Limit"
    type: number
    sql: ${TABLE}.cont_dur_uplmt ;;
    hidden: yes
  }

  dimension: sales_week {
    label: "Previous: Sales Week"
    type: string
    sql: ${TABLE}.sales_week ;;
  }

  dimension: curr_scrfa_start_month {
    label: "Current SC/RFA Start Month"
    type: string
    sql: ${TABLE}.curr_scrfa_start_month ;;
  }

  dimension: fiscal_year {
    label: "Previous: Fiscal Year"
    type: string
    sql: ${TABLE}.fiscal_year ;;
  }

  dimension: calendar_year {
    label: "Previous: Calendar Year"
    type: string
    sql: ${TABLE}.calendar_year ;;
  }

  dimension: remarks {
    label: "Previous: Remarks"
    type: string
    sql: ${TABLE}.remarks ;;
  }

  set: detail {
    fields: [
      report_dt,
      cust_grp_nm,
      cust_grp_id,
      tender_nm,
      svc_cont_no,
      cont_start_dt,
      cont_end_dt
    ]
  }
}

view: bkg_cncl_reason {
  derived_table: {
    # testing KT demo
    sql: SELECT 'Sales Guidance' as cancel_reason, 'S' as code, 'CANCEL REASON : SALES GUIDANCE' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category, 'Cancel Reason has been deactivated' as cancel_reason_def
      UNION ALL
      SELECT 'Marketing Guidance' as cancel_reason, 'G' as code, 'CANCEL REASON : MARKETING GUIDANCE' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category, 'Cancel Reason has been deactivated' as cancel_reason_def
      UNION ALL
      SELECT 'Missing Documents' as cancel_reason, 'M' as code, 'CANCEL REASON : MISSING DOCUMENTS' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category, 'When the booking is cancelled by Carrier, as the shipment cannot be processed due to missing documents' as cancel_reason_def
      UNION ALL
      SELECT 'Lack of Space' as cancel_reason, 'L' as code, '' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category, 'When Carrier rejects the booking due to space limitation (incl.cases where customers exceed their AP) ' as cancel_reason_def
      UNION ALL
      SELECT 'Duplicate Booking' as cancel_reason, 'D' as code, 'CANCEL REASON : DUPLICATE BOOKING' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category,'For Duplicate bookings made by Customer' as cancel_reason_def
      UNION ALL
      SELECT 'Customer Circumstance' as cancel_reason, 'C' as code, 'CANCEL REASON : Customer Circumstance (Container Picked Up)' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category, 'When Customer/Shipper requests to cancel due to own reason from Customer (e.g. cargo not yet ready)' as cancel_reason_def
      UNION ALL
      SELECT 'No Show' as cancel_reason, 'N' as code, 'CANCEL REASON : NO SHOW (CONFIRM BOOKINGS BUT NO PICKUP CONTAINER)' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category, 'When Customer does not provide SI, pick up the container on time, and/or miss the documentation cut-off time' as cancel_reason_def
      UNION ALL
      SELECT 'Internal Reason' as cancel_reason, 'I' as code, 'CANCEL REASON : INTERNAL ERROR' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category, 'Cancel Reason has been deactivated' as cancel_reason_def
      UNION ALL
      SELECT 'Booking Combine' as cancel_reason, 'B' as code, '' as cancel_reason_raw, 'Booking Combine' as category, 'Yes' as reason_category, 'When a booking is combined to another booking' as cancel_reason_def
      UNION ALL
      SELECT 'Lack of Equipment (old)' as cancel_reason, 'E' as code, '' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category,'Cancel Reason has been deactivated' as cancel_reason_def
      UNION ALL
      SELECT 'Lack of Space or Equipment (Before Codified)' as cancel_reason, 'LE' as code, 'CANCEL REASON : LACK OF SPACE AND EQUIPMENT' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category,'' as cancel_reason_def
      UNION ALL
      SELECT 'Other' as cancel_reason, 'O' as code, 'CANCEL REASON : OTHER' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category,'Other Reason' as cancel_reason_def
      --UNION ALL
      --SELECT 'No Reason' as cancel_reason, 'Z' as code, '' as cancel_reason_raw, 'No Reason' as category, 'No' as reason_category,'When the booking is cancelled without specified reason' as cancel_reason_def
      UNION ALL
      SELECT 'ONE QUOTE: Route or Equipment Amendment' as cancel_reason, 'A' as code, '' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category,'When Customer requests to amend the booking for routing and/or EQ size/type and thus needs to cancel' as cancel_reason_def
      UNION ALL
      SELECT 'VVD Cancellation or Port Omission (Customer)' as cancel_reason, 'P' as code, '' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category,'When Customer decides to cancel the booking due to port omission or VVD cancellation even though Carrier has provided an alternative vessel option' as cancel_reason_def
      UNION ALL
      SELECT 'ONE QUOTE: Increase in Containers' as cancel_reason, 'Q' as code, '' as cancel_reason_raw, 'Customer' as category, ' Yes' as reason_category,'When Customer requests to amend the booking to increase the volume and thus needs to cancel' as cancel_reason_def
      UNION ALL
      SELECT 'Lack of Equipment (Customer)' as cancel_reason, 'R' as code, '' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category, 'When Customer decides to cancel the booking due to no EQ availability even though Carrier has provided an alternative EQ option' as cancel_reason_def
      UNION ALL
      SELECT 'Lack of Equipment (Carrier)' as cancel_reason, 'V' as code, '' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category, 'When Carrier decides to cancel the booking due to no EQ availability' as cancel_reason_def
      UNION ALL
      SELECT 'VVD Cancellation or Port Omission (Carrier)' as cancel_reason, 'X' as code, '' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category,'When Carrier decides to cancel the booking due to port omission or VVD cancellation' as cancel_reason_def
      UNION ALL
      SELECT 'ONE QUOTE: Decrease in Containers' as cancel_reason, 'Y' as code, '' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category,'When Customer requests to amend the booking to decrease the volume and thus needs to cancel' as cancel_reason_def
      UNION ALL
      SELECT 'Advanced Booking' as cancel_reason, 'Z' as code, '' as cancel_reason_raw, 'ONE' as category, 'Yes' as reason_category,'Advanced booking' as cancel_reason_def
      UNION ALL
      SELECT 'Missing Approval'                  as cancel_reason, 'U' as code, '' as cancel_reason_raw, 'ONE'      as category, 'Yes' as reason_category,'Missing Approval'                  as cancel_reason_def
      UNION ALL
      SELECT 'ONE QUOTE'                         as cancel_reason, 'K' as code, '' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category,'ONE QUOTE'                         as cancel_reason_def
      UNION ALL
      SELECT 'VVD Cancellation or Port Omission' as cancel_reason, 'W' as code, '' as cancel_reason_raw, 'Customer' as category, 'Yes' as reason_category,'VVD Cancellation or Port Omission' as cancel_reason_def

      ;;

    persist_for: "24 hours"
  }



  dimension: code {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.code ;;
  }

  dimension: cancel_reason {
    type: string
    sql: ${TABLE}.cancel_reason ;;
  }

  dimension: cancel_reason_raw {
    type: string
    sql: ${TABLE}.cancel_reason_raw ;;
  }

  dimension: cancel_reason_def {
    type: string
    sql: ${TABLE}.cancel_reason_def ;;
  }

  dimension: category {
    type: string
    sql: ${TABLE}.category ;;
  }

  dimension: reason_category {
    type: string
    sql: ${TABLE}.reason_category ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [detail*]
  }

  set: detail {
    fields: [cancel_reason, code, cancel_reason_raw, cancel_reason_def, category, reason_category]
  }
}

view: bkg_cxl_sub_rsn {
  derived_table: {
    sql:
    SELECT 'C1'  as bkg_cxl_sub_rsn_cd , 'Customer Circumstance: Cargo Readiness/Availability/Quality'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'C2'  as bkg_cxl_sub_rsn_cd , 'Customer Circumstance: Incorrect Booking Info'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'C3'  as bkg_cxl_sub_rsn_cd , 'Customer Cancelled (no specific reason provided)'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'D1'  as bkg_cxl_sub_rsn_cd , 'Duplicate Booking'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'E1'  as bkg_cxl_sub_rsn_cd , 'Lack of Equipment (Cancelled by Customer)'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'E2'  as bkg_cxl_sub_rsn_cd , 'Lack of Equipment (Cancelled by Carrier)'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'K1'  as bkg_cxl_sub_rsn_cd , 'ONE QUOTE: Due to Route or Equipment Type Amendment'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'K2'  as bkg_cxl_sub_rsn_cd , 'ONE QUOTE: Increase in Number of Containers'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'K3'  as bkg_cxl_sub_rsn_cd , 'ONE QUOTE: Decrease in Number of Containers'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'K4'  as bkg_cxl_sub_rsn_cd , 'ONE QUOTE: Vessel Overbooked/Over allocation'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'L1'  as bkg_cxl_sub_rsn_cd , 'Lack of Space (Carrier\'s Request): Vessel Overbooked and No/Over Customer Account Plan'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'L2'  as bkg_cxl_sub_rsn_cd , 'Lack of Space (Customer\'s Request): Partial GD1/ Booking was more than Customer Account Plan'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'M1'  as bkg_cxl_sub_rsn_cd , 'Missing Documents - DG, RF, AK/OOG, Special'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'M2'  as bkg_cxl_sub_rsn_cd , 'Missing Documents - Others'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'N1'  as bkg_cxl_sub_rsn_cd , 'Customer Circumstance (Container NOT Picked Up/No Show)'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'O1'  as bkg_cxl_sub_rsn_cd , 'Regulatory Non Compliance'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'O2'  as bkg_cxl_sub_rsn_cd , 'Sanctions apply'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'O3'  as bkg_cxl_sub_rsn_cd , 'Commodity prohibited/restricted'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'O4'  as bkg_cxl_sub_rsn_cd , 'Wrong Booking Office'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'O5'  as bkg_cxl_sub_rsn_cd , 'POL / POD restriction'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'S1'  as bkg_cxl_sub_rsn_cd , 'Rates not Accepted by Customer'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'S2'  as bkg_cxl_sub_rsn_cd , 'Rate Filing Issue by Carrier'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'U1'  as bkg_cxl_sub_rsn_cd , 'No Cargo Approval Received - DG, RF, AK/OOG, Special'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'U2'  as bkg_cxl_sub_rsn_cd , 'No Special Stowage Approval'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'W1'  as bkg_cxl_sub_rsn_cd , 'VVD Cancellation or Port Omission (Cancelled by Customer)'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'W2'  as bkg_cxl_sub_rsn_cd , 'VVD Cancellation or Port Omission (Cancelled by Carrier)'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'Z1'  as bkg_cxl_sub_rsn_cd , 'Advance Booking (clean-up)'  as bkg_cxl_sub_rsn_desc UNION ALL
    SELECT 'Z2'  as bkg_cxl_sub_rsn_cd , 'Booking Window (too far in advance compared to sailing)'  as bkg_cxl_sub_rsn_desc
           ;;

    persist_for: "24 hours"
  }



  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: bkg_cxl_sub_rsn_cd {
    type: string
    sql: ${TABLE}.bkg_cxl_sub_rsn_cd ;;
  }

  dimension: bkg_cxl_sub_rsn_desc {
    type: string
    sql: ${TABLE}.bkg_cxl_sub_rsn_desc ;;
  }

  set: detail {
    fields: [bkg_cxl_sub_rsn_cd, bkg_cxl_sub_rsn_desc]
  }
}

# view: cgm_cva_actual {
#   derived_table: {
#     sql:
#       select c.ori_cnt
#       , of_country.Country_Name as ori_cnt_nm
#       , (CASE of_reg_ref.reg_cust_cnt_cd
#                                                       WHEN "BR" THEN "SAOHQ"
#                                                       WHEN "US" THEN "RICHQ"
#                                                       WHEN "HK" THEN "HKGHQ"
#                                                       WHEN "SG" THEN "SINHQ"
#                                                       WHEN "GB" THEN "LONHQ" END) as ori_rhq
#       , c.svc_scp_cd
#       , c.svc_scp_grp_cd
#       , c.dominant_flg
#       , c.container_cat
#       , LEFT(c.rlane_cd, 3) as rlane
#       , c.ctrt_prop_rhq_code as ctrt_rhq_cd
#       , c.ctrt_prop_ofc_cd as ctrt_ofc_cd
#       , c.ctrt_prop_ctry_code as ctrt_cnt_cd
#       , ctrt_country.Country_Name as ctrt_cnt_nm
#       , c.scp_ofc_cd
#       , c.cn_sub_reg
#       , of_user.FirstName || " " || of_user.LastName as ckam
#       , c.consolidated_cnt_cust_cd as cust_cd
#       , c.consolidated_cnt_cust_grp_cd as cust_grp_cd
#       , c.sc_rfa_typ
#       , "Booking" as record_type
#       , (SELECT MAX (a) FROM (SELECT MAX(t.target) as a from ${of_customer_target_and_target_dtl_weekly.SQL_TABLE_NAME} t
#       GROUP BY
#         t.sales_week,
#         t.v_customer_opus_n_prospect_of_cust_grp_cd,
#         t.v_customer_opus_n_prospect_cust_cd,
#         t.service_scope_group,
#         t.Dominant_Flag,
#         t.scp_ofc_cd,
#         t.origin_country,
#         t.Revenue_Lane_Code
#       HAVING c.week  = t.sales_week
#               {% if cva_coverage_criterion_param._parameter_value == "'OPT_1'" %}
#               and c.consolidated_cnt_cust_grp_cd = t.v_customer_opus_n_prospect_of_cust_grp_cd

#               {% elsif cva_coverage_criterion_param._parameter_value == "'OPT_2'" %}
#               and c.consolidated_cnt_cust_grp_cd = t.v_customer_opus_n_prospect_of_cust_grp_cd
#               and c.consolidated_cnt_cust_cd = t.v_customer_opus_n_prospect_cust_cd

#               {% elsif cva_coverage_criterion_param._parameter_value == "'OPT_3'" %}
#               and c.consolidated_cnt_cust_grp_cd = t.v_customer_opus_n_prospect_of_cust_grp_cd
#               and c.consolidated_cnt_cust_cd = t.v_customer_opus_n_prospect_cust_cd
#               and c.svc_scp_grp_cd = t.service_scope_group

#               {% elsif cva_coverage_criterion_param._parameter_value == "'OPT_4'" %}
#               and c.consolidated_cnt_cust_grp_cd = t.v_customer_opus_n_prospect_of_cust_grp_cd
#               and c.consolidated_cnt_cust_cd = t.v_customer_opus_n_prospect_cust_cd
#               and c.svc_scp_grp_cd = t.service_scope_group
#               and c.dominant_flg = (CASE WHEN t.Dominant_Flag = "Y" then "DOM" else "N-DOM" end)

#               {% elsif cva_coverage_criterion_param._parameter_value == "'OPT_5'" %}
#               and c.consolidated_cnt_cust_grp_cd = t.v_customer_opus_n_prospect_of_cust_grp_cd
#               and c.consolidated_cnt_cust_cd = t.v_customer_opus_n_prospect_cust_cd
#               and c.svc_scp_grp_cd = t.service_scope_group
#               and c.dominant_flg = (CASE WHEN t.Dominant_Flag = "Y" then "DOM" else "N-DOM" end)
#               and c.scp_ofc_cd = t.scp_ofc_cd

#               {% elsif cva_coverage_criterion_param._parameter_value == "'OPT_6'" %}
#               and c.consolidated_cnt_cust_grp_cd = t.v_customer_opus_n_prospect_of_cust_grp_cd
#               and c.consolidated_cnt_cust_cd = t.v_customer_opus_n_prospect_cust_cd
#               and c.svc_scp_grp_cd = t.service_scope_group
#               and c.dominant_flg = (CASE WHEN t.Dominant_Flag = "Y" then "DOM" else "N-DOM" end)
#               and c.scp_ofc_cd = t.scp_ofc_cd
#               and c.ori_cnt = t.origin_country

#               {% elsif cva_coverage_criterion_param._parameter_value == "'OPT_7'" %}
#               and c.consolidated_cnt_cust_grp_cd = t.v_customer_opus_n_prospect_of_cust_grp_cd
#               and c.consolidated_cnt_cust_cd = t.v_customer_opus_n_prospect_cust_cd
#               and c.svc_scp_grp_cd = t.service_scope_group
#               and c.dominant_flg = (CASE WHEN t.Dominant_Flag = "Y" then "DOM" else "N-DOM" end)
#               and c.scp_ofc_cd = t.scp_ofc_cd
#               and c.ori_cnt = t.origin_country
#               and c.rlane_cd = t.Revenue_Lane_Code

#               {% endif %}
#       )
#       ) as bkg_cva_teu
#       , c.rec_typ_n_bkg_sts_cd
#       , c.bkg_channel_code
#       , c.is_one_quotation
#       , c.week
#       , c.teu
#       , c.cm_amt
#       , c.primary_key
#       from ${of_consolidated2.SQL_TABLE_NAME} c
#       left join ${of_user.SQL_TABLE_NAME} of_user on of_user.oneforce_id = c.ckam_sales_person
#       left join ${of_country.SQL_TABLE_NAME} of_country on of_country.Country_Code = c.ori_cnt
#       left join ${of_country.SQL_TABLE_NAME} ctrt_country on ctrt_country.Country_Code = c.ctrt_prop_ctry_code
#       left join ${of_reg_ref.SQL_TABLE_NAME} of_reg_ref on of_reg_ref.CUST_CNT_CD = of_country.Country_Code
#         where c.record_type = 'Booking'
#   --   and   {% condition filter_bkg_channel  %} c.bkg_channel {% endcondition %}

#       UNION ALL

#       select c.ori_cnt
#       , origin_country.Country_Name as ori_cnt_nm
#       , (CASE of_reg_ref.reg_cust_cnt_cd
#                                                       WHEN "BR" THEN "SAOHQ"
#                                                       WHEN "US" THEN "RICHQ"
#                                                       WHEN "HK" THEN "HKGHQ"
#                                                       WHEN "SG" THEN "SINHQ"
#                                                       WHEN "GB" THEN "LONHQ" END) as ori_rhq
#       , c.svc_scp_cd
#       , c.svc_scp_grp_cd
#       , c.dominant_flg
#       , c.container_cat
#       , LEFT(c.rlane_cd, 3) as rlane
#       , (CASE WHEN contract_rhq.reg_cust_cnt_cd = "BR" THEN 'SAOHQ'
#               WHEN contract_rhq.reg_cust_cnt_cd = "US" THEN 'RICHQ'
#               WHEN contract_rhq.reg_cust_cnt_cd = "HK" THEN 'HKGHQ'
#               WHEN contract_rhq.reg_cust_cnt_cd = "SG" THEN 'SINHQ'
#               WHEN contract_rhq.reg_cust_cnt_cd = "GB" THEN 'LONHQ' END) as ctrt_rhq_cd
#       , c.ctrt_prop_ofc_cd as ctrt_ofc_cd
#       , c.ctrt_prop_ctry_code as ctrt_cnt_cd
#       , ctrt_country.Country_Name as ctrt_cnt_nm
#       , c.scp_ofc_cd
#       , c.cn_sub_reg
#       , of_user.FirstName || " " || of_user.LastName as ckam
#       , c.consolidated_cnt_cust_cd as cust_cd
#       , c.consolidated_cnt_cust_grp_cd as cust_grp_cd
#       , NULL as sc_rfa_typ
#       , "Target" as record_type
#       , NULL as bkg_cva_teu
#       , c.rec_typ_n_bkg_sts_cd
#       , NULL as bkg_channel_code
#       , c.is_one_quotation
#       , c.week
#       , c.teu
#       , c.cm_amt
#       , c.primary_key
#       from ${of_consolidated2.SQL_TABLE_NAME} c
#       left join ${of_user.SQL_TABLE_NAME} of_user on of_user.oneforce_id = c.ckam_sales_person
#       left join ${of_country.SQL_TABLE_NAME} origin_country on origin_country.Country_Code = c.ori_cnt
#       left join ${of_country.SQL_TABLE_NAME} ctrt_country on ctrt_country.Country_Code = c.ctrt_prop_ctry_code
#       left join ${of_reg_ref.SQL_TABLE_NAME} of_reg_ref on of_reg_ref.CUST_CNT_CD = origin_country.Country_Code
#       left join ${of_office.SQL_TABLE_NAME} contract_office on c.ctrt_prop_ofc_cd = contract_office.office_code
#       left join ${of_location.SQL_TABLE_NAME} contract_location on contract_office.location_code = contract_location.location_code
#       left join ${of_country.SQL_TABLE_NAME} contract_country on contract_country.country_code = contract_location.country_code
#       left join ${of_reg_ref.SQL_TABLE_NAME} contract_rhq on contract_rhq.cust_cnt_cd = contract_country.country_code
#       where c.record_type = 'Target'

#       UNION ALL

#       select (CASE
#           WHEN cgm.por_country_code = 'CCN' OR
#           cgm.por_country_code = 'NCN' OR
#           cgm.por_country_code = 'SCN' THEN 'CN'
#           ELSE cgm.por_country_code
#           END) as ori_cnt
#       , CGM_origin_country.Country_Name as ori_cnt_nm
#       , cgm.POR_RHQ_Code as ori_rhq
#       , NULL as svc_scp_cd
#       , cgm.Service_Scope_Group as svc_scp_grp_cd
#       , (CASE WHEN cgm.Dom_NonDom_Flag = "DOM" OR cgm.Dom_NonDom_Flag = "dom" THEN "DOM"
#               ELSE "N-DOM" END) as dominant_flg
#       , NULL as container_cat
#       , cgm.Revenue_Lane as rlane
#       , cgm.Contract_Office_RHQ_Code as ctrt_rhq_cd
#       , cgm.Contract_Office_Code as ctrt_ofc_cd
#       , CGM_contract_location.Country_Code as ctrt_cnt_cd
#       , CGM_contract_country.Country_Name as ctrt_cnt_nm
#       , NULL as scp_ofc_cd
#       , NULL as cn_sub_reg
#       , NULL as ckam
#       , NULL as cust_cd
#       , NULL as cust_grp_cd
#       , NULL as sc_rfa_typ
#       , "CGM" as record_type
#       , NULL as bkg_cva_teu
#       , "CGM" as rec_typ_n_bkg_sts_cd
#       , NULL as bkg_channel_code
#       , "No" as is_one_quotation
#       , cgm.sales_week as week
#       , cgm.teu
#       , cgm.CM_Amount as cm_amt
#       , cgm.record_id as primary_key
#       from ${of_cgm_target.SQL_TABLE_NAME} cgm
#       left join ${of_office.SQL_TABLE_NAME} CGM_contract_office on CGM_contract_office.OFFICE_CODE = cgm.contract_office_code
#       left join ${of_location.SQL_TABLE_NAME} CGM_contract_location on CGM_contract_location.Location_Code = CGM_contract_office.Location_Code
#       left join ${of_country.SQL_TABLE_NAME} CGM_contract_country on CGM_contract_location.Country_Code = CGM_contract_country.Country_Code
#       left join ${of_country.SQL_TABLE_NAME} CGM_origin_country on CGM_origin_country.Country_Code = (CASE
#                                                                                                     WHEN cgm.por_country_code = 'CCN'
#                                                                                                     OR cgm.por_country_code = 'NCN'
#                                                                                                     OR cgm.por_country_code = 'SCN'
#                                                                                                     THEN 'CN' ELSE cgm.por_country_code END)
#   ;;
#     # sql_trigger_value: SELECT  CASE WHEN
#     # CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
#     # TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
#     # AS INT64)  < 150 THEN 150
#     # WHEN
#     # CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
#     # TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
#     # AS INT64)  < 510 THEN 510
#     # WHEN
#     # CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
#     # TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
#     # AS INT64) < 870 THEN 870
#     # WHEN
#     # CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
#     # TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
#     # AS INT64) < 1230 THEN 1230
#     # ELSE 150 END ;;
#   }



#   # parameter: CGM_by_Contract_Country_or_CGM_by_POR_Country {
#   #   label: "CGM Country Picker"
#   #   type: string
#   #   allowed_value: {
#   #     label: "Contract Country"
#   #     value: "CGM_CTRT_OFF"
#   #   }
#   #   allowed_value: {
#   #     label: "POR Country"
#   #     value: "CGM_POR_CTRY"
#   #   }
#   #   default_value: "CGM_POR_CTRY"
#   # }

#   parameter: cva_coverage_criterion_param {
#     allowed_value: { value: "OPT_1" label: "Customer Group"}
#     allowed_value: { value: "OPT_2" label: "Customer Code"}
#     allowed_value: { value: "OPT_3" label: "Service Scope Group"}
#     allowed_value: { value: "OPT_4" label: "Dominant Flag"}
#     allowed_value: { value: "OPT_5" label: "Service Scope Office"}
#     allowed_value: { value: "OPT_6" label: "POR Region"}
#     allowed_value: { value: "OPT_7" label: "Revenue Lane"}
#     default_value: "OPT_6"
#   }

#   # filter: cva_coverage_criterion {
#   #   type: string
#   #   suggestions: ["Customer Group", "Customer", "Service Scope Group", "Dom/ Non-Dom", "Service Scope Office"]
#   # }

#   filter: filter_bkg_channel {
#     type: string
#     suggest_explore: bkg_channel
#     suggest_dimension: bkg_channel.channel
#   }

#   # parameter: dynamic_cgm_act_param {
#   #   label: "Dynamic Dimension for CGM vs Actual"
#   #   type: string
#   #   allowed_value: {label: "RHQ" value: "rhq"}
#   #   allowed_value: {label: "Country" value: "country"}
#   # }

#   # parameter: dynamic_cva_act_param {
#   #   label: "Dynamic Dimension for CVA vs Actual"
#   #   type: string
#   #   allowed_value: {label: "RHQ" value: "rhq"}
#   #   allowed_value: {label: "Country" value: "country"}
#   #   allowed_value: {label: "Contract Office" value: "sales_office"}
#   #   allowed_value: {label: "CKAM" value: "ckam"}
#   # }

#   # parameter: dynamic_cgm_cva_param {
#   #   label: "Dynamic Dimension for CGM vs CVA"
#   #   type: string
#   #   allowed_value: {label: "RHQ" value: "rhq"}
#   #   allowed_value: {label: "Country" value: "country"}
#   #   allowed_value: {label: "Contract Office" value: "sales_office"}
#   #   allowed_value: {label: "CKAM" value: "ckam"}
#   # }

#   parameter: dynamic_param_overall {
#     label: "Overall Performance Dimension*"
#     type: string
#     allowed_value: {label: "Contract Country" value: "ctrt_ctry"}
#     allowed_value: {label: "Contract Office" value: "ctrt_ofc"}
#     allowed_value: {label: "POR Country" value: "por_ctry"}
#     allowed_value: {label: "Key Account Type" value: "key_acc_tp"}
#     allowed_value: {label: "Customer Type" value: "cust_tp"}
#     default_value: "por_ctry"
#   }

#   parameter: dynamic_param {
#     label: "Actual by CVA Dimension*"
#     type: string
#     allowed_value: {label: "Period" value: "period"}
#     allowed_value: {label: "Contract RHQ" value: "ctrt_rhq"}
#     allowed_value: {label: "Contract Country" value: "ctrt_ctry"}
#     allowed_value: {label: "Contract Office" value: "ctrt_ofc"}
#     allowed_value: {label: "POR RHQ" value: "por_rhq"}
#     allowed_value: {label: "POR Country" value: "por_ctry"}
#     allowed_value: {label: "Dominant Flag" value: "domi_flg"}
#     allowed_value: {label: "Trade Group" value: "trade_grp"}
#     allowed_value: {label: "Service Scope Group" value: "svc_scp_grp"}
#     allowed_value: {label: "Revenue Lane" value: "rlane"}
#     allowed_value: {label: "C-KAM" value: "ckam"}
#     allowed_value: {label: "Key Account Type" value: "key_acc_tp"}
#     allowed_value: {label: "Customer Type" value: "cust_tp"}
#     default_value: "period"
#   }

#   dimension: dynamic_dim_overall {
#     label: "{% if dynamic_param_overall._parameter_value == \"'ctrt_ctry'\" %} *Contract Country
#             {% elsif dynamic_param_overall._parameter_value == \"'ctrt_ofc'\" %} *Contract Office
#             {% elsif dynamic_param_overall._parameter_value == \"'por_ctry'\" %} *POR Country
#             {% elsif dynamic_param_overall._parameter_value == \"'key_acc_tp'\" %} *Key Account Type
#             {% elsif dynamic_param_overall._parameter_value == \"'cust_tp'\" %} *Customer Type
#             {% else %} *POR Country {% endif %}"
#     type: string
#     sql:  {% if  dynamic_param_overall._parameter_value == "'ctrt_ctry'" %} ${ctrt_cnt_cd}
#           {% elsif  dynamic_param_overall._parameter_value == "'ctrt_ofc'" %} ${ctrt_ofc_cd}
#           {% elsif  dynamic_param_overall._parameter_value == "'por_ctry'" %} ${ori_cnt}
#           {% elsif  dynamic_param_overall._parameter_value == "'key_acc_tp'" %} ${of_customer_group.key_acct_tp_cd}
#           {% elsif  dynamic_param_overall._parameter_value == "'cust_tp'" %} ${of_customer_group.global_customer_type}
#           {% else %} ${ori_cnt}
#           {% endif %}
#           ;;
#   }

#   dimension: dynamic_dim {
#     label: "{% if dynamic_param._parameter_value == \"'period'\" %} *Period
#             {% elsif dynamic_param._parameter_value == \"'ctrt_rhq'\" %} *Contract RHQ
#             {% elsif dynamic_param._parameter_value == \"'ctrt_ctry'\" %} *Contract Country
#             {% elsif dynamic_param._parameter_value == \"'ctrt_ofc'\" %} *Contract Office
#             {% elsif dynamic_param._parameter_value == \"'por_rhq'\" %} *POR RHQ
#             {% elsif dynamic_param._parameter_value == \"'por_ctry'\" %} *POR Country
#             {% elsif dynamic_param._parameter_value == \"'domi_flg'\" %} *Dominant Flag
#             {% elsif dynamic_param._parameter_value == \"'trade_grp'\" %} *Trade Group
#             {% elsif dynamic_param._parameter_value == \"'svc_scp_grp'\" %} *Service Scope Group
#             {% elsif dynamic_param._parameter_value == \"'rlane'\" %} *Revenue Lane
#             {% elsif dynamic_param._parameter_value == \"'ckam'\" %} *C-KAM
#             {% elsif dynamic_param._parameter_value == \"'key_acc_tp'\" %} *Key Account Type
#             {% elsif dynamic_param._parameter_value == \"'cust_tp'\" %} *Customer Type
#               {% else %} *Period {% endif %}"
#     type: string
#     sql:  {% if  dynamic_param._parameter_value == "'domi_flg'" %} ${dominant_flg}
#           {% elsif  dynamic_param._parameter_value == "'period'" %} ${time_gra}
#           {% elsif  dynamic_param._parameter_value == "'ctrt_rhq'" %} ${ctrt_rhq_cd}
#           {% elsif  dynamic_param._parameter_value == "'ctrt_ctry'" %} ${ctrt_cnt_cd}
#           {% elsif  dynamic_param._parameter_value == "'ctrt_ofc'" %} ${ctrt_ofc_cd}
#           {% elsif  dynamic_param._parameter_value == "'por_rhq'" %} ${ori_rhq}
#           {% elsif  dynamic_param._parameter_value == "'por_ctry'" %} ${ori_cnt}
#           {% elsif  dynamic_param._parameter_value == "'trade_grp'" %} ${trade_group}
#           {% elsif  dynamic_param._parameter_value == "'svc_scp_grp'" %} ${svc_scp_grp_cd}
#           {% elsif  dynamic_param._parameter_value == "'rlane'" %} ${rlane}
#           {% elsif  dynamic_param._parameter_value == "'ckam'" %} ${ckam}
#           {% elsif  dynamic_param._parameter_value == "'key_acc_tp'" %} ${of_customer_group.key_acct_tp_cd}
#           {% elsif  dynamic_param._parameter_value == "'cust_tp'" %} ${of_customer_group.global_customer_type}
#           {% else %} ${time_gra}
#           {% endif %};;

#   }

#   # dimension: contract_dynamic_dim {
#   #   type: string
#   #   label: "{% if dynamic_dim_param._parameter_value == \"'country'\" %} *Country {% else %} *RHQ {% endif %}"
#   #   sql: {% if  dynamic_dim_param._parameter_value == "'country'" %} ${ctrt_cnt_cd}
#   #       {% else %} ${ctrt_rhq_cd}
#   #       {% endif %};;
#   #   drill_fields: [trade_group, dominant_flg, svc_scp_grp_cd, rlane]
#   # }

#   # dimension: origin_dynamic_dim {
#   #   type: string
#   #   label: "{% if dynamic_dim_param._parameter_value == \"'country'\" %} *Country {% else %} *RHQ {% endif %}"
#   #   sql: {% if  dynamic_dim_param._parameter_value == "'country'" %} ${ori_cnt}
#   #       {% else %} ${ori_rhq}
#   #       {% endif %};;
#   #   drill_fields: [trade_group, dominant_flg, svc_scp_grp_cd, rlane]
#   # }

#   dimension: primary_key {
#     type: string
#     sql: ${TABLE}.primary_key ;;
#     primary_key: yes
#   }

#   dimension: time_gra {
#     label: "Time"
#     type: string
#     sql: ${of_sales_week_master.Timeline_New_Fmt};;
#     drill_fields: [cust_cd, cust_grp_cd, ckam]
#   }

#   dimension: sub_record_type {
#     type: string
#     sql:
#       CASE
#       WHEN ${record_type} = 'CGM' AND  ${ori_cnt} IS NOT NULL THEN 'CGM_POR_CTRY'
#       WHEN ${record_type} = 'CGM' AND  ${ori_cnt} IS     NULL THEN 'CGM_CTRT_OFF'
#       ELSE 'NA'
#       END;;
#   }

#   dimension: rec_typ_n_bkg_sts_cd {
#     type: string
#     sql: ${TABLE}.rec_typ_n_bkg_sts_cd ;;
#     suggestions: ["BKG:F","BKG:S","BKG:W","BKG:X","PLN","TGT"]
#   }

#   dimension: ori_cnt  {
#     label: "Origin Country Code"
#     type: string
#     sql: ${TABLE}.ori_cnt ;;
#   }

#   dimension: ori_cnt_nm {
#     label: "Origin Country Name"
#     type: string
#     sql: ${TABLE}.ori_cnt_nm ;;
#   }

#   dimension: ori_rhq {
#     label: "Origin RHQ Code"
#     type: string
#     sql: ${TABLE}.ori_rhq ;;
#   }

#   dimension: ctrt_ofc_cd {
#     type: string
#     sql: ${TABLE}.ctrt_ofc_cd ;;
#     label: "Contract Office Code"
#   }

#   dimension: ctrt_cnt_cd {
#     label: "Contract Country Code"
#     type: string
#     sql: ${TABLE}.ctrt_cnt_cd ;;
#   }

#   dimension: ctrt_cnt_nm {
#     label: "Contract Country Name"
#     type: string
#     sql: ${TABLE}.ctrt_cnt_nm ;;
#     drill_fields: [ctrt_ofc_cd]
#   }

#   dimension: ctrt_rhq_cd {
#     label: "Contract RHQ Code"
#     type: string
#     sql: ${TABLE}.ctrt_rhq_cd ;;
#   }

#   dimension: scp_ofc_cd {
#     label: "Scope Office Code"
#     type: string
#     sql: ${TABLE}.scp_ofc_cd ;;
#   }

#   dimension: svc_scp_cd  {
#     label: "Service Scope Code"
#     type: string
#     sql: ${TABLE}.svc_scp_cd ;;
#   }

#   dimension: svc_scp_grp_cd {
#     label: "Service Scope Group Code"
#     type: string
#     sql: ${TABLE}.svc_scp_grp_cd ;;
#   }

#   dimension: dominant_flg {
#     type: string
#     sql: ${TABLE}.dominant_flg  ;;
#   }

#   dimension: trade_group {
#     type: string
#     label: "Trade Group"
#     sql: ${of_svc_scp_grp_cat.group_cat} ;;
#   }

#   dimension: container_cat {
#     type: string
#     sql: ${TABLE}.container_cat ;;
#   }

#   dimension: rlane {
#     type: string
#     sql: ${TABLE}.rlane ;;
#     label: "Revenue Lane"
#   }

#   dimension: record_type {
#     type: string
#     sql: ${TABLE}.record_type ;;
#   }

#   dimension: booking_type {
#     type: string
#     sql: CASE
#             WHEN ${record_type} = "Booking" and ${TABLE}.bkg_cva_teu > 0
#                 THEN  "3Bkg-CVA covered"
#             WHEN ${record_type} = "Booking" and ${TABLE}.bkg_cva_teu = 0
#                 THEN "5Bkg-Zero CVA covered"
#             WHEN ${record_type} = "Booking" and ${TABLE}.bkg_cva_teu is NULL
#                 THEN "4Bkg-W/O CVA"
#             WHEN ${record_type} = "CGM"
#                 THEN "1CGM"
#             ELSE "2CVA" END  ;;
#   }

#   dimension: cn_sub_reg {
#     type: string
#     sql: ${TABLE}.cn_sub_reg ;;
#   }

#   dimension: ckam {
#     type: string
#     label: "CKAM"
#     sql: ${TABLE}.ckam ;;
#   }

#   dimension: cust_cd {
#     type: string
#     label: "Customer Code"
#     sql: ${TABLE}.cust_cd ;;
#   }

#   dimension: cust_grp_cd {
#     type: string
#     label: "Customer Group Code"
#     sql: ${TABLE}.cust_grp_cd ;;
#   }

#   dimension: bkg_channel_code {
#     type: string
#     label: "Booking Channel Code"
#     sql: ${TABLE}.bkg_channel_code ;;
#   }

#   dimension: is_one_quotation {
#     label: "Is ONE Quote?"
#     type: string
#     sql: ${TABLE}.is_one_quotation ;;
#   }

#   dimension: sc_rfa_typ {
#     # hidden: yes
#     type: string
#     sql: ${TABLE}.sc_rfa_typ ;;
#   }

#   filter: contract_type {
#     label: "Contract Type"
#     type: string
#     suggestions: ["RFA", "S/C", "Tariff", "Other"]
#   }

#   dimension: ctrt_tp_include {
#     type: string
#     sql: CASE WHEN ({% condition contract_type %} "RFA" {% endcondition %}
#                     AND (${sc_rfa_typ} = "R" OR (${sc_rfa_typ} IS NULL AND ${record_type} IN ("CGM", "Target"))))
#                 OR
#                   ({% condition contract_type %} "S/C" {% endcondition %}
#                     AND (${sc_rfa_typ} = "S" OR (${sc_rfa_typ} IS NULL AND ${record_type} IN ("CGM", "Target"))))
#                 OR
#                   ({% condition contract_type %} "Tariff" {% endcondition %}
#                     AND (${sc_rfa_typ} = "T" OR (${sc_rfa_typ} IS NULL AND ${record_type} IN ("CGM", "Target"))))
#                 OR
#                   ({% condition contract_type %} "Other" {% endcondition %}
#                     AND ${sc_rfa_typ} IS NULL)
#                 THEN "Y"
#               ELSE "N"
#               END;;
#   }

#   dimension: week {
#     type: string
#     sql: ${TABLE}.week ;;
#   }

#   dimension: teu {
#     sql: ${TABLE}.teu ;;
#     type: number
#   }

#   dimension: cm_amt {
#     sql: ${TABLE}.cm_amt ;;
#     type: number
#   }

#   dimension: ytd {
#     type: string
#     sql: case when cast(RIGHT(${week}, 2) as int64) <= extract(week from current_timestamp()) AND cast(LEFT(${week}, 4) as int64) = extract(year from current_timestamp()) then "YTD" else "N" end   ;;
#   }

#   dimension: ytd_fiscal {
#     type: string
#     sql: case when cast(RIGHT(${of_sales_week_master.sales_month_new_fmt}, 2) as int64) <= extract(month from current_timestamp()) AND cast(LEFT(${week}, 4) as int64) = extract(year from current_timestamp()) then "YTD" else "N" end ;;
#   }

#   # dimension: dynamic_ytd {
#   #   type: string
#   #   sql: CASE WHEN ${of_sales_week_master.calendar_selection} = "CALENDAR" THEN ${ytd}
#   #         ELSE ${ytd_fiscal}
#   #         END;;
#   # }

#   measure: total_cgm_por_ctry_teu {
#     label:"Total TEU - CGM (by POR Country)"
#     type: sum
#     sql: ${teu} ;;
#     filters: [record_type: "CGM", sub_record_type: "CGM_POR_CTRY"]
#     # value_format_name: decimal_0
#     value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
#   }

#   measure: total_cgm_ctrt_off_teu {
#     label:"Total TEU - CGM (by Contract Office)"
#     type: sum
#     sql: ${teu} ;;
#     filters: [record_type: "CGM", sub_record_type: "CGM_CTRT_OFF"]
#     # value_format_name: decimal_0
#     value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
#   }

#   measure: cgm_teu_dynamic {
#     label: "CGM TEU Dynamic"
#     type: number
#     sql: {% if  dynamic_param._parameter_value == "'por_ctry'" %}
#           ${total_cgm_por_ctry_teu}
#         {% elsif dynamic_param._parameter_value == "'por_rhq'" %}
#           ${total_cgm_por_ctry_teu}
#         {% elsif dynamic_param._parameter_value == "'ctrt_ctry'" %}
#           ${total_cgm_ctrt_off_teu}
#         {% elsif dynamic_param._parameter_value == "'ctrt_ofc'" %}
#           ${total_cgm_ctrt_off_teu}
#         {% elsif dynamic_param._parameter_value == "'ctrt_rhq'" %}
#           ${total_cgm_ctrt_off_teu}
#         {% else %}
#           ${total_cgm_por_ctry_teu}
#         {% endif %};;
#     value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"

#   }

#   # measure: CGM_TEU_Dynamic {
#   #   type: number
#   #   value_format_name: decimal_0
#   #   #value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
#   #   sql:
#   #     CASE
#   #       WHEN {% parameter CGM_by_Contract_Country_or_CGM_by_POR_Country %} = 'CGM_POR_CTRY'        THEN ${total_cgm_por_ctry_teu}
#   #               ELSE ${total_cgm_ctrt_off_teu}
#   #     END ;;
#   # }

#   measure: total_booking_cm_amt {
#     label: "Gross CM"
#     type: sum
#     sql:  ${cm_amt} ;;
#     filters: [record_type: "Booking"]
#     value_format_name: usd_0
#   }

#   measure: target {
#     value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
#     label: "Target"
#     type: sum
#     sql: ${teu} ;;
#     filters: [record_type: "Target"]
#   }

#   measure: total_target_teu_with_vms {
#     label: "Adjusted Target (TEU)"
#     type: number
#     sql: ${target} * ceiling(${of_dep_sched_smry2.scheduled_wk_perc}) /100 ;;
#     value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
#   }

#   measure: cgm {
#     value_format_name: decimal_0
#     label: "CGM"
#     type: sum
#     sql: ${teu} ;;
#     filters: [record_type: "CGM"]
#   }

#   measure: act_with_cva {
#     value_format_name: decimal_0
#     label: "Actual with CVA"
#     type: sum
#     sql: ${teu} ;;
#     filters: [booking_type: "3Bkg-CVA covered"]
#   }

#   measure: act_with_zero_cva {
#     value_format_name: decimal_0
#     label: "Actual with Zero CVA"
#     type: sum
#     sql: ${teu} ;;
#     filters: [booking_type: "5Bkg-Zero CVA covered"]
#   }

#   measure: act_without_cva {
#     value_format_name: decimal_0
#     label: "Actual without CVA"
#     type: sum
#     sql: ${teu} ;;
#     filters: [booking_type: "4Bkg-W/O CVA"]
#   }

#   measure: total_actual {
#     value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
#     label: "Total Actual"
#     type: sum
#     sql: ${teu} ;;
#     filters: [record_type: "Booking"]
#   }

#   measure: total_target_teu_with_param {
#     type: number
#     sql: {% if apply_vms_adjustment_to_target._parameter_value == "'Yes'" %}
#             ${total_target_teu_with_vms}
#         {% else %}
#             ${target}
#         {% endif %};;
#     value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
#   }

#   measure: tgt {
#     label: "{% if    apply_vms_adjustment_to_target._parameter_value ==  \"'Yes'\"  %}Adj Tgt{%
#     elsif apply_vms_adjustment_to_target._parameter_value ==  \"'No'\"   %}Tgt{%
#     else  %}total_target_teu_with_vms_formatted{% endif %}"
#     type: number
#     sql: ${total_target_teu_with_param};;
#     value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
#     # html: {{total_target_teu_with_param._rendered_value}}  ;;
#   }
#   parameter: apply_vms_adjustment_to_target {
#     label: "Target Selection"
#     type: string
#     allowed_value: {label: "Target"      value: "No"  }
#     allowed_value: {label: "Adj. Target" value: "Yes" }
#     default_value: "No"
#   }

#   measure: cm_per_teu {
#     label: "CM/ TEU"
#     type: number
#     sql: ${total_booking_cm_amt} / NULLIF(${total_actual}, 0) ;;
#     value_format_name: usd_0
#   }

#   measure: cgm_contract_country_actual_gap {
#     type: number
#     sql: ${total_actual} - ${total_cgm_ctrt_off_teu} ;;
#     value_format_name: decimal_0
#   }

#   measure: cgm_por_country_actual_gap {
#     type: number
#     sql: ${total_actual} - ${total_cgm_por_ctry_teu} ;;
#     value_format_name: decimal_0
#   }

#   measure: cgm_contract_country_actual_achievement {
#     type: number
#     sql: ${total_actual} / NULLIF(${total_cgm_ctrt_off_teu}, 0) ;;
#     value_format_name: percent_0
#   }

#   measure: cgm_por_country_actual_achievement {
#     type: number
#     sql: ${total_actual} / NULLIF(${total_cgm_por_ctry_teu}, 0) ;;
#     value_format_name: percent_0
#   }

#   measure: cgm_contract_country_cva_gap {
#     type: number
#     sql: ${target} - ${total_cgm_ctrt_off_teu} ;;
#     value_format_name: decimal_0
#   }

#   measure: cgm_por_country_cva_gap {
#     type: number
#     sql: ${target} - ${total_cgm_por_ctry_teu} ;;
#     value_format_name: decimal_0
#   }

#   measure: cgm_contract_country_cva_achievement {
#     type: number
#     sql: ${target} / NULLIF(${total_cgm_ctrt_off_teu}, 0) ;;
#     value_format_name: percent_0
#   }

#   measure: cgm_por_country_cva_achievement {
#     type: number
#     sql: ${target} / NULLIF(${total_cgm_por_ctry_teu}, 0) ;;
#     value_format_name: percent_0
#   }

#   measure: cva_actual_w_cva_gap {
#     type: number
#     sql: ${act_with_cva} - ${target} ;;
#     value_format_name: decimal_0
#   }

#   measure: cva_actual_w_cva_achievement {
#     type: number
#     sql: ${act_with_cva} / NULLIF(${target}, 0) ;;
#     value_format_name: percent_0
#   }

#   measure: cva_actual_wo_cva_achievement {
#     type: number
#     sql: ${act_without_cva} / NULLIF(${target}, 0) ;;
#     value_format_name: percent_0
#   }

#   measure: cva_actual_zero_cva_achievement {
#     type: number
#     sql: ${act_with_zero_cva} / NULLIF(${target}, 0) ;;
#     value_format_name: percent_0
#   }

#   set: detail {
#     fields: [
#             ctrt_ofc_cd
#             , svc_scp_cd
#             , svc_scp_grp_cd]
#   }

# }

view: ckam_mapping_one_per_country {
  derived_table: {
    sql:
    SELECT Customer_Group        as customer_grp_oneforce_id,
           cust_grp_id           as customer_grp_id,
           Sales_Person          as ckam_sales_person,
           contract_country_code as contract_country_code,
           contract_country_name as contract_country_name
FROM (
  SELECT
  Customer_Group,
  cust_grp_id,
  Sales_Person,
  Team_Role,
  contract_country_code,
  Country_Name as contract_country_name,
  of_sstm_country_country.LastModifiedDate ,
  row_number() OVER ( PARTITION BY Customer_Group, contract_country_code
                      ORDER BY of_sstm_country_country.LastModifiedDate DESC, of_sstm_country_country.CreatedDate DESC
                    ) as rn
  FROM ${of_sales_team_member_contract_country.SQL_TABLE_NAME} of_sstm_country_country
  LEFT JOIN ${of_country.SQL_TABLE_NAME} of_country
  ON of_sstm_country_country.contract_country_code = of_country.Country_Code
  LEFT JOIN ${of_user.SQL_TABLE_NAME} of_user
  ON of_sstm_country_country.Sales_Person = of_user.ONEForce_ID
  WHERE Team_Role = 'Contract Key Account Manager (C-KAM)'
) WHERE rn = 1 ;;

    persist_for: "1 hour"
  }


  dimension: customer_grp_oneforce_id {
    type: string
    sql: ${TABLE}.customer_grp_oneforce_id ;;
  }

  dimension: customer_grp_id {
    type: string
    sql: ${TABLE}.customer_grp_id ;;
  }

  dimension: ckam_sales_person {
    type: string
    sql: ${TABLE}.ckam_sales_person ;;
  }

  dimension: contract_country_code {
    type: string
    sql: ${TABLE}.contract_country_code ;;
  }

  dimension: contract_country_name {
    type: string
    sql:  ${TABLE}.contract_country_name ;;
  }


}

view: ckam_mapping_one_per_office {
  derived_table: {
    sql:
    SELECT Customer_Group        as customer_grp_oneforce_id,
           cust_grp_id           as customer_grp_id,
           Sales_Person          as ckam_sales_person,
           contract_country_code as contract_country_code,
           contract_country_name as contract_country_name,
           Office_Code_Number    as contract_office_code
FROM (
  SELECT
  Customer_Group,
  cust_grp_id,
  Sales_Person,
  Team_Role,
  contract_country_code,
  Country_Name as contract_country_name,
  of_sstm_country_country.LastModifiedDate ,
  of_user.Office_Code_Number,
  row_number() OVER (PARTITION BY Customer_Group, contract_country_code, Office_Code_Number ORDER BY of_sstm_country_country.LastModifiedDate DESC, of_sstm_country_country.CreatedDate DESC) as rn
  FROM ${of_sales_team_member_contract_country.SQL_TABLE_NAME} of_sstm_country_country
  LEFT JOIN ${of_country.SQL_TABLE_NAME} of_country
  ON of_sstm_country_country.contract_country_code = of_country.Country_Code
  LEFT JOIN ${of_user.SQL_TABLE_NAME} of_user
  ON of_sstm_country_country.Sales_Person = of_user.ONEForce_ID
  WHERE Team_Role = 'Contract Key Account Manager (C-KAM)'
) WHERE rn = 1 ;;

    persist_for: "1 hour"
  }


  dimension: customer_grp_oneforce_id {
    type: string
    sql: ${TABLE}.customer_grp_oneforce_id ;;
  }

  dimension: customer_grp_id {
    type: string
    sql: ${TABLE}.customer_grp_id ;;
  }

  dimension: ckam_sales_person {
    type: string
    sql: ${TABLE}.ckam_sales_person ;;
  }

  dimension: contract_country_code {
    type: string
    sql: ${TABLE}.contract_country_code ;;
  }

  dimension: contract_country_name {
    type: string
    sql:  ${TABLE}.contract_country_name ;;
  }

  dimension: contract_office_code {
    type: string
    sql: ${TABLE}.contract_office_code ;;
  }
}

view: cust_priority_list {
  # # All active GKA, RKA, LKA regardless of lifting plus SME and Ungroup Customer having TEU in FY2020
  derived_table: {
    #sql: WITH  fy_teu as (select coalesce(s.cust_cd,b.cust_cd) as cust_cd,  w.fiscal_year, sum(bkg_teu) teu
    #  from OF_ACTUALS a
    #  inner join ${of_sales_week_master.SQL_TABLE_NAME} as w on a.week = cast(regexp_replace(w.sales_week, '[/W]', '') as int64) and w.fiscal_year = 'FY2020'
    #  left join ${of_svc_contract.SQL_TABLE_NAME} as s on a.svc_cont_no =  s.sc_rfa_no
    #  inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as b on coalesce(s.cust_cd, a.cnt_cust_cd) = b.cust_cd and b.delt_flg in ('N','false')
    #  group by 1, 2)
    #  -- MAIN
    #  select  distinct a.cust_cd, a.cust_grp_id, g.key_Acct_tp_cd, fy_teu.fiscal_year, fy_teu.teu
    #  from ${v_customer_opus_n_prospect.SQL_TABLE_NAME} a
    #  inner join (select coalesce(svc.cust_cd, bkg.ctrt_cust_cd) ctrt_cust_cd
    #             from ${of_booking.SQL_TABLE_NAME} as bkg
    #             left join ${of_svc_contract.SQL_TABLE_NAME} as svc on bkg.svc_cont_no = svc.sc_rfa_no) as b on b.ctrt_cust_cd = a.cust_cd
    #  left join ${of_customer_group.SQL_TABLE_NAME} g on (a.cust_grp_id = g.cust_grp_id and g.delt_flg = 'N')
    #  left join fy_teu on fy_teu.cust_cd = a.cust_cd
    #  where a.delt_flg in ('N','false')
    #  and a.cust_cd is not null
    #  and 0 < ( CASE WHEN IFNULL(g.key_acct_tp_cd, 'XXX') not in ('GKA','RKA','LKA') THEN fy_teu.teu ELSE 1 END)
    #   ;;

    #sql:  select  distinct a.cust_cd, a.cust_grp_id, g.key_Acct_tp_cd, fy_teu.fiscal_year, fy_teu.teu
    #  from ${v_customer_opus_n_prospect.SQL_TABLE_NAME} a
    #  inner join ${of_booking.SQL_TABLE_NAME} b on b.ctrt_cust_cd = a.cust_cd
    #  left join ${of_customer_group.SQL_TABLE_NAME} g on (a.cust_grp_id = g.cust_grp_id and g.delt_flg = 'N')
    #  left join (select b.cust_cd, w.fiscal_year, sum(bkg_teu) teu
    #              from ${of_actuals.SQL_TABLE_NAME} a
    #              inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} b on a.cnt_cust_cd = b.cust_cd and b.delt_flg in ('N','false')
    #              inner join ${of_sales_week_master.SQL_TABLE_NAME} w on a.week = cast(regexp_replace(w.sales_week, '[/W]', '') as int64) and w.fiscal_year = 'FY2020'
    #              group by b.cust_cd, w.fiscal_year) as fy_teu on fy_teu.cust_cd = a.cust_cd
    #  where a.delt_flg in ('N','false')
    #  and a.cust_cd is not null
    #  and 0 < ( CASE WHEN IFNULL(g.key_acct_tp_cd, 'XXX') not in ('GKA','RKA','LKA') THEN fy_teu.teu ELSE 1 END)
    #   ;;

    sql:  select  distinct a.cust_cd,
                  a.cust_grp_id,
                  g.key_Acct_tp_cd,
                  fy_teu.fiscal_year,
                  fy_teu.teu
          from    ${v_customer_opus_n_prospect.SQL_TABLE_NAME} a
          inner join (select coalesce(cont.cust_cd, bkg.ctrt_cust_cd) as cust_cd
                      from ${of_booking.SQL_TABLE_NAME} bkg
                      left join ${of_svc_contract.SQL_TABLE_NAME} cont on bkg.svc_cont_no = cont.sc_rfa_no
                      --where bkg.svc_cont_no is null or extract(DATE from cont.ctrt_exp_dt) >= current_date()
                      ) b
          on b.cust_cd = a.cust_cd
          left join ${of_customer_group.SQL_TABLE_NAME} g on (a.cust_grp_id = g.cust_grp_id and g.delt_flg = 'N')
          left join (select b.cust_cd, w.fiscal_year, sum(bkg_teu) teu
                      from ${of_actuals.SQL_TABLE_NAME} a
                      left join ${of_svc_contract.SQL_TABLE_NAME} cont2 on a.svc_cont_no = cont2.sc_rfa_no  and extract(DATE from cont2.ctrt_exp_dt) >= current_date()
                      inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} b on coalesce(cont2.cust_cd,a.cnt_cust_cd) = b.cust_cd and b.delt_flg in ('N','false')
                      inner join ${of_sales_week_master.SQL_TABLE_NAME} w on a.week = cast(regexp_replace(w.sales_week, '[/W]', '') as int64) and w.fiscal_year = 'FY2020'
                      --where a.svc_cont_no is null or extract(DATE from cont2.ctrt_exp_dt) >= current_date()
                      group by b.cust_cd, w.fiscal_year) as fy_teu on fy_teu.cust_cd = a.cust_cd
          where a.delt_flg in ('N','false')
          and a.cust_cd is not null
          and 0 < ( CASE WHEN IFNULL(g.key_acct_tp_cd, 'XXX') not in ('GKA','RKA','LKA') THEN fy_teu.teu ELSE 1 END )
       ;;

    #persist_for: "4 hours"
    sql_trigger_value: SELECT  CASE WHEN
          CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
          TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
          AS INT64)  < 150 THEN 150
          WHEN
          CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
          TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
          AS INT64)  < 510 THEN 510
          WHEN
          CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
          TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
          AS INT64) < 870 THEN 870
          WHEN
          CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
          TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
          AS INT64) < 1230 THEN 1230
          ELSE 150 END ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
    hidden: yes
  }

  measure: count_cust_cd {
    type: count_distinct
    sql:  ${cust_cd} ;;
    drill_fields: [detail*]
  }


  dimension: cust_cd {
    label: "Customer Code"
    type: string
    sql: ${TABLE}.cust_cd ;;
  }

  dimension: cust_grp_id {
    label: "Customer Group"
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: key_acct_tp_cd {
    label: "Key Account Type"
    type: string
    sql: ${TABLE}.key_Acct_tp_cd ;;
  }

  dimension: fiscal_year {
    label: "Fiscal Year"
    type: string
    sql: ${TABLE}.fiscal_year ;;
  }

  dimension: teu {
    label: "FY. TEU"
    type: number
    sql: ${TABLE}.teu ;;
  }

  set: detail {
    fields: [cust_cd, cust_grp_id, key_acct_tp_cd, teu]
  }
}

# include: "of_user.view"
view: of_user_duplicate_cust_grp {
  extends: [of_user]

  dimension: rhq_code {
    type: string
    label: "RHQ Code"
    sql: CASE WHEN ${username} = 'crm.systemuser@one-line.com' then 'Unclaimed'
      ELSE (case when ${regional_head_office} is not null then trim(substr(${regional_head_office}, instr(${regional_head_office},'-',-1)+1)) else NULL end ) END ;;
  }

  dimension: country {
    type: string
    sql: case when ${username} = 'crm.systemuser@one-line.com' then 'Unclaimed' else ${TABLE}.Country end;;
  }

  dimension: office_code_new {
    type: string
    sql: case when ${username} = 'crm.systemuser@one-line.com' then 'Unclaimed' else ${TABLE}.Office_Code_Number end;;
  }


}

view: duplicate_cust_grp {
  derived_table: {
    sql: WITH dup_grp_idx_list AS (
         SELECT dup_grp_idx_cd,
                string_agg(g.cust_grp_id) cust_grp_id_lst,
                count(1) cust_grp_cnt,
                count( NULLIF(g.delt_flg,'Y') )  cust_grp_cnt_active,
                case when ( sum(case when g.delt_flg = 'N' and g.vld_retn_flg = 'Y' then 1 else 0 end) = 1 ) then 'Y' else 'N' end as vld_retn_identified,
                CASE WHEN COUNT(DISTINCT IFNULL( g.key_acct_tp_cd,'SME')) > 1 THEN 'Y' ELSE 'N' END as inconsistent_acct_typ,
                CASE WHEN MAX( upper(trim(g.cust_grp_nm)) ) = MIN( upper(trim(g.cust_grp_nm)) ) THEN 'Exact Match' ELSE 'Partial Match' END as matching_condition
         FROM `ONEFORCE.OF_CUSTOMER_GROUP`  g
         --where g.DELT_FLG  = 'N' and ( g.dup_grp_idx_cd IS NOT NULL  )
         where ( g.dup_grp_idx_cd IS NOT NULL  )
         group by dup_grp_idx_cd having count(1) > 1
      ),
      gam_list as (
         SELECT Customer_Group, sales_person, row_num_per_cust_grp
         FROM ( SELECT t.Customer_Group, t.sales_person,
                ROW_NUMBER() OVER (PARTITION BY t.Customer_Group  ) AS row_num_per_cust_grp
                FROM `ONEFORCE.OF_SALES_TEAM_MEMBER`  t
                WHERE team_role = 'Global Account Manager (GAM)' and inactive = 'false' order by t.Customer_Group
              )
         WHERE row_num_per_cust_grp = 1
      ),
      bkg_list as (
         SELECT coalesce(sc.cust_cd, bkg.ctrt_cust_cd) as ctrt_cust_cd,
                SUM( bkg.bkg_teu) teu
         FROM `ONEFORCE.OF_BOOKING` bkg
         INNER JOIN `ONEFORCE.OF_SALES_WEEK_MASTER` wk ON (bkg.week = cast(wk.sales_week as INT64) )
         LEFT JOIN `ONEFORCE.OF_SVC_CONTRACT` sc ON (bkg.svc_cont_no = sc.sc_rfa_no)
         WHERE EXISTS ( SELECT 1
                        FROM  `ONEFORCE.OF_CUSTOMER` cust
                        INNER JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g ON (cust.cust_grp_id = g.cust_grp_id)
                        WHERE coalesce(sc.cust_cd, bkg.ctrt_cust_cd) = cust.cust_cd
                        AND   EXISTS (select 1 from dup_grp_idx_list l where g.dup_grp_idx_cd = l.dup_grp_idx_cd )
                      )
         AND   {% condition fiscal_year_filter   %} wk.fiscal_year   {% endcondition %}
         AND   {% condition calendar_year_filter %} wk.calendar_year {% endcondition %}
         AND   {% condition sales_month_filter   %} wk.sales_month   {% endcondition %}
         AND   bkg.bkg_sts_cd NOT IN ('X')
         group by 1
      ),
      child_cust_list as (
         SELECT c.ONEForce_Id,
                c.cust_cd,
                c.name,
                c.cust_grp_id,
                c.delt_flg,
                c.of_owner_id     as cust_owner_id ,
                ofc.modi_cust_cd2 as to_be_cust_cd ,
                (CASE WHEN c.vld_retn_flg = 'true' THEN 'Y' ELSE 'N' END)    as vld_retn_flg  ,
                (CASE WHEN c.poten_dup_flg = 'true' THEN 'Y' ELSE 'N' END)   as poten_dup_flg ,
                (CASE WHEN c.delt_flg in ('N', 'false' ) THEN 'Active' ELSE 'Inactive' END ) as active_flg,
                (CASE WHEN c.Commercial = 'true' THEN 'Y' ELSE 'N' END) as is_contract_cust,
                ( CASE substr(c.cust_grp_hrchy_cd,1,1)
                  WHEN 'G' THEN 'Global' WHEN 'R' THEN 'Regional' WHEN 'C' THEN 'County' WHEN 'I' THEN 'Individual' END) as ofc_type,
                ( CASE substr(c.cust_grp_hrchy_cd,1,1)
                  WHEN 'G' THEN 1 WHEN 'R' THEN 2 WHEN 'C' THEN 3 WHEN 'I' THEN 4 ELSE 5 END) as ofc_type_order,
                ROW_NUMBER() OVER (PARTITION BY c.cust_grp_id
                ORDER BY (CASE substr(c.cust_grp_hrchy_cd,1,1) WHEN 'G' THEN 1 WHEN 'R' THEN 2 WHEN 'C' THEN 3 WHEN 'I' THEN 4 ELSE 5 END), b.teu DESC )  AS row_num_per_cust_grp,
                FIRST_VALUE(u.regional_head_office) OVER (PARTITION BY c.cust_grp_id
                ORDER BY (CASE substr(c.cust_grp_hrchy_cd,1,1) WHEN 'G' THEN 1 WHEN 'R' THEN 2 WHEN 'C' THEN 3 WHEN 'I' THEN 4 ELSE 5 END), b.teu DESC ) AS top_child_rhq,
                FIRST_VALUE(u.email) OVER (PARTITION BY c.cust_grp_id
                ORDER BY (CASE substr(c.cust_grp_hrchy_cd,1,1) WHEN 'G' THEN 1 WHEN 'R' THEN 2 WHEN 'C' THEN 3 WHEN 'I' THEN 4 ELSE 5 END), b.teu DESC ) AS top_child_srep_eml,
                FIRST_VALUE(u.firstname||' '||u.lastname) OVER (PARTITION BY c.cust_grp_id
                ORDER BY (CASE substr(c.cust_grp_hrchy_cd,1,1) WHEN 'G' THEN 1 WHEN 'R' THEN 2 WHEN 'C' THEN 3 WHEN 'I' THEN 4 ELSE 5 END), b.teu DESC ) AS top_child_srep_fullname,
                FIRST_VALUE(u.office_code_number) OVER (PARTITION BY c.cust_grp_id
                ORDER BY (CASE substr(c.cust_grp_hrchy_cd,1,1) WHEN 'G' THEN 1 WHEN 'R' THEN 2 WHEN 'C' THEN 3 WHEN 'I' THEN 4 ELSE 5 END), b.teu DESC ) AS top_child_office_code_number,
                FIRST_VALUE(u.country) OVER (PARTITION BY c.cust_grp_id
                ORDER BY (CASE substr(c.cust_grp_hrchy_cd,1,1) WHEN 'G' THEN 1 WHEN 'R' THEN 2 WHEN 'C' THEN 3 WHEN 'I' THEN 4 ELSE 5 END), b.teu DESC ) AS top_child_country
         FROM `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` c
         LEFT JOIN `ONEFORCE.OF_CUSTOMER` ofc ON (c.cust_cd = ofc.cust_cd)
         LEFT JOIN `ONEFORCE.OF_USER` u ON (c.of_owner_id = u.ONEForce_ID)
         LEFT JOIN bkg_list b ON (c.cust_cd = b.ctrt_cust_cd)
         WHERE c.cust_cd not like 'G-%'
         AND EXISTS ( SELECT 1 FROM `ONEFORCE.OF_CUSTOMER_GROUP`  g
                        WHERE c.cust_grp_id = g.cust_grp_id
                        AND EXISTS (select 1 from dup_grp_idx_list l where g.dup_grp_idx_cd = l.dup_grp_idx_cd )
                     )
      ),
      cust_grp_list as (
         SELECT l.dup_grp_idx_cd,
                l.cust_grp_cnt,
                g.cust_grp_id,
                u.email,
                u.firstname,
                u.lastname,
                u.office_code_number,
                u.country,
                u.regional_head_office,
                coalesce(u.email,  MAX(top_child_srep_eml) ) pic_email,
                CASE WHEN u.email IS NOT NULL THEN u.firstname||' '||u.lastname ELSE MAX(c.top_child_srep_fullname ) END  as pic_fullname,
                coalesce(u.office_code_number,  MAX(c.top_child_office_code_number) ) for_ref_office,
                coalesce(u.country,  MAX(c.top_child_country) ) for_ref_country,
                coalesce(u.regional_head_office,  MAX(c.top_child_rhq) ) for_ref_rhq,
                ROW_NUMBER() OVER (PARTITION BY l.dup_grp_idx_cd ORDER by g.cust_grp_id) AS row_num_per_dup_grp,
                max(g.oneforce_id) as cust_grp_oneforce_id,
                max(g.cust_grp_nm) as cust_grp_nm,
                (CASE WHEN max(g.delt_flg) = 'Y' THEN 'Inactive' ELSE 'Active' END) as active_flg,
                (CASE WHEN max(g.vld_retn_flg) = 'Y' THEN 'Y' ELSE 'N' END ) as vld_retn_flg,
                max(g.dup_grp_cgrp_cd) as dup_grp_cgrp_cd,
                max(g.cntr_cust_tp_cd) as cntr_cust_tp_cd,
                replace( IFNULL( max(g.key_acct_tp_cd),'SME'), 'SME', 'ONE Care') as key_acct_tp_cd,
                max(gam.sales_person) as gam_usr_id,
                count(distinct c.ONEForce_ID) as child_cust_cnt,
                sum( case when c.delt_flg in ('false','N') then 1 else 0 end  ) as child_cust_cnt_active
         FROM `ONEFORCE.OF_CUSTOMER_GROUP`  g
         INNER JOIN dup_grp_idx_list l on (g.dup_grp_idx_cd = l.dup_grp_idx_cd )
         LEFT JOIN gam_list gam on (g.ONEForce_Id  = gam.Customer_Group )
         LEFT JOIN `ONEFORCE.OF_USER` u ON (gam.sales_person = u.ONEForce_ID)
         LEFT JOIN child_cust_list c ON (c.cust_grp_id = g.cust_grp_id AND c.cust_cd NOT LIKE 'G-%'  )
         GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9
      )
      SELECT
      -- duplicate grp set
      cast(g.dup_grp_idx_cd as int64) as dup_grp_idx_cd                ,
      l.cust_grp_cnt                  as cust_grp_cnt                  ,
      l.cust_grp_cnt_active           as cust_grp_cnt_active           ,
      l.vld_retn_identified           as vld_retn_identified           ,
      l.inconsistent_acct_typ         as inconsistent_acct_typ         ,
      l.cust_grp_id_lst               as cust_grp_id_lst               ,
      l.matching_condition            as matching_condition            ,
      FIRST_VALUE(g.for_ref_office)  OVER (PARTITION BY g.dup_grp_idx_cd ORDER BY g.child_cust_cnt_active DESC, g.cust_grp_id ASC) AS dup_grp_for_ref_office,
      FIRST_VALUE(g.for_ref_country) OVER (PARTITION BY g.dup_grp_idx_cd ORDER BY g.child_cust_cnt_active DESC, g.cust_grp_id ASC) AS dup_grp_for_ref_country,
      FIRST_VALUE(g.for_ref_rhq)     OVER (PARTITION BY g.dup_grp_idx_cd ORDER BY g.child_cust_cnt_active DESC, g.cust_grp_id ASC) AS dup_grp_for_ref_rhq,
      FIRST_VALUE(g.pic_email)       OVER (PARTITION BY g.dup_grp_idx_cd ORDER BY g.child_cust_cnt_active DESC, g.cust_grp_id ASC) AS dup_grp_pic_email,
      FIRST_VALUE(g.pic_fullname)    OVER (PARTITION BY g.dup_grp_idx_cd ORDER BY g.child_cust_cnt_active DESC, g.cust_grp_id ASC) AS dup_grp_pic_fullname,
      -- customer group
      g.row_num_per_dup_grp         as cust_grp_row_num           ,
      g.cust_grp_id                 as cust_grp_id                ,
      g.cust_grp_nm                 as cust_grp_nm                ,
      g.active_flg                  as cust_grp_active_flg        ,
      g.vld_retn_flg                as cust_grp_vld_retn_flg      ,
      g.key_acct_tp_cd              as key_acct_tp_cd             ,
      g.for_ref_rhq                 as cust_grp_for_ref_rhq       ,
      g.pic_email                   as cust_grp_pic_email         ,
      g.pic_fullname                as cust_grp_pic_fullname      ,
      g.gam_usr_id                  as gam_usr_id                 ,
      gam_usr.email                 as gam_usr_email              ,
      gam_usr.office_code_number    as gam_usr_office_code_number ,
      gam_usr.country               as gam_usr_country            ,
      gam_usr.regional_head_office  as gam_usr_rhq                ,
      gam_usr.firstname ||' '||gam_usr.lastname
                                    as gam_usr_fullname           ,
      g.child_cust_cnt              as child_cust_cnt             ,
      g.child_cust_cnt_active       as child_cust_cnt_active      ,
      -- child customers
      IFNULL(c.row_num_per_cust_grp,0)  as child_row_num_per_cust_grp  ,
      c.cust_cd                         as child_cust_cd               ,
      c.name                            as child_cust_name             ,
      c.active_flg                      as child_cust_active_flg       ,
      c.to_be_cust_cd                   as child_cust_to_be_cust_cd    ,
      c.is_contract_cust                as child_cust_is_contract      ,
      c.poten_dup_flg                   as child_cust_poten_dup_flg    ,
      c.vld_retn_flg                    as child_cust_vld_rtn_flg      ,
      c.ofc_type                        as child_cust_off_type         ,
      c.ofc_type_order                  as child_cust_off_type_order   ,
      c.cust_owner_id                   as child_cust_owner_id         ,
      c.top_child_rhq                   as child_cust_top_child_rhq    ,
      b.teu                             as child_cust_teu
      FROM cust_grp_list g
      LEFT JOIN dup_grp_idx_list l ON (g.dup_grp_idx_cd = l.dup_grp_idx_cd )
      LEFT JOIN child_cust_list c ON (c.cust_grp_id = g.cust_grp_id)
      LEFT JOIN bkg_list b ON (c.cust_cd = b.ctrt_cust_cd)
      LEFT JOIN `ONEFORCE.OF_USER`  gam_usr ON ( g.gam_usr_id = gam_usr.ONEForce_Id)
      order by
      cast(g.dup_grp_idx_cd as int64),
      g.cust_grp_id,
      IFNULL(c.row_num_per_cust_grp,0)
      ;;
  }

  filter: fiscal_year_and_quarter_filter {
    type: string
    suggest_explore: of_sales_week_master
    suggest_dimension: of_sales_week_master.fiscal_year_and_quarter
  }

  filter: fiscal_year_filter {
    type: string
    suggest_explore: of_sales_week_master
    suggest_dimension: of_sales_week_master.fiscal_year
  }

  filter: calendar_year_filter {
    type: string
    suggest_explore: of_sales_week_master
    suggest_dimension: of_sales_week_master.calendar_year
  }

  filter: sales_month_filter {
    type: string
    suggest_explore: of_sales_week_master
    suggest_dimension: of_sales_week_master.sales_month
  }

  filter: grp_without_active_children_filter {
    type: string
    label: "With/without active children"
    suggestions: ["With active children","Without active children"]
    sql: ( ({% condition %} 'With active children' {% endcondition %} AND ${child_cust_cnt_active} >= 1) OR
      ({% condition %} 'Without active children' {% endcondition %} AND ${child_cust_cnt_active} = 0 )  ) ;;
  }

  filter: effect_on_excl_inactive_filter {
    type: string
    label: "Effect on excluding inactive cust grps"
    suggestions: ["Remaining duplicate","No longer duplicate"]
    sql: ( ({% condition %} 'Remaining duplicate' {% endcondition %} AND ${cust_grp_cnt_active}  > 1) OR
      ({% condition %} 'No longer duplicate' {% endcondition %} AND ${cust_grp_cnt_active} <= 1) ) ;;
  }

  filter: child_cust_donotuse_filter {
    type: string
    label: "Are Child Custs [Do not use]?"
    suggestions: ["Yes","No"]
    sql: ( ({% condition %} 'Yes' {% endcondition %} AND upper(${child_cust_name}) like '%DO NOT USE%') OR
      ({% condition %} 'No'  {% endcondition %} AND upper(${child_cust_name}) not like '%DO NOT USE%') ) ;;
  }

  parameter: dup_set_count_dimension_param {
    label: "Duplicate Set Count Dimension (Param)"
    type: string
    allowed_value: { value: "RHQ"  label: "RHQ"     }
    allowed_value: { value: "CTRY" label: "Country" }
    allowed_value: { value: "OFC"  label: "Office"  }
    default_value: "RHQ"
  }

  dimension: dup_set_count_dimension  {
    type: string
    label_from_parameter:  dup_set_count_dimension_param
    sql:
      {% if dup_set_count_dimension_param._parameter_value == "'RHQ'" %}
        ${dup_grp_for_ref_rhq}
      {% elsif dup_set_count_dimension_param._parameter_value == "'CTRY'" %}
        ${dup_grp_for_ref_country}
      {% elsif dup_set_count_dimension_param._parameter_value == "'OFC'" %}
        ${dup_grp_for_ref_office}
      {% endif %};;
    drill_fields: [dup_grp_for_ref_country, dup_grp_for_ref_office]
  }

  dimension: dup_grp_idx_cd {
    #type: string
    type: number
    label: "Duplicate Set Index"
    sql: ${TABLE}.dup_grp_idx_cd ;;
    #sql: '<span style="color: red;">'|| ${TABLE}.dup_grp_idx_cd || '</span>'  ;;
    #html: <span style="color: red;"> {{rendered_value}} </span>  ;;
  }

  # Sales Process Landing Page ----- Start -------
  dimension: dup_grp_idx_cd1 {
    #type: string
    type: number
    label: "Duplicate Set Index1"
    sql: ${TABLE}.dup_grp_idx_cd ;;
    drill_fields:[dup_grp_idx_cd, cust_grp_id_lst, dup_grp_for_ref_rhq, dup_grp_pic_email, cust_grp_cnt, cust_grp_row_num, cust_grp_nm, cust_grp_id]
  }
  # Sales Process Landing Page ----- End -------

  dimension: dup_grp_idx_cd_even_odd {
    type: number
    label: "Duplicate Set Index - Even / Odd"
    sql: MOD( ${TABLE}.dup_grp_idx_cd , 2 );;
  }

  dimension: dup_grp_for_ref_office {
    type: string
    label: "Duplicate Set PIC Office"
    drill_fields: [dup_grp_for_ref_rhq, dup_grp_for_ref_country]
    sql: case when ${TABLE}.dup_grp_pic_email = 'crm.systemuser@one-line.com'  then null else ${TABLE}.dup_grp_for_ref_office end ;;
  }

  dimension: dup_grp_for_ref_country {
    type: string
    label: "Duplicate Set PIC Country"
    drill_fields: [dup_grp_for_ref_rhq, dup_grp_for_ref_office]
    sql: case when ${TABLE}.dup_grp_for_ref_country like  '%Unclaimed%' then null else ${TABLE}.dup_grp_for_ref_country end ;;
  }

  dimension: dup_grp_for_ref_rhq {
    type: string
    label: "Duplicate Set PIC RHQ"
    drill_fields: [dup_grp_for_ref_country, dup_grp_for_ref_office]
    sql: case when ${TABLE}.dup_grp_for_ref_rhq like 'Unclaimed%' then null
      else trim(substr( ${TABLE}.dup_grp_for_ref_rhq , instr( ${TABLE}.dup_grp_for_ref_rhq ,'-',-1)+1)) end ;;
  }

  dimension: dup_grp_pic_email {
    type: string
    label: "Duplicate Set PIC Email"
    sql: ${TABLE}.dup_grp_pic_email;;
  }

  dimension: dup_grp_pic_fullname {
    type: string
    label: "Duplicate Set PIC Fullname"
    sql: ${TABLE}.dup_grp_pic_fullname;;
  }

  dimension: cust_grp_cnt {
    type: number
    label: "No. of Cust Grps in this Set"
    sql: ${TABLE}.cust_grp_cnt ;;
  }

  dimension: cust_grp_cnt_active {
    type: number
    label: "No. of Active Cust Grps in this Set"
    sql: ${TABLE}.cust_grp_cnt_active ;;
  }

  dimension: no_longer_dup_on_excl_deleted {
    type: string
    label: "No longer duplicate on excluding inactived ones"
    sql: ${TABLE}.no_longer_dup_on_excl_deleted ;;
  }

  dimension: vld_retn_identified {
    type: string
    label: "[Validated and Retained] Identified"
    sql: ${TABLE}.vld_retn_identified ;;
  }

  dimension: cust_grp_id_lst {
    type: string
    label: "Grp Codes in this Set"
    sql: ${TABLE}.cust_grp_id_lst ;;
  }

  dimension: matching_condition {
    type: string
    label: "Matching Condition"
    sql: ${TABLE}.matching_condition ;;
  }

  dimension: cust_grp_row_num {
    type: number
    label: "G-codes rownum per grp"
    sql: ${TABLE}.cust_grp_row_num ;;
  }

  dimension: cust_grp_id {
    type: string
    label: "Cust Grp Code"
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: cust_grp_nm {
    type: string
    label: "Cust Grp Name"
    sql: ${TABLE}.cust_grp_nm ;;
  }

  dimension: cust_grp_id_n_nm {
    type: string
    label: "Cust Grp Code and Name"
    sql: ${cust_grp_id} ||' - '|| ${cust_grp_nm} ;;
  }

  dimension: cust_grp_active_flg {
    type: string
    label: "Cust Grp Active/Inactive"
    sql: ${TABLE}.cust_grp_active_flg ;;
  }

  dimension: cust_grp_vld_retn_flg {
    type: string
    label: "Cust Grp Valdated and Retained"
    sql: ${TABLE}.cust_grp_vld_retn_flg ;;
  }

  dimension: cust_grp_pic_email {
    type: string
    label: "Cust Grp PIC Email"
    sql: ${TABLE}.cust_grp_pic_email ;;
  }

  dimension: key_acct_tp_cd {
    type: string
    label: "Cust Grp Key Account Type"
    order_by_field: key_acct_tp_cd_order
    sql: ${TABLE}.key_acct_tp_cd ;;
  }

  dimension: key_acct_tp_cd_order {
    type: number
    label: "Cust Grp Key Account Type Sort Order"
    sql: CASE key_acct_tp_cd WHEN 'GKA' THEN 1 WHEN 'RKA' THEN 2 WHEN 'LKA' THEN 3  WHEN 'ONE Care' THEN 4 ELSE 5 END    ;;
  }

  dimension: inconsistent_acct_typ {
    type: string
    label: "Inconsistent Key Account Type"
    sql: ${TABLE}.inconsistent_acct_typ ;;
  }

  dimension: gam_usr_id {
    type: string
    label: "GAM Usr Id"
    sql: ${TABLE}.gam_usr_id ;;
  }

  dimension: gam_usr_email {
    type: string
    label: "GAM Email"
    sql: ${TABLE}.gam_usr_email ;;
  }

  dimension: gam_usr_fullname {
    type: string
    label: "GAM Fullname"
    sql: ${TABLE}.gam_usr_fullname ;;
  }

  dimension: gam_usr_office_code_number {
    type: string
    label: "GAM Office Code"
    sql: ${TABLE}.gam_usr_office_code_number ;;
  }

  dimension: gam_usr_country {
    type: string
    label: "GAM Office Country"
    sql: ${TABLE}.gam_usr_country ;;
  }

  dimension: gam_usr_rhq {
    type: string
    label: "GAM Office RHQ Full Name"
    sql: ${TABLE}.gam_usr_rhq ;;
  }

  dimension: gam_usr_rhq_short_nm {
    type: string
    label: "GAM Office RHQ"
    sql: case when ${gam_usr_rhq} is not null then trim(substr(${gam_usr_rhq}, instr(${gam_usr_rhq},'-',-1)+1)) else NULL end;;
  }

  dimension: for_ref_rhq {
    type: string
    label: "For-reference RHQ"
    sql: case when  coalesce(gam_usr_rhq,child_cust_top_child_rhq) like 'Unclaimed%' then null
      else trim(substr( coalesce(gam_usr_rhq,child_cust_top_child_rhq) , instr( coalesce(gam_usr_rhq,child_cust_top_child_rhq) ,'-',-1)+1)) end ;;
  }

  dimension: cust_grp_for_ref_rhq {
    type: string
    label: "Cust Grp for-ref RHQ"
    sql: case when ${TABLE}.cust_grp_for_ref_rhq like 'Unclaimed%' then null
      else trim(substr( ${TABLE}.cust_grp_for_ref_rhq , instr( ${TABLE}.cust_grp_for_ref_rhq ,'-',-1)+1)) end ;;
  }

  dimension: child_cust_cnt {
    type: number
    label: "No. of children in this cust grp"
    sql: ${TABLE}.child_cust_cnt ;;
  }

  dimension: child_cust_cnt_active {
    type: number
    label: "No. of acitve children in this cust grp"
    sql: ${TABLE}.child_cust_cnt_active ;;
  }

  dimension: child_cust_cnt_active_n_total {
    type: string
    label: "No. of acitve children vs total"
    sql: ${TABLE}.child_cust_cnt_active || '/' || ${TABLE}.child_cust_cnt ;;
  }

  dimension: child_row_num_per_cust_grp {
    type: number
    label: "Child cust row num per grp"
    sql: ${TABLE}.child_row_num_per_cust_grp ;;
  }

  dimension: child_cust_cd {
    type: string
    label: "Child Cust Code"
    sql: ${TABLE}.child_cust_cd ;;
  }

  dimension: child_cust_name {
    type: string
    label: "Child Cust Name"
    sql: ${TABLE}.child_cust_name ;;
  }

  dimension: child_cust_cd_n_name {
    type: string
    label: "Child Cust Code & Name"
    sql: ${child_cust_cd} || ' - ' || ${child_cust_name} ;;
  }

  dimension: child_cust_active_flg {
    type: string
    label: "Child Cust Active/Inactive"
    sql: ${TABLE}.child_cust_active_flg ;;
  }

  dimension: child_cust_to_be_cust_cd {
    type: string
    label: "Child Cust to be customer code"
    sql: ${TABLE}.child_cust_to_be_cust_cd ;;
  }

  dimension: child_cust_is_contract {
    type: string
    label: "Child Cust - Is Contract Customer"
    sql: ${TABLE}.child_cust_is_contract ;;
  }

  dimension: child_cust_poten_dup_flg {
    type: string
    label: "Child Cust - Potential Duplicate"
    sql: ${TABLE}.child_cust_poten_dup_flg ;;
  }

  dimension: child_cust_vld_rtn_flg {
    type: string
    label: "Child Cust - Validated and Retained"
    sql: ${TABLE}.child_cust_vld_rtn_flg ;;
  }

  dimension: child_cust_off_type {
    type: string
    label: "Child Cust - Office Type"
    sql: ${TABLE}.child_cust_off_type ;;
  }

  dimension: child_cust_off_type_order {
    type: number
    label: "Child Cust - Office Type Order"
    sql: ${TABLE}.child_cust_off_type_order ;;
  }

  dimension: child_cust_owner_id {
    type: string
    label: "Child Cust - Owner Id"
    sql: ${TABLE}.child_cust_owner_id ;;
  }

  dimension: child_cust_top_child_rhq {
    type: string
    label: "Child Cust - For-ref RHQ"
    sql: ${TABLE}.child_cust_top_child_rhq ;;
  }

  dimension: child_cust_teu {
    type: number
    label: "Child Cust - TEU"
    sql: ${TABLE}.child_cust_teu ;;
  }

  #set: detail {
  #  fields: [
  #    dup_grp_idx_cd,
  #    cust_grp_cnt,
  #    cust_grp_row_num,
  #    cust_grp_id,
  #    cust_grp_nm,
  #    cust_grp_active_flg,
  #    cust_grp_vld_retn_flg,
  #    key_acct_tp_cd,
  #    gam_usr_id,
  #    gam_usr_email,
  #    gam_usr_office_code_number,
  #    gam_usr_rhq,
  #    child_cust_cnt,
  #    child_row_num_per_cust_grp,
  #    child_cust_cd,
  #    child_cust_name,
  #    child_cust_active_flg,
  #    child_cust_to_be_cust_cd,
  #    child_cust_is_contract,
  #    child_cust_poten_dup_flg,
  #    child_cust_vld_rtn_flg,
  #    child_cust_off_type,
  #    child_cust_off_type_order,
  #    child_cust_owner_id,
  #    child_cust_teu
  #  ]
  #}
}

view: equipment_category {
  derived_table: {
    sql:
      SELECT '20ST'  as equipment_type_abbreviation, 'D2' as equipment_type_size, 'Dry Van' as equipment_category
      UNION ALL
      SELECT '20HC'  as equipment_type_abbreviation, 'D3' as equipment_type_size, 'Dry Van' as equipment_category
      UNION ALL
      SELECT '40ST'  as equipment_type_abbreviation, 'D4' as equipment_type_size, 'Dry Van' as equipment_category
      UNION ALL
      SELECT '40HC'  as equipment_type_abbreviation, 'D5' as equipment_type_size, 'Dry Van' as equipment_category
      UNION ALL
      SELECT '45HC'  as equipment_type_abbreviation, 'D7' as equipment_type_size, 'Dry Van' as equipment_category
      UNION ALL
      SELECT '20RF-RAD'  as equipment_type_abbreviation, 'R2-DRY' as equipment_type_size, 'Dry Van' as equipment_category
      UNION ALL
      SELECT '40HR-RAD'  as equipment_type_abbreviation, 'R5-DRY' as equipment_type_size, 'Dry Van' as equipment_category
      UNION ALL
      SELECT '45HR-RAD'  as equipment_type_abbreviation, 'R7-DRY' as equipment_type_size, 'Dry Van' as equipment_category
      UNION ALL
      SELECT 'LIVE FISH-RAD'  as equipment_type_abbreviation, 'R8-DRY' as equipment_type_size, 'Dry Van' as equipment_category
      UNION ALL
      SELECT '20RF'  as equipment_type_abbreviation, 'R2' as equipment_type_size, 'Reefer' as equipment_category
      UNION ALL
      SELECT '40HR'  as equipment_type_abbreviation, 'R5' as equipment_type_size, 'Reefer' as equipment_category
      UNION ALL
      SELECT '45HR'  as equipment_type_abbreviation, 'R7' as equipment_type_size, 'Reefer' as equipment_category
      UNION ALL
      SELECT 'LIVE FISH'  as equipment_type_abbreviation, 'R8' as equipment_type_size, 'Reefer' as equipment_category
      UNION ALL
      SELECT 'BULK'  as equipment_type_abbreviation, 'B4' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '20FR'  as equipment_type_abbreviation, 'F2' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '40FR'  as equipment_type_abbreviation, 'F4' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '40FT'  as equipment_type_abbreviation, 'F5' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '20OT'  as equipment_type_abbreviation, 'O2' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '40OT'  as equipment_type_abbreviation, 'O4' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '40HO'  as equipment_type_abbreviation, 'O5' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '40HC PALLET WIDE'  as equipment_type_abbreviation, 'P5' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '45HC PALLET WIDE'  as equipment_type_abbreviation, 'P7' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT 'DEAD SPACE 20FT'  as equipment_type_abbreviation, 'Q2' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT 'DEAD SPACE 40FT'  as equipment_type_abbreviation, 'Q4' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT 'DEAD SPACE 45FT'  as equipment_type_abbreviation, 'Q5' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '20TK'  as equipment_type_abbreviation, 'T2' as equipment_type_size, 'Special' as equipment_category
      UNION ALL
      SELECT '40TK'  as equipment_type_abbreviation, 'T4' as equipment_type_size, 'Special' as equipment_category
    ;;
  }


  dimension: equipment_type_size {
    primary_key: yes
    view_label: "B/L Information"
    label: "Container Type Size Code"
    type: string
    sql: ${TABLE}.equipment_type_size ;;
    hidden: yes
  }

  dimension: equipment_type_abbreviation {
    view_label: "B/L Information"
    label: "Container Type Abbreviation"
    type: string
    sql: ${TABLE}.equipment_type_abbreviation ;;
  }

  dimension: equipment_category {
    view_label: "B/L Information"
    label: "Container Category"
    type: string
    sql: ${TABLE}.equipment_category ;;
  }
}

view: gam_mapping {
  derived_table: {
    sql:
    SELECT customer_group       as customer_grp_oneforce_id,
           CUST_GRP_ID          as customer_grp_id,
           Sales_Person         as gam_usr_id,
    FROM (
      SELECT
      s.customer_group,
      g.CUST_GRP_ID ,
      s.Sales_Person,
      u.Username,
      row_number() OVER (PARTITION BY s.customer_group ORDER BY s.LastModifiedDate DESC, s.CreatedDate DESC) as rn
      FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` s
      INNER JOIN `ONEFORCE.OF_USER`           u on (s.Sales_Person   = u.ONEForce_ID)
      INNER JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (s.customer_group = g.ONEForce_ID)
      WHERE s.team_role like 'Global Account Manager (GAM)' and s.inactive = 'false'
    ) WHERE rn = 1
     ;;

    persist_for: "1 hour"
  }

  dimension: customer_grp_oneforce_id {
    type: string
    sql: ${TABLE}.customer_grp_oneforce_id ;;
  }

  dimension: customer_grp_id {
    type: string
    sql: ${TABLE}.customer_grp_id ;;
  }

  dimension: gam_usr_id {
    type: string
    sql: ${TABLE}.gam_usr_id ;;
  }

  set: detail {
    fields: [customer_grp_oneforce_id, customer_grp_id, gam_usr_id]
  }
}

view: global_cva_completion {
  derived_table: {

    sql:
          select v.cust_cd, v.name as customer_name,
                 case when g.global_customer_type = "N" then "NVO"
                      when g.global_customer_type = "B" then "BCO"
                      else g.global_customer_type end as nvo_bco_flag,
                gam.fullname as gam_name, g.cust_grp_nm, g.cust_grp_id, aa.*
          from ${v_customer_opus_n_prospect.SQL_TABLE_NAME}  as v
          inner join ${of_customer_group.SQL_TABLE_NAME} as g on v.cust_grp_id = g.cust_grp_id
          left join (select team.customer_group, team.team_role, user.firstname||' '||user.lastname fullname,
                      Row_Number() Over (Partition By team.customer_group Order By team.oneforce_id Desc) as rn
                     from  ${of_sales_team_member.SQL_TABLE_NAME} as team
                     inner join ${of_user.SQL_TABLE_NAME} user on team.sales_person = user.oneforce_id and team.inactive = 'false'
                     where upper(team_role) like 'GLOBAL ACCOUNT MANAGER (GAM)') as gam on gam.customer_group = g.oneforce_id and gam.rn = 1
          left join ( select 'QualCVA' record_type, x.*, null rn
                      from ${global_cva_target.SQL_TABLE_NAME} as x
                      where  ( timestamp(x.end_month||' 23:59:59') >=  coalesce({% date_start date_filter %} , current_timestamp()) and timestamp(x.start_month) <=  coalesce({% date_end date_filter %},current_timestamp()) )
                      union all
                      select 'LastCVA' record_type, y.* , Row_Number() Over (Partition By cust_cd2 Order By end_month Desc) as rn
                      from ${global_cva_target.SQL_TABLE_NAME} y
                      where NOT ( timestamp(y.end_month||' 23:59:59') >=  coalesce({% date_start date_filter %} , current_timestamp())  and timestamp(y.start_month) <=  coalesce({% date_end date_filter %} , current_timestamp())  )
                      and not exists (select 1
                                      from ${global_cva_target.SQL_TABLE_NAME} z
                                      where y.cust_cd2 = z.cust_cd2
                                      and ( timestamp(z.end_month||' 23:59:59') >=  coalesce({% date_start date_filter %} , current_timestamp())  and timestamp(z.start_month) <=  coalesce({% date_end date_filter %} , current_timestamp()) )
                    )) as aa
                    on v.cust_cd = aa.cust_cd2 and 1 = (case when aa.record_type = 'QualCVA' then 1 else aa.rn end)
          where v.cust_grp_hrchy_cd = 'G' and g.delt_flg = 'N' and v.delt_flg = 'N' and v.cust_cd is not null
           ;;


  }

  filter: date_filter {
    type: date
    default_value: "today"
    convert_tz: yes
  }

  parameter: show_percent {
    allowed_value: {
      label: "Yes"
      value: "Yes"}
    allowed_value: {
      label: "No"
      value: "No"
    }
    default_value: "No"
  }

  dimension: cust_cd {
    type: string
    sql: ${TABLE}.cust_cd ;;
  }

  dimension: cust_grp_hrchy_cd {
    type: string
    sql: ${TABLE}.cust_grp_hrchy_cd ;;
  }

  dimension: cust_grp_hrchy_cd_dscr {
    type:  string
    label: "Office Type"
    sql:  ${global_cva.cust_grp_hrchy_cd_dscr} ;;
  }

  dimension: customer_target {
    type: string
    sql: ${TABLE}.customer_target ;;
    primary_key:yes
  }

  dimension: record_type {
    type: string
    sql: ${TABLE}.record_type ;;
  }

  dimension: syear {
    type: string
    sql: ${TABLE}.syear ;;
  }

  dimension: cva_name {
    type: string
    sql: ${TABLE}.cva_name ;;
  }

  dimension: customer_name {
    type: string
    sql: ${TABLE}.customer_name ;;
  }

  dimension: group_code {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: group_name {
    type: string
    sql: ${TABLE}.cust_grp_nm ;;
  }

  dimension: nvo_bco_flag {
    type: string
    sql: ${TABLE}.nvo_bco_flag ;;
  }

  dimension: gam_name {
    type: string
    description: "from KA mapping"
    sql: ${TABLE}.gam_name ;;
  }

  dimension: ram_name {
    type: string
    description: "Sales Person in CVA"
    sql: ${TABLE}.cva_ram ;;
  }

  dimension: service_scope_group {
    type: string
    sql: ${TABLE}.service_scope_group ;;
  }

  dimension: service_scope {
    type: string
    sql: ${TABLE}.service_scope ;;
  }

  dimension: direction {
    type: string
    sql: ${TABLE}.direction ;;
  }

  dimension: origin {
    type: string
    sql: ${TABLE}.origin ;;
  }

  dimension: origin_country {
    type: string
    sql: ${TABLE}.origin_country ;;
  }

  dimension: destination {
    type: string
    sql: ${TABLE}.destination ;;
  }

  dimension: sc_rfa_no {
    type: string
    sql: ${TABLE}.sc_rfa_no ;;
  }

  dimension: ctrt_period_tp_cd {
    type: string
    sql: ${TABLE}.ctrt_period_tp_cd ;;
  }

  dimension: service_lane {
    type: string
    sql: ${TABLE}.service_lane ;;
  }

  dimension: cva_target {
    type: number
    sql: ${TABLE}.cva_target ;;
    value_format_name: decimal_0
  }

  dimension: start_month {
    type: date
    datatype: date
    sql: ${TABLE}.start_month ;;
  }

  dimension: end_month {
    type: date
    datatype: date
    sql: ${TABLE}.end_month ;;
  }

  dimension: latest_start_month {
    type: date
    datatype: date
    sql: CASE WHEN ${record_type} = 'QualCVA' THEN NULL ELSE ${TABLE}.start_month END ;;
  }

  dimension: latest_end_month {
    type: date
    datatype: date
    sql: CASE WHEN ${record_type} = 'QualCVA' THEN NULL ELSE ${TABLE}.end_month END;;
  }

  measure: count {
    type: count
    drill_fields: [detail_w*]
    hidden: yes
  }

  measure: cva_count_w {
    type: count_distinct
    sql: ${customer_target} ;;
    drill_fields: [detail_w*]
  }

  measure: cva_count_wo {
    type: count_distinct
    sql: ${customer_target} ;;
    drill_fields: [detail_wo*]
  }

  measure: with_CVA_count {
    label: "Completed Count"
    type: count_distinct
    sql: ${cust_cd};;
    drill_fields: [cust_detail_w*]
    filters: [record_type: "QualCVA"]
    link: {
      label: "By Customer"
      url: "{{ with_CVA_count._link }}"
    }
    link: {
      label: "By CVA"
      url: "{{ cva_count_w._link }}"
    }
  }

  measure: with_CVA_count2 {
    label: "Completion"
    type: count_distinct
    sql: ${cust_cd};;
    drill_fields: [cust_detail_w*]
    filters: [record_type: "QualCVA"]
    link: {
      label: "By Customer"
      url: "{{ with_CVA_count._link }}"
    }
    link: {
      label: "By CVA"
      url: "{{ cva_count_w._link }}"
    }
  }

  measure: without_CVA_count {
    label: "Not Completed Count"
    type: count_distinct
    sql: ${cust_cd};;
    drill_fields: [cust_detail_wo*]
    filters: [record_type: "-QualCVA", cust_cd: "-null"]
    link: {
      label: "By Customer"
      url: "{{ without_CVA_count._link }}"
    }
    link: {
      label: "By Volume Agreement"
      url: "{{ cva_count_wo._link }}"
    }
  }
  measure: without_CVA_count2 {
    label: "Outstanding"
    type: count_distinct
    sql: ${cust_cd};;
    drill_fields: [cust_detail_wo*]
    filters: [record_type: "-QualCVA", cust_cd: "-null"]
    link: {
      label: "By Customer"
      url: "{{ without_CVA_count._link }}"
    }
    link: {
      label: "By Volume Agreement"
      url: "{{ cva_count_wo._link }}"
    }
  }


  measure: with_CVA_perc {
    label: "Completed Percent"
    type: number
    sql: ${with_CVA_count}/NULLIF((${with_CVA_count}+${without_CVA_count}),0);;
    drill_fields: [cust_detail_w*]
    value_format_name: percent_0
  }

  measure: without_CVA_perc {
    label: "Not Completed Percent"
    type: number
    sql: ${without_CVA_count}/NULLIF((${with_CVA_count}+${without_CVA_count}),0);;
    drill_fields: [cust_detail_wo*]
    value_format_name: percent_0
  }

  measure: with_CVA_perc1 {
    label: "Fullfill%"
    type: number
    sql: ${with_CVA_count}/NULLIF((${with_CVA_count}+${without_CVA_count}),0);;
    drill_fields: [cust_detail_w*]
    value_format_name: percent_0
  }


  measure: Total_Teu {
    type: sum
    sql: ${cva_target} ;;
    value_format_name: decimal_0
  }

  dimension: cva_exp_date_diff_raw {
    hidden: yes
    type: number
    #sql: date_diff(timestamp(${end_month}),timestamp({% date_end date_filter %}),Day) ;;
    sql: date_diff(timestamp(${end_month}),timestamp(current_date()||' 23:59:59'),Day) ;;
  }

  dimension: cva_start_date_diff_raw {
    hidden: yes
    type: number
    #sql: date_diff(timestamp(${end_month}),timestamp({% date_end date_filter %}),Day) ;;
    sql: date_diff(timestamp(${start_month}),timestamp(current_date()||' 23:59:59'),Day) ;;
  }

  dimension: ctrt_exp_diff {
    type: string
    sql:
    CASE WHEN ${record_type} = 'QualCVA' THEN
      CASE
      WHEN ${cva_exp_date_diff_raw} IS NULL THEN 'Error'
      WHEN ${cva_exp_date_diff_raw} < 0  THEN 'Expired'
      WHEN ${cva_exp_date_diff_raw} = 0 THEN 'Today'
      WHEN ${cva_start_date_diff_raw} > 0  THEN 'Future'
      WHEN ${cva_exp_date_diff_raw} > 0  AND ${cva_exp_date_diff_raw} <= 30 THEN 'Within 1-30 days'
      WHEN ${cva_exp_date_diff_raw} >= 31 AND ${cva_exp_date_diff_raw} <= 60 THEN 'Within 31-60 days'
      WHEN ${cva_exp_date_diff_raw} >= 61 AND ${cva_exp_date_diff_raw} <= 90 THEN 'Within 61-90 days'
      WHEN ${cva_exp_date_diff_raw} >= 91 AND ${cva_start_date_diff_raw} <= 0 THEN 'more than 90 days'
      END
    ELSE
      'Not Qualified'
    END
    ;;
  }

  dimension: ctrt_exp_mtrx {
    type: string
    sql:
    CASE WHEN ${record_type} = 'QualCVA' THEN
      CASE
      WHEN ${cva_exp_date_diff_raw} IS NULL THEN 'Error'
      WHEN ${cva_exp_date_diff_raw} < 0  THEN 'Expired'
      WHEN ${cva_exp_date_diff_raw} = 0 THEN 'Today'
      WHEN ${cva_start_date_diff_raw} > 0 THEN 'Future'
      WHEN ${cva_exp_date_diff_raw} > 0  AND ${cva_exp_date_diff_raw} <= 30 THEN 'Within 1-30 days'
      WHEN ${cva_exp_date_diff_raw} >= 31 AND ${cva_exp_date_diff_raw} <= 60 THEN 'Within 31-60 days'
      WHEN ${cva_exp_date_diff_raw} >= 61 AND ${cva_exp_date_diff_raw} <= 90 THEN 'Within 61-90 days'
      WHEN ${cva_exp_date_diff_raw} >= 91 THEN 'more than 90 days'
      END
    ELSE
      CASE
      WHEN date_diff(timestamp(${end_month}),timestamp(current_date()||' 23:59:59'),Day) <= 0 THEN 'Expired'
      WHEN date_diff(timestamp(${start_month}),timestamp(current_date()||' 23:59:59'),Day) > 0 THEN 'Future'
      ELSE 'N/A'
      END
    END
    ;;
  }

  # Sales Process Landing Page ----- Start -------

  measure: with_CVA_count1 {
    label: "Completed Count"
    type: count_distinct
    sql: ${cust_cd};;
    drill_fields: [cust_detail_w*]
    filters: [record_type: "QualCVA"]

    link: {
      label: "BCO-NVO"
      url: "{{bco_comp._link}}"
    }
    link: {
      label: "Completion by GAM"
      url: "{{ bco_nvo_w._link }}"
    }

    link: {
      label: "Customer & Volume Agreement Details"
      url: "{{cust_vol_w._link}}"

    }
  }

  measure: bco_nvo_w {
    type: count_distinct
    sql: ${nvo_bco_flag} ;;
    drill_fields: [of_user.full_name1,with_CVA_perc,with_CVA_count,without_CVA_count]
  }

  measure: cust_vol_w {
    type: count_distinct
    sql: ${cust_cd} ;;
    drill_fields: [of_customer_group.cust_grp_and_name,of_customer_group.key_acct_tp_cd,start_month,end_month,cva_target]
  }

  measure: bco_comp {
    type: count_distinct
    sql: ${cust_cd} ;;
    filters: [nvo_bco_flag: "BCO, NVO"]
    drill_fields: [nvo_bco_flag,with_CVA_count]
  }

  measure: bco_outs {
    type: count_distinct
    sql: ${cust_cd} ;;
    filters: [nvo_bco_flag: "BCO, NVO"]
    drill_fields: [nvo_bco_flag,without_CVA_count]
  }

  measure: without_CVA_count1 {
    label: "Not Completed Count"
    type: count_distinct
    sql: ${cust_cd};;
    drill_fields: [cust_detail_wo*]
    filters: [record_type: "-QualCVA", cust_cd: "-null"]
    link: {
      label: "BCO-NVO"
      url: "{{bco_outs._link}}"
    }

    link: {
      label: "Completion by GAM"
      url: "{{ bco_nvo_w._link }}"
    }

    link: {
      label: "Customer & Volume Agreement Details"
      url: "{{ cust_vol_w._link }}"
    }
  }

  # Sales Process Landing Page ----- End -------

  set: detail_w {
    fields: [
      group_code,
      group_name,
      cust_cd,
      customer_name,
      nvo_bco_flag,
      cust_grp_hrchy_cd_dscr,
      gam_name,
      syear,
      cva_name,
      start_month,
      end_month,
      service_scope_group,
      service_scope,
      direction,
      origin_country,
      origin,
      destination,
      cva_target,
      customer_target
    ]
  }

  set: detail_wo {
    fields: [
      group_code,
      group_name,
      cust_cd,
      customer_name,
      nvo_bco_flag,
      cust_grp_hrchy_cd_dscr,
      gam_name,
      syear,
      cva_name,
      latest_start_month,
      latest_end_month,
      sc_rfa_no,
      ctrt_period_tp_cd,
      service_scope_group,
      service_scope,
      service_lane,
      direction,
      origin,
      origin_country,
      destination,
      cva_target,
      customer_target
    ]
  }

  set: cust_detail_w {
    fields: [
      group_code,
      group_name,
      cust_cd,
      customer_name,
      nvo_bco_flag,
      cust_grp_hrchy_cd_dscr,
      gam_name
    ]
  }

  set: cust_detail_wo {
    fields: [
      group_code,
      group_name,
      cust_cd,
      customer_name,
      nvo_bco_flag,
      cust_grp_hrchy_cd_dscr,
      gam_name,
      latest_start_month,
      latest_end_month,
      sc_rfa_no,
      ctrt_period_tp_cd
    ]
  }
}

view: global_cva_completion_2_1 {
  derived_table: {
    sql:
        SELECT
         mth_master.calendar_year
        ,mth_master.fiscal_year_new_fmt
        ,inview.month
        ,inview.cust_grp_typ
        ,inview.cust_grp_key_acct_tp_cd
        ,inview.cust_grp_id
        ,inview.cust_cd
        ,inview.cust_grp_id_n_nm
        ,inview.cust_cd_n_nm
        ,inview.sc_rfa_no
        -- Service scoupe group info
        ,inview.trade_grp
        ,inview.service_scope_group_code
        ,inview.gka_nvo_svc_scp_cd
        ,inview.dominant_flag
        -- contract info
        ,inview.ctrt_rhq_code
        ,inview.ctrt_country_cgm_logic
        ,inview.ctrt_ofc_code
        ,inview.scp_ofc_cd
        ,inview.ckam_sales_person
        ,inview. ctrt_eff_dt_dtl
        ,inview. ctrt_exp_dt_dtl
        ,inview.ctrt_period_typ
        -- sc fra status
        {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
          ,inview.scrfa_done_vs_missing
        {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
          ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
           THEN
              inview.scrfa_done_vs_missing_4_gkanvo
           ELSE
              inview.scrfa_done_vs_missing
           END as scrfa_done_vs_missing
        {% endif %}
        -- target
        ,inview.target_for_mth
        -- groupped status : overall (ok)
        {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
          ,inview.cust_grp_grp_sts
          ,inview.cust_cd_grp_sts
        {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
          ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
           THEN
              inview.cust_grp_grp_sts_4_gkanvo
           ELSE
              inview.cust_grp_grp_sts
           END as cust_grp_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_grp_sts_4_gkanvo
      ELSE
      inview.cust_cd_grp_sts
      END as cust_cd_grp_sts
      {% endif %}
      ------------- groupped status : key account (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,inview.cust_grp_n_trd_grp_sts
      ,inview.cust_cd_n_trd_grp_sts
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_grp_n_trd_grp_sts_4_gkanvo
      ELSE
      inview.cust_grp_n_trd_grp_sts
      END as cust_grp_n_trd_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_n_trd_grp_sts_4_gkanvo
      ELSE
      inview.cust_cd_n_trd_grp_sts
      END as cust_cd_n_trd_grp_sts
      {% endif %}
      ------------- groupped status : Service Scope Grp (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,inview.cust_grp_n_ssg_grp_sts
      ,inview.cust_cd_n_ssg_grp_sts
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_grp_n_ssg_grp_sts_4_gkanvo
      ELSE
      inview.cust_grp_n_ssg_grp_sts
      END as cust_grp_n_ssg_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_n_ssg_grp_sts_4_gkanvo
      ELSE
      inview.cust_cd_n_ssg_grp_sts
      END as cust_cd_n_ssg_grp_sts
      {% endif %}
      ------------- groupped status : Dom Flag (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,inview.cust_grp_n_dom_grp_sts
      ,inview.cust_cd_n_dom_grp_sts
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_grp_n_dom_grp_sts_4_gkanvo
      ELSE
      inview.cust_grp_n_dom_grp_sts
      END as cust_grp_n_dom_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_n_dom_grp_sts_4_gkanvo
      ELSE
      inview.cust_cd_n_dom_grp_sts
      END as cust_cd_n_dom_grp_sts
      {% endif %}
      ------------- groupped status : Contract RHQ (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,inview.cust_grp_n_ctrtrhq_grp_sts
      ,inview.cust_cd_n_ctrtrhq_grp_sts
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_grp_n_ctrtrhq_grp_sts_4_gkanvo
      ELSE
      inview.cust_grp_n_ctrtrhq_grp_sts
      END as cust_grp_n_ctrtrhq_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_n_ctrtrhq_grp_sts_4_gkanvo
      ELSE
      inview.cust_cd_n_ctrtrhq_grp_sts
      END as cust_cd_n_ctrtrhq_grp_sts
      {% endif %}
      ------------- groupped status : Contract Country (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,inview.cust_grp_n_ctrtctry_grp_sts
      ,inview.cust_cd_n_ctrtctry_grp_sts
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_grp_n_ctrtctry_grp_sts_4_gkanvo
      ELSE
      inview.cust_grp_n_ctrtctry_grp_sts
      END as cust_grp_n_ctrtctry_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_n_ctrtctry_grp_sts_4_gkanvo
      ELSE
      inview.cust_cd_n_ctrtctry_grp_sts
      END as cust_cd_n_ctrtctry_grp_sts
      {% endif %}
      ------------- groupped status : Contract Office (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,inview.cust_grp_n_ctrtofc_grp_sts
      ,inview.cust_cd_n_ctrtofc_grp_sts
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_grp_n_ctrtofc_grp_sts_4_gkanvo
      ELSE
      inview.cust_grp_n_ctrtofc_grp_sts
      END as cust_grp_n_ctrtofc_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_n_ctrtofc_grp_sts_4_gkanvo
      ELSE
      inview.cust_cd_n_ctrtofc_grp_sts
      END as cust_cd_n_ctrtofc_grp_sts
      {% endif %}
      ------------- groupped status : CKAM (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,inview.cust_grp_n_ckam_grp_sts
      ,inview.cust_cd_n_ckam_grp_sts
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_grp_n_ckam_grp_sts_4_gkanvo
      ELSE
      inview.cust_grp_n_ckam_grp_sts
      END as cust_grp_n_ckam_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_n_ckam_grp_sts_4_gkanvo
      ELSE
      inview.cust_cd_n_ckam_grp_sts
      END as cust_cd_n_ckam_grp_sts
      {% endif %}
      ------------- groupped status : Contract Period (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,inview.cust_grp_n_period_grp_sts
      ,inview.cust_cd_n_period_grp_sts
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_grp_n_period_grp_sts_4_gkanvo
      ELSE
      inview.cust_grp_n_period_grp_sts
      END as cust_grp_n_period_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_n_period_grp_sts_4_gkanvo
      ELSE
      inview.cust_cd_n_period_grp_sts
      END as cust_cd_n_period_grp_sts
      {% endif %}
      ------------- groupped status : Service Scope Code (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CAST(NULL as string) as cust_grp_n_sscp_grp_sts
      ,CAST(NULL as string) as cust_cd_n_sscp_grp_sts
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_grp_n_sscp_grp_sts_4_gkanvo
      ELSE
      CAST(NULL as string)
      END as cust_grp_n_sscp_grp_sts

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      inview.cust_cd_n_sscp_grp_sts_4_gkanvo
      ELSE
      CAST(NULL as string)
      END as cust_cd_n_sscp_grp_sts
      {% endif %}
      -------------------------------------------------
      -- Cross Month Status -------------------------
      -------------------------------------------------
      ------- Cross Month Status: Overall (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CASE MAX(inview.cust_grp_grp_sts ) OVER(partition by cust_grp_id)||'-'||
      MIN(inview.cust_grp_grp_sts ) OVER(partition by cust_grp_id)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_grp_sts_multimth

      ,CASE MAX(inview.cust_cd_grp_sts ) OVER(partition by cust_cd)||'-'||
      MIN(inview.cust_cd_grp_sts ) OVER(partition by cust_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_cd_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      CASE MAX(inview.cust_grp_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id)||'-'||
      MIN(inview.cust_grp_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      CASE MAX(inview.cust_grp_grp_sts ) OVER(partition by cust_grp_id)||'-'||
      MIN(inview.cust_grp_grp_sts ) OVER(partition by cust_grp_id)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      CASE MAX(inview.cust_cd_grp_sts_4_gkanvo ) OVER(partition by cust_cd)||'-'||
      MIN(inview.cust_cd_grp_sts_4_gkanvo ) OVER(partition by cust_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      CASE MAX(inview.cust_cd_grp_sts ) OVER(partition by cust_cd)||'-'||
      MIN(inview.cust_cd_grp_sts ) OVER(partition by cust_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_cd_sts_multimth
      {% endif %}
      ------------- Cross Month Status: Trade Grp (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CASE MAX(inview.cust_grp_n_trd_grp_sts ) OVER(partition by cust_grp_id, trade_grp)||'-'||
      MIN(inview.cust_grp_n_trd_grp_sts ) OVER(partition by cust_grp_id, trade_grp)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_grp_n_trd_grp_sts_multimth

      ,CASE MAX(inview.cust_cd_n_trd_grp_sts ) OVER(partition by cust_cd, trade_grp)||'-'||
      MIN(inview.cust_cd_n_trd_grp_sts ) OVER(partition by cust_cd, trade_grp)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_cd_n_trd_grp_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      CASE MAX(inview.cust_grp_n_trd_grp_sts_4_gkanvo  ) OVER(partition by cust_grp_id, trade_grp)||'-'||
      MIN(inview.cust_grp_n_trd_grp_sts_4_gkanvo  ) OVER(partition by cust_grp_id, trade_grp)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      CASE MAX(inview.cust_grp_n_trd_grp_sts ) OVER(partition by cust_grp_id, trade_grp)||'-'||
      MIN(inview.cust_grp_n_trd_grp_sts ) OVER(partition by cust_grp_id, trade_grp)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END

      END as cust_grp_n_trd_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      CASE MAX(inview.cust_cd_n_trd_grp_sts_4_gkanvo ) OVER(partition by cust_cd, trade_grp)||'-'||
      MIN(inview.cust_cd_n_trd_grp_sts_4_gkanvo ) OVER(partition by cust_cd, trade_grp)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      CASE MAX(inview.cust_cd_n_trd_grp_sts ) OVER(partition by cust_cd, trade_grp)||'-'||
      MIN(inview.cust_cd_n_trd_grp_sts ) OVER(partition by cust_cd, trade_grp)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_cd_n_trd_grp_sts_multimth
      {% endif %}
      ------------- Cross Month Status: Service Scp Grp (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CASE MAX(inview.cust_grp_n_ssg_grp_sts ) OVER(partition by cust_grp_id, service_scope_group_code)||'-'||
      MIN(inview.cust_grp_n_ssg_grp_sts ) OVER(partition by cust_grp_id, service_scope_group_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_grp_n_ssg_grp_sts_multimth

      ,CASE MAX(inview.cust_cd_n_ssg_grp_sts ) OVER(partition by cust_cd, service_scope_group_code)||'-'||
      MIN(inview.cust_cd_n_ssg_grp_sts ) OVER(partition by cust_cd, service_scope_group_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_cd_n_ssg_grp_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_grp_n_ssg_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, service_scope_group_code)||'-'||
      MIN(inview.cust_grp_n_ssg_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, service_scope_group_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_grp_n_ssg_grp_sts ) OVER(partition by cust_grp_id, service_scope_group_code)||'-'||
      MIN(inview.cust_grp_n_ssg_grp_sts ) OVER(partition by cust_grp_id, service_scope_group_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_grp_n_ssg_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_cd_n_ssg_grp_sts_4_gkanvo ) OVER(partition by cust_cd, service_scope_group_code)||'-'||
      MIN(inview.cust_cd_n_ssg_grp_sts_4_gkanvo ) OVER(partition by cust_cd, service_scope_group_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_cd_n_ssg_grp_sts ) OVER(partition by cust_cd, service_scope_group_code)||'-'||
      MIN(inview.cust_cd_n_ssg_grp_sts ) OVER(partition by cust_cd, service_scope_group_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_cd_n_ssg_grp_sts_multimth
      {% endif %}
      ------------- Cross Month Status: Dom Flag (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CASE MAX(inview.cust_grp_n_dom_grp_sts ) OVER(partition by cust_grp_id, dominant_flag)||'-'||
      MIN(inview.cust_grp_n_dom_grp_sts ) OVER(partition by cust_grp_id, dominant_flag)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_grp_n_dom_grp_sts_multimth
      ,CASE MAX(inview.cust_cd_n_dom_grp_sts ) OVER(partition by cust_cd, dominant_flag)||'-'||
      MIN(inview.cust_cd_n_dom_grp_sts ) OVER(partition by cust_cd, dominant_flag)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_cd_n_dom_grp_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_grp_n_dom_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, dominant_flag)||'-'||
      MIN(inview.cust_grp_n_dom_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, dominant_flag)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_grp_n_dom_grp_sts ) OVER(partition by cust_grp_id, dominant_flag)||'-'||
      MIN(inview.cust_grp_n_dom_grp_sts ) OVER(partition by cust_grp_id, dominant_flag)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_grp_n_dom_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_cd_n_dom_grp_sts_4_gkanvo ) OVER(partition by cust_cd, dominant_flag)||'-'||
      MIN(inview.cust_cd_n_dom_grp_sts_4_gkanvo ) OVER(partition by cust_cd, dominant_flag)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_cd_n_dom_grp_sts ) OVER(partition by cust_cd, dominant_flag)||'-'||
      MIN(inview.cust_cd_n_dom_grp_sts ) OVER(partition by cust_cd, dominant_flag)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_cd_n_dom_grp_sts_multimth
      {% endif %}
      ------------- Cross Month Status: Contract RHQ (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CASE MAX(inview.cust_grp_n_ctrtrhq_grp_sts ) OVER(partition by cust_grp_id, ctrt_rhq_code)||'-'||
      MIN(inview.cust_grp_n_ctrtrhq_grp_sts ) OVER(partition by cust_grp_id, ctrt_rhq_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_grp_n_ctrtrhq_grp_sts_multimth
      ,CASE MAX(inview.cust_cd_n_ctrtrhq_grp_sts ) OVER(partition by cust_cd, ctrt_rhq_code)||'-'||
      MIN(inview.cust_cd_n_ctrtrhq_grp_sts ) OVER(partition by cust_cd, ctrt_rhq_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_cd_n_ctrtrhq_grp_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_grp_n_ctrtrhq_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, ctrt_rhq_code)||'-'||
      MIN(inview.cust_grp_n_ctrtrhq_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, ctrt_rhq_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_grp_n_ctrtrhq_grp_sts ) OVER(partition by cust_grp_id, ctrt_rhq_code)||'-'||
      MIN(inview.cust_grp_n_ctrtrhq_grp_sts ) OVER(partition by cust_grp_id, ctrt_rhq_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_grp_n_ctrtrhq_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_cd_n_ctrtrhq_grp_sts_4_gkanvo ) OVER(partition by cust_cd, ctrt_rhq_code)||'-'||
      MIN(inview.cust_cd_n_ctrtrhq_grp_sts_4_gkanvo ) OVER(partition by cust_cd, ctrt_rhq_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_cd_n_ctrtrhq_grp_sts ) OVER(partition by cust_cd, ctrt_rhq_code)||'-'||
      MIN(inview.cust_cd_n_ctrtrhq_grp_sts ) OVER(partition by cust_cd, ctrt_rhq_code)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_cd_n_ctrtrhq_grp_sts_multimth
      {% endif %}
      ------------- Cross Month Status: Contract Country (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CASE MAX(inview.cust_grp_n_ctrtctry_grp_sts ) OVER(partition by cust_grp_id, ctrt_country_cgm_logic)||'-'||
      MIN(inview.cust_grp_n_ctrtctry_grp_sts ) OVER(partition by cust_grp_id, ctrt_country_cgm_logic)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_grp_n_ctrtctry_grp_sts_multimth
      ,CASE MAX(inview.cust_cd_n_ctrtctry_grp_sts ) OVER(partition by cust_cd, ctrt_country_cgm_logic)||'-'||
      MIN(inview.cust_cd_n_ctrtctry_grp_sts ) OVER(partition by cust_cd, ctrt_country_cgm_logic)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_cd_n_ctrtctry_grp_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_grp_n_ctrtctry_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, ctrt_country_cgm_logic)||'-'||
      MIN(inview.cust_grp_n_ctrtctry_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, ctrt_country_cgm_logic)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_grp_n_ctrtctry_grp_sts ) OVER(partition by cust_grp_id, ctrt_country_cgm_logic)||'-'||
      MIN(inview.cust_grp_n_ctrtctry_grp_sts ) OVER(partition by cust_grp_id, ctrt_country_cgm_logic)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_grp_n_ctrtctry_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_cd_n_ctrtctry_grp_sts_4_gkanvo ) OVER(partition by cust_cd, ctrt_country_cgm_logic)||'-'||
      MIN(inview.cust_cd_n_ctrtctry_grp_sts_4_gkanvo ) OVER(partition by cust_cd, ctrt_country_cgm_logic)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_cd_n_ctrtctry_grp_sts ) OVER(partition by cust_cd, ctrt_country_cgm_logic)||'-'||
      MIN(inview.cust_cd_n_ctrtctry_grp_sts ) OVER(partition by cust_cd, ctrt_country_cgm_logic)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_cd_n_ctrtctry_grp_sts_multimth
      {% endif %}
      ------------- Cross Month Status: Contract Office (Svc Scp Level) (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CASE MAX(inview.cust_grp_n_ctrtofc_grp_sts ) OVER(partition by cust_grp_id, scp_ofc_cd)||'-'||
      MIN(inview.cust_grp_n_ctrtofc_grp_sts ) OVER(partition by cust_grp_id, scp_ofc_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_grp_n_ctrtofc_grp_sts_multimth
      ,CASE MAX(inview.cust_cd_n_ctrtofc_grp_sts ) OVER(partition by cust_cd, scp_ofc_cd)||'-'||
      MIN(inview.cust_cd_n_ctrtofc_grp_sts ) OVER(partition by cust_cd, scp_ofc_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_cd_n_ctrtofc_grp_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_grp_n_ctrtofc_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, scp_ofc_cd)||'-'||
      MIN(inview.cust_grp_n_ctrtofc_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, scp_ofc_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_grp_n_ctrtofc_grp_sts ) OVER(partition by cust_grp_id, scp_ofc_cd)||'-'||
      MIN(inview.cust_grp_n_ctrtofc_grp_sts ) OVER(partition by cust_grp_id, scp_ofc_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END

      END as cust_grp_n_ctrtofc_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_cd_n_ctrtofc_grp_sts_4_gkanvo ) OVER(partition by cust_cd, scp_ofc_cd)||'-'||
      MIN(inview.cust_cd_n_ctrtofc_grp_sts_4_gkanvo ) OVER(partition by cust_cd, scp_ofc_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_cd_n_ctrtofc_grp_sts ) OVER(partition by cust_cd, scp_ofc_cd)||'-'||
      MIN(inview.cust_cd_n_ctrtofc_grp_sts ) OVER(partition by cust_cd, scp_ofc_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_cd_n_ctrtofc_grp_sts_multimth
      {% endif %}
      ------------- Cross Month Status: CKAM (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CASE MAX(inview.cust_grp_n_ckam_grp_sts ) OVER(partition by cust_grp_id, ckam_sales_person)||'-'||
      MIN(inview.cust_grp_n_ckam_grp_sts ) OVER(partition by cust_grp_id, ckam_sales_person)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_grp_n_ckam_grp_sts_multimth
      ,CASE MAX(inview.cust_cd_n_ckam_grp_sts ) OVER(partition by cust_cd, ckam_sales_person)||'-'||
      MIN(inview.cust_cd_n_ckam_grp_sts ) OVER(partition by cust_cd, ckam_sales_person)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_cd_n_ckam_grp_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_grp_n_ckam_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, ckam_sales_person)||'-'||
      MIN(inview.cust_grp_n_ckam_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, ckam_sales_person)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_grp_n_ckam_grp_sts ) OVER(partition by cust_grp_id, ckam_sales_person)||'-'||
      MIN(inview.cust_grp_n_ckam_grp_sts ) OVER(partition by cust_grp_id, ckam_sales_person)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_grp_n_ckam_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_cd_n_ckam_grp_sts_4_gkanvo ) OVER(partition by cust_cd, ckam_sales_person)||'-'||
      MIN(inview.cust_cd_n_ckam_grp_sts_4_gkanvo ) OVER(partition by cust_cd, ckam_sales_person)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_cd_n_ckam_grp_sts ) OVER(partition by cust_cd, ckam_sales_person)||'-'||
      MIN(inview.cust_cd_n_ckam_grp_sts ) OVER(partition by cust_cd, ckam_sales_person)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_cd_n_ckam_grp_sts_multimth
      {% endif %}
      ------------- Cross Month Status: Contract Period (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CASE MAX(inview.cust_grp_n_period_grp_sts ) OVER(partition by cust_grp_id, ctrt_period_typ)||'-'||
      MIN(inview.cust_grp_n_period_grp_sts ) OVER(partition by cust_grp_id, ctrt_period_typ)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_grp_n_period_grp_sts_multimth
      ,CASE MAX(inview.cust_cd_n_period_grp_sts ) OVER(partition by cust_cd, ctrt_period_typ)||'-'||
      MIN(inview.cust_cd_n_period_grp_sts ) OVER(partition by cust_cd, ctrt_period_typ)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END as cust_cd_n_period_grp_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_grp_n_period_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, ctrt_period_typ)||'-'||
      MIN(inview.cust_grp_n_period_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, ctrt_period_typ)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_grp_n_period_grp_sts ) OVER(partition by cust_grp_id, ctrt_period_typ)||'-'||
      MIN(inview.cust_grp_n_period_grp_sts ) OVER(partition by cust_grp_id, ctrt_period_typ)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_grp_n_period_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      ,CASE MAX(inview.cust_cd_n_period_grp_sts_4_gkanvo ) OVER(partition by cust_cd, ctrt_period_typ)||'-'||
      MIN(inview.cust_cd_n_period_grp_sts_4_gkanvo ) OVER(partition by cust_cd, ctrt_period_typ)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      ,CASE MAX(inview.cust_cd_n_period_grp_sts ) OVER(partition by cust_cd, ctrt_period_typ)||'-'||
      MIN(inview.cust_cd_n_period_grp_sts ) OVER(partition by cust_cd, ctrt_period_typ)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      END as cust_cd_n_period_grp_sts_multimth
      {% endif %}
      ------------- Cross Month Status: Service Scope Code (ok)
      {% if    param_gka_nvo_option._parameter_value == "'SSG_DOM'"  %}
      ,CAST(NULL as string) as cust_grp_n_sscp_grp_sts_multimth
      ,CAST(NULL as string) as cust_cd_n_sscp_grp_sts_multimth
      {% elsif param_gka_nvo_option._parameter_value == "'SVC_SCP'"  %}
      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      CASE MAX(inview.cust_grp_n_sscp_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, gka_nvo_svc_scp_cd)||'-'||
      MIN(inview.cust_grp_n_sscp_grp_sts_4_gkanvo ) OVER(partition by cust_grp_id, gka_nvo_svc_scp_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      CAST(NULL as string)
      END as cust_grp_n_sscp_grp_sts_multimth

      ,CASE WHEN inview.cust_grp_typ ||'-'|| inview.cust_grp_key_acct_tp_cd  = 'NVO-GKA'
      THEN
      CASE MAX(inview.cust_cd_grp_sts_4_gkanvo ) OVER(partition by cust_cd, gka_nvo_svc_scp_cd)||'-'||
      MIN(inview.cust_cd_grp_sts_4_gkanvo ) OVER(partition by cust_cd, gka_nvo_svc_scp_cd)
      WHEN 'Pending-Pending'   THEN 'Pending'
      WHEN 'Complete-Complete' THEN 'Complete'
      ELSE 'Partial' END
      ELSE
      CAST(NULL as string)
      END as cust_cd_n_sscp_grp_sts_multimth

      {% endif %}
      -------------
      FROM ${global_cva_completion_2_1_inner.SQL_TABLE_NAME} inview
      LEFT JOIN ${global_cva_completion_2_mth_master.SQL_TABLE_NAME} mth_master ON ( inview.month = mth_master.month )
      WHERE {% condition filter_mths  %} inview.month {% endcondition %}
      {% if    calendar_selection._parameter_value == "'CALENDAR'"  %}
      AND   {% condition filter_years %} mth_master.calendar_year {% endcondition %}
      {% elsif calendar_selection._parameter_value == "'FISCAL'"  %}
      AND   {% condition filter_years %} mth_master.fiscal_year_new_fmt {% endcondition %}
      {% endif %}




      ;;
  }

  parameter: param_gka_nvo_option {
    type: string
    allowed_value: { value: "SSG_DOM"  label: "By SSG & DOM" }
    allowed_value: { value: "SVC_SCP"  label: "By Service Scope" }
    default_value: "SSG_DOM"
  }

  parameter: calendar_selection {
    label: "Calendar Selection"
    type: string
    allowed_value: { value: "CALENDAR" label: "Calendar" }
    allowed_value: { value: "FISCAL"   label: "Fiscal" }
    default_value: "FISCAL"
    suggest_persist_for: "24 hour"
  }

  filter: filter_years {
    type: string
    #suggestions: ["2022", "2023" ]
    #suggest_explore:
    suggest_dimension: fiscal_or_cal_yr
    suggest_persist_for: "24 hour"
  }

  filter: filter_mths {
    type: string
    #suggestions: ["202204", "202205", "202206", "202207", "202208", "202209", "202210", "202211", "202212", "202301", "202302", "202303", "202304", "202305", "202306", "202307", "202308", "202309", "202310", "202311", "202312" , "202401", "202402", "202403" ]
    #default_value: "202304"
    #suggest_explore: global_cva_completion_2_mth_master
    suggest_dimension: month
    suggest_persist_for: "24 hour"
  }


  parameter: param_dynamic_dim_1{
    type: string
    allowed_value: { label: "By Service Scope Code"   value: "SSCP_CODE"  }
    allowed_value: { label: "By Contract Office"      value: "CTRT_OFC"   }
    allowed_value: { label: "By Contract Country"     value: "CTRT_CTRY"  }
    allowed_value: { label: "By CKAM"                 value: "CKAM"       }
    default_value: "CTRT_OFC"
  }

  parameter: param_dynamic_dim_2{
    type: string
    allowed_value: { label: "By Service Scope Code"   value: "SSCP_CODE"       }
    allowed_value: { label: "By Contract Office"      value: "CTRT_OFC"       }
    allowed_value: { label: "By Contract Country"     value: "CTRT_CTRY"       }
    allowed_value: { label: "By CKAM"                 value: "CKAM"       }
    default_value: "CTRT_CTRY"
  }

  parameter: param_dynamic_dim_3{
    type: string
    allowed_value: { label: "By Service Scope Code"   value: "SSCP_CODE"       }
    allowed_value: { label: "By Contract Office"      value: "CTRT_OFC"       }
    allowed_value: { label: "By Contract Country"     value: "CTRT_CTRY"       }
    allowed_value: { label: "By CKAM"                 value: "CKAM"       }
    default_value: "CKAM"
  }

  parameter: param_drill_option{
    type: string
    allowed_value: { label: "Overall"             value: "OVERALL"   }
    allowed_value: { label: "By Dom Flag"         value: "DOM"       }
    allowed_value: { label: "By Trade Group"      value: "TRD_GRP"       }
    allowed_value: { label: "By Svc Scp Grp"      value: "SSG_GRP"       }
    allowed_value: { label: "By Contract RHQ"     value: "CTRT_RHQ"       }
    allowed_value: { label: "By Contract Country" value: "CTRT_CTRY"       }
    allowed_value: { label: "By Contract Office"  value: "CTRT_OFC"       }
    allowed_value: { label: "By CKAM"             value: "CKAM"       }
    allowed_value: { label: "By Contract Length"  value: "CTRT_LEN"       }
    allowed_value: { label: "By Month"            value: "MTH"       }
    default_value: "OVERALL"
  }

  parameter: param_cust_grping_option {
    label: "Customer Grouping Option"
    type: string
    allowed_value: { label: "By Customer Group"  value: "CUST_GRP"     }
    allowed_value: { label: "By Customer Code"   value: "CUST_CD"  }
    default_value: "CUST_CD"
  }

  parameter: param_cust_percent_partition {
    type: string
    allowed_value: { label: "By Dummy Val"     value: "DUMMY"     }
    allowed_value: { label: "By Key Account"   value: "KEY_ACC"     }
    allowed_value: { label: "By Dominant Flag" value: "DOM_FLG"  }
    default_value: "DUMMY"
  }

  dimension: fiscal_or_cal_yr {
    type: string
    sql:
        {% if    calendar_selection._parameter_value == "'CALENDAR'"  %}
            ${TABLE}.calendar_year
        {% elsif calendar_selection._parameter_value == "'FISCAL'"  %}
            ${TABLE}.fiscal_year_new_fmt
        {% endif %};;
  }

  dimension: dynamic_dim_1 {
    label: "{%  if    param_dynamic_dim_1._parameter_value ==  \"'SSCP_CODE'\"  %}Service Scope Code{%
    elsif param_dynamic_dim_1._parameter_value ==  \"'CTRT_OFC'\"   %}Contract Office{%
    elsif param_dynamic_dim_1._parameter_value ==  \"'CTRT_CTRY'\"  %}Contract Country{%
    elsif param_dynamic_dim_1._parameter_value ==  \"'CKAM'\"       %}CKAM{%
    endif %}"
    type: string
    sql:
        {% if     param_dynamic_dim_1._parameter_value == "'SSCP_CODE'"  %} ${gka_nvo_svc_scp_cd}
        {% elsif  param_dynamic_dim_1._parameter_value == "'CTRT_OFC'"   %} ${scp_ofc_cd}
        {% elsif  param_dynamic_dim_1._parameter_value == "'CTRT_CTRY'"  %} ${ctrt_country_cgm_logic}
        {% elsif  param_dynamic_dim_1._parameter_value == "'CKAM'"       %} ${ckam_usr.full_name}
        {% endif %} ;;
  }

  dimension: dynamic_dim_pivot_1 {
    type: string
    sql:
        {% if     param_dynamic_dim_1._parameter_value == "'SSCP_CODE'"  %} ${cust_n_ssg_grp_sts_multimth}
        {% elsif  param_dynamic_dim_1._parameter_value == "'CTRT_OFC'"   %} ${cust_n_ctrtofc_grp_sts_multimth}
        {% elsif  param_dynamic_dim_1._parameter_value == "'CTRT_CTRY'"  %} ${cust_n_ctrtctry_grp_sts_multimth}
        {% elsif  param_dynamic_dim_1._parameter_value == "'CKAM'"       %} ${cust_n_ckam_grp_sts_multimth}
        {% endif %} ;;
  }

  measure: cust_cnt_dynamic_1 {
    type: number
    label: "{%  if    param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\"  %}By Customer Group{%
    elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"   %}By Customer Code{%
    endif %}"
    sql:  {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_cnt}
          {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_cnt}
          {% endif %} ;;

    link: {
      label: "Drill to Details"
      url:  "{% if    param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_1._parameter_value ==  \"'SSCP_CODE'\" %}{{ drill_4_sscp_cust_grp._link     }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_1._parameter_value ==  \"'CTRT_CTRY'\" %}{{ drill_4_ctrtctry_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_1._parameter_value ==  \"'CTRT_OFC'\"  %}{{ drill_4_ctrtofc_cust_grp._link  }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_1._parameter_value ==  \"'CKAM'\"      %}{{ drill_4_ckam_cust_grp._link     }}{%

      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_1._parameter_value ==  \"'SSCP_CODE'\" %}{{ drill_4_sscp_cust_cd._link     }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_1._parameter_value ==  \"'CTRT_CTRY'\" %}{{ drill_4_ctrtctry_cust_cd._link  }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_1._parameter_value ==  \"'CTRT_OFC'\"  %}{{ drill_4_ctrtofc_cust_cd._link   }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_1._parameter_value ==  \"'CKAM'\"      %}{{ drill_4_ckam_cust_cd._link      }}{%

      endif %}"
    }
  }

  dimension: dynamic_dim_2 {
    label: "{%  if    param_dynamic_dim_2._parameter_value ==  \"'SSCP_CODE'\"  %}Service Scope Code{%
    elsif param_dynamic_dim_2._parameter_value ==  \"'CTRT_OFC'\"   %}Contract Office{%
    elsif param_dynamic_dim_2._parameter_value ==  \"'CTRT_CTRY'\"  %}Contract Country{%
    elsif param_dynamic_dim_2._parameter_value ==  \"'CKAM'\"       %}CKAM{%
    endif %}"
    type: string
    sql:
        {% if     param_dynamic_dim_2._parameter_value == "'SSCP_CODE'"  %} ${gka_nvo_svc_scp_cd}
        {% elsif  param_dynamic_dim_2._parameter_value == "'CTRT_OFC'"   %} ${scp_ofc_cd}
        {% elsif  param_dynamic_dim_2._parameter_value == "'CTRT_CTRY'"  %} ${ctrt_country_cgm_logic}
        {% elsif  param_dynamic_dim_2._parameter_value == "'CKAM'"       %} ${ckam_usr.full_name}
        {% endif %} ;;
  }

  dimension: dynamic_dim_pivot_2 {
    type: string
    sql:
        {% if     param_dynamic_dim_2._parameter_value == "'SSCP_CODE'"  %} ${cust_n_ssg_grp_sts_multimth}
        {% elsif  param_dynamic_dim_2._parameter_value == "'CTRT_OFC'"   %} ${cust_n_ctrtofc_grp_sts_multimth}
        {% elsif  param_dynamic_dim_2._parameter_value == "'CTRT_CTRY'"  %} ${cust_n_ctrtctry_grp_sts_multimth}
        {% elsif  param_dynamic_dim_2._parameter_value == "'CKAM'"       %} ${cust_n_ckam_grp_sts_multimth}
        {% endif %} ;;
  }

  measure: cust_cnt_dynamic_2 {
    type: number
    label: "{%  if    param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\"  %}By Customer Group{%
    elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"   %}By Customer Code{%
    endif %}"
    sql:  {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_cnt}
          {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_cnt}
          {% endif %} ;;

    link: {
      label: "Drill to Details"
      url:  "{% if    param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_2._parameter_value ==  \"'SSCP_CODE'\" %}{{ drill_4_sscp_cust_grp._link     }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_2._parameter_value ==  \"'CTRT_CTRY'\" %}{{ drill_4_ctrtctry_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_2._parameter_value ==  \"'CTRT_OFC'\"  %}{{ drill_4_ctrtofc_cust_grp._link  }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_2._parameter_value ==  \"'CKAM'\"      %}{{ drill_4_ckam_cust_grp._link     }}{%

      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_2._parameter_value ==  \"'SSCP_CODE'\" %}{{ drill_4_sscp_cust_cd._link     }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_2._parameter_value ==  \"'CTRT_CTRY'\" %}{{ drill_4_ctrtctry_cust_cd._link  }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_2._parameter_value ==  \"'CTRT_OFC'\"  %}{{ drill_4_ctrtofc_cust_cd._link   }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_2._parameter_value ==  \"'CKAM'\"      %}{{ drill_4_ckam_cust_cd._link      }}{%

      endif %}"
    }
  }

  dimension: dynamic_dim_3 {
    label: "{%  if    param_dynamic_dim_3._parameter_value ==  \"'SSCP_CODE'\"  %}Service Scope Code{%
    elsif param_dynamic_dim_3._parameter_value ==  \"'CTRT_OFC'\"   %}Contract Office{%
    elsif param_dynamic_dim_3._parameter_value ==  \"'CTRT_CTRY'\"  %}Contract Country{%
    elsif param_dynamic_dim_3._parameter_value ==  \"'CKAM'\"       %}CKAM{%
    endif %}"
    type: string
    sql:
        {% if     param_dynamic_dim_3._parameter_value == "'SSCP_CODE'"  %} ${gka_nvo_svc_scp_cd}
        {% elsif  param_dynamic_dim_3._parameter_value == "'CTRT_OFC'"   %} ${scp_ofc_cd}
        {% elsif  param_dynamic_dim_3._parameter_value == "'CTRT_CTRY'"  %} ${ctrt_country_cgm_logic}
        {% elsif  param_dynamic_dim_3._parameter_value == "'CKAM'"       %} ${ckam_usr.full_name}
        {% endif %} ;;
  }

  dimension: dynamic_dim_pivot_3 {
    type: string
    sql:
        {% if     param_dynamic_dim_3._parameter_value == "'SSCP_CODE'"  %} ${cust_n_ssg_grp_sts_multimth}
        {% elsif  param_dynamic_dim_3._parameter_value == "'CTRT_OFC'"   %} ${cust_n_ctrtofc_grp_sts_multimth}
        {% elsif  param_dynamic_dim_3._parameter_value == "'CTRT_CTRY'"  %} ${cust_n_ctrtctry_grp_sts_multimth}
        {% elsif  param_dynamic_dim_3._parameter_value == "'CKAM'"       %} ${cust_n_ckam_grp_sts_multimth}
        {% endif %} ;;
  }

  measure: cust_cnt_dynamic_3 {
    type: number
    label: "{%  if    param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\"  %}By Customer Group{%
    elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"   %}By Customer Code{%
    endif %}"
    sql:  {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_cnt}
          {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_cnt}
          {% endif %} ;;

    link: {
      label: "Drill to Details"
      url:  "{% if    param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_3._parameter_value ==  \"'SSCP_CODE'\" %}{{ drill_4_sscp_cust_grp._link     }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_3._parameter_value ==  \"'CTRT_CTRY'\" %}{{ drill_4_ctrtctry_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_3._parameter_value ==  \"'CTRT_OFC'\"  %}{{ drill_4_ctrtofc_cust_grp._link  }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_dynamic_dim_3._parameter_value ==  \"'CKAM'\"      %}{{ drill_4_ckam_cust_grp._link     }}{%

      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_3._parameter_value ==  \"'SSCP_CODE'\" %}{{ drill_4_sscp_cust_cd._link     }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_3._parameter_value ==  \"'CTRT_CTRY'\" %}{{ drill_4_ctrtctry_cust_cd._link  }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_3._parameter_value ==  \"'CTRT_OFC'\"  %}{{ drill_4_ctrtofc_cust_cd._link   }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_dynamic_dim_3._parameter_value ==  \"'CKAM'\"      %}{{ drill_4_ckam_cust_cd._link      }}{%

      endif %}"
    }
  }



  dimension: month {
    type: string
    sql: ${TABLE}.month ;;
  }

  dimension: cust_grp_typ {
    type: string
    sql: ${TABLE}.cust_grp_typ ;;
  }

  dimension: cust_grp_id {
    label: "Customer Group Code"
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: cust_cd {
    label: "Customer Code"
    type: string
    sql: ${TABLE}.cust_cd ;;
  }

  dimension: cust_grp_id_n_nm {
    type: string
    sql: ${TABLE}.cust_grp_id_n_nm ;;
    suggest_persist_for: "4 hours"
  }

  dimension: cust_cd_n_nm {
    type: string
    sql: ${TABLE}.cust_cd_n_nm ;;
    suggest_persist_for: "4 hours"
  }

  dimension: sc_rfa_no {
    label: "Svc / RFA Number"
    type: string
    sql: ${TABLE}.sc_rfa_no ;;
  }

  # Contract info

  dimension: ctrt_rhq_code {
    label: "Contract RHQ"
    type: string
    sql: ${TABLE}.ctrt_rhq_code ;;
  }

  dimension: ctrt_country_cgm_logic {
    label: "Contract Country"
    type: string
    sql: ${TABLE}.ctrt_country_cgm_logic ;;
  }

  dimension: ctrt_ofc_code {
    label: "Contract Office (Header)"
    type: string
    sql: ${TABLE}.ctrt_ofc_code ;;
  }

  dimension: scp_ofc_cd {
    label: "Contract Office (Per Service Scope)"
    type: string
    sql: ${TABLE}.scp_ofc_cd ;;
  }

  dimension: ckam_sales_person {
    type: string
    sql: ${TABLE}.ckam_sales_person ;;
  }

  dimension: ctrt_period_typ {
    label: "Contract Length"
    type: string
    sql: ${TABLE}.ctrt_period_typ ;;
  }

  # SC/RFA status and total Target TEU
  dimension: scrfa_done_vs_missing {
    type: string
    sql: ${TABLE}.scrfa_done_vs_missing ;;
  }

  dimension: scrfa_is_cva_complete {
    type: string
    sql: CASE ${TABLE}.scrfa_done_vs_missing
      WHEN 'CVA Missing' THEN 'No' WHEN 'CVA Done' THEN 'Yes' END;;
  }

  measure: total_target_for_mth {
    type: sum
    sql: ${TABLE}.target_for_mth ;;
    value_format_name: usd_0
  }

  measure: drill_4_overall_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, cust_sts_multimth]
  }

  measure: drill_4_overall_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, cust_sts_multimth]
  }


  measure: drill_4_dom_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, dominant_flag,cust_n_dom_grp_sts_multimth]
  }

  measure: drill_4_dom_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, dominant_flag,cust_n_dom_grp_sts_multimth]
  }

  measure: drill_4_trd_grp_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, trade_grp, cust_n_trd_grp_sts_multimth]
  }

  measure: drill_4_trd_grp_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, trade_grp, cust_n_trd_grp_sts_multimth]
  }

  measure: drill_4_ssg_grp_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, service_scope_group_code, cust_n_ssg_grp_sts_multimth]
  }

  measure: drill_4_ssg_grp_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, service_scope_group_code, cust_n_ssg_grp_sts_multimth]
  }

  measure: drill_4_sscp_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, gka_nvo_svc_scp_cd, cust_n_ssg_grp_sts_multimth]
  }

  measure: drill_4_sscp_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, gka_nvo_svc_scp_cd, cust_n_ssg_grp_sts_multimth]
  }

  measure: drill_4_ctrtrhq_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, ctrt_rhq_code, cust_n_ctrtrhq_grp_sts_multimth]
  }

  measure: drill_4_ctrtrhq_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, ctrt_rhq_code, cust_n_ctrtrhq_grp_sts_multimth]
  }

  measure: drill_4_ctrtctry_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, ctrt_country_cgm_logic, cust_n_ctrtctry_grp_sts_multimth]
  }

  measure: drill_4_ctrtctry_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, ctrt_country_cgm_logic, cust_n_ctrtctry_grp_sts_multimth]
  }

  measure: drill_4_ctrtofc_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, scp_ofc_cd, cust_n_ctrtofc_grp_sts_multimth]
  }

  measure: drill_4_ctrtofc_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, scp_ofc_cd, cust_n_ctrtofc_grp_sts_multimth]
  }

  measure: drill_4_ckam_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, ckam_usr.full_name, cust_n_ckam_grp_sts_multimth]
  }

  measure: drill_4_ckam_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, ckam_usr.full_name, cust_n_ckam_grp_sts_multimth]
  }

  measure: drill_4_period_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, ctrt_period_typ, cust_n_period_grp_sts_multimth]
  }

  measure: drill_4_period_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, ctrt_period_typ, cust_n_period_grp_sts_multimth]
  }

  measure: drill_4_mth_cust_grp {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, month, cust_sts]
  }

  measure: drill_4_mth_cust_cd {
    type:  number
    sql: 1 ;;
    drill_fields: [cust_cd, v_customer_opus_n_prospect.name, cust_grp_id, of_customer_group.cust_grp_nm, of_customer_group.key_acct_tp_cd, of_customer_group.global_customer_type, month, cust_sts]
  }



  # Service Scope info


  dimension: trade_grp_ord {
    type: number
    sql: CASE ${TABLE}.trade_grp
      WHEN 'TPTA' THEN 1 WHEN 'AE' THEN 2 WHEN 'ASOC' THEN 3 WHEN 'AFLA' THEN 4 END    ;;
  }

  dimension: trade_grp {
    label: "Trade Group"
    order_by_field: trade_grp_ord
    type: string
    sql: ${TABLE}.trade_grp ;;
  }

  dimension: service_scope_group_code {
    type: string
    sql: ${TABLE}.service_scope_group_code ;;
  }

  dimension: dominant_flag {
    label: "Dominant Flag"
    type: string
    sql: ${TABLE}.dominant_flag ;;
  }

  dimension: gka_nvo_svc_scp_cd {
    label: "Service Scope Code (for GKA NVO)"
    type: string
    sql: ${TABLE}.gka_nvo_svc_scp_cd ;;
  }

  #### Individual months###################
  dimension: cust_grp_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_grp_sts ;;
  }

  dimension: cust_cd_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_grp_sts ;;
  }

  dimension: cust_sts {
    label: "Monthly CVA Status (Overall)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_grp_sts}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_grp_sts}
         {% endif %} ;;
  }

  dimension: cust_grp_n_trd_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_trd_grp_sts ;;
  }

  dimension: cust_cd_n_trd_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_trd_grp_sts ;;
  }

  dimension: cust_grp_n_ssg_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ssg_grp_sts ;;
  }

  dimension: cust_cd_n_ssg_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ssg_grp_sts ;;
  }

  dimension: cust_grp_n_dom_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_dom_grp_sts ;;
  }

  dimension: cust_cd_n_dom_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_dom_grp_sts ;;
  }

  dimension: cust_grp_n_ctrtrhq_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtrhq_grp_sts ;;
  }

  dimension: cust_cd_n_ctrtrhq_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtrhq_grp_sts ;;
  }

  dimension: cust_grp_n_ctrtctry_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtctry_grp_sts ;;
  }

  dimension: cust_cd_n_ctrtctry_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtctry_grp_sts ;;
  }

  dimension: cust_grp_n_ctrtofc_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtofc_grp_sts ;;
  }

  dimension: cust_cd_n_ctrtofc_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtofc_grp_sts ;;
  }

  dimension: cust_grp_n_ckam_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ckam_grp_sts ;;
  }

  dimension: cust_cd_n_ckam_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ckam_grp_sts ;;
  }


  #### Multi months###################

  dimension: cust_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_sts_multimth ;;
  }

  dimension: cust_cd_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_sts_multimth ;;
  }

  dimension: cust_sts_multimth {
    label: "Grouped CVA Status (Overall)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_sts_multimth}
         {% endif %} ;;
  }

  dimension: cust_grp_n_trd_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_n_trd_grp_sts_multimth ;;
  }

  dimension: cust_cd_n_trd_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_n_trd_grp_sts_multimth ;;
  }

  dimension: cust_n_trd_grp_sts_multimth {
    label: "Grouped CVA Status (Trade Group)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_n_trd_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_n_trd_grp_sts_multimth}
         {% endif %} ;;
  }

  dimension: cust_grp_n_ssg_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_n_ssg_grp_sts_multimth ;;
  }

  dimension: cust_cd_n_ssg_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_n_ssg_grp_sts_multimth ;;
  }

  dimension: cust_n_ssg_grp_sts_multimth {
    label: "Grouped CVA Status (Svc Scp Grp)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_n_ssg_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_n_ssg_grp_sts_multimth}
         {% endif %} ;;
  }

  dimension: cust_grp_n_dom_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_n_dom_grp_sts_multimth ;;
  }

  dimension: cust_cd_n_dom_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_n_dom_grp_sts_multimth ;;
  }

  dimension: cust_n_dom_grp_sts_multimth {
    label: "Grouped CVA Status (Dominant Flag)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_n_dom_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_n_dom_grp_sts_multimth}
         {% endif %} ;;
  }

  dimension: cust_grp_n_ctrtrhq_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtrhq_grp_sts_multimth ;;
  }

  dimension: cust_cd_n_ctrtrhq_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtrhq_grp_sts_multimth ;;
  }

  dimension: cust_n_ctrtrhq_grp_sts_multimth {
    label: "Grouped CVA Status (Contract RHQ)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_n_ctrtrhq_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_n_ctrtrhq_grp_sts_multimth}
         {% endif %} ;;
  }

  dimension: cust_grp_n_ctrtctry_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtctry_grp_sts_multimth ;;
  }

  dimension: cust_cd_n_ctrtctry_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtctry_grp_sts_multimth ;;
  }

  dimension: cust_n_ctrtctry_grp_sts_multimth {
    label: "Grouped CVA Status (Contract Country)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_n_ctrtctry_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_n_ctrtctry_grp_sts_multimth}
         {% endif %} ;;
  }

  dimension: cust_grp_n_ctrtofc_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtofc_grp_sts_multimth ;;
  }

  dimension: cust_cd_n_ctrtofc_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtofc_grp_sts_multimth ;;
  }

  dimension: cust_n_ctrtofc_grp_sts_multimth {
    label: "Grouped CVA Status (Contract Ofc)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_n_ctrtofc_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_n_ctrtofc_grp_sts_multimth}
         {% endif %} ;;
  }

  dimension: cust_grp_n_ckam_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_n_ckam_grp_sts_multimth ;;
  }

  dimension: cust_cd_n_ckam_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_n_ckam_grp_sts_multimth ;;
  }

  dimension: cust_n_ckam_grp_sts_multimth {
    label: "Grouped CVA Status (CKAM)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_n_ckam_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_n_ckam_grp_sts_multimth}
         {% endif %} ;;
  }

  dimension: cust_grp_n_period_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_n_period_grp_sts_multimth ;;
  }

  dimension: cust_cd_n_period_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_n_period_grp_sts_multimth ;;
  }

  dimension: cust_n_period_grp_sts_multimth {
    label: "Grouped CVA Status (Contract Length)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_n_period_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_n_period_grp_sts_multimth}
         {% endif %} ;;
  }

  dimension: cust_grp_n_sscp_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_grp_n_sscp_grp_sts_multimth ;;
  }

  dimension: cust_cd_n_sscp_grp_sts_multimth {
    type: string
    sql: ${TABLE}.cust_cd_n_sscp_grp_sts_multimth ;;
  }

  dimension: cust_n_sscp_grp_sts_multimth {
    label: "Grouped CVA Status (Service Scope Code)"
    type: string
    sql: {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_n_sscp_grp_sts_multimth}
         {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_n_sscp_grp_sts_multimth}
         {% endif %} ;;
  }

  measure: cust_grp_cnt {
    type: count_distinct
    label: "No of Cust Grp (raw)"
    sql: ${cust_grp_id} ;;
  }

  measure: cust_cd_cnt {
    type: count_distinct
    label: "No of Cust Code (raw)"
    sql: ${cust_cd} ;;
  }

  measure: cust_cnt {
    type: number
    label: "{% if    param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\"  %}By Customer Group{%
    elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"   %}By Customer Code{%
    endif %}"
    sql:  {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_cnt}
          {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd_cnt}
          {% endif %} ;;

    link: {
      label: "Drill to Details"
      url:   "{% if    param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'OVERALL'\"   %}{{ drill_4_overall_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'DOM'\"       %}{{ drill_4_dom_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'TRD_GRP'\"   %}{{ drill_4_trd_grp_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'SSG_GRP'\"   %}{{ drill_4_ssg_grp_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'CTRT_RHQ'\"  %}{{ drill_4_ctrtrhq_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'CTRT_CTRY'\" %}{{ drill_4_ctrtctry_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'CTRT_OFC'\"  %}{{ drill_4_ctrtofc_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'CKAM'\"      %}{{ drill_4_ckam_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'CTRT_LEN'\"  %}{{ drill_4_period_cust_grp._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_GRP'\" and param_drill_option._parameter_value ==  \"'MTH'\"       %}{{ drill_4_mth_cust_grp._link }}{%

      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'OVERALL'\"   %}{{ drill_4_overall_cust_cd._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'DOM'\"       %}{{ drill_4_dom_cust_cd._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'TRD_GRP'\"   %}{{ drill_4_trd_grp_cust_cd._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'SSG_GRP'\"   %}{{ drill_4_ssg_grp_cust_cd._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'CTRT_RHQ'\"  %}{{ drill_4_ctrtrhq_cust_cd._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'CTRT_CTRY'\" %}{{ drill_4_ctrtctry_cust_cd._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'CTRT_OFC'\"  %}{{ drill_4_ctrtofc_cust_cd._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'CKAM'\"      %}{{ drill_4_ckam_cust_cd._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'CTRT_LEN'\"  %}{{ drill_4_period_cust_cd._link }}{%
      elsif param_cust_grping_option._parameter_value ==  \"'CUST_CD'\"  and param_drill_option._parameter_value ==  \"'MTH'\"       %}{{ drill_4_mth_cust_cd._link }}{%

      endif %}"
    }
  }

  dimension: grouping_element {
    type: string
    sql:  {% if     param_cust_grping_option._parameter_value == "'CUST_GRP'" %} ${cust_grp_id}
          {% elsif  param_cust_grping_option._parameter_value == "'CUST_CD'"  %} ${cust_cd}
          {% endif %} ;;
  }

  measure: grp_element_cnt {
    type: count_distinct
    sql: ${grouping_element} ;;
  }

  measure: percent_ttl_cust_cnt {
    label: "% Count of Customer"
    type: number
    sql:  COUNT(DISTINCT ${grouping_element} ) /
          {% if    param_cust_percent_partition._parameter_value == "'DUMMY'" %}
                NULLIF( SUM( COUNT(DISTINCT ${grouping_element} ) ) OVER (PARTITION BY 1) , 0)
          {% elsif param_cust_percent_partition._parameter_value == "'KEY_ACC'" %}
                NULLIF( SUM( COUNT(DISTINCT ${grouping_element} ) ) OVER (PARTITION BY ${of_customer_group.key_acct_tp_cd} ) , 0)
          {% elsif param_cust_percent_partition._parameter_value == "'DOM_FLG'" %}
                NULLIF( SUM( COUNT(DISTINCT ${grouping_element} ) ) OVER (PARTITION BY ${dominant_flag} ) , 0)
          {% endif %};;
    value_format_name: percent_4
  }
  #DCN-1048, June 13rd 2023
  measure: data_file_4_missing_cva_elements {
    hidden: yes
    type: average
    filters: [scrfa_done_vs_missing: "CVA Missing" ]
    sql: 1;;
    drill_fields: [
      v_customer_opus_n_prospect.oneforce_id
      , of_customer.cust_grp_id
      , of_customer_group.cust_grp_nm
      , cust_cd
      , v_customer_opus_n_prospect.name
      , dummy_ckam_rhq
      , ckam_usr.country
      , dummy_ckam_country_name
      , ckam_usr.office_code_number
      , sc_rfa_no
      , ctrt_eff_dt_dtl
      , ctrt_exp_dt_dtl
      , ckam_usr.username
      , service_scope_group_code
      , dominant_flag_code
      , dummy_POR_RHQ
      , dummy_por_cd
      , dummy_por_nm
      , dummy_rev_lane_cd
      , dummy_live_reefer_flg
      , dummy_target_teu
      , dummy_origin_code
      , dummy_destination_code
      , dummy_destinantion_country_code
      , dummy_service_scope_code
      , dummy_CN_Sub_Region
    ]
  }

  measure: For_CVA_data_upload {
    label: "For Zero (0) CVA data upload"
    type: string
    sql: MAX('For Zero (0) CVA data upload') ;;
    link: {
      label: "Click to download CVA data file template"
      url: "{{data_file_4_missing_cva_elements._link}}"
    }
  }

  dimension: dominant_flag_code {
    label: "Dominant Flag"
    type: string
    sql: CASE WHEN ${dominant_flag} = 'DOM' then 'Y' ELSE 'N' END ;;
  }

  dimension: ctrt_eff_dt_dtl  {
    label: "CVA Effective Date (mm/dd/yyyy)"
    type: date
    html: {{ rendered_value | date: "%m-%d-%Y" }} ;;
    sql: ${TABLE}.ctrt_eff_dt_dtl ;;
  }

  dimension: ctrt_exp_dt_dtl {
    label: "CVA Expiry Date (mm/dd/yyyy)"
    type: date
    html: {{ rendered_value | date: "%m-%d-%Y" }} ;;
    sql: ${TABLE}.ctrt_exp_dt_dtl ;;
  }

  dimension: dummy_por_cd {
    label: "Origin Country Code"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_por_nm {
    label: "Origin Country Name"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_rev_lane_cd {
    label: "Revenue Lane Code"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_live_reefer_flg {
    label: "Live Reefer Flag"
    type: string
    sql:  "N" ;;
  }

  dimension: dummy_target_teu {
    label: "Volume Agreement (numbers)"
    type: number
    sql: 0 ;;
  }

  dimension: dummy_ckam_rhq {
    label: "C-KAM RHQ"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_ckam_country_name {
    label: "C-KAM Country Name"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_POR_RHQ {
    label: "POR RHQ"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_origin_code {
    label: "Origin Code"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_destination_code {
    label: "Destination Code"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_destinantion_country_code {
    label: "Destination Country Code"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_service_scope_code {
    label: "Service Scope Code"
    type: string
    sql: NULL ;;
  }

  dimension: dummy_CN_Sub_Region {
    label: "CN Sub Region"
    type: string
    sql: NULL ;;
  }

  set: general_drill_down_overall {
    fields: [
      cust_grp_id,
      cust_cd,
      sc_rfa_no,
      service_scope_group_code,
      dominant_flag,
      cust_grp_sts_multimth,
      cust_cd_sts_multimth
    ]
  }

  set: detail {
    fields: [
      month,
      cust_grp_typ,
      cust_grp_id,
      cust_cd,
      sc_rfa_no,
      service_scope_group_code,
      dominant_flag,
      cust_grp_sts_multimth,
      cust_cd_sts_multimth
    ]
  }
}

view: global_cva_completion_2_1_inner {
  derived_table: {
    sql: WITH mths AS (
         SELECT DISTINCT Sales_Month as month
         FROM `ONEFORCE.OF_SALES_WEEK_MASTER`
         WHERE Sales_Month >= '202204'
     ),
     cva_each_mth AS (
        SELECT tgt.ONEForce_ID as tgt_id,
               tgt.CVA_Effective_Date,
               tgt.CVA_Expiry_Date,
               tgt.Contract_Office_Code ,
               mths.month ,
               tgt.target *
               ( date_diff(LEAST   (tgt.CVA_Expiry_Date,     LAST_DAY( CAST( mths.month  AS DATE FORMAT 'YYYYMM'),MONTH) ) ,
                           GREATEST(tgt.CVA_Effective_Date,            CAST( mths.month  AS DATE FORMAT 'YYYYMM')        ) , day ) + 1 ) /
               ( date_diff(tgt.CVA_Expiry_Date, tgt.CVA_Effective_Date, day)+1 ) as target_for_mth,
               tgt.Customer as customer_id,
               tgt.internal_contract_id,
               tgt.Service_Scope_Group_Code,
               (CASE tgt.Dominant_Flag WHEN 'Y' THEN 'DOM' ELSE 'N-DOM' END) as dominant_flag,
        FROM   `ONEFORCE.OF_CUSTOMER_TARGET`   tgt
        INNER JOIN mths ON  mths.month BETWEEN FORMAT_DATE('%Y%m', tgt.CVA_Effective_Date) and FORMAT_DATE('%Y%m', tgt.CVA_Expiry_Date)
     ),
     cva_each_mth_gka_nvo AS (
        SELECT tgt.ONEForce_ID as tgt_id,
               tgt.Contract_Office_Code ,
               mths.month ,
               tgt.Customer as customer_id,
               tgt.internal_contract_id,
               tgt.Service_Scope
        FROM   `ONEFORCE.OF_CUSTOMER_TARGET`   tgt
        INNER JOIN mths ON  mths.month BETWEEN FORMAT_DATE('%Y%m', tgt.CVA_Effective_Date) and FORMAT_DATE('%Y%m', tgt.CVA_Expiry_Date)
     ),
     sc_each_mth AS (
         SELECT DISTINCT
                schdr.sc_rfa_no,
                schdr.ONEForce_ID as contract_id,
                schdr.CTRT_EFF_DT,
                schdr.CTRT_EXP_DT,
                mths.month,
                schdr.cust_cd,
                sccust.ONEForce_ID as customer_id,
                sccust.cust_grp_id,
                CASE sccgrp.cntr_cust_tp_cd WHEN 'B' THEN 'BCO' WHEN 'N' THEN 'NVO' END as cust_grp_typ,
                sccgrp.key_acct_tp_cd as cust_grp_key_acct_tp_cd, -- GKA,LKA,RKA,SME
                CASE WHEN sccgrp.cntr_cust_tp_cd = 'N' and sccgrp.key_acct_tp_cd = 'GKA'
                     THEN scdtl.svc_scp_cd ELSE NULL END as gka_nvo_svc_scp_cd,
                sscp.service_scope_group_code,
                sscp.dominant_flag, -- DOM / N-DOM
                ssgcat.group_cat                as trade_grp,
                schdr.ofc_cd                    as ctrt_ofc_code,
                scdtl.scp_ofc_cd                as scp_ofc_cd ,
                CASE of_ctrt_rhq.REG_CUST_CNT_CD WHEN 'BR' THEN 'SAOHQ' WHEN 'US' THEN 'RICHQ' WHEN 'HK' THEN 'HKGHQ' WHEN 'SG' THEN 'SINHQ' WHEN 'GB' THEN 'LONHQ' END
                                                as ctrt_rhq_code,
                --DCN-1049
                --ckam_mapping.ckam_sales_person  as ckam_sales_person,
                CASE WHEN ckam_map_ofc.ckam_sales_person IS NOT NULL THEN ckam_map_ofc.ckam_sales_person ELSE ckam_map_ctry.ckam_sales_person END as ckam_sales_person,
                sccgrp.cust_grp_id ||' - '|| sccgrp.cust_grp_nm as cust_grp_id_n_nm ,
                sccust.cust_cd || ' - ' || sccust.name          as cust_cd_n_nm     ,
                schdr.sc_rfa_no||'-'||sscp.service_scope_group_code||'-'||sscp.dominant_flag as sc_key ,
                case
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '11' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '12' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '13' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '14' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '15' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '21' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '22' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '23' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '61' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '62' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '63' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '64' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '65' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '37' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '41' then 'North China' --'NCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '31' then 'Central China' --'CCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '32' then 'Central China' --'CCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '33' then 'Central China' --'CCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '34' then 'Central China' --'CCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '36' then 'Central China' --'CCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '42' then 'Central China' --'CCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '43' then 'Central China' --'CCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '50' then 'Central China' --'CCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '51' then 'Central China' --'CCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '35' then 'South China' --'SCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '44' then 'South China' --'SCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '45' then 'South China' --'SCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '46' then 'South China' --'SCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '52' then 'South China' --'SCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '53' then 'South China' --'SCN'
                when of_ctrt_loc.Country_Code = 'CN' and of_ctrt_loc.State_Code = '54' then 'South China' --'SCN'
                when of_ctrt_loc.Country_Code in ('HK','MO')                           then 'South China' --'SCN'
                else of_ctrt_ctry.Country_Name end  as ctrt_country_cgm_logic,
                CASE IFNULL( schdr.ctrt_dur_tp_cd , 'S' )
                WHEN 'S' THEN 'Short' WHEN 'L' THEN 'Long' WHEN 'M' THEN 'Medium' END as ctrt_period_typ
                , scdtl. ctrt_eff_dt as ctrt_eff_dt_dtl
                , scdtl. ctrt_exp_dt as ctrt_exp_dt_dtl
         FROM        `ONEFORCE.OF_SVC_CONTRACT`     schdr
         INNER JOIN  `ONEFORCE.OF_SVC_CONTRACT_DTL` scdtl  ON scdtl.sc_rfa_no    = schdr.sc_rfa_no
         INNER JOIN  mths ON ( ( mths.month BETWEEN FORMAT_DATE('%Y%m', schdr.CTRT_EFF_DT) and FORMAT_DATE('%Y%m', schdr.CTRT_EXP_DT) ) AND
                               ( mths.month BETWEEN FORMAT_DATE('%Y%m', scdtl.CTRT_EFF_DT) and FORMAT_DATE('%Y%m', scdtl.CTRT_EXP_DT) ) AND
                               ( scdtl.CTRT_EXP_DT >= CURRENT_DATE()  )
                             )
         INNER JOIN  `ONEFORCE.OF_SVC_SCP`                sscp    ON scdtl.svc_scp_cd              = sscp.Service_Scope_Code
         LEFT JOIN   ${of_svc_scp_grp_cat.SQL_TABLE_NAME} ssgcat  ON sscp.service_scope_group_code = ssgcat.svc_scp_grp
         INNER JOIN  `ONEFORCE.OF_CUSTOMER`         sccust ON schdr.cust_cd      = sccust.cust_cd
         INNER JOIN  `ONEFORCE.OF_CUSTOMER_GROUP`   sccgrp ON sccust.cust_grp_id = sccgrp.cust_grp_id
       --LEFT JOIN   `ONEFORCE.OF_OFFICE`     of_ctrt_ofc  ON schdr.ofc_cd              = of_ctrt_ofc.office_code
         LEFT JOIN   `ONEFORCE.OF_OFFICE`     of_ctrt_ofc  ON scdtl.scp_ofc_cd          = of_ctrt_ofc.office_code -- use service scope level office for mapping
         LEFT JOIN   `ONEFORCE.OF_LOCATION`   of_ctrt_loc  ON of_ctrt_ofc.location_code = of_ctrt_loc.location_code
         LEFT JOIN   `ONEFORCE.OF_COUNTRY`    of_ctrt_ctry ON of_ctrt_loc.country_code  = of_ctrt_ctry.country_code
         LEFT JOIN   `ONEFORCE.OF_REG_REF`    of_ctrt_rhq  ON of_ctrt_loc.country_code  = of_ctrt_rhq.cust_cnt_cd
         --DCN-1049 s
         LEFT JOIN   ${ckam_mapping_one_per_country.SQL_TABLE_NAME} ckam_map_ctry ON (sccust.cust_grp_id = ckam_map_ctry.customer_grp_id and of_ctrt_loc.country_code = ckam_map_ctry.contract_country_code)
         LEFT JOIN   ${ckam_mapping_one_per_office.SQL_TABLE_NAME} ckam_map_ofc ON (sccust.cust_grp_id = ckam_map_ofc.customer_grp_id and of_ctrt_loc.country_code = ckam_map_ofc.contract_country_code and of_ctrt_ofc.office_code = ckam_map_ofc.contract_office_code)
         --DCN-1049 e
        WHERE
         -- exclude ONE Quote contract and tariff
         NOT (  SUBSTR(schdr.sc_rfa_no,1,2)='KT'  OR
                    REGEXP_CONTAINS(schdr.sc_rfa_no, r'^R[0-9JQ][A-Za-z][0-9]{8}$') OR
                    REGEXP_CONTAINS(schdr.sc_rfa_no, r'^S[0-9JQ][A-Za-z][0-9]{7}$') OR
                    REGEXP_CONTAINS(schdr.sc_rfa_no, r'^R[0-9]{8}[A-Za-z][0-9JQ]$') OR
                    REGEXP_CONTAINS(schdr.sc_rfa_no, r'^S[0-9]{7}[A-Za-z][0-9JQ]$')  )
         AND schdr.sc_rfa_typ IN ('S','R')
     ),
     svc_sts AS (
         -- CVA done
         SELECT sc_each_mth.month,
                sc_each_mth.cust_grp_typ,
                sc_each_mth.cust_grp_key_acct_tp_cd,
                sc_each_mth.cust_grp_id,
                sc_each_mth.cust_cd,
                sc_each_mth.cust_grp_id_n_nm,
                sc_each_mth.cust_cd_n_nm,
                sc_each_mth.sc_rfa_no,
                sc_each_mth.service_scope_group_code,
                sc_each_mth.gka_nvo_svc_scp_cd ,
                sc_each_mth.dominant_flag  ,
                sc_each_mth.trade_grp ,
                sc_each_mth.ctrt_ofc_code ,
                sc_each_mth.scp_ofc_cd ,
                sc_each_mth.ctrt_country_cgm_logic ,
                sc_each_mth.ctrt_rhq_code ,
                sc_each_mth.ctrt_period_typ ,
                sc_each_mth.ckam_sales_person
                , sc_each_mth. ctrt_eff_dt_dtl
                , sc_each_mth. ctrt_exp_dt_dtl
                ,  CASE WHEN sc_each_mth.service_scope_group_code IN ('LN','EA') THEN --August 23rd 2023,
                ( SELECT CASE MAX(1) WHEN 1 THEN 'CVA Done' ELSE 'CVA Missing' END
                  FROM   cva_each_mth
                  WHERE  sc_each_mth.customer_id       = cva_each_mth.customer_id
                  AND    ( (sc_each_mth.cust_grp_typ = 'BCO' and sc_each_mth.contract_id = cva_each_mth.internal_contract_id )
                           or
                          (sc_each_mth.cust_grp_typ = 'NVO' or sc_each_mth.cust_grp_typ is null) )   -- matching ontract
                  AND    sc_each_mth.service_scope_group_code = cva_each_mth.Service_Scope_Group_Code  -- matching svc scp grp
                 -- AND    sc_each_mth.Dominant_Flag            = cva_each_mth.dominant_flag             -- matching dominant flag (DOM / N-DOM)
                  AND    sc_each_mth.scp_ofc_cd               = cva_each_mth.Contract_Office_Code      -- matching contract office code
                  AND    sc_each_mth.month                    = cva_each_mth.month                     -- matching of month
                )
                ELSE  ( SELECT CASE MAX(1) WHEN 1 THEN 'CVA Done' ELSE 'CVA Missing' END
                  FROM   cva_each_mth
                  WHERE  sc_each_mth.customer_id       = cva_each_mth.customer_id
                  AND    ( (sc_each_mth.cust_grp_typ = 'BCO' and sc_each_mth.contract_id = cva_each_mth.internal_contract_id )
                           or
                          (sc_each_mth.cust_grp_typ = 'NVO' or sc_each_mth.cust_grp_typ is null) )   -- matching ontract
                  AND    sc_each_mth.service_scope_group_code = cva_each_mth.Service_Scope_Group_Code  -- matching svc scp grp
                  AND    sc_each_mth.Dominant_Flag            = cva_each_mth.dominant_flag             -- matching dominant flag (DOM / N-DOM)
                  AND    sc_each_mth.scp_ofc_cd               = cva_each_mth.Contract_Office_Code      -- matching contract office code
                  AND    sc_each_mth.month                    = cva_each_mth.month                     -- matching of month
                ) END as scrfa_done_vs_missing
                , (SELECT CASE WHEN sc_each_mth.cust_grp_typ ||'-'|| sc_each_mth.cust_grp_key_acct_tp_cd = 'NVO-GKA'
                        THEN ( CASE MAX(1) WHEN 1 THEN 'CVA Done' ELSE 'CVA Missing' END )
                        ELSE ( MAX( CAST(null AS string) )                               ) END
                  FROM   cva_each_mth_gka_nvo
                  WHERE  sc_each_mth.customer_id              = cva_each_mth_gka_nvo.customer_id
                  AND    sc_each_mth.cust_grp_typ             = 'NVO'
                  AND    sc_each_mth.cust_grp_key_acct_tp_cd  = 'GKA'
                  AND    sc_each_mth.gka_nvo_svc_scp_cd       = cva_each_mth_gka_nvo.Service_Scope         -- matching svc scp
                  AND    sc_each_mth.scp_ofc_cd               = cva_each_mth_gka_nvo.Contract_Office_Code  -- matching contract office code
                  AND    sc_each_mth.month                    = cva_each_mth_gka_nvo.month                 -- matching of month
                ) as scrfa_done_vs_missing_4_gkanvo,
                ( SELECT SUM( cva_each_mth.target_for_mth )
                  FROM   cva_each_mth
                  WHERE  sc_each_mth.customer_id       = cva_each_mth.customer_id
                  AND    ( (sc_each_mth.cust_grp_typ = 'BCO' and sc_each_mth.contract_id = cva_each_mth.internal_contract_id )
                           or
                          (sc_each_mth.cust_grp_typ = 'NVO' or sc_each_mth.cust_grp_typ is null) )   -- matching ontract
                  AND    sc_each_mth.service_scope_group_code = cva_each_mth.Service_Scope_Group_Code  -- matching svc scp grp
                  AND    sc_each_mth.Dominant_Flag            = cva_each_mth.dominant_flag             -- matching dominant flag (DOM / N-DOM)
                  AND    sc_each_mth.scp_ofc_cd               = cva_each_mth.Contract_Office_Code      -- matching contract office code
                  AND    sc_each_mth.month                    = cva_each_mth.month                     -- matching of month
                ) as target_for_mth
      FROM  sc_each_mth
      )
      SELECT
        svc_sts.month
      , svc_sts.cust_grp_typ
      , svc_sts.cust_grp_key_acct_tp_cd
      , svc_sts.cust_grp_id
      , svc_sts.cust_cd
      , svc_sts.cust_grp_id_n_nm
      , svc_sts.cust_cd_n_nm
      , svc_sts.sc_rfa_no
      , svc_sts.service_scope_group_code
      , svc_sts.gka_nvo_svc_scp_cd
      , svc_sts.dominant_flag
      , svc_sts.trade_grp
      , svc_sts.ctrt_ofc_code
      , svc_sts.scp_ofc_cd
      , svc_sts.ctrt_country_cgm_logic
      , svc_sts.ctrt_rhq_code
      , svc_sts.ctrt_period_typ
      , svc_sts.ckam_sales_person
      , svc_sts.scrfa_done_vs_missing
      , svc_sts.scrfa_done_vs_missing_4_gkanvo
      , svc_sts.target_for_mth
      , svc_sts. ctrt_eff_dt_dtl
      , svc_sts. ctrt_exp_dt_dtl
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id )||'-'||
             MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_grp_sts
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd )||'-'||
             MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_grp_sts

      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, trade_grp )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, trade_grp )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_trd_grp_sts
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, trade_grp  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, trade_grp  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_trd_grp_sts

      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, service_scope_group_code )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, service_scope_group_code )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ssg_grp_sts
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, service_scope_group_code  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, service_scope_group_code  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ssg_grp_sts

      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, dominant_flag )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, dominant_flag )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_dom_grp_sts
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, dominant_flag  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, dominant_flag  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_dom_grp_sts

      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, ctrt_rhq_code )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, ctrt_rhq_code )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ctrtrhq_grp_sts
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, ctrt_rhq_code  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, ctrt_rhq_code  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ctrtrhq_grp_sts

      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, ctrt_country_cgm_logic )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, ctrt_country_cgm_logic )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ctrtctry_grp_sts
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, ctrt_country_cgm_logic  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, ctrt_country_cgm_logic  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ctrtctry_grp_sts

      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, scp_ofc_cd )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, scp_ofc_cd )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ctrtofc_grp_sts
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, scp_ofc_cd  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, scp_ofc_cd  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ctrtofc_grp_sts

      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, ckam_sales_person )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, ckam_sales_person )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ckam_grp_sts
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, ckam_sales_person  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, ckam_sales_person  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ckam_grp_sts

      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, ctrt_period_typ )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_grp_id, ctrt_period_typ )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_period_grp_sts
      , CASE MAX(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, ctrt_period_typ  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing) OVER (PARTITION BY month, cust_cd, ctrt_period_typ  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_period_grp_sts

      ----- Status computed by  scrfa_done_vs_missing_4_gkanvo

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_grp_sts_4_gkanvo

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, trade_grp )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, trade_grp )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_trd_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, trade_grp  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, trade_grp  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_trd_grp_sts_4_gkanvo

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, service_scope_group_code )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, service_scope_group_code )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ssg_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, service_scope_group_code  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, service_scope_group_code  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ssg_grp_sts_4_gkanvo

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, dominant_flag )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, dominant_flag )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_dom_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, dominant_flag  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, dominant_flag  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_dom_grp_sts_4_gkanvo

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, ctrt_rhq_code )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, ctrt_rhq_code )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ctrtrhq_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, ctrt_rhq_code  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, ctrt_rhq_code  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ctrtrhq_grp_sts_4_gkanvo

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, ctrt_country_cgm_logic )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, ctrt_country_cgm_logic )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ctrtctry_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, ctrt_country_cgm_logic  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, ctrt_country_cgm_logic  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ctrtctry_grp_sts_4_gkanvo

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, scp_ofc_cd )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, scp_ofc_cd )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ctrtofc_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, scp_ofc_cd  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, scp_ofc_cd  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ctrtofc_grp_sts_4_gkanvo

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, ckam_sales_person )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, ckam_sales_person )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_ckam_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, ckam_sales_person  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, ckam_sales_person  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_ckam_grp_sts_4_gkanvo

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, ctrt_period_typ )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, ctrt_period_typ )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_period_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, ctrt_period_typ  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, ctrt_period_typ  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_period_grp_sts_4_gkanvo

      -----------

      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, gka_nvo_svc_scp_cd )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_grp_id, gka_nvo_svc_scp_cd )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_grp_n_sscp_grp_sts_4_gkanvo
      , CASE MAX(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, gka_nvo_svc_scp_cd  )||'-'||
      MIN(svc_sts.scrfa_done_vs_missing_4_gkanvo) OVER (PARTITION BY month, cust_cd, gka_nvo_svc_scp_cd  )
      WHEN 'CVA Missing-CVA Done'    THEN 'Partial'
      WHEN 'CVA Missing-CVA Missing' THEN 'Pending'
      WHEN 'CVA Done-CVA Done'       THEN 'Complete'
      ELSE 'Error' END  as cust_cd_n_sscp_grp_sts_4_gkanvo

      FROM   svc_sts
      order by 1, 2, 3, 4, 5, 6, 7, 8, 9
      ;;
    persist_for: "1 hour"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  filter: filter_mths {
    type: string
    suggestions: ["202204", "202205", "202206", "202207", "202208", "202209", "202210", "202211", "202212", "202301", "202302", "202303", "202304", "202305", "202306", "202307", "202308", "202309", "202310", "202311", "202312" , "202401", "202402", "202403" ]
    sql:  ({% condition filter_mths %} month {% endcondition %}  ) ;;
  }

  dimension: month {
    type: string
    sql: ${TABLE}.month ;;
  }

  dimension: cust_grp_typ {
    type: string
    sql: ${TABLE}.cust_grp_typ ;;
  }

  dimension: cust_grp_key_acct_tp_cd {
    type: string
    sql: ${TABLE}.cust_grp_key_acct_tp_cd ;;
  }

  dimension: cust_grp_id {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: cust_cd {
    type: string
    sql: ${TABLE}.cust_cd ;;
  }

  dimension: cust_grp_id_n_nm {
    type: string
    sql: ${TABLE}.cust_grp_id_n_nm ;;
  }

  dimension: cust_cd_n_nm {
    type: string
    sql: ${TABLE}.cust_cd_n_nm ;;
  }

  dimension: sc_rfa_no {
    type: string
    sql: ${TABLE}.sc_rfa_no ;;
  }

  dimension: service_scope_group_code {
    type: string
    sql: ${TABLE}.service_scope_group_code ;;
  }

  dimension: dominant_flag {
    type: string
    sql: ${TABLE}.dominant_flag ;;
  }

  dimension: trade_grp_ord {
    type: number
    sql: CASE ${TABLE}.trade_grp
      WHEN 'TPTA' THEN 1 WHEN 'AE' THEN 2 WHEN 'ASOC' THEN 3 WHEN 'AFLA' THEN 4 END    ;;
  }

  dimension: trade_grp {
    type: string
    order_by_field: trade_grp_ord
    sql: ${TABLE}.trade_grp ;;
  }

  dimension: ctrt_ofc_code {
    type: string
    sql: ${TABLE}.ctrt_ofc_code ;;
  }

  dimension: scp_ofc_cd {
    type: string
    sql: ${TABLE}.scp_ofc_cd ;;
  }

  dimension: ctrt_country_cgm_logic {
    type: string
    sql: ${TABLE}.ctrt_country_cgm_logic ;;
  }

  dimension: ctrt_rhq_code {
    type: string
    sql: ${TABLE}.ctrt_rhq_code ;;
  }

  dimension: ctrt_period_typ {
    type: string
    sql: ${TABLE}.ctrt_period_typ ;;
  }

  dimension: ckam_sales_person {
    type: string
    sql: ${TABLE}.ckam_sales_person ;;
  }

  dimension: scrfa_done_vs_missing {
    type: string
    sql: ${TABLE}.scrfa_done_vs_missing ;;
  }

  dimension: scrfa_done_vs_missing_4_gkanvo {
    type: string
    sql: ${TABLE}.scrfa_done_vs_missing_4_gkanvo ;;
  }

  dimension: scrfa_is_cva_complete {
    type: string
    sql: CASE ${TABLE}.scrfa_done_vs_missing
      WHEN 'CVA Missing' THEN 'No' WHEN 'CVA Done' THEN 'Yes' END     ;;
  }

  dimension: target_for_mth {
    type: string
    sql: ${TABLE}.target_for_mth ;;
  }

  dimension: cust_grp_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_grp_sts ;;
  }

  dimension: cust_grp_n_trd_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_trd_grp_sts ;;
  }

  dimension: cust_grp_n_ssg_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ssg_grp_sts ;;
  }

  dimension: cust_grp_n_dom_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_dom_grp_sts ;;
  }

  dimension: cust_grp_n_ctrtrhq_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtrhq_grp_sts ;;
  }

  dimension: cust_grp_n_ctrtctry_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtctry_grp_sts ;;
  }

  dimension: cust_grp_n_ctrtofc_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtofc_grp_sts ;;
  }

  dimension: cust_grp_n_ckam_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_ckam_grp_sts ;;
  }

  dimension: cust_grp_n_period_grp_sts {
    type: string
    sql: ${TABLE}.cust_grp_n_period_grp_sts ;;
  }

  dimension: cust_cd_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_grp_sts ;;
  }

  dimension: cust_cd_n_trd_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_trd_grp_sts ;;
  }

  dimension: cust_cd_n_ssg_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ssg_grp_sts ;;
  }

  dimension: cust_cd_n_dom_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_dom_grp_sts ;;
  }

  dimension: cust_cd_n_ctrtrhq_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtrhq_grp_sts ;;
  }

  dimension: cust_cd_n_ctrtctry_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtctry_grp_sts ;;
  }

  dimension: cust_cd_n_ctrtofc_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtofc_grp_sts ;;
  }

  dimension: cust_cd_n_ckam_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_ckam_grp_sts ;;
  }

  dimension: cust_cd_n_period_grp_sts {
    type: string
    sql: ${TABLE}.cust_cd_n_period_grp_sts ;;
  }

  dimension: cust_grp_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_grp_sts_4_gkanvo ;;
  }

  dimension: cust_grp_n_trd_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_n_trd_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_n_trd_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_n_trd_grp_sts_4_gkanvo ;;
  }

  dimension: cust_grp_n_ssg_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_n_ssg_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_n_ssg_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_n_ssg_grp_sts_4_gkanvo ;;
  }

  dimension: cust_grp_n_dom_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_n_dom_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_n_dom_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_n_dom_grp_sts_4_gkanvo ;;
  }

  dimension: cust_grp_n_ctrtrhq_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtrhq_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_n_ctrtrhq_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtrhq_grp_sts_4_gkanvo ;;
  }

  dimension: cust_grp_n_ctrtctry_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtctry_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_n_ctrtctry_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtctry_grp_sts_4_gkanvo ;;
  }

  dimension: cust_grp_n_ctrtofc_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_n_ctrtofc_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_n_ctrtofc_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_n_ctrtofc_grp_sts_4_gkanvo ;;
  }

  dimension: cust_grp_n_ckam_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_n_ckam_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_n_ckam_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_n_ckam_grp_sts_4_gkanvo ;;
  }

  dimension: cust_grp_n_period_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_n_period_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_n_period_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_n_period_grp_sts_4_gkanvo ;;
  }

  dimension: cust_grp_n_sscp_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_grp_n_sscp_grp_sts_4_gkanvo ;;
  }

  dimension: cust_cd_n_sscp_grp_sts_4_gkanvo {
    type: string
    sql: ${TABLE}.cust_cd_n_sscp_grp_sts_4_gkanvo ;;
  }


  set: detail {
    fields: [
      month,
      cust_grp_typ,
      cust_grp_id,
      cust_cd,
      sc_rfa_no,
      service_scope_group_code,
      dominant_flag,
      trade_grp,
      ctrt_ofc_code,
      ctrt_country_cgm_logic,
      ctrt_rhq_code,
      ckam_sales_person,
      scrfa_done_vs_missing,
      cust_grp_grp_sts,
      cust_grp_n_trd_grp_sts,
      cust_grp_n_ssg_grp_sts,
      cust_grp_n_dom_grp_sts,
      cust_grp_n_ctrtrhq_grp_sts,
      cust_grp_n_ctrtctry_grp_sts,
      cust_grp_n_ctrtofc_grp_sts,
      cust_grp_n_ckam_grp_sts,
      cust_cd_grp_sts,
      cust_cd_n_trd_grp_sts,
      cust_cd_n_ssg_grp_sts,
      cust_cd_n_dom_grp_sts,
      cust_cd_n_ctrtrhq_grp_sts,
      cust_cd_n_ctrtctry_grp_sts,
      cust_cd_n_ctrtofc_grp_sts,
      cust_cd_n_ckam_grp_sts
    ]
  }
}

view: global_cva_completion_2_mth_master {
  derived_table: {
    sql: SELECT DISTINCT
      of_sales_week_master.Calendar_Year  AS calendar_year,
      RIGHT(of_sales_week_master.Fiscal_Year,4) AS fiscal_year_new_fmt,
      LEFT(of_sales_week_master.Sales_Month,4) ||''|| RIGHT(of_sales_week_master.Sales_Month,2)  AS month
      FROM `ONEFORCE.OF_SALES_WEEK_MASTER` AS of_sales_week_master
      WHERE of_sales_week_master.Sales_Month >= '202204'
       ;;

    persist_for: "24 hours"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.calendar_year ;;
  }

  dimension: fiscal_year_new_fmt {
    type: string
    sql: ${TABLE}.fiscal_year_new_fmt ;;
  }


  dimension: month {
    type: string
    sql: ${TABLE}.month ;;
  }

  set: detail {
    fields: [calendar_year, fiscal_year_new_fmt, month]
  }
}

view: global_cva_gam {

  derived_table: {
    sql: with aa as (select *,
                            row_number() over (partition by customer_group, team_role ) as rn
                     from  `ONEFORCE.OF_SALES_TEAM_MEMBER`
                     where  upper(team_role) like 'GLOBAL ACCOUNT MANAGER (GAM)' and inactive = 'false' )
         select * from aa where rn = 1;;

  }

  dimension: oneforce_id {
    hidden: yes
    label: "ONEForce Id"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: commodity {
    label: "Commodity"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Commodity ;;
  }

  dimension: container_type {
    label: "Container Type" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Container_Type ;;
  }

  dimension: created_by_id {
    label: "Created By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    label: "Created Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: customer {
    hidden: yes
    type: string
    sql: ${TABLE}.Customer ;;
  }

  dimension: customer_group {
    type: string
    sql: ${TABLE}.Customer_Group ;;
  }


  dimension: destination {
    label: "Destination"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Destination ;;
  }

  dimension: last_modified_by_id {
    label: "Last Modified By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    label: "Last Modified Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: origin {
    label: "Origin" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Origin ;;
  }

  dimension: sales_person {
    type: string
    sql: ${TABLE}.Sales_Person ;;
  }

  dimension: service_scope {
    label: "Service Scope"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Service_Scope ;;
  }

  dimension: service_scope_group {
    label: "Service Scope Group"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: svc_rfa_number {
    label: "SVC RFA Number" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SVC_RFA_Number ;;
  }

  dimension: team_role {
    label: "Team Member Role" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Team_Role ;;
  }

  dimension: sales_person_rownum {
    label: "Sales person rownum"
    type: number
    sql: ${TABLE}.sales_person_rownum ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: global_cva_status_options {
  derived_table: {
    sql: SELECT 'Complete' as grouped_status UNION ALL
         SELECT 'Pending'  as grouped_status UNION ALL
         SELECT 'Partial'  as grouped_status
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: grouped_status {
    type: string
    sql: ${TABLE}.grouped_status ;;
  }

  set: detail {
    fields: [grouped_status]
  }
}

view: global_cva_target {
  derived_table: {
    sql: select  v_customer_opus_n_prospect_of_cust_grp_cd as cust_grp_id2,
                                v_customer_opus_n_prospect_cust_cd as cust_cd2,
                                v_customer_opus_n_prospect_cust_grp_hrchy_cd as cust_grp_hrchy_cd,
                                a.oneforce_id as customer_target,
                                a.of_user_fullname as cva_ram,
                                coalesce(a.syear, cast(Format_Date("%Y", cva_effective_date) as int64)) as syear,
                                a.name as cva_name,
                                a.service_scope_group,
                                a.service_scope,
                                a.direction,
                                a.of_location_origin_location_code as origin,
                                ctry.country_name as origin_country,
                                of_svc_contract_sc_rfa_no  as  sc_rfa_no,
                                of_svc_contract_cont_period_typ_cd as ctrt_period_tp_cd,
                                of_vsl_svc_lane_service_lane_code as service_lane,
                                a.of_location_destination_location_code as destination,
                                --sum(a.weekly_average) cva_target,
                                a.target as cva_target,
                                min(coalesce(parse_date("%d%b%Y",concat('01',LEFT(cast(month_year_id as string),7))),cva_effective_date)) as start_month,
                                max(coalesce(last_day(parse_date("%d%b%Y",concat('01',LEFT(cast(month_year_id as string),7))),MONTH),cva_expiry_date)) as end_month
                          from  ${of_customer_target_and_target_dtl_weekly.SQL_TABLE_NAME} a
                          left join ${of_country.SQL_TABLE_NAME} ctry on ctry.country_code = LEFT(a.of_location_origin_location_code,2)
                          group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
         union all
         select  zv.cust_grp_id,
                 zv.cust_cd,
                 zv.cust_grp_hrchy_cd,
                 zt.oneforce_id,
                 CONCAT(zu.firstname, ' ', zu.lastname),
                 zt.syear,
                 zt.name as cva_name,
                 zt.service_scope_group,
                 zt.service_scope,
                 zt.direction,
                 zpor.location_code as origin,
                 zpctry.country_name as origin_country,
                 zsvc.sc_rfa_no  as  sc_rfa_no,
                 zsvc.ctrt_dur_tp_cd as ctrt_period_tp_cd,
                 zlane.service_lane_code as service_lane,
                 zdel.location_code as destination,
                 target,
                 coalesce(parse_date("%b%Y",concat(StartMonth,Syear)),cva_effective_date) as start_month,
                 coalesce(last_day(parse_date("%b%Y",concat(EndMonth,Eyear))),cva_expiry_date) as End_month
            from ${of_customer_target.SQL_TABLE_NAME} as zt
            left join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as zv on zv.oneforce_id = zt.customer and zv.cust_cd is not null
            left join ${of_user.SQL_TABLE_NAME} as zu on zu.oneforce_id = zt.sales_person
            left join ${of_location.SQL_TABLE_NAME} as zpor on zpor.oneforce_id = zt.origin
            left join ${of_country.SQL_TABLE_NAME} as zpctry on zpctry.country_code = zpor.country_code
            left join ${of_location.SQL_TABLE_NAME} as zdel on zdel.oneforce_id = zt.destination
            left join ${of_svc_contract.SQL_TABLE_NAME} as zsvc on zsvc.oneforce_id = zt.internal_contract_id
            left join ${of_vsl_svc_lane.SQL_TABLE_NAME} as zlane  ON zt.service_lane_product = zlane.ONEForce_ID
            where coalesce(zt.target,0) = 0
 ;;

    persist_for: "4 hours"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: cust_grp_id2 {
    type: string
    sql: ${TABLE}.cust_grp_id2 ;;
  }

  dimension: cust_cd2 {
    type: string
    sql: ${TABLE}.cust_cd2 ;;
  }

  dimension: cust_grp_hrchy_cd {
    type: string
    sql: ${TABLE}.cust_grp_hrchy_cd ;;
  }

  dimension: customer_target {
    type: string
    sql: ${TABLE}.customer_target ;;
  }

  dimension: syear {
    type: number
    sql: ${TABLE}.syear ;;
  }

  dimension: cva_ram {
    type: string
    sql: ${TABLE}.cva_ram ;;
  }

  dimension: cva_name {
    type: string
    sql: ${TABLE}.cva_name ;;
  }

  dimension: sc_rfa_no {
    type: string
    sql: ${TABLE}.sc_rfa_no ;;
  }

  dimension: ctrt_period_tp_cd {
    type: string
    sql: ${TABLE}.ctrt_period_tp_cd ;;
  }

  dimension: service_lane {
    type: string
    sql: ${TABLE}.service_lane ;;
  }

  dimension: service_scope_group {
    type: string
    sql: ${TABLE}.service_scope_group ;;
  }

  dimension: service_scope {
    type: string
    sql: ${TABLE}.service_scope ;;
  }

  dimension: direction {
    type: string
    sql: ${TABLE}.direction ;;
  }

  dimension: origin {
    type: string
    sql: ${TABLE}.origin ;;
  }

  dimension: origin_country {
    type: string
    sql: ${TABLE}.origin_country ;;
  }

  dimension: destination {
    type: string
    sql: ${TABLE}.destination ;;
  }

  dimension: cva_target {
    type: number
    sql: ${TABLE}.cva_target ;;
  }

  dimension: start_month {
    type: date
    datatype: date
    sql: ${TABLE}.start_month ;;
  }

  dimension: end_month {
    type: date
    datatype: date
    sql: ${TABLE}.end_month ;;
  }

  set: detail {
    fields: [
      cust_grp_id2,
      cust_cd2,
      cust_grp_hrchy_cd,
      customer_target,
      syear,
      cva_name,
      service_scope_group,
      service_scope,
      direction,
      origin,
      origin_country,
      destination,
      cva_target,
      start_month,
      end_month
    ]
  }
}

view: grp_cust_list {
  derived_table: {
    sql:with aa as (select  c.cust_grp_id, sum(bkg_teu) bkg_teu
          from OF_BOOKING a
          -- add/change by Helen for DCN-491
          left join  ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON a.svc_cont_no = of_svc_contract.sc_rfa_no
          inner join  ${of_sales_week_master.SQL_TABLE_NAME} b on a.week = cast(b.sales_week as int64)
                      and sales_month <=  CAST(  EXTRACT(YEAR  FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 1 MONTH) ) * 100 +
                                                 EXTRACT(MONTH FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 1 MONTH) )  AS STRING )
          inner join  ${v_customer_opus_n_prospect.SQL_TABLE_NAME} c
          --on a.cnt_cust_cd = c.cust_cd
          on coalesce(of_svc_contract.cust_cd, a.ctrt_cust_cd) = c.cust_cd
          where a.bkg_sts_cd not in ( 'X','W')
          and {% condition fiscal_year_filter %} b.fiscal_year {% endcondition %}
          -- end for DCN-491
          group by c.cust_grp_id)
        select  g.CUST_GRP_ID,
                g.CUST_GRP_NM,
                aa.bkg_teu,
                g.KEY_ACCT_TP_CD,
                g.KEY_ACCT_CNT_CD,
                g.KEY_ACCT_RGN_CD,
                case when g.global_customer_type = 'B' THEN 'BCO' when g.global_customer_type = 'N' then 'NVO' else 'N/A' end as CNTR_CUST_TP_CD,
                g.delt_flg,
                g.srep_nm,
                g.srep_ofc_cd as office_code,
                f.location_code,
                r.reg_cust_cnt_cd,
                r.reg_nm1,
                r.cust_cnt_cd,
                g.srep_email
        from ${of_customer_group.SQL_TABLE_NAME} g
        left join aa ON  aa.CUST_GRP_ID = g.CUST_GRP_ID and g.delt_flg = 'N'
        left join ${of_office.SQL_TABLE_NAME} f on g.srep_ofc_cd = f.office_code
        left join ${of_reg_ref.SQL_TABLE_NAME} r on left(f.location_code,2) = r.cust_cnt_cd
        where ((0 < CASE WHEN IFNULL(g.key_acct_tp_cd,'XXX') not in ('GKA','RKA','LKA') THEN aa.bkg_teu  ELSE 1 END )
                 AND  (g.delt_flg = CASE WHEN IFNULL(g.key_acct_tp_cd,'XXX') not in ('GKA','RKA','LKA') THEN 'N' ELSE g.delt_flg END))
               and {% condition inactive_ka_filter %} g.delt_flg {% endcondition %}
   ;;
   #sql:  select  g.CUST_GRP_ID,
   #              g.CUST_GRP_NM,
   #              g.KEY_ACCT_TP_CD,
   #              g.KEY_ACCT_CNT_CD,
   #              g.KEY_ACCT_RGN_CD,
   #              case when g.global_customer_type = 'B' THEN 'BCO' when g.global_customer_type = 'N' then 'NVO' else 'N/A' end as CNTR_CUST_TP_CD,
   #              g.delt_flg,
   #              g.srep_nm,
   #              g.srep_ofc_cd as office_code,
   #              f.location_code,
   #              r.reg_cust_cnt_cd,
   #              r.reg_nm1,
   #              r.cust_cnt_cd,
   #              g.srep_email
   #        from ${of_customer_group.SQL_TABLE_NAME} g
   #        left join ${grp_cust_weekly_teu.SQL_TABLE_NAME} aa on aa.cust_grp_id = g.cust_grp_id
   #        left join ${of_office.SQL_TABLE_NAME} f on g.srep_ofc_cd = f.office_code
   #        left join ${of_reg_ref.SQL_TABLE_NAME} r on left(f.location_code,2) = r.cust_cnt_cd
   #        where g.delt_flg = CASE WHEN IFNULL(g.key_acct_tp_cd,'XXX') not in ('GKA','RKA','LKA') THEN 'N' ELSE g.delt_flg END
   #        group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14
   #        having (case when g.KEY_ACCT_TP_CD in ('GKA','RKA','LKA') then 1 else sum(aa.bkg_teu) end > 0)
   #;;
       #left join ${of_user.SQL_TABLE_NAME} u on trim(lower(g.srep_email)) = trim(lower(u.email)) -- DCN-552 , Jack 2022 Mar 15
    }

    measure: count {
      view_label: "Measure"
      type: count_distinct
      sql:  ${TABLE}.CUST_GRP_ID;;
      drill_fields: [detail*]

    }

    filter: fiscal_year_filter {
      type: string
      suggest_explore: of_sales_week_master
      suggest_dimension: of_sales_week_master.fiscal_year
    }


    filter: inactive_ka_filter {
      type: string
      suggestions: ["Y","N"]
    }

    dimension: cust_grp_id {
      view_label: "Group Customer"
      label: "Cust Group Code"
      type: string
      sql: ${TABLE}.CUST_GRP_ID ;;
      primary_key: yes
    }

    dimension: cust_grp_nm {
      view_label: "Group Customer"
      label: "Cust Group Name"
      type: string
      sql: ${TABLE}.CUST_GRP_NM ;;
    }


    dimension: cust_grp_id_and_name {
      view_label: "Group Customer"
      label: "Cust Group Code & Name"
      type: string
      sql: CONCAT(${cust_grp_id}," - ", ${cust_grp_nm});;
    }


    dimension: bkg_teu {
      view_label: "Group Customer"
      label: "TEU"
      description: "TEU till last completed month in the specified fiscal year "

      type: number
      sql: ${TABLE}.bkg_teu ;;
    }

    dimension: key_acct_tp_cd {
      view_label: "Group Customer"
      label: "Segmentation"
      type: string
      sql:  CASE
            WHEN ${TABLE}.KEY_ACCT_TP_CD ='GKA' THEN 'GKA'
            WHEN ${TABLE}.KEY_ACCT_TP_CD ='RKA' THEN 'RKA'
            WHEN ${TABLE}.KEY_ACCT_TP_CD ='LKA' THEN 'LKA'
            WHEN ${TABLE}.KEY_ACCT_TP_CD ='SME' THEN 'ONECare'
            ELSE ${TABLE}.KEY_ACCT_TP_CD
            END ;;
      suggest_persist_for: "24 hour"
    }

    dimension: key_acct_cnt_cd {
      view_label: "Group Customer"
      label: "Group Customer Country"
      type: string
      sql: ${TABLE}.KEY_ACCT_CNT_CD ;;
    }

    dimension: key_acct_rgn_cd {
      view_label: "Group Customer"
      label: "Group Customer Region"
      type: string
      sql: ${TABLE}.KEY_ACCT_RGN_CD ;;
    }

    dimension: delt_flg {
      view_label: "Group Customer"
      label: "Inactive"
      type: string
      sql:  ${TABLE}.delt_flg  ;;
    }


    dimension: cntr_cust_tp_cd {
      view_label: "Group Customer"
      label: "BCO/NVO Flag"
      description: "from global customer"
      type: string
      sql: ${TABLE}.CNTR_CUST_TP_CD ;;
    }

    dimension: Sales_Month_From {
      view_label: "Sales Week Master"
      label: "Sales Month From"
      type: string
      sql: cast(FORMAT_DATE("%b %Y",DATE_SUB(DATE_TRUNC(current_date(),MONTH), INTERVAL 12 MONTH)+1) as string) ;;
    }

    dimension: Sales_Month_To {
      view_label: "Sales Week Master"
      label: "Sales Month To"
      type: string
      sql: cast(FORMAT_DATE("%b %Y",DATE_TRUNC(current_date(),MONTH)-1) as string) ;;
    }

    dimension: Sales_Month_Range {
      view_label: "Sales Week Master"
      label: "Sales Month Range"
      type:  string
      sql:  CONCAT(${Sales_Month_From}," ~ ", ${Sales_Month_To} );;
    }

    dimension: Sales_Rep_Name {
      view_label: "Sales Rep Info"
      description: "GAM (if not available, sales rep of global child customer)"
      label: "Sales Rep"
      type:  string
      sql: initcap(${TABLE}.srep_nm);;
    }

    dimension: Sales_Rep_Email{
      view_label: "Sales Rep Info"
      label: "Sales_Rep_Email"
      type:  string
      sql: ${TABLE}.srep_email;;
    }
    dimension: Sales_Office {
      view_label: "Sales Rep Info"
      label: "Sales Office"
      type:  string
      sql: ${TABLE}.office_code;;
    }
    dimension: Location_Office {
      view_label: "Sales Rep Info"
      label: "Location Office"
      type:  string
      sql: ${TABLE}.location_code;;
    }
    dimension: Region {
      view_label: "Sales Rep Info"
      label: "Region"
      type:  string
      sql: ${TABLE}.reg_nm1;;
    }
    dimension: Sales_Rep_Country{
      view_label: "Sales Rep Info"
      label: "Sales_Rep_Country"
      type:  string
      sql: ${TABLE}.cust_cnt_cd;;
    }

    set: detail {
      fields: [
        cust_grp_id,
        cust_grp_nm,
        bkg_teu,
        key_acct_tp_cd,
        key_acct_cnt_cd,
        key_acct_rgn_cd,
        Sales_Rep_Name,
        Sales_Rep_Email,
        Location_Office,
        Sales_Rep_Country,
        Region
      ]
    }
  }

view: ka_actuals {
  derived_table: {
    #WH DCN-1077 (2023-07) Chg line 24 : inner join ${of_sales_week_master.SQL_TABLE_NAME} as  w on o.week = cast(w.sales_week as int64) and w.fiscal_year = 'FY2020'
    sql: with aa as (
          select distinct c.cust_grp_id, g.key_acct_tp_cd, g.cust_grp_nm, concat(g.cust_grp_id, " - ", g.cust_grp_nm) as cust_grp_and_name,
                  g.key_acct_cnt_cd as Key_Acct_Country, coalesce(f.office_code,c.ofc_cd) as ofc_cd, coalesce(LEFT(f.location_code,2),c.cust_cnt_cd) ctry_cd, cast(null as string) as SVC_CONT_NO,
                  g.ONEFORCE_ID, 'GAM' role_reqd, g.KEY_ACCT_RGN_CD, "" as ctrt_typ
            from ${v_customer_opus_n_prospect.SQL_TABLE_NAME} c
              inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id and g.key_acct_tp_cd in ('LKA','GKA','RKA')
              left join ${of_sales_team_member.SQL_TABLE_NAME} as b on g.oneforce_id = b.customer_group and g.global_account_manager = b.sales_person and b.team_role like '%(GAM)%' and b.inactive = 'false'
              left join ${of_user.SQL_TABLE_NAME} as u on b.sales_person = u.oneforce_id
              left join ${of_office.SQL_TABLE_NAME} as f on u.office_code_number = f.office_code
          where c.delt_flg = "N" and g.delt_flg = "N" and c.cust_grp_hrchy_cd = "G"
          union distinct
          select distinct c.cust_grp_id, g.key_acct_tp_cd, g.cust_grp_nm, concat(g.cust_grp_id, " - ", g.cust_grp_nm) as cust_grp_and_name,
                    g.key_acct_cnt_cd as Key_Acct_Country,  o.CTRT_PROP_OFC_CD ofc_cd, LEFT(f.location_code,2) ctry_cd, o.SVC_CONT_NO,
                    g.ONEFORCE_ID, 'CKAM' role_reqd, g.KEY_ACCT_RGN_CD, of_svc_contract.SC_RFA_TYP as ctrt_typ
            from `ONEFORCE.OF_BOOKING` o
                left join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
                inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
                inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id and g.key_acct_tp_cd in ('LKA','GKA','RKA')
                inner join ${of_office.SQL_TABLE_NAME} as f on f.office_code = o.CTRT_PROP_OFC_CD
                inner join ${of_sales_week_master.SQL_TABLE_NAME} as  w on o.week = cast(w.sales_week as int64) and w.fiscal_year = 'FY2022'
            where o.bkg_sts_cd NOT IN ('X', 'W') and coalesce(o.xter_bkg_rqst_cd, 'XX') <> 'WEQ' and of_svc_contract.SC_RFA_TYP <> 'T'
            union distinct
            select distinct c.cust_grp_id, g.key_acct_tp_cd, g.cust_grp_nm, concat(g.cust_grp_id, " - ", g.cust_grp_nm) as cust_grp_and_name,
                    g.key_acct_cnt_cd as Key_Acct_Country,  o.CTRT_PROP_OFC_CD ofc_cd, LEFT(por_cd,2) ctry_cd, o.SVC_CONT_NO,
                    g.ONEFORCE_ID, 'SKAM' role_reqd, g.KEY_ACCT_RGN_CD, of_svc_contract.SC_RFA_TYP as ctrt_typ
            from `ONEFORCE.OF_BOOKING` o
                left join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
                inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
                inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id
                inner join ${of_location.SQL_TABLE_NAME} as a on a.location_code = o.por_cd
                left join ${ka_actuals_teu.SQL_TABLE_NAME} ct on g.cust_grp_id = ct.cust_grp_id and ct.ctry_cd = LEFT(o.por_cd,2)
            where o.bkg_sts_cd NOT IN ('X', 'W') and (g.key_acct_tp_cd in ('GKA','RKA') and coalesce(ct.total_teu,0) >= 50 or g.key_acct_tp_cd = 'LKA' and coalesce(ct.total_teu,0) >= 500) and of_svc_contract.SC_RFA_TYP <> 'T'
            union distinct
            select distinct c.cust_grp_id, g.key_acct_tp_cd, g.cust_grp_nm, concat(g.cust_grp_id, " - ", g.cust_grp_nm) as cust_grp_and_name,
                    g.key_acct_cnt_cd as Key_Acct_Country,  o.CTRT_PROP_OFC_CD ofc_cd, LEFT(del_cd,2) ctry_cd, o.SVC_CONT_NO,
                    g.ONEFORCE_ID, 'SKAM' role_reqd, g.KEY_ACCT_RGN_CD, of_svc_contract.SC_RFA_TYP as ctrt_typ
            from `ONEFORCE.OF_BOOKING` o
                left join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
                inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
                inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id
                inner join ${of_location.SQL_TABLE_NAME} as a on a.location_code = o.del_cd
                left  join ${ka_actuals_teu.SQL_TABLE_NAME} ct on g.cust_grp_id = ct.cust_grp_id and ct.ctry_cd = LEFT(o.del_cd,2)
            where o.bkg_sts_cd NOT IN ('X', 'W') and  (g.key_acct_tp_cd in ('GKA','RKA') and coalesce(ct.total_teu,0) >= 50 or g.key_acct_tp_cd = 'LKA' and coalesce(ct.total_teu,0) >= 500) and of_svc_contract.SC_RFA_TYP <> 'T'
            union distinct
            select distinct c.cust_grp_id, g.key_acct_tp_cd, g.cust_grp_nm, concat(g.cust_grp_id, " - ", g.cust_grp_nm) as cust_grp_and_name,
                    g.key_acct_cnt_cd as Key_Acct_Country, o.CTRT_PROP_OFC_CD ofc_cd, LEFT(por_cd,2) ctry_cd, o.SVC_CONT_NO,
                    g.ONEFORCE_ID, 'SKAS' role_reqd, g.KEY_ACCT_RGN_CD, of_svc_contract.SC_RFA_TYP as ctrt_typ
            from `ONEFORCE.OF_BOOKING` o
                left join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
                inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
                inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id
                inner join ${of_location.SQL_TABLE_NAME} as a on a.location_code = o.por_cd
                left  join ${ka_actuals_teu.SQL_TABLE_NAME} ct on g.cust_grp_id = ct.cust_grp_id and ct.ctry_cd = LEFT(o.por_cd,2)
            where o.bkg_sts_cd NOT IN ('X', 'W') and g.key_acct_tp_cd in ('LKA','GKA','RKA') and coalesce( ct.total_teu, 0) >= 10 and of_svc_contract.SC_RFA_TYP <> 'T'
            union distinct
            select distinct c.cust_grp_id, g.key_acct_tp_cd, g.cust_grp_nm, concat(g.cust_grp_id, " - ", g.cust_grp_nm) as cust_grp_and_name,
                    g.key_acct_cnt_cd as Key_Acct_Country, o.CTRT_PROP_OFC_CD ofc_cd, LEFT(del_cd,2) ctry_cd, o.SVC_CONT_NO,
                    g.ONEFORCE_ID, 'SKAS' role_reqd, g.KEY_ACCT_RGN_CD, of_svc_contract.SC_RFA_TYP as ctrt_typ
            from `ONEFORCE.OF_BOOKING` o
                left join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
                inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
                inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id
                inner join ${of_location.SQL_TABLE_NAME} as a on a.location_code = o.del_cd
                left  join ${ka_actuals_teu.SQL_TABLE_NAME} ct on g.cust_grp_id = ct.cust_grp_id and ct.ctry_cd = LEFT(o.del_cd,2)
            where o.bkg_sts_cd NOT IN ('X', 'W') and  g.key_acct_tp_cd in   ('LKA','GKA','RKA')  and coalesce( ct.total_teu, 0) >= 10 and of_svc_contract.SC_RFA_TYP <> 'T' )
            select aa.*, row_number() OVER(ORDER BY role_reqd ) AS prim_key
            from aa
            where aa.role_reqd = {% if ckam_or_skam._parameter_value == 'CKAM' %} 'CKAM'
            {% elsif ckam_or_skam._parameter_value == 'SKAM' %} 'SKAM'
            {% elsif ckam_or_skam._parameter_value == 'SKAS' %} 'SKAS'
            {% elsif ckam_or_skam._parameter_value == 'GAM' %} 'GAM'
            {% else %} 'CKAM' {% endif %}
            ;;
  }

  ##################################
  ### Parameters
  ##################################

  parameter: ckam_or_skam {
    type: unquoted
    allowed_value: {
      label: "GAM"
      value: "GAM"
    }
    allowed_value: {
      label: "C-KAM"
      value: "CKAM"
    }
    allowed_value: {
      label: "S-KAM"
      value: "SKAM"
    }
    allowed_value: {
      label: "S-KAS"
      value: "SKAS"
    }
    default_value: "GAM"
  }

  parameter: show_exception_as {
    type: unquoted
    allowed_value: {
      label: "Completed"
      value: "Completed"
    }
    allowed_value: {
      label: "Outstanding"
      value: "Outstanding"
    }
    default_value: "Completed"
  }


  ##################################
  ### Table fields
  ##################################

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: ctrt_typ {
    type: string
    sql: ${TABLE}.ctrt_typ ;;
    label: "Contract Type"
  }

  dimension: exception {
    type: yesno
    sql:  CASE
          WHEN "{% parameter show_exception_as %}" ='Completed' THEN coalesce(${of_ckam_skam_4.status},'Invalid') in ('Invalid','Approved')
          WHEN "{% parameter show_exception_as %}" ='Outstanding' THEN coalesce(${of_ckam_skam_4.exception},'no') = 'no'
          END ;;
  }

  dimension: cust_grp_id {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: key_acct_tp_cd {
    type: string
    #sql: ${TABLE}.key_acct_tp_cd ;; HELEN
    sql:  CASE
          WHEN ${TABLE}.key_acct_tp_cd ='GKA' THEN 'GKA'
          WHEN ${TABLE}.key_acct_tp_cd ='RKA' THEN 'RKA'
          WHEN ${TABLE}.key_acct_tp_cd ='LKA' THEN 'LKA'
          WHEN ${TABLE}.key_acct_tp_cd ='SME' THEN 'ONECare'
          ELSE ${TABLE}.key_acct_tp_cd
          END ;;
  }

  dimension: cust_grp_nm {
    type: string
    sql: ${TABLE}.cust_grp_nm ;;
  }

  dimension: cust_grp_and_name {
    type: string
    sql: ${TABLE}.cust_grp_and_name ;;
  }

  dimension: key_acct_country {
    type: string
    sql: ${TABLE}.Key_Acct_Country ;;
  }

  dimension: ofc_cd {
    view_label: "Role-based"
    label: "{% if ckam_or_skam._parameter_value == 'GAM' %} Customer Global Office
    {% else %} Contract Office
    {% endif %}"
    type: string
    sql: ${TABLE}.ofc_cd ;;
  }

  dimension: ctry_cd {
    view_label: "Role-based"
    label: "POR/DEL Country"
    type: string
    sql: ${TABLE}.ctry_cd ;;
  }

  dimension: svc_cont_no {
    label: "Contract Number"
    type: string
    sql: ${TABLE}.SVC_CONT_NO ;;
  }

  dimension: oneforce_id {
    type: string
    hidden: yes
    sql: ${TABLE}.ONEFORCE_ID ;;
  }

  dimension: role_reqd {
    type: string
    sql: ${TABLE}.role_reqd ;;
  }

  dimension: key_acct_rgn_cd  {
    type:  string
    sql: ${TABLE}.KEY_ACCT_RGN_CD;;
  }

  dimension: prim_key {
    hidden: yes
    primary_key: yes
    sql: ${TABLE}.prim_key ;;
  }

  ##################################
  ### Derived Fields
  ##################################

  dimension: Role_Tile {
    type:  string
    view_label: "Role-based"
    sql: case when "{% parameter ckam_or_skam %}" = "CKAM" then "C-KAM"
              when "{% parameter ckam_or_skam %}" = "SKAM" then "S-KAM"
              when "{% parameter ckam_or_skam %}" = "GAM" then "GAM"
              else "S-KAS" end;;
    html: <h2> {{rendered_value}} </h2> ;;
  }

  dimension: Role_Define_Tile {
    view_label: "Role-based"
    type:  string
    sql:  case when "{% parameter ckam_or_skam %}" = "CKAM" then
                  CONCAT( "At least 1xC-KAM mapping is expected for each contract office country.\n",
                          "Unfulfillment% is calculated by missing C-KAM mapping count/ expected count.\n",
                          "e.g. G-AB12345 has 3 contract countries. If only one contract country has C-KAM mapping then unfulfillment% = 2/3 = 67%")
               when "{% parameter ckam_or_skam %}" = "SKAM" then
                  CONCAT( "At least 1xS-KAM mapping is expected for each inbound and outbound country (at or above 50 TEUs per year for GKA & RKA and at or above 500 TEUs per year for LKA). ",
                          "Unfulfillment% is calculated by missing S-KAM mapping count/ Expected count.\n",
                          "e.g. GKA G-AB12345 has annual TEU of 600, 280 and 49 in CN,US and DE respectively. If only US has S-KAM mapping then unfulfillment% = 1/2 = 50%")
               when "{% parameter ckam_or_skam %}" = "GAM" then
                  CONCAT( "Every Group customer should have only 1x GAM. ",
                          "Unfulfillment% is calculated by missing GAM mapping count/ Expected count.\n")
               else
                  CONCAT( "At least 1xS-KAS mapping is expected for each inbound and outbound country (at or above 10 TEUs per year)\n",
                          "UnFulfillment% is calculated by missing S-KAS mapping count/ Expected count.\n",
                          "e.g. GKA G-AB12345 has annual TEU of 20 and 9 in DE and SE respectively. If DE has S-KAS mapping then unfulfillment% = 0/1 = 0%")
          end ;;

    html: <h4 style="white-space:pre-line; text-align:left; font-size:50% line-height:150%; font-family:Calibri " > {{rendered_value}} </h4> ;;

  }

  dimension: RHQ_Name {
    type:  string
    view_label: "Role-based"
    label: "{% if ckam_or_skam._parameter_value == 'CKAM' %} Contract Office (RHQ)
    {% elsif ckam_or_skam._parameter_value == 'GAM' %} Customer Global Office (RHQ)
    {% else %} POR/DEL Country (RHQ)
    {% endif %}"
    sql: ${of_reg_ref.reg_rhq_code} ;;
  }

  dimension: Country_Name {
    type:  string
    view_label: "Role-based"
    label: "{% if ckam_or_skam._parameter_value == 'CKAM' %} Contract Country
    {% elsif ckam_or_skam._parameter_value == 'GAM' %} Customer Global Office Country
    {% else %} POR/DEL Country
    {% endif %}"
    sql: ${of_country.country_name} ;;
  }


  measure: Total_Mapped {
    view_label: "Role-based"
    type: count_distinct
    label: "{% if ckam_or_skam._parameter_value == 'CKAM' %} With C-KAM mapping
    {% elsif ckam_or_skam._parameter_value == 'SKAM' %} With S-KAM mapping
    {% elsif ckam_or_skam._parameter_value == 'GAM' %} With GAM mapping
    {% else %} With S-KAS mapping
    {% endif %}"
    sql:  CASE WHEN ${of_ckam_skam_4.role} = ${role_reqd} AND ${exception} AND "{% parameter ckam_or_skam %}" = ${role_reqd} THEN CONCAT( ${cust_grp_id} ,${ctry_cd})  END ;;
    link: {
      label: "Show All {{value}} Customer Group"
      url: "{{ drill_fields_CustGrp._link }} &fields=ka_actuals.UnMapped_CustGrp_Detail* &f[ka_actuals.Total_Mapped]=%3E0 "
    }
    link: {
      label: "Explore by Contract Office"
      url: "{{ mapped_drill_fields_Office._link  }} &fields=ka_actuals.Mapped_Office_Detail* &f[ka_actuals.Total_Mapped]=%3E0 "
    }
  }

  measure: Total_UnMapped {
    view_label: "Role-based"
    type: count_distinct
    label: "{% if ckam_or_skam._parameter_value == 'CKAM' %} Without C-KAM mapping
    {% elsif ckam_or_skam._parameter_value == 'SKAM' %} Without S-KAM mapping
    {% elsif ckam_or_skam._parameter_value == 'GAM' %} Without GAM mapping
    {% else %} Without S-KAS mapping
    {% endif %}"
    sql: CASE WHEN (${of_ckam_skam_4.role} is null OR not ${exception}) AND "{% parameter ckam_or_skam %}" = ${role_reqd} THEN CONCAT( ${cust_grp_id} ,${ctry_cd})  END ;;
    #drill_fields: [Dummy_Detail*]
    link: {
      label: "Show All {{value}} Customer Group"
      url: "{{ drill_fields_CustGrp._link }} &fields=ka_actuals.UnMapped_CustGrp_Detail* &f[ka_actuals.Total_UnMapped]=%3E0 "
    }
    link: {
      label: "Explore by Contract Office"
      url: "{{ unmapped_drill_fields_Office._link  }} &fields=ka_actuals.UnMapped_Office_Detail* &f[ka_actuals.Total_UnMapped]=%3E0 "
    }
  }

  measure: drill_fields_CustGrp {
    type: number
    hidden: yes
    sql:  0 ;;
    drill_fields: [UnMapped_CustGrp_Detail*]
  }

  measure: unmapped_drill_fields_Office {
    type: number
    hidden: yes
    sql:  0 ;;
    drill_fields: [UnMapped_Office_Detail*]
  }

  measure: mapped_drill_fields_Office {
    type: number
    hidden: yes
    sql:  0 ;;
    drill_fields: [Mapped_Office_Detail*]
  }


  measure: Unfulfillment {
    view_label: "Role-based"
    type: number
    sql:  ${Total_UnMapped}/if((${Total_Mapped}+${Total_UnMapped})=0,1,(${Total_Mapped}+${Total_UnMapped}))*100;;
    value_format: "0\%"
    html: With {% parameter ckam_or_skam %} Mapping: {{Total_Mapped._rendered_value}} ({{Fulfillment._rendered_value}}), Without {% parameter ckam_or_skam %} Mapping: {{Total_UnMapped._rendered_value}} ({{rendered_value}});;
  }


  measure: Fulfillment {
    view_label: "Role-based"
    type: number
    sql:  ${Total_Mapped}/if((${Total_Mapped}+${Total_UnMapped})=0,1,(${Total_Mapped}+${Total_UnMapped}))*100;;
    value_format: "0\%"
    html: With {% parameter ckam_or_skam %} Mapping: {{Total_Mapped._rendered_value}} ({{rendered_value}}), Without {% parameter ckam_or_skam %} Mapping: {{Total_UnMapped._rendered_value}} ({{Unfulfillment._rendered_value}});;
  }

  dimension: CtrtVol {
    view_label: "Role-based"
    label: "Contract Volume"
    type: number
    sql:  CASE WHEN "{% parameter ckam_or_skam %}" = ${role_reqd} AND (${role_reqd} = 'CKAM') THEN ${ka_actuals_vol.contract_volume}
                  WHEN "{% parameter ckam_or_skam %}" = ${role_reqd} AND (${role_reqd} = 'GAM') THEN ${ka_actuals_vol.contract_volume}
                  ELSE 0 END ;;
  }

  measure: Total_CtrtVol {
    view_label: "Role-based"
    label: "Total Contract Volume"
    type: sum
    sql: ${CtrtVol};;
    value_format_name: decimal_0
    sql_distinct_key: CONCAT(${prim_key},${ka_actuals_vol.prim_key}) ;;
  }

  dimension: Total_Teu {
    view_label: "Role-based"
    label: "Export + Import Teu"
    type:  number
    sql:  CASE WHEN "{% parameter ckam_or_skam %}" = ${role_reqd}
      AND (${role_reqd} = 'SKAM' OR ${role_reqd} = 'SKAS') THEN ${ka_actuals_teu_dtl.total_teu} ELSE 0 END ;;
  }

  dimension: Export_Teu {
    view_label: "Role-based"
    label: "Export Teu"
    type:  number
    sql:  CASE WHEN "{% parameter ckam_or_skam %}" = ${role_reqd}
      AND (${role_reqd} = 'SKAM' OR ${role_reqd} = 'SKAS') THEN ${ka_actuals_teu_dtl.export_teu} ELSE 0 END ;;
  }

  dimension: Import_Teu {
    view_label: "Role-based"
    label: "Import Teu"
    type:  number
    sql:  CASE WHEN "{% parameter ckam_or_skam %}" = ${role_reqd}
      AND (${role_reqd} = 'SKAM' OR ${role_reqd} = 'SKAS') THEN ${ka_actuals_teu_dtl.import_teu} ELSE 0 END ;;
  }


  measure: Sum_Total_Teu {
    view_label: "Role-based"
    label: "Total Export + Import Teu"
    type: sum
    sql:  ${Total_Teu} ;;
    value_format_name: decimal_0
  }

  measure: Total_Dynamic {
    view_label: "Role-based"
    type:  sum
    #WH DCN-1077 (202307)
    #label: "{% if ckam_or_skam._parameter_value == 'CKAM' %} Contract Vol.
    #{% elsif ckam_or_skam._parameter_value == 'GAM' %} FY2020 TEU
    #{% else %} Total
    #{% endif %} "
    label: "{% if ckam_or_skam._parameter_value == 'CKAM' %} Contract Vol.
    {% elsif ckam_or_skam._parameter_value == 'GAM' %} FY2022 TEU
    {% else %} Total
    {% endif %} "

    sql:  CASE WHEN "{% parameter ckam_or_skam %}" = "CKAM" THEN ${CtrtVol}
                WHEN "{% parameter ckam_or_skam %}" = "GAM" THEN ${CtrtVol}
               ELSE ${Total_Teu} END;;
    value_format_name: decimal_0
    #drill_fields: [Total_Contract_Detail*]
    #link: {
    #  label: "{% if ckam_or_skam._parameter_value == 'CKAM' or ckam_or_skam._parameter_value == 'CKAS' %} By Contract Office
    #  {% else %} By Country
    #  {% endif %} "
    #  url: "{{ link }}
    #  {% if ckam_or_skam._parameter_value == 'CKAM' or ckam_or_skam._parameter_value == 'CKAS' %} &fields=ka_actuals.Total_Contract_Detail* &f[ka_actuals.Total_Dynamic]=%3E0
    #  {% else %} &fields=ka_actuals.Total_Service_Detail* &f[ka_actuals.Total_Dynamic]=%3E0
    #  {% endif %} "
    #}
    link: {
      label: "{% if ckam_or_skam._parameter_value == 'CKAM' or ckam_or_skam._parameter_value == 'GAM' %} Show All {{rendered_value}}
      {% else %} Show All {{rendered_value}}
      {% endif %} "
      url: "
      {% if ckam_or_skam._parameter_value == 'CKAM' %} {{ drill_fields_Contract._link }} &fields=ka_actuals.Total_Contract_Detail* &f[ka_actuals.Total_Dynamic]=%3E0
      {% elsif ckam_or_skam._parameter_value == 'GAM' %} {{ drill_fields_GAM._link }} &fields=ka_actuals.Total_GAM_Detail* &f[ka_actuals.Total_Dynamic]=%3E0
      {% else %} {{ drill_fields_Service._link }} &fields=ka_actuals.Total_Service_Detail* &f[ka_actuals.Total_Dynamic]=%3E0
      {% endif %} "
    }
  }

  measure: drill_fields_Contract {
    type: number
    hidden: yes
    sql:  0 ;;
    drill_fields: [Total_Contract_Detail*]
  }

  measure: drill_fields_GAM {
    type: number
    hidden: yes
    sql:  0 ;;
    drill_fields: [Total_GAM_Detail*]
  }

  measure: drill_fields_Service {
    type: number
    hidden: yes
    sql:  0 ;;
    drill_fields: [Total_Service_Detail*]
  }

  measure: Sum_Export_Teu {
    view_label: "Role-based"
    label: "Total Export Teu"
    type: sum
    sql: ${Export_Teu};;
    value_format_name: decimal_0
    #sql_distinct_key: CONCAT(${prim_key},${ka_actuals_te.prim_key}) ;;
  }

  measure: Export_Dynamic {
    view_label: "Role-based"
    type:  number
    label: "{% if ckam_or_skam._parameter_value == 'CKAM' %} Not Applicable
    {% elsif ckam_or_skam._parameter_value == 'GAM' %} Not Applicable
    {% else %} Export
    {% endif %}"
    sql:  SUM(CASE WHEN "{% parameter ckam_or_skam %}" = "CKAM" THEN 0
                     WHEN "{% parameter ckam_or_skam %}" = "GAM" THEN 0
                     ELSE ${Export_Teu}
                     END);;
    value_format_name: decimal_0
    html:
          {% if ckam_or_skam._parameter_value == 'CKAM' or ckam_or_skam._parameter_value == 'GAM' %}
          n.a
          {% else %}
          {{Sum_Export_Teu._rendered_value}}
          {% endif %}
          ;;
  }

  measure: Sum_Import_Teu {
    view_label: "Role-based"
    label: "Total Import Teu"
    type: sum
    sql: ${Import_Teu};;
    value_format_name: decimal_0
    #sql_distinct_key: CONCAT(${prim_key},${ka_actuals_te.prim_key}) ;;
  }

  measure: Import_Dynamic {
    view_label: "Role-based"
    type:  number
    label: "{% if ckam_or_skam._parameter_value == 'CKAM' %} Not Applicable
    {% elsif ckam_or_skam._parameter_value == 'GAM' %} Not Applicable
    {% else %} Import
    {% endif %} "
    sql:  SUM(CASE WHEN "{% parameter ckam_or_skam %}" = "CKAM" THEN 0
                     WHEN "{% parameter ckam_or_skam %}" = "GAM" THEN 0
                     ELSE ${Import_Teu}
                     END);;
    value_format_name: decimal_0
    html:
          {% if ckam_or_skam._parameter_value == 'CKAM' or ckam_or_skam._parameter_value == 'GAM' %}
          n.a
          {% else %}
          {{Sum_Import_Teu._rendered_value}}
          {% endif %}
          ;;
  }

  set: Total_GAM_Detail {
    fields: [
      cust_grp_nm,
      cust_grp_id,
      ofc_cd,
      Country_Name,
      Total_Dynamic
    ]
  }

  set: Total_Contract_Detail {
    fields: [
      cust_grp_nm,
      cust_grp_id,
      ofc_cd,
      svc_cont_no,
      Total_Dynamic
    ]
  }

  set: Total_Service_Detail {
    fields: [
      cust_grp_nm,
      cust_grp_id,
      Country_Name,
      ofc_cd,
      svc_cont_no,
      Total_Dynamic,
      Sum_Export_Teu,
      Sum_Import_Teu
    ]
  }

  set: UnMapped_CustGrp_Detail {
    fields: [
      Country_Name,
      cust_grp_id,
      cust_grp_nm
    ]
  }

  set: UnMapped_Office_Detail {
    fields: [
      Country_Name,
      ofc_cd,
      Total_UnMapped
    ]
  }

  set: Mapped_Office_Detail {
    fields: [
      Country_Name,
      ofc_cd,
      Total_Mapped
    ]
  }

  set: Dummy_Detail {
    fields: [
      Country_Name
    ]
  }

  set: detail {
    fields: [
      cust_grp_id,
      key_acct_tp_cd,
      cust_grp_nm,
      cust_grp_and_name,
      key_acct_country,
      ofc_cd,
      ctry_cd,
      svc_cont_no,
      oneforce_id,
      role_reqd
    ]
  }

}

view: ka_actuals_gam {
  derived_table: {
    #sql: select cust_grp_id, srep_nm as salesrep_gam, row_number() over (partition by cust_grp_id ) as rownum
    #  from V_CUSTOMER_OPUS_N_PROSPECT c
    #  where delt_flg = 'N' and cust_grp_hrchy_cd = 'G'
    #   ;;
    sql: select g.cust_grp_id, u.firstname||' '||u.lastname as salesrep_gam,row_number() over (partition by cust_grp_id ) as rownum
        from ${of_customer_group.SQL_TABLE_NAME} as g
        left join ${of_sales_team_member.SQL_TABLE_NAME} as b on g.oneforce_id = b.customer_group and g.global_account_manager = b.sales_person and b.team_role like '%(GAM)%'
        left join ${of_user.SQL_TABLE_NAME} as u on b.sales_person = u.oneforce_id
        where b.inactive = 'false'
        ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: cust_grp_id {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: salesrep_gam {
    description: "Global Account Manager (if not available, sales rep of global child customer)"
    type: string
    sql: UPPER(${TABLE}.salesrep_gam) ;;
  }

  dimension: rownum {
    type: number
    sql: ${TABLE}.rownum ;;
  }

  set: detail {
    fields: [cust_grp_id, salesrep_gam, rownum]
  }
}

view: ka_actuals_teu {
  derived_table: {
    #WH DCN-1077 (20230718) - change below parameter "FY2020" to "FY2022"
    #inner join ${of_sales_week_master.SQL_TABLE_NAME} as m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2020'
    #inner join ${of_sales_week_master.SQL_TABLE_NAME} as m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2020'
    sql: with aa as  (select  c.cust_grp_id, LEFT(por_cd,2) ctry_cd , sum(o.bkg_teu) past12m_actual_TEU, 'EXPORT' TEU_TYPE
                      from `ONEFORCE.OF_BOOKING` o
                      left  join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
                      inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
                      inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id and g.key_acct_tp_cd in ('LKA','GKA','RKA')
                      inner join ${of_location.SQL_TABLE_NAME} as a on a.location_code = o.por_cd
                      inner join ${of_sales_week_master.SQL_TABLE_NAME} as m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2022'
                      where o.bkg_sts_cd not in ('X','W') and coalesce(o.xter_bkg_rqst_cd,'XX') <> 'WEQ'
                      group by  c.cust_grp_id,  LEFT(por_cd,2)
                      union all
                      select  c.cust_grp_id,  LEFT(del_cd,2) ctry_cd , sum(o.bkg_teu) past12m_actual_TEU, 'IMPORT' TEU_TYPE
                      from `ONEFORCE.OF_BOOKING` o
                      left  join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
                      inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
                      inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id and g.key_acct_tp_cd in ('LKA','GKA','RKA')
                      inner join ${of_location.SQL_TABLE_NAME} as a on a.location_code = o.del_cd
                      inner join ${of_sales_week_master.SQL_TABLE_NAME} as m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2022'
                      where o.bkg_sts_cd not in ('X','W') and  coalesce(o.xter_bkg_rqst_cd,'XX') <> 'WEQ'
                      group by  c.cust_grp_id,  LEFT(del_cd,2)
                      )
            select cust_grp_id,  ctry_cd,
                   sum(case when teu_type = 'EXPORT' then past12m_actual_TEU else 0 end) export_teu,
                   sum(case when teu_type = 'IMPORT' then past12m_actual_TEU else 0 end) import_teu,
                   sum(case when teu_type = 'CTRVOL' then 0 else past12m_actual_TEU end) total_teu
             from  aa
             group by cust_grp_id,  ctry_cd
            ;;
    #persist_for: "4 hours"
      sql_trigger_value: SELECT
        CASE WHEN
                CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
                              TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
                    AS INT64)  < 150 THEN 150
             WHEN
                CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
                              TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
                    AS INT64)  < 510 THEN 510
             WHEN
                CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
                              TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
                    AS INT64) < 870 THEN 870
             WHEN
                CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
                              TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
                    AS INT64) < 1230 THEN 1230
             ELSE 150 END ;;
    }

    measure: count {
      type: count
      drill_fields: [detail*]
    }

    dimension: cust_grp_id {
      type: string
      sql: ${TABLE}.cust_grp_id ;;
    }

    dimension: ctry_cd {
      type: string
      sql: ${TABLE}.ctry_cd ;;
    }

    dimension: export_teu {
      type: number
      sql: ${TABLE}.export_teu ;;
    }

    dimension: import_teu {
      type: number
      sql: ${TABLE}.import_teu ;;
    }

    dimension: total_teu {
      type: number
      sql: ${TABLE}.total_teu ;;
    }

    set: detail {
      fields: [cust_grp_id, ctry_cd, export_teu, import_teu, total_teu]
    }
  }

view: ka_actuals_teu_dtl {
  derived_table: {
    #WH DCN-1077 (20230718) change parameter "FY2020" to "FY2022"
    #inner join ${of_sales_week_master.SQL_TABLE_NAME} m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2020'
    #inner join ${of_sales_week_master.SQL_TABLE_NAME} m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2020'
    sql: with aa as (
                select  c.cust_grp_id, LEFT(por_cd,2) ctry_cd, o.CTRT_PROP_OFC_CD office_code, o.svc_cont_no, sum(o.bkg_teu) teu, 'EXPORT' TEU_TYPE
                from `ONEFORCE.OF_BOOKING` o
                left  join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
                inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
                inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id and g.key_acct_tp_cd in ('LKA','GKA','RKA')
                inner join ${of_location.SQL_TABLE_NAME} as a on a.location_code = o.por_cd
                inner join ${of_sales_week_master.SQL_TABLE_NAME} m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2022'
                where o.bkg_sts_cd NOT IN ('X', 'W')
                group by  c.cust_grp_id,  LEFT(por_cd,2), o.CTRT_PROP_OFC_CD,  o.svc_cont_no
                union all
                select  c.cust_grp_id,  LEFT(del_cd,2) ctry_cd , o.CTRT_PROP_OFC_CD office_code, o.svc_cont_no, sum(o.bkg_teu) bkg_teu, 'IMPORT' TEU_TYPE
                from `ONEFORCE.OF_BOOKING` o
                left  join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
                inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on  coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
                inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id and g.key_acct_tp_cd in ('LKA','GKA','RKA')
                inner join ${of_location.SQL_TABLE_NAME} as a on a.location_code = o.del_cd
                inner join ${of_sales_week_master.SQL_TABLE_NAME} m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2022'
                where o.bkg_sts_cd NOT IN ('X', 'W')
                group by  c.cust_grp_id,  LEFT(del_cd,2), o.CTRT_PROP_OFC_CD,  o.svc_cont_no)
          select cust_grp_id, ctry_cd, office_code, svc_cont_no,
                 sum(case when teu_type = 'EXPORT' then teu else 0 end) export_teu,
                 sum(case when teu_type = 'IMPORT' then teu else 0 end) import_teu,
                 sum(teu) total_teu
          from aa
          group by cust_grp_id, ctry_cd, office_code, svc_cont_no
 ;;
    #persist_for: "4 hours"
      sql_trigger_value: SELECT  CASE WHEN
        CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
                      TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
            AS INT64)  < 150 THEN 150
     WHEN
        CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
                      TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
            AS INT64)  < 510 THEN 510
     WHEN
        CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
                      TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
            AS INT64) < 870 THEN 870
     WHEN
        CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
                      TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
            AS INT64) < 1230 THEN 1230
     ELSE 150 END ;;
    }

    measure: count {
      type: count
      drill_fields: [detail*]
    }

    dimension: cust_grp_id {
      type: string
      sql: ${TABLE}.cust_grp_id ;;
    }

    dimension: ctry_cd {
      type: string
      sql: ${TABLE}.ctry_cd ;;
    }

    dimension: office_code {
      type: string
      sql: ${TABLE}.office_code ;;
    }

    dimension: svc_cont_no {
      type: string
      sql: ${TABLE}.svc_cont_no ;;
    }

    dimension: total_teu {
      type: number
      sql: ${TABLE}.total_teu ;;
    }

    dimension: export_teu {
      type: number
      sql: ${TABLE}.export_teu ;;
    }

    dimension: import_teu {
      type: number
      sql: ${TABLE}.import_teu ;;
    }

    dimension: teu_type {
      type: string
      sql: ${TABLE}.TEU_TYPE ;;
    }

    set: detail {
      fields: [
        cust_grp_id,
        ctry_cd,
        office_code,
        svc_cont_no,
        total_teu,
        export_teu,
        import_teu,
        teu_type
      ]
    }
  }

view: ka_actuals_vol {
  derived_table: {
    #WH DCN-1077 (20230718) change parameter "FY2020" to "FY2022"
    #inner join ${of_sales_week_master.SQL_TABLE_NAME} m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2020'
    #inner join ${of_sales_week_master.SQL_TABLE_NAME} m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2020'
    sql: select  c.cust_grp_id,  LEFT(f.location_code,2) ctry_cd , f.office_code, o.svc_cont_no, 'CKAM' role,
                 sum(o.bkg_teu) contract_volume
         from ${of_booking.SQL_TABLE_NAME} o
         left  join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
         inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
         inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id and g.key_acct_tp_cd in ('LKA','GKA','RKA')
         inner join ${of_office.SQL_TABLE_NAME} f on f.office_code = o.CTRT_PROP_OFC_CD
         inner join ${of_sales_week_master.SQL_TABLE_NAME} m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2022'
        where o.bkg_sts_cd NOT IN ('X', 'W')
        group by  c.cust_grp_id, LEFT(f.location_code,2) , f.office_code, o.svc_cont_no
        union all
        select  c.cust_grp_id,  'n.a' as ctry_cd , 'n.a' as office_code, 'n.a' as svc_cont_no, 'GAM' role,
                 sum(o.bkg_teu) contract_volume
         from ${of_booking.SQL_TABLE_NAME} o
         left  join ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON o.svc_cont_no = of_svc_contract.sc_rfa_no
         inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as c on coalesce(of_svc_contract.cust_cd, o.ctrt_cust_cd) = c.cust_cd
         inner join ${of_customer_group.SQL_TABLE_NAME} as g on c.cust_grp_id = g.cust_grp_id and g.key_acct_tp_cd in ('LKA','GKA','RKA')
         inner join ${of_sales_week_master.SQL_TABLE_NAME} m on o.week =  cast(regexp_replace(m.sales_week, '[/W]', '') as int64) and m.Fiscal_Year = 'FY2022'
        where o.bkg_sts_cd NOT IN ('X', 'W')
        group by  c.cust_grp_id
 ;;
  }

  measure: count {
    type: count
    hidden: yes
    drill_fields: [detail*]
  }

  dimension: cust_grp_id {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: ctry_cd {
    type: string
    sql: ${TABLE}.ctry_cd ;;
  }

  dimension: office_code {
    type: string
    sql: ${TABLE}.office_code ;;
  }

  dimension: svc_cont_no {
    type: string
    sql: ${TABLE}.svc_cont_no ;;
  }

  dimension: contract_volume {
    type: number
    sql: ${TABLE}.contract_volume ;;
  }

  dimension: role {
    type: string
    sql: ${TABLE}.role ;;
  }

  dimension: prim_key {
    type:  string
    sql: CONCAT(cust_grp_id,  ctry_cd , office_code, svc_cont_no, role) ;;
  }

  set: detail {
    fields: [cust_grp_id, ctry_cd, contract_volume]
  }
}

view: is_missed_selection {
  derived_table: {
    sql: SELECT 'Yes' is_missed  UNION ALL
         SELECT 'No'  is_missed
        ;;
  }
  dimension: is_missed {
    type: string
    primary_key: yes
    sql: ${TABLE}.is_missed ;;
  }
}

view: is_fulfilled_selection {
  derived_table: {
    sql: SELECT 'Yes' is_fulfilled  UNION ALL
         SELECT 'No'  is_fulfilled
        ;;
  }
  dimension: is_fulfilled {
    type: string
    primary_key: yes
    sql: ${TABLE}.is_fulfilled ;;
  }
}
#######################################
view: mpr_qbr_quarter_master {
  derived_table: {
    sql: SELECT
          left(Calendar_Quarter,4)||'Q'||right(Calendar_Quarter,1) as Calendar_Quarter
        , Calendar_Year
        , CASE WHEN current_date() between qtr_start_date and qtr_end_date THEN 'Current Quater'
               WHEN date_sub( date_trunc( current_date(), month) , interval  3 month ) between qtr_start_date and qtr_end_date THEN 'Last Quater'
               ELSE NULL END as quarter_selection
        FROM ( SELECT
               Calendar_Quarter
              ,Calendar_Year
              ,parse_date('%Y%m', min(Sales_Month)  ) qtr_start_date
              ,date_sub( date_add( parse_date('%Y%m', max(Sales_Month)  ),interval 1 month), interval 1 day)  qtr_end_date
              FROM `ONEFORCE.OF_SALES_WEEK_MASTER` w
              GROUP BY 1, 2
             ) X
        ORDER BY 1
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: calendar_quarter {
    type: string
    sql: ${TABLE}.Calendar_Quarter ;;
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.Calendar_Year ;;
  }

  dimension: quarter_selection {
    type: string
    sql: ${TABLE}.quarter_selection ;;
  }

  set: detail {
    fields: [calendar_quarter, calendar_year, quarter_selection]
  }
}
#######################################
view: ckam_skam_master {
  derived_table: {
    sql:SELECT
        mbr.sales_person ,
        mbr.customer_group,
        usr.FirstName || ' '|| usr.LastName as full_name,
        ckam_ctry.contract_country_code as kam_country_code
        FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
        INNER JOIN ${of_sales_team_member_contract_country.SQL_TABLE_NAME} ckam_ctry on (mbr.oneforce_id = ckam_ctry.oneforce_id )
        LEFT JOIN ${of_user.SQL_TABLE_NAME}     usr on (mbr.sales_person = usr.oneforce_id )
        WHERE mbr.team_role = 'Contract Key Account Manager (C-KAM)' and mbr.sales_person is not null and ckam_ctry.contract_country_code is not null and mbr.inactive = 'false'
        UNION DISTINCT
        SELECT
        mbr.sales_person ,
        mbr.customer_group,
        usr.FirstName || ' '|| usr.LastName as full_name,
        skam_ctry.service_country_code as kam_country_code,
        FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
        INNER JOIN ${of_sales_team_member_service_country.SQL_TABLE_NAME} as skam_ctry on (mbr.oneforce_id = skam_ctry.oneforce_id )
        LEFT JOIN ${of_user.SQL_TABLE_NAME}     usr on (mbr.sales_person = usr.oneforce_id )
        WHERE mbr.team_role = 'Service Key Account Manager (S-KAM)' and mbr.sales_person is not null and skam_ctry.service_country_code is not null and mbr.inactive = 'false'
       ;;
  }

  dimension: sales_person {
    type: string
    sql: ${TABLE}.sales_person ;;
  }

  dimension: customer_group {
    type: string
    sql: ${TABLE}.customer_group ;;
  }

  dimension: full_name {
    type: string
    sql: ${TABLE}.full_name ;;
  }

  dimension: kam_country_code {
    type: string
    sql: ${TABLE}.kam_country_code ;;
  }

}
#######################################
view: qbr_monitor {
  derived_table: {
    sql: WITH
      qtr_master as (
        SELECT
          left(Calendar_Quarter,4)||'Q'||right(Calendar_Quarter,1) as Calendar_Quarter
        , Calendar_Year
        , qtr_start_date, qtr_end_date
        , CASE WHEN current_date() between qtr_start_date and qtr_end_date THEN 'Current Quater'
               WHEN date_sub( date_trunc( current_date(), month) , interval  3 month ) between qtr_start_date and qtr_end_date THEN 'Last Quater'
               ELSE NULL END as quarter_selection
        FROM ( SELECT
               Calendar_Quarter
              ,Calendar_Year
              ,parse_date('%Y%m', min(Sales_Month)  ) qtr_start_date
              ,date_sub( date_add( parse_date('%Y%m', max(Sales_Month)  ),interval 1 month), interval 1 day)  qtr_end_date
              FROM `ONEFORCE.OF_SALES_WEEK_MASTER` w
              GROUP BY 1, 2 ) X
        ORDER BY 1
      ),
      ckam as (
        SELECT
        mbr.sales_person ,
        usr.FirstName || ' '|| usr.LastName as full_name,
        mbr.customer_group,
        --mbr.contract_country,
        ckam_ctry.contract_country_code as contract_country,
        c.country_name as contract_country_name,
        mbr.SVC_RFA_Number,
        date_trunc(mbr.CreatedDate, day) as createddate,
        g.cust_grp_id, -- DCN-1013
        g.cust_grp_nm
        FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
        INNER JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (mbr.customer_group = g.ONEForce_Id ) and g.delt_flg = 'N'
        INNER JOIN ${of_sales_team_member_contract_country.SQL_TABLE_NAME} as ckam_ctry on (mbr.oneforce_id = ckam_ctry.oneforce_id )
        --LEFT JOIN `ONEFORCE.OF_COUNTRY`         c on (mbr.contract_country = c.country_code )
        LEFT JOIN `ONEFORCE.OF_COUNTRY`         c on (ckam_ctry.contract_country_code = c.country_code )
        LEFT JOIN ${of_user.SQL_TABLE_NAME}     usr on (mbr.sales_person = usr.oneforce_id )
        WHERE mbr.team_role = 'Contract Key Account Manager (C-KAM)' and mbr.sales_person is not null and mbr.inactive = 'false' and ckam_ctry.contract_country_code is not null
      ),
      evnt_qbr_ckam as (
      SELECT e.*,
             (CASE WHEN g.oneforce_id is not null then g.ONEForce_Id else e.WhatId end ) as cust_grp_oneforce_id
       FROM `ONEFORCE.OF_EVENT` e
       LEFT JOIN `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` c on (e.WhatId = c.ONEForce_Id)
       LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g          on (c.cust_grp_id = g.cust_grp_id)
       WHERE e.Event_Category in ( 'Quarterly Business Review' )
       AND   e.Event_Status = 'Completed'
       AND   EXISTS(SELECT 1 FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
                    WHERE  mbr.team_role = 'Contract Key Account Manager (C-KAM)'
                    AND    e.ownerid     = mbr.sales_person  )
      )
      SELECT 'CKAM-QBR' as record_type,
             qtr.Calendar_Quarter, qtr.Calendar_Year, qtr.quarter_selection,
             ckam.sales_person, ckam.full_name as ckam_full_name,
             ckam.cust_grp_nm, ckam.cust_grp_id, ckam.customer_group as cust_grp_oneforce_id, ckam.SVC_RFA_Number as svc_rfa_oneforce_id, ckam.contract_country_name, ckam.contract_country,
             (case when evnt_qbr_ckam.oneforce_id is null then 'Missed' else 'QBR:'||evnt_qbr_ckam.subject end) as subject, evnt_qbr_ckam.startdatetime , evnt_qbr_ckam.completed_on , evnt_qbr_ckam.oneforce_id,
             (case when evnt_qbr_ckam.oneforce_id is null then 'Yes' else 'No' end) is_missed,
             (case when evnt_qbr_ckam.oneforce_id is null then 'No' else 'Yes' end) is_fulfilled,
             (case when evnt_qbr_ckam.oneforce_id is null     then qtr.Calendar_Quarter||'-'||ckam.sales_person||'-'||ckam.cust_grp_id||'-'||ckam.contract_country else NULL end) qbr_not_fulfilled,
             (case when evnt_qbr_ckam.oneforce_id is not null then qtr.Calendar_Quarter||'-'||ckam.sales_person||'-'||ckam.cust_grp_id||'-'||ckam.contract_country else NULL end) qbr_fulfilled
      FROM qtr_master as qtr
      LEFT JOIN ckam     on (ckam.createddate <= qtr.qtr_end_date)
      LEFT JOIN evnt_qbr_ckam on ( ckam.sales_person     = evnt_qbr_ckam.ownerid and
                                   -- ckam.contract_country = evnt_qbr_ckam.country and -- DCN-1061
                                   ckam.customer_group   = evnt_qbr_ckam.cust_grp_oneforce_id and
                                   ( date_trunc( evnt_qbr_ckam.startdatetime, day ) between qtr.qtr_start_date and qtr.qtr_end_date )
                                   --( evnt_qbr_ckam.completed_on between qtr.qtr_start_date and qtr.qtr_end_date )  -- DCN-662 use event start date instead of event completed on
                                 )
      WHERE qtr.qtr_start_date <= date_trunc( current_date(), month)
      ORDER BY 1
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: record_type {
    type: string
    sql: ${TABLE}.record_type ;;
  }

  dimension: calendar_quarter {
    type: string
    sql: ${TABLE}.Calendar_Quarter ;;
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.Calendar_Year ;;
  }

  dimension: quarter_selection {
    type: string
    sql: ${TABLE}.quarter_selection ;;
  }

  dimension: sales_person {
    type: string
    sql: ${TABLE}.sales_person ;;
  }

  dimension: ckam_full_name {
    label: "C-KAM"
    type: string
    sql: ${TABLE}.ckam_full_name ;;
  }

  dimension: cust_grp_nm {
    label: "Customer Group"
    type: string
    sql: ${TABLE}.cust_grp_nm ;;
  }

  dimension: cust_grp_id {
    label: "Customer Group Code"
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: cust_grp_oneforce_id {
    type: string
    sql: ${TABLE}.cust_grp_oneforce_id ;;
  }

  dimension: svc_rfa_oneforce_id {
    type: string
    sql: ${TABLE}.svc_rfa_oneforce_id ;;
  }

  dimension: contract_country_name {
    label: "CKAM Contract Country"
    type: string
    sql: ${TABLE}.contract_country_name ;;
  }

  dimension: contract_country {
    label: "CKAM Contract Code"
    type: string
    sql: ${TABLE}.contract_country ;;
  }

  dimension: subject {
    label: "Event Subject"
    type: string
    sql: ${TABLE}.subject ;;
    html:
      {% if value == 'Missed' %}
        <p>{{rendered_value}}</p>
      {% else %}
        <p><a href="https://one-line.lightning.force.com/lightning/r/Event/{{ qbr_monitor.oneforce_id._value }}/view" target="_blank">{{rendered_value}}</a></p>
      {% endif %}
    ;;
  }

  #dimension_group: startdatetime {
  #  label: "Event Date"
  #  type: time
  #  datatype: datetime
  #  sql: ${TABLE}.startdatetime ;;
  #}

  dimension: startdatetime {
    label: "Event Start Date"
    type: date
    datatype: datetime
    sql: ${TABLE}.startdatetime ;;
  }

  dimension: completed_on {
    label: "Event Completed On"
    type: date
    datatype: date
    sql: ${TABLE}.completed_on ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
  }

  dimension: is_missed {
    type: string
    sql: ${TABLE}.is_missed ;;
  }

  dimension: is_fulfilled {
    type: string
    sql: ${TABLE}.is_fulfilled ;;
  }

  dimension: qbr_not_fulfilled {
    type: string
    sql: ${TABLE}.qbr_not_fulfilled ;;
  }

  dimension: qbr_fulfilled {
    type: string
    sql: ${TABLE}.qbr_fulfilled ;;
  }

  measure: qbr_not_fulfilled_count {
    type: count_distinct
    label: "Not fulfilled (CKAM-QBR)"
    sql: ${TABLE}.qbr_not_fulfilled ;;
    filters: [qbr_not_fulfilled: "-NULL"]
    #drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.calendar_quarter,qbr_monitor.ckam_full_name,of_svc_contract.sc_rfa_no,qbr_monitor.contract_country_name,qbr_monitor.subject,qbr_monitor.startdatetime]
    drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.cust_grp_id,qbr_monitor.calendar_quarter,qbr_monitor.ckam_full_name,of_user.office_code_number,of_user_mgr.full_name,qbr_monitor.contract_country_name,qbr_monitor.subject,qbr_monitor.startdatetime]
  }

  measure: qbr_fulfilled_count {
    type: count_distinct
    label: "Fulfilled (CKAM-QBR)"
    sql: ${TABLE}.qbr_fulfilled ;;
    filters: [qbr_fulfilled: "-NULL"]
    #drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.calendar_quarter,qbr_monitor.ckam_full_name,of_svc_contract.sc_rfa_no,qbr_monitor.contract_country_name,qbr_monitor.subject,qbr_monitor.startdatetime]
    drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.cust_grp_id,qbr_monitor.calendar_quarter,qbr_monitor.ckam_full_name,of_user.office_code_number,of_user_mgr.full_name,qbr_monitor.contract_country_name,qbr_monitor.subject,qbr_monitor.startdatetime]
  }

  measure: qbr_not_fulfilled_count1 {
    type: count_distinct
    label: "Not fulfilled (CKAM-QBR)"
    sql: ${TABLE}.qbr_not_fulfilled ;;
    filters: [qbr_not_fulfilled: "-NULL"]
    #drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.calendar_quarter,qbr_monitor.ckam_full_name,of_svc_contract.sc_rfa_no,qbr_monitor.contract_country_name,qbr_monitor.subject,qbr_monitor.startdatetime]
    drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.cust_grp_id,qbr_monitor.calendar_quarter,qbr_monitor.ckam_full_name,of_user.office_code_number,of_user_mgr.full_name,qbr_monitor.contract_country_name,qbr_monitor.subject,qbr_monitor.startdatetime]
  }

  measure: qbr_fulfilled_count1 {
    type: count_distinct
    label: "Fulfilled (CKAM-QBR)"
    sql: ${TABLE}.qbr_fulfilled ;;
    filters: [qbr_fulfilled: "-NULL"]
    #drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.calendar_quarter,qbr_monitor.ckam_full_name,of_svc_contract.sc_rfa_no,qbr_monitor.contract_country_name,qbr_monitor.subject,qbr_monitor.startdatetime]
    drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.calendar_quarter,qbr_monitor.ckam_full_name,of_user.office_code_number,of_user_mgr.full_name,qbr_monitor.contract_country_name,qbr_monitor.subject,qbr_monitor.startdatetime]
  }

  #DCN-662 start
  measure: qbr_not_fulfilled_count_tile_by_ckam {
    type: count_distinct
    sql: 1 ;;
    drill_fields: [qbr_monitor.ckam_full_name,qbr_not_fulfilled_count,qbr_fulfilled_count,qbr_fulfilled_percentage_tile]
    hidden: yes
  }

  measure: qbr_fulfilled_count_tile_by_ckam {
    type: count_distinct
    sql: 1 ;;
    drill_fields: [qbr_monitor.ckam_full_name,qbr_fulfilled_count,qbr_not_fulfilled_count,qbr_fulfilled_percentage_tile]
    hidden: yes
  }

  measure: qbr_fulfilled_percentage_tile_by_ckam {
    type: count_distinct
    sql: 1 ;;
    drill_fields: [qbr_monitor.ckam_full_name,qbr_fulfilled_percentage_tile,qbr_fulfilled_count,qbr_not_fulfilled_count]
    hidden: yes
  }

  measure: qbr_not_fulfilled_count_tile_by_custgrp {
    type: count_distinct
    sql: 1 ;;
    drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.cust_grp_id,qbr_not_fulfilled_count,qbr_fulfilled_count,qbr_fulfilled_percentage_tile]
    hidden: yes
  }

  measure: qbr_fulfilled_count_tile_by_custgrp {
    type: count_distinct
    sql: 1 ;;
    drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.cust_grp_id,qbr_fulfilled_count,qbr_not_fulfilled_count,qbr_fulfilled_percentage_tile]
    hidden: yes
  }

  measure: qbr_fulfilled_percentage_tile_by_custgrp {
    type: count_distinct
    sql: 1 ;;
    drill_fields: [qbr_monitor.cust_grp_nm,qbr_monitor.cust_grp_id,qbr_fulfilled_percentage_tile,qbr_fulfilled_count,qbr_not_fulfilled_count]
    hidden: yes
  }

  measure: qbr_fulfilled_percentage_tile {
    type: number
    label: "Fulfillment % (CKAM-QBR)"
    sql: ${qbr_fulfilled_count} / NULLIF( ( ${qbr_fulfilled_count} + ${qbr_not_fulfilled_count} ), 0 );;
    value_format_name: percent_0
    link: {
      label: "By CKAM"
      url: "{{ qbr_fulfilled_percentage_tile_by_ckam._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ qbr_fulfilled_percentage_tile_by_custgrp._link }}"
    }
  }

  measure: qbr_not_fulfilled_count_tile {
    type: count_distinct
    label: "Not fulfilled (CKAM-QBR) - Tile"
    sql: ${TABLE}.qbr_not_fulfilled ;;
    link: {
      label: "By CKAM"
      url: "{{ qbr_not_fulfilled_count_tile_by_ckam._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ qbr_not_fulfilled_count_tile_by_custgrp._link }}"
    }
  }

  measure: qbr_fulfilled_count_tile {
    type: count_distinct
    label: "Fulfilled (CKAM-QBR) - Tile"
    sql: ${TABLE}.qbr_fulfilled ;;
    link: {
      label: "By CKAM"
      url: "{{ qbr_fulfilled_count_tile_by_ckam._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ qbr_fulfilled_count_tile_by_custgrp._link }}"
    }
  }



  #DCN-662 end

  set: detail {
    fields: [
      record_type,
      calendar_quarter,
      calendar_year,
      quarter_selection,
      sales_person,
      cust_grp_nm,
      cust_grp_id,
      subject,
      startdatetime,
      oneforce_id
    ]
  }

}
#######################################
view: mpr_monitor {
  derived_table: {
    sql: WITH
      month_master as (
        SELECT
          Calendar_Month
        , left(Calendar_Quarter,4)||'Q'||right(Calendar_Quarter,1) as Calendar_Quarter
        , Calendar_Year
        , qtr_start_date, qtr_end_date
        , mth_start_date, mth_end_date
        , CASE WHEN current_date() between qtr_start_date and qtr_end_date THEN 'Current Quater'
               WHEN date_sub( date_trunc( current_date(), month) , interval  3 month ) between qtr_start_date and qtr_end_date THEN 'Last Quater'
               ELSE NULL END as quarter_selection
        FROM ( SELECT
               Sales_Month as Calendar_Month
              ,Calendar_Quarter
              ,Calendar_Year
              ,parse_date('%Y%m', Sales_Month ) mth_start_date
              ,date_sub( date_add( parse_date('%Y%m', Sales_Month ),interval 1 month), interval 1 day)  mth_end_date
              ,parse_date('%Y%m', min(Sales_Month) over (partition by Calendar_Quarter) ) qtr_start_date
              ,date_sub( date_add( parse_date('%Y%m', max(Sales_Month) over (partition by Calendar_Quarter) ),interval 1 month), interval 1 day)  qtr_end_date
              FROM `ONEFORCE.OF_SALES_WEEK_MASTER` w
              GROUP BY 1, 2, 3 ) X
        ORDER BY 1
      ),
      ckam as (
        SELECT
        mbr.sales_person ,
        usr.FirstName || ' '|| usr.LastName as full_name,
        mbr.customer_group,
        --mbr.contract_country,
        ckam_ctry.contract_country_code as contract_country,
        c.country_name as contract_country_name,
        mbr.SVC_RFA_Number,
        date_trunc(mbr.CreatedDate, day) as createddate,
        g.cust_grp_id,
        g.cust_grp_nm
        FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
        INNER JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (mbr.customer_group = g.ONEForce_Id ) and g.delt_flg = 'N'
        INNER JOIN ${of_sales_team_member_contract_country.SQL_TABLE_NAME} as ckam_ctry on (mbr.oneforce_id = ckam_ctry.oneforce_id )
        --LEFT JOIN `ONEFORCE.OF_COUNTRY`         c on (mbr.contract_country = c.country_code )
        LEFT JOIN `ONEFORCE.OF_COUNTRY`         c on (ckam_ctry.contract_country_code = c.country_code )
        LEFT JOIN ${of_user.SQL_TABLE_NAME}     usr on (mbr.sales_person = usr.oneforce_id )
        WHERE mbr.team_role = 'Contract Key Account Manager (C-KAM)' and mbr.sales_person is not null and mbr.inactive = 'false' and ckam_ctry.contract_country_code is not null
      ),
      skam as (
        SELECT
        mbr.sales_person ,
        usr.FirstName || ' '|| usr.LastName as full_name,
        mbr.customer_group,
        --mbr.service_country,
        skam_ctry.service_country_code as service_country,
        c.country_name as service_country_name,
        mbr.SVC_RFA_Number,
        date_trunc(mbr.CreatedDate, day) as createddate,
        g.cust_grp_id,
        g.cust_grp_nm
        FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
        INNER JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g   on (mbr.customer_group = g.ONEForce_Id ) and g.delt_flg = 'N'
        INNER JOIN ${of_sales_team_member_service_country.SQL_TABLE_NAME} as skam_ctry on (mbr.oneforce_id = skam_ctry.oneforce_id )
        --LEFT JOIN  `ONEFORCE.OF_COUNTRY`        c   on (mbr.service_country = c.country_code )
        LEFT JOIN  `ONEFORCE.OF_COUNTRY`        c   on (skam_ctry.service_country_code = c.country_code )
        LEFT JOIN ${of_user.SQL_TABLE_NAME}     usr on (mbr.sales_person = usr.oneforce_id )
        WHERE mbr.team_role = 'Service Key Account Manager (S-KAM)' and mbr.sales_person is not null and mbr.inactive = 'false' and skam_ctry.service_country_code is not null
      ),
      evnt_mpr_ckam as (
      SELECT e.*,
             (CASE e.Event_Category WHEN 'Monthly Performance Review' THEN 'MPR:'
                                    WHEN 'Quarterly Business Review'  THEN 'QBR:'
                                    ELSE NULL END ) as pfx,
             (CASE WHEN g.oneforce_id is not null then g.ONEForce_Id else e.WhatId end ) as cust_grp_oneforce_id
       FROM `ONEFORCE.OF_EVENT` e
       LEFT JOIN `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` c on (e.WhatId = c.ONEForce_Id)
       LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g          on (c.cust_grp_id = g.cust_grp_id)
       WHERE e.Event_Category in (  'Monthly Performance Review' , 'Quarterly Business Review' )
       AND   e.Event_Status = 'Completed'
       AND   EXISTS(SELECT 1 FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
                    WHERE  mbr.team_role = 'Contract Key Account Manager (C-KAM)'
                    AND    e.ownerid     = mbr.sales_person  )
      ),
      evnt_mpr_skam as (
      SELECT e.*,
             (CASE WHEN g.oneforce_id is not null then g.ONEForce_Id else e.WhatId end ) as cust_grp_oneforce_id
       FROM `ONEFORCE.OF_EVENT` e
       LEFT JOIN `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` c on (e.WhatId = c.ONEForce_Id)
       LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g          on (c.cust_grp_id = g.cust_grp_id)
       WHERE e.Event_Category in ( 'Monthly Performance Review'  )
       AND   e.Event_Status = 'Completed'
       AND   EXISTS(SELECT 1 FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
                    WHERE  mbr.team_role = 'Service Key Account Manager (S-KAM)'
                    AND    e.ownerid     = mbr.sales_person  )
      )
      SELECT 'CKAM-MPR' as record_type,
             mth.Calendar_Month, mth.Calendar_Quarter, mth.Calendar_Year, mth.quarter_selection,
             ckam.sales_person,
             ckam.full_name as kam_full_name,
             ckam.full_name as kam_full_name2,
             ckam.cust_grp_nm, ckam.customer_group as cust_grp_oneforce_id, ckam.SVC_RFA_Number as svc_rfa_oneforce_id,
             ckam.cust_grp_id, -- DCN-1013
             ckam.contract_country_name as kam_country_name,
             ckam.contract_country_name as kam_country_name2,
             ckam.contract_country as kam_country,
             (case when evnt_mpr_ckam.oneforce_id is null then 'Missed' else evnt_mpr_ckam.pfx||evnt_mpr_ckam.subject end) as subject, evnt_mpr_ckam.startdatetime , evnt_mpr_ckam.completed_on , evnt_mpr_ckam.oneforce_id,
             (case when evnt_mpr_ckam.oneforce_id is null then 'Yes' else 'No' end) is_missed,
             (case when evnt_mpr_ckam.oneforce_id is null then 'No' else 'Yes' end) is_fulfilled,
             (case when evnt_mpr_ckam.oneforce_id is null     then mth.Calendar_Month||'-'||ckam.sales_person||'-'||ckam.cust_grp_id||'-'||ckam.contract_country else NULL end) mpr_not_fulfilled,
             (case when evnt_mpr_ckam.oneforce_id is not null then mth.Calendar_Month||'-'||ckam.sales_person||'-'||ckam.cust_grp_id||'-'||ckam.contract_country else NULL end) mpr_fulfilled
      FROM month_master as mth
      LEFT JOIN ckam     on (ckam.createddate <= mth.mth_end_date)
      LEFT JOIN evnt_mpr_ckam on ( ckam.sales_person     = evnt_mpr_ckam.ownerid and
                                   -- ckam.contract_country = evnt_mpr_ckam.country and -DCN-1061
                                   ckam.customer_group   = evnt_mpr_ckam.cust_grp_oneforce_id and
                                   (date_trunc( evnt_mpr_ckam.startdatetime, day ) between mth.mth_start_date and mth.mth_end_date)
                                   --( evnt_mpr_ckam.completed_on between mth.mth_start_date and mth.mth_end_date)  -- DCN-662 use event start date instead of event completed on
                                 )
      WHERE mth.mth_start_date <= date_trunc( current_date(), month)
      --and mth.Calendar_Month  between '202201' and '202206' --and evnt_mpr_ckam.oneforce_id is not null and 1=2
      -----------------
      UNION ALL
      -----------------
      SELECT 'SKAM-MPR' as record_type,
             mth.Calendar_Month, mth.Calendar_Quarter, mth.Calendar_Year, mth.quarter_selection,
             skam.sales_person,
             skam.full_name as kam_full_name,
             skam.full_name as kam_full_name2,
             skam.cust_grp_nm, skam.customer_group as cust_grp_oneforce_id, skam.SVC_RFA_Number as svc_rfa_oneforce_id,
             skam.cust_grp_id, --DCN-1013
             skam.service_country_name as kam_country_name,
             skam.service_country_name as kam_country_name2,
             skam.service_country as kam_country,
             (case when evnt_mpr_skam.oneforce_id is null then 'Missed' else 'MPR:'||evnt_mpr_skam.subject end) as subject, evnt_mpr_skam.startdatetime , evnt_mpr_skam.completed_on , evnt_mpr_skam.oneforce_id,
             (case when evnt_mpr_skam.oneforce_id is null then 'Yes' else 'No' end) is_missed,
             (case when evnt_mpr_skam.oneforce_id is null then 'No' else 'Yes' end) is_fulfilled,
             (case when evnt_mpr_skam.oneforce_id is null     then mth.Calendar_Month||'-'||skam.sales_person||'-'||skam.cust_grp_id||'-'||skam.service_country else NULL end) mpr_not_fulfilled,
             (case when evnt_mpr_skam.oneforce_id is not null then mth.Calendar_Month||'-'||skam.sales_person||'-'||skam.cust_grp_id||'-'||skam.service_country else NULL end) mpr_fulfilled
      FROM month_master as mth
      LEFT JOIN skam     on (skam.createddate <= mth.mth_end_date)
      LEFT JOIN evnt_mpr_skam on ( skam.sales_person     = evnt_mpr_skam.ownerid and
                                   -- skam.service_country  = evnt_mpr_skam.country and --DCN-1061
                                   skam.customer_group   = evnt_mpr_skam.cust_grp_oneforce_id and
                                   ( date_trunc( evnt_mpr_skam.startdatetime, day ) between mth.mth_start_date and mth.mth_end_date)
                                   --( evnt_mpr_skam.completed_on between mth.mth_start_date and mth.mth_end_date) -- DCN-662 use event start date instead of event completed on
                                 )
      WHERE mth.mth_start_date <= date_trunc( current_date(), month)
      --and mth.Calendar_Month  between '202201' and '202206' --and evnt_mpr_ckam.oneforce_id is not null and 1=2
      ORDER BY 1
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: record_type {
    type: string
    sql: ${TABLE}.record_type ;;
  }

  dimension: calendar_month {
    type: string
    sql: ${TABLE}.Calendar_Month ;;
  }

  dimension: calendar_quarter {
    type: string
    sql: ${TABLE}.Calendar_Quarter ;;
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.Calendar_Year ;;
  }

  dimension: quarter_selection {
    type: string
    sql: ${TABLE}.quarter_selection ;;
  }

  dimension: sales_person {
    type: string
    sql: ${TABLE}.sales_person ;;
  }

  dimension: kam_full_name {
    label: "C-KAM"
    type: string
    sql: ${TABLE}.kam_full_name ;;
  }

  dimension: kam_full_name2 {
    label: "S-KAM"
    type: string
    sql: ${TABLE}.kam_full_name2 ;;
  }

  dimension: cust_grp_nm {
    label: "Customer Group"
    type: string
    sql: ${TABLE}.cust_grp_nm ;;
  }

  dimension: cust_grp_id {
    label: "Customer Group Code"
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: cust_grp_oneforce_id {
    type: string
    sql: ${TABLE}.cust_grp_oneforce_id ;;
  }

  dimension: svc_rfa_oneforce_id {
    type: string
    sql: ${TABLE}.svc_rfa_oneforce_id ;;
  }

  dimension: kam_country_name {
    label: "C-KAM Contract Country"
    type: string
    sql: ${TABLE}.kam_country_name ;;
  }

  dimension: kam_country_name2 {
    label: "S-KAM Service Country"
    type: string
    sql: ${TABLE}.kam_country_name2 ;;
  }

  dimension: kam_country {
    label: "KAM Country Code"
    type: string
    sql: ${TABLE}.kam_country ;;
  }

  dimension: subject {
    label: "Event Subject"
    type: string
    sql: ${TABLE}.subject ;;
    html:
      {% if value == 'Missed' %}
        <p>{{rendered_value}}</p>
      {% else %}
        <p><a href="https://one-line.lightning.force.com/lightning/r/Event/{{ mpr_monitor.oneforce_id._value }}/view" target="_blank">{{rendered_value}}</a></p>
      {% endif %}
    ;;

  }

  #dimension_group: startdatetime {
  #  label: "Event Date"
  #  type: time
  #  datatype: datetime
  #  sql: ${TABLE}.startdatetime ;;
  #}

  dimension: startdatetime {
    label: "Event Start Date"
    type: date
    datatype: datetime
    sql: ${TABLE}.startdatetime ;;
  }

  dimension: completed_on {
    label: "Event Completed On"
    type: date
    datatype: date
    sql: ${TABLE}.completed_on ;;
  }

  dimension: oneforce_id {
    label: "Event ONEForce Id"
    type: string
    sql: ${TABLE}.oneforce_id ;;
  }

  dimension: is_missed {
    type: string
    sql: ${TABLE}.is_missed ;;
  }

  dimension: is_fulfilled {
    type: string
    sql: ${TABLE}.is_fulfilled ;;
  }

  dimension: mpr_not_fulfilled {
    type: string
    sql: ${TABLE}.mpr_not_fulfilled ;;
  }

  dimension: mpr_fulfilled {
    type: string
    sql: ${TABLE}.mpr_fulfilled ;;
  }

  #DCN-662 start
  measure: mpr_fulfilled_count_tile_by_ckam {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.kam_full_name,mpr_monitor.mpr_fulfilled_count,mpr_monitor.mpr_not_fulfilled_count, mpr_fulfilled_percentage_tile]
    hidden: yes
  }

  measure: mpr_not_fulfilled_count_tile_by_ckam {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.kam_full_name,mpr_monitor.mpr_not_fulfilled_count,mpr_monitor.mpr_fulfilled_count, mpr_fulfilled_percentage_tile]
    hidden: yes
  }

  measure: mpr_fulfilled_percentage_tile_by_ckam {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.kam_full_name,mpr_fulfilled_percentage_tile,mpr_monitor.mpr_fulfilled_count,mpr_monitor.mpr_not_fulfilled_count]
    hidden: yes
  }

  measure: mpr_fulfilled_count_tile_by_skam {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.kam_full_name2,mpr_monitor.mpr_fulfilled_count2,mpr_monitor.mpr_not_fulfilled_count2, mpr_fulfilled_percentage_tile2]
    hidden: yes
  }

  measure: mpr_not_fulfilled_count_tile_by_skam {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.kam_full_name2,mpr_monitor.mpr_not_fulfilled_count2,mpr_monitor.mpr_fulfilled_count2, mpr_fulfilled_percentage_tile2]
    hidden: yes
  }

  measure: mpr_fulfilled_percentage_tile_by_skam {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.kam_full_name2,mpr_fulfilled_percentage_tile2,mpr_monitor.mpr_fulfilled_count2,mpr_monitor.mpr_not_fulfilled_count2]
    hidden: yes
  }

  measure: mpr_fulfilled_count_tile_by_custgrp {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.cust_grp_nm,mpr_monitor.cust_grp_id, mpr_monitor.mpr_fulfilled_count,mpr_monitor.mpr_not_fulfilled_count, mpr_fulfilled_percentage_tile]
    hidden: yes
  }

  measure: mpr_not_fulfilled_count_tile_by_custgrp {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.cust_grp_nm,mpr_monitor.cust_grp_id,mpr_monitor.mpr_not_fulfilled_count,mpr_monitor.mpr_fulfilled_count, mpr_fulfilled_percentage_tile]
    hidden: yes
  }

  measure: mpr_fulfilled_percentage_tile_by_custgrp {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.cust_grp_nm,mpr_monitor.cust_grp_id,mpr_fulfilled_percentage_tile,mpr_monitor.mpr_fulfilled_count,mpr_monitor.mpr_not_fulfilled_count]
    hidden: yes
  }

  measure: mpr_fulfilled_count_tile_by_custgrp2 {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.cust_grp_nm,mpr_monitor.cust_grp_id,mpr_monitor.mpr_fulfilled_count2,mpr_monitor.mpr_not_fulfilled_count2, mpr_fulfilled_percentage_tile2]
    hidden: yes
  }

  measure: mpr_not_fulfilled_count_tile_by_custgrp2 {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.cust_grp_nm,mpr_monitor.cust_grp_id,mpr_monitor.mpr_fulfilled_count2,mpr_monitor.mpr_not_fulfilled_count2, mpr_fulfilled_percentage_tile2]
    hidden: yes
  }

  measure: mpr_fulfilled_percentage_tile_by_custgrp2 {
    type: number
    sql: 1;;
    drill_fields: [mpr_monitor.cust_grp_nm,mpr_monitor.cust_grp_id,mpr_fulfilled_percentage_tile2,mpr_monitor.mpr_fulfilled_count2,mpr_monitor.mpr_not_fulfilled_count2]
    hidden: yes
  }

  measure: mpr_not_fulfilled_count_tile {
    type: count_distinct
    label: "Not fulfilled (CKAM-MPR) - For Tile"
    sql: ${TABLE}.mpr_not_fulfilled ;;
    #filters: [mpr_not_fulfilled: "-NULL"]
    link: {
      label: "By CKAM"
      url: "{{ mpr_not_fulfilled_count_tile_by_ckam._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ mpr_not_fulfilled_count_tile_by_custgrp._link }}"
    }
  }

  measure: mpr_fulfilled_count_tile {
    type: count_distinct
    label: "Fulfilled (CKAM-MPR) - For Tile"
    sql: ${TABLE}.mpr_fulfilled ;;
    #filters: [mpr_fulfilled: "-NULL"]
    link: {
      label: "By CKAM"
      url: "{{ mpr_fulfilled_count_tile_by_ckam._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ mpr_fulfilled_count_tile_by_custgrp._link }}"
    }
  }

  measure: mpr_fulfilled_percentage_tile {
    type: number
    label: "Fulfillment % (CKAM-MPR)"
    sql: ${mpr_fulfilled_count} / NULLIF( ( ${mpr_fulfilled_count} + ${mpr_not_fulfilled_count} ), 0 );;
    value_format_name: percent_0
    link: {
      label: "By CKAM"
      url: "{{ mpr_fulfilled_percentage_tile_by_ckam._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ mpr_fulfilled_percentage_tile_by_custgrp._link }}"
    }
  }


  measure: mpr_not_fulfilled_count_tile2 {
    type: count_distinct
    label: "Not fulfilled (SKAM-MPR) - For Tile"
    sql: ${TABLE}.mpr_not_fulfilled ;;
    #filters: [mpr_not_fulfilled: "-NULL"]
    link: {
      label: "By SKAM"
      url: "{{ mpr_not_fulfilled_count_tile_by_skam._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ mpr_not_fulfilled_count_tile_by_custgrp2._link }}"
    }
  }

  measure: mpr_fulfilled_count_tile2 {
    type: count_distinct
    label: "Fulfilled (SKAM-MPR) - For Tile"
    sql: ${TABLE}.mpr_fulfilled ;;
    #filters: [mpr_fulfilled: "-NULL"]
    link: {
      label: "By SKAM"
      url: "{{ mpr_fulfilled_count_tile_by_skam._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ mpr_fulfilled_count_tile_by_custgrp2._link }}"
    }
  }

  measure: mpr_fulfilled_percentage_tile2 {
    type: number
    label: "Fulfillment % (SKAM-MPR)"
    sql: ${mpr_fulfilled_count2} / NULLIF( ( ${mpr_fulfilled_count2} + ${mpr_not_fulfilled_count2} ), 0 );;
    value_format_name: percent_0
    link: {
      label: "By SKAM"
      url: "{{ mpr_fulfilled_percentage_tile_by_skam._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ mpr_fulfilled_percentage_tile_by_custgrp2._link }}"
    }
  }






  #DCN-662 end

  measure: mpr_not_fulfilled_count {
    type: count_distinct
    label: "Not fulfilled (CKAM-MPR)"
    sql: ${TABLE}.mpr_not_fulfilled ;;
    filters: [mpr_not_fulfilled: "-NULL"]
    #drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.calendar_month,mpr_monitor.kam_full_name,of_svc_contract.sc_rfa_no,mpr_monitor.kam_country_name,mpr_monitor.subject,mpr_monitor.startdatetime]
    drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.cust_grp_id,mpr_monitor.calendar_month,mpr_monitor.kam_full_name,of_user.office_code_number,of_user_mgr.full_name,mpr_monitor.kam_country_name,mpr_monitor.subject,mpr_monitor.startdatetime]
  }

  measure: mpr_fulfilled_count {
    type: count_distinct
    label: "Fulfilled (CKAM-MPR)"
    sql: ${TABLE}.mpr_fulfilled ;;
    filters: [mpr_fulfilled: "-NULL"]
    #drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.calendar_month,mpr_monitor.kam_full_name,of_svc_contract.sc_rfa_no,mpr_monitor.kam_country_name,mpr_monitor.subject,mpr_monitor.startdatetime]
    drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.cust_grp_id,mpr_monitor.calendar_month,mpr_monitor.kam_full_name,of_user.office_code_number,of_user_mgr.full_name,mpr_monitor.kam_country_name,mpr_monitor.subject,mpr_monitor.startdatetime]
  }

  measure: mpr_not_fulfilled_count2 {
    type: count_distinct
    label: "Not fulfilled (SKAM-MPR)"
    sql: ${TABLE}.mpr_not_fulfilled ;;
    filters: [mpr_not_fulfilled: "-NULL"]
    #drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.calendar_month,mpr_monitor.kam_full_name2,of_svc_contract.sc_rfa_no,mpr_monitor.kam_country_name2,mpr_monitor.subject,mpr_monitor.startdatetime]
    drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.cust_grp_id,mpr_monitor.calendar_month,mpr_monitor.kam_full_name2,of_user.office_code_number,of_user_mgr.full_name,mpr_monitor.kam_country_name2,mpr_monitor.subject,mpr_monitor.startdatetime]
  }

  measure: mpr_fulfilled_count2 {
    type: count_distinct
    label: "Fulfilled (SKAM-MPR)"
    sql: ${TABLE}.mpr_fulfilled ;;
    filters: [mpr_fulfilled: "-NULL"]
    #drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.calendar_month,mpr_monitor.kam_full_name2,of_svc_contract.sc_rfa_no,mpr_monitor.kam_country_name2,mpr_monitor.subject,mpr_monitor.startdatetime]
    drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.cust_grp_id,mpr_monitor.calendar_month,mpr_monitor.kam_full_name2,of_user.office_code_number,of_user_mgr.full_name,mpr_monitor.kam_country_name2,mpr_monitor.subject,mpr_monitor.startdatetime]
  }

  # Sales Process Landing Page ----- Start -------
  measure: mpr_fulfilled_count1 {
    type: count_distinct
    label: "Fulfilled (CKAM-MPR)"
    sql: ${TABLE}.mpr_fulfilled ;;
    filters: [mpr_fulfilled: "-NULL",record_type: "CKAM-MPR"]
    #drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.calendar_month,mpr_monitor.kam_full_name,of_svc_contract.sc_rfa_no,mpr_monitor.kam_country_name,mpr_monitor.subject,mpr_monitor.startdatetime]
    drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.cust_grp_id,mpr_monitor.calendar_month,mpr_monitor.kam_full_name,of_user.office_code_number,of_user_mgr.full_name,mpr_monitor.kam_country_name,mpr_monitor.subject,mpr_monitor.startdatetime]
  }

  measure: mpr_fulfilled_count3 {
    type: count_distinct
    label: "Fulfilled (SKAM-MPR)"
    sql: ${TABLE}.mpr_fulfilled ;;
    filters: [mpr_fulfilled: "-NULL",record_type: "SKAM-MPR"]
    #drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.calendar_month,mpr_monitor.kam_full_name,of_svc_contract.sc_rfa_no,mpr_monitor.kam_country_name,mpr_monitor.subject,mpr_monitor.startdatetime]
    drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.cust_grp_id,mpr_monitor.calendar_month,mpr_monitor.kam_full_name,of_user.office_code_number,of_user_mgr.full_name,mpr_monitor.kam_country_name,mpr_monitor.subject,mpr_monitor.startdatetime]
  }

  measure: mpr_not_fulfilled_count3 {
    type: count_distinct
    label: "Not fulfilled (CKAM-MPR)"
    sql: ${TABLE}.mpr_not_fulfilled ;;
    filters: [mpr_not_fulfilled: "-NULL",record_type: "CKAM-MPR"]
    #drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.calendar_month,mpr_monitor.kam_full_name2,of_svc_contract.sc_rfa_no,mpr_monitor.kam_country_name2,mpr_monitor.subject,mpr_monitor.startdatetime]
    drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.cust_grp_id,mpr_monitor.calendar_month,mpr_monitor.kam_full_name2,of_user.office_code_number,of_user_mgr.full_name,mpr_monitor.kam_country_name2,mpr_monitor.subject,mpr_monitor.startdatetime]
  }

  measure: mpr_not_fulfilled_count4 {
    type: count_distinct
    label: "Not fulfilled (SKAM-MPR)"
    sql: ${TABLE}.mpr_not_fulfilled ;;
    filters: [mpr_not_fulfilled: "-NULL",record_type: "SKAM-MPR"]
    #drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.calendar_month,mpr_monitor.kam_full_name2,of_svc_contract.sc_rfa_no,mpr_monitor.kam_country_name2,mpr_monitor.subject,mpr_monitor.startdatetime]
    drill_fields: [mpr_monitor.cust_grp_nm ,mpr_monitor.cust_grp_id,mpr_monitor.calendar_month,mpr_monitor.kam_full_name2,of_user.office_code_number,of_user_mgr.full_name,mpr_monitor.kam_country_name2,mpr_monitor.subject,mpr_monitor.startdatetime]
  }
  # Sales Process Landing Page ----- End -------

  set: detail {
    fields: [
      record_type,
      calendar_month,
      calendar_quarter,
      calendar_year,
      quarter_selection,
      sales_person,
      cust_grp_nm,
      cust_grp_id,
      subject,
      startdatetime,
      oneforce_id
    ]
  }

}

# include: "of_user.view"
view: mpr_qbr_monitor_of_user {
  extends: [of_user]

  dimension: office_Country_Code {
    view_label: "User"
    label: "Country"
    drill_fields: [office_code_number]
  }

  dimension: office_code_number {
    view_label: "User"
    label: "Office Code"
  }

  dimension: regional_head_office_short_nm {
    label: "Region"
    view_label: "User"
    drill_fields: [office_Country_Code, office_code_number]
  }


}

#DCN-662 : start
view: mpr_qbr_monitor_of_user_mgr {
  extends: [of_user]

  dimension: office_Country_Code {
    view_label: "User's Manager"
    label: "Country"
    drill_fields: [office_code_number]
  }

  dimension: office_code_number {
    view_label: "User's Manager"
    label: "Office Code"
  }

  dimension: regional_head_office_short_nm {
    view_label: "User's Manager"
    label: "Region"
    drill_fields: [office_Country_Code, office_code_number]
  }

  dimension: full_name {
    label: "Manager"
  }
}

#DCN-662 : end

view: na_bkg_vs_budget_qry {
  derived_table: {
    sql:
    SELECT 'Budget' as Record_Type,
          u.ONEForce_ID as usr_id,
          c.us_sub_region as usr_sub_region, -- NA dashboard
          c.Service_Scope_Group,
          c.bound as bound,
          c.dom_non_dom as dominant_flg,
          CASE c.Service_Scope_Group||'|'||c.bound||'|'||c.dom_non_dom
               WHEN 'LN|S|N-DOM' THEN 'Latin'
               WHEN 'TP|E|DOM'   THEN 'TP Domi.'
               WHEN 'TP|W|N-DOM' THEN 'TP Non Domi.'
               WHEN 'TA|E|N-DOM' THEN 'TA Non Domi.'
               ELSE NULL END  as Trade,
          CAST(NULL as string) as slane_cd,
          c.Customer_Code as cust_cd,
          (CASE c.Type_ WHEN 'RFR' THEN 'Reefer' ELSE 'Dry' END) as cargo_type,
          m.Sales_Month,
          m.Sales_Week,
          d.monthly_target / ( count(distinct m.Sales_Week) over (partition by m.Sales_Month)) TEU ,
          d.Monthly_Target_CM_USD / ( count(distinct m.Sales_Week) over (partition by m.Sales_Month)) CM , -- NA dashboard new field
    FROM `ONEFORCE.OF_SALES_BUDGET_CAPTURE` c
    INNER JOIN `ONEFORCE.OF_SALES_BUDGET_CAPTURE_DTL` d ON (c.ONEForce_ID = d.Sales_Budget_Capture)
    INNER JOIN `ONEFORCE.OF_SALES_WEEK_MASTER` m ON (m.Sales_Month = CAST( EXTRACT(YEAR FROM d.Month_Year)*100 + EXTRACT(MONTH FROM d.Month_Year) AS STRING) )
    INNER JOIN `ONEFORCE.OF_USER` u ON (u.ONEForce_ID = c.Salesperson)
    --group by 1, 2 , 3, 4, 5, 6, 7, 8, 9, 10

      ----------------------------------------------
      UNION ALL
      ----------------------------------------------

      SELECT 'Booking' as Record_Type,
      u.ONEForce_ID as usr_id,
      --u.sub_region as usr_sub_region, -- NA dashboard
      u.sub_region as usr_sub_region, -- NA dashboard
      scp.Service_Scope_Group_Code,
      scp.bound_code as bound,
      CASE WHEN bkg.svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N-DOM'
      WHEN bkg.svc_scp_cd = 'LEA' THEN 'DOM'
      WHEN bkg.svc_scp_cd = 'IAA' AND right(t_vvd_cd,1) IN ('S','W') THEN 'DOM'
      WHEN bkg.svc_scp_cd = 'IAA' THEN 'N-DOM'
      ELSE scp.dominant_flag
      END as dominant_flg       ,
      CASE WHEN bkg.svc_scp_cd IN ('LAS','LWS') THEN 'Latin'
      WHEN scp.Service_Scope_Group_Code||'|'||scp.Dominant_Flag = 'TP|DOM'   THEN 'TP Domi.'
      WHEN scp.Service_Scope_Group_Code||'|'||scp.Dominant_Flag = 'TP|N-DOM' THEN 'TP Non Domi.'
      WHEN scp.Service_Scope_Group_Code||'|'||scp.Dominant_Flag = 'TA|N-DOM' THEN 'TA Non Domi.'
      ELSE NULL END as Trade,
      substr(rlane_cd,1,3) as slane_cd,
      coalesce(sc.cust_cd, bkg.ctrt_cust_cd) as cust_cd,
      (CASE WHEN bkg.cntr_tpsz LIKE 'R%' AND bkg.rd_cgo_flg = 'N' THEN 'Reefer' ELSE 'Dry' END) as cargo_type,
      m.Sales_Month,
      m.Sales_Week,
      bkg.bkg_teu as TEU,
      CAST( (CASE WHEN scp.Service_Scope_Group_Code = 'TP'
      THEN cm_amt2 - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(bkg.cntr_tpsz,1,1)='Q' then 0 else bkg.bkg_teu end) )
      ELSE cm_amt1 - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(bkg.cntr_tpsz,1,1)='Q' then 0 else bkg.bkg_teu end) )
      END ) as numeric) as CM_AMT
      FROM `ONEFORCE.OF_BOOKING` bkg
      INNER JOIN `ONEFORCE.OF_SALES_WEEK_MASTER` m ON ( CAST(m.Sales_Week as INT64) = bkg.WEEK )
      LEFT JOIN `ONEFORCE.OF_SVC_CONTRACT` as sc ON (bkg.svc_cont_no = sc.sc_rfa_no)
      --LEFT JOIN `ONEFORCE.OF_SVC_CONTRACT_DTL` as sd ON (sc.sc_rfa_no = sd.sc_rfa_no AND bkg.svc_scp_cd = sd.svc_scp_cd) -- sundar suggested to use svc scp sales person, but later suspended this idea, due to much incomplete data in OF_SVC_CONTRACT_DTL
      --LEFT JOIN `ONEFORCE.OF_USER` AS u ON trim(lower(sd.SREP_EML)) = trim(lower((CASE WHEN u.TPA_user = 'true' THEN u.Email_2 ELSE u.Email END))) -- sundar suggested to use svc scp sales person
      LEFT JOIN `ONEFORCE.OF_USER` AS u ON trim(lower(sc.SREP_EML)) = trim(lower((CASE WHEN u.TPA_user = 'true' THEN u.Email_2 ELSE u.Email END)))
      LEFT JOIN `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` as cust ON ( cust.cust_cd = coalesce(sc.cust_cd, bkg.ctrt_cust_cd) )
      LEFT JOIN `ONEFORCE.OF_SVC_SCP` as scp ON (bkg.SVC_SCP_CD = scp.Service_Scope_Code)
      LEFT JOIN `ONEFORCE.UPLOAD_VIP_COST` as othercost
      ON ( othercost.rc_flg           = bkg.rc_flg           AND
      othercost.REV_PERIOD_YRQTR = bkg.rev_period_yrqtr AND
      othercost.CUST_GRP_ID      = cust.cust_grp_id AND
      othercost.SVC_GRP_CD       = scp.service_scope_group_code AND
      othercost.DMNT_FLG         = (CASE WHEN bkg.svc_scp_cd = 'LEA' AND bkg.n1st_pol_cd LIKE 'MX%' THEN 'N'
      WHEN bkg.svc_scp_cd = 'LEA' THEN 'Y'
      WHEN bkg.svc_scp_cd = 'IAA' AND right(bkg.t_vvd_cd,1) IN ('S','W') THEN 'Y'
      WHEN bkg.svc_scp_cd = 'IAA' THEN 'N'
      WHEN scp.dominant_flag = 'DOM' THEN 'Y'
      ELSE 'N' END)
      )
      WHERE bkg.bkg_sts_cd NOT IN ('X')
      --group by 1 , 2, 3, 4, 5
      ;;
  }

  parameter: measure_choice {
    type:  string
    label: "Choice of Measure"
    allowed_value: { value:"CM"  label:"CM" }
    allowed_value: { value:"TEU" label:"TEU" }
    default_value: "TEU"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: record_type {
    type: string
    sql: ${TABLE}.Record_Type ;;
  }

  dimension: usr_id {
    type: string
    sql: ${TABLE}.usr_id ;;
  }

  dimension: usr_sub_region {
    type: string
    sql: ${TABLE}.usr_sub_region ;;
  }

  dimension: bound {
    type: string
    sql: ${TABLE}.bound ;;
  }

  dimension: dominant_flg {
    type: string
    sql: ${TABLE}.dominant_flg ;;
  }


  dimension: trade_order {
    type: string
    sql: case ${TABLE}.trade
         when 'Latin' then 4
         when 'TA Non Domi.' then 3
         when 'TP Domi.' then 1
         when 'TP Non Domi.' then 2
         else 5 end ;;
  }

  dimension: trade {
    order_by_field: trade_order
    type: string
    sql: ${TABLE}.trade ;;
  }




  dimension: slane_cd {
    label: "Service Lane Code"
    type: string
    sql: ${TABLE}.slane_cd ;;
  }

  dimension: cargo_type {
    label: "Cargo Type"
    type: string
    sql: ${TABLE}.cargo_type ;;
  }

  dimension: cust_cd {
    type: string
    sql: ${TABLE}.cust_cd ;;
  }

  dimension: service_scope_group {
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: sales_week {
    type: string
    sql: ${TABLE}.Sales_Week ;;
  }

  measure: teu {
    type: sum
    sql: ${TABLE}.TEU ;;
  }

  measure: teu_booking {
    type: sum
    sql: ${TABLE}.TEU ;;
    filters: [record_type: "Booking"]
    #value_format_name: decimal_0
    value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\" "
  }

  measure: teu_target {
    type: sum
    sql: ${TABLE}.TEU ;;
    filters: [record_type: "Budget"]
    #value_format_name: decimal_0
    value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\" "
  }

  measure: teu_booking_raw {
    type: sum
    sql: ${TABLE}.TEU ;;
    filters: [record_type: "Booking"]
    value_format_name: decimal_0
  }

  measure: teu_target_raw {
    type: sum
    sql: ${TABLE}.TEU ;;
    filters: [record_type: "Budget"]
    value_format_name: decimal_0
  }

  measure: cm {
    type: sum
    sql: ${TABLE}.CM ;;
  }

  measure: cm_booking {
    type: sum
    sql: ${TABLE}.CM ;;
    filters: [record_type: "Booking"]
    #value_format_name: decimal_0
    value_format: "[>=10000000]$#,##0,,\"M\" ; [>=10000]$#,##0,\"K\" ; $0.00,\"K\" "
  }

  measure: cm_target {
    type: sum
    sql: ${TABLE}.CM ;;
    filters: [record_type: "Budget"]
    #value_format_name: decimal_0
    value_format: "[>=10000000]$#,##0,,\"M\" ; [>=10000]$#,##0,\"K\" ; $0.00,\"K\" "
  }

  measure: measure_for_target_chosen {
    type:  number
    label: "{% if    measure_choice._parameter_value ==  \"'CM'\"  %}Target (CM){%
    elsif measure_choice._parameter_value ==  \"'TEU'\" %}Target (TEU){%
    else  %}xxx{% endif %}"
    sql:  {% if    measure_choice._parameter_value == "'CM'"  %} ${cm_target}
          {% elsif measure_choice._parameter_value == "'TEU'" %} ${teu_target}
          {% else %} ${teu_target}
          {% endif %};;
    value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\" "
  }

  measure: measure_for_booking_chosen {
    type:  number
    label: "{% if    measure_choice._parameter_value ==  \"'CM'\"  %}Actual (CM){%
    elsif measure_choice._parameter_value ==  \"'TEU'\" %}Actual (TEU){%
    else  %}xxx{% endif %}"
    sql:  {% if    measure_choice._parameter_value == "'CM'"  %} ${cm_booking}
          {% elsif measure_choice._parameter_value == "'TEU'" %} ${teu_booking}
          {% else %} ${teu_booking}
          {% endif %};;
    value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\" "
  }

  measure: cm_booking_raw {
    type: sum
    sql: ${TABLE}.CM ;;
    filters: [record_type: "Booking"]
    value_format_name: usd_0
  }

  measure: cm_target_raw {
    type: sum
    sql: ${TABLE}.CM ;;
    filters: [record_type: "Budget"]
    value_format_name: usd_0
  }



  set: detail {
    fields: [record_type, usr_id, service_scope_group, sales_week, teu]
  }
}

view: na_budget_trade_type {
  derived_table: {
    sql:
      SELECT  'Latin'        as trade UNION ALL
      SELECT  'TP Domi.'     as trade UNION ALL
      SELECT  'TP Non Domi.' as trade UNION ALL
      SELECT  'TA Non Domi.' as trade
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: trade {
    type: string
    sql: ${TABLE}.trade ;;
  }

  set: detail {
    fields: [trade]
  }
}

view: na_cargo_type {
  derived_table: {
    sql: SELECT 'Reefer' as cargo_type UNION ALL
         SELECT 'Dry'    as cargo_type
       ;;
  }

  dimension: cargo_type {
    label: "Cargo Type"
    type: string
    sql: ${TABLE}.cargo_type ;;
  }

}

view: na_case_inquiry {
  derived_table: {
    sql:
    --WITH ckam_skam_lst as (
    --     SELECT
    --        mbr.sales_person ,
    --        ckam_ctry.contract_country_code as kam_country_code,
    --        g.cust_grp_id
    --        FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
    --        LEFT JOIN ${of_sales_team_member_contract_country.SQL_TABLE_NAME} ckam_ctry on (mbr.oneforce_id = ckam_ctry.oneforce_id )
    --        LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (mbr.customer_group = g.ONEForce_Id )
    --        WHERE mbr.team_role in ( 'Contract Key Account Manager (C-KAM)')  and mbr.sales_person is not null
    --        UNION DISTINCT
    --        SELECT
    --        mbr.sales_person ,
    --        skam_ctry.service_country_code as kam_country_code,
    --        g.cust_grp_id
    --        FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
    --        LEFT JOIN ${of_sales_team_member_service_country.SQL_TABLE_NAME} as skam_ctry on (mbr.oneforce_id = skam_ctry.oneforce_id )
    --        LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (mbr.customer_group = g.ONEForce_Id )
    --        WHERE mbr.team_role in ( 'Service Key Account Manager (S-KAM)') and mbr.sales_person is not null
    --)
          SELECT
          of_case.case_casenumber                  AS case_casenumber,
          of_case.case_ownerid                     AS case_ownerid,
          of_case.case_total_escalation            AS case_total_escalation,
          of_case.case_priority                    AS case_priority,
          of_case.case_sales_week                  AS case_sales_week,
          of_case.case_status                      AS case_status,
          of_case.case_is_active                   as case_is_active,
          of_case.case_resolution_reason           as case_resolution_reason,
          of_case.case_suppliedemail               AS case_suppliedemail,
          of_case.case_createddate                 AS case_createddate,
          of_case.case_office                      AS case_office ,
          of_case.case_type                        AS case_type,
          of_case.case_origin                      AS case_origin,
          of_case.case_category_l2                 AS case_category_l2,
          of_case.case_country_code                AS case_country_code,
          of_case.case_owner_fullname              AS case_owner_fullname,
          -- Customer
          of_case.case_customer_cd_n_nm            AS case_customer_cd_n_nm ,
          of_case.case_cust_cd                     AS case_cust_cd,
          of_case.case_cust_grp_id                 AS case_cust_grp_id,
          -- CKAM & SKAM
          --kam.sales_person                         AS case_kam,
          -- open days
          of_case.no_of_days_since_created_order   AS no_of_days_since_created_order,
          of_case.no_of_days_since_created         AS no_of_days_since_created
          FROM  ${na_case_inquiry_core.SQL_TABLE_NAME} of_case
          --LEFT JOIN ckam_skam_lst AS kam ON ( -- case ownership mapping --
          --                                    ( kam.sales_person = of_case.case_ownerid)
          --                                    OR
          --                                    -- kam mapping using cust grp and country --
          --                                    ( of_case.case_cust_grp_id = kam.cust_grp_id AND
          --                                      ( -- without country
          --                                        kam.kam_country_code IS NULL OR
          --                                        -- with country
          --                                        kam.kam_country_code = of_case.case_country_code
          --                                      )
          --                                    )
          --                                  )
          WHERE 1=1
          ;;

    persist_for: "1 hour"
  }


  dimension: case_ownerid {
    type: string
    sql: ${TABLE}.case_ownerid ;;
  }

  dimension: case_sales_week {
    type: string
    sql: ${TABLE}.case_sales_week ;;
  }

  dimension: case_total_escalation {
    type: number
    sql: ${TABLE}.case_total_escalation ;;
  }

  dimension: case_status {
    type: string
    sql: ${TABLE}.case_status ;;
    label:"Status"
  }

  dimension: case_is_active {
    type: string
    sql:  ${TABLE}.case_is_active;;
    label:"Case Is Active"
  }

  dimension: case_resolution_reason {
    type: string
    sql:  ${TABLE}.case_resolution_reason ;;
    label: "Resolution Reason"
  }

  dimension: case_suppliedemail {
    type: string
    sql: ${TABLE}.case_suppliedemail ;;
    label: "Web Email"
  }

  dimension: no_of_days_since_created_order {
    type: number
    sql:  ${TABLE}.no_of_days_since_created_order ;;
    hidden: yes
  }

  dimension: no_of_days_since_created {
    type: string
    sql:  ${TABLE}.no_of_days_since_created ;;
    label: "No of days since created"
    order_by_field: no_of_days_since_created_order
  }

  dimension: case_priority {
    type: string
    sql: ${TABLE}.case_priority ;;
    label:"Priority"
  }

  #dimension: case_kam {
  #  type: string
  #  sql: ${TABLE}.case_kam ;;
  #  label:"CKAM/SKAM"
  #}

  dimension: case_cust_cd {
    type: string
    sql: ${TABLE}.case_cust_cd ;;
    hidden:  yes
  }

  dimension: case_casenumber {
    type: string
    sql: ${TABLE}.case_casenumber ;;
    label:"Case Number"
  }

  dimension: case_createddate {
    type: date
    datatype: datetime
    sql: ${TABLE}.case_createddate ;;
    label:"Open Date"
  }

  dimension_group: case_createddate_filter {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    group_label: "Open Date For Filter"
    label: "Open Date For Filter"
    sql: ${TABLE}.case_createddate ;;
  }

  dimension: case_office {
    type: string
    sql: ${TABLE}.case_office ;;
    label:"Office"

  }

  dimension: case_type {
    type: string
    sql: ${TABLE}.case_type ;;
    label:"Type"
  }

  dimension: case_origin {
    type: string
    sql: ${TABLE}.case_origin ;;
    label:"Case Origin"
  }

  dimension: case_category_l2 {
    type: string
    sql: ${TABLE}.case_category_l2 ;;
    label:"Category (L2)"
  }

  dimension: case_owner_fullname {
    type: string
    sql: ${TABLE}.case_owner_fullname ;;
    label:"Owner"
  }

  dimension: case_customer_cd_n_nm {
    type: string
    sql: ${TABLE}.case_customer_cd_n_nm ;;
    label:"Customer"
  }

  measure: case_count {
    type: count_distinct
    sql: ${TABLE}.case_casenumber ;;
    drill_fields: [detail*]
  }

  set: detail {
    fields: [case_casenumber,case_origin,case_priority,case_type,case_status,case_office,case_category_l2,case_createddate,case_owner_fullname,case_customer_cd_n_nm]
  }
}

view: na_case_inquiry_backup {
  derived_table: {
    sql:
    WITH ckam_skam_lst as (
         SELECT
            mbr.sales_person ,
            ckam_ctry.contract_country_code as kam_country_code,
            g.cust_grp_id
            FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
            LEFT JOIN ${of_sales_team_member_contract_country.SQL_TABLE_NAME} ckam_ctry on (mbr.oneforce_id = ckam_ctry.oneforce_id )
            LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (mbr.customer_group = g.ONEForce_Id )
            WHERE mbr.team_role in ( 'Contract Key Account Manager (C-KAM)')  and mbr.sales_person is not null
            UNION DISTINCT
            SELECT
            mbr.sales_person ,
            skam_ctry.service_country_code as kam_country_code,
            g.cust_grp_id
            FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
            LEFT JOIN ${of_sales_team_member_service_country.SQL_TABLE_NAME} as skam_ctry on (mbr.oneforce_id = skam_ctry.oneforce_id )
            LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (mbr.customer_group = g.ONEForce_Id )
            WHERE mbr.team_role in ( 'Service Key Account Manager (S-KAM)') and mbr.sales_person is not null
    )
          SELECT
          of_case.CaseNumber                  AS case_casenumber,
          of_case.OwnerId                     AS case_ownerid,
          CAST(of_case.Total_Escalation AS NUMERIC) AS case_total_escalation,
          of_case.Priority                    AS case_priority,
          wk.Sales_Week                       AS case_sales_week,
          CASE WHEN of_case.Status IN ('Resolved', 'Closed') THEN 'No' ELSE 'Yes' END as case_is_active,
          of_case.Resolution_Reason           AS case_resolution_reason_raw,
          IFNULL( of_case.Resolution_Reason, 'None') as case_resolution_reason,


      of_case.SuppliedEmail               AS case_suppliedemail,
      of_case.CreatedDate                 AS case_createddate,
      of_case.Office                      AS case_office ,
      of_case.Type                        AS case_type,
      of_case.Origin                      AS case_origin,
      of_case.Sub_Category_L2             AS case_category_l2,
      (CASE WHEN service_office_hierarchy.Country is not Null THEN service_office_hierarchy.Country
      WHEN queue_name_office_hierarchy.Country is not Null THEN queue_name_office_hierarchy.Country
      ELSE user_office_hierarchy.Country END)       AS case_country_code,
      case_owner.firstname||' '||case_owner.lastname AS case_owner_fullname,
      of_case.OwnerId                                AS case_owne_id,
      -- case country
      (CASE WHEN service_office_hierarchy.Country is not Null THEN service_office_hierarchy.Country
      WHEN queue_name_office_hierarchy.Country is not Null THEN queue_name_office_hierarchy.Country
      ELSE user_office_hierarchy.Country END)  AS case_country,
      -- Customer
      of_customer.cust_cd ||'-'||of_customer.name    AS case_customer_cd_n_nm ,
      of_customer.cust_cd                 AS case_cust_cd,
      of_customer.cust_grp_id             AS case_cust_grp_id,
      -- CKAM & SKAM
      kam.sales_person                    AS case_kam,
      -- Case Open Date
      CASE WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) <=7               THEN 0
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 8 and 14  THEN 1
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 15 and 30 THEN 2
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 31 and 90 THEN 3
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) > 90              THEN 4
      ELSE NULL END           AS no_of_days_since_created_order,

      CASE WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) <=7               THEN '0-7 days'
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 8 and 14  THEN '8-14 days'
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 15 and 30 THEN '15-30 days'
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 31 and 90 THEN '31-90 days'
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) > 90              THEN 'More than 90 days'
      ELSE NULL END           AS no_of_days_since_created

      FROM `ONEFORCE.OF_CASE`      AS of_case
      LEFT JOIN `ONEFORCE.OF_USER` AS case_owner   ON ( case_owner.ONEForce_ID = of_case.OwnerId )
      LEFT JOIN `ONEFORCE.OF_SALES_WEEK_MASTER` wk ON (EXTRACT(DATE FROM of_case.CreatedDate) BETWEEN wk.week_start_date and wk.week_end_date )
      -- for ckam-skam mapping
      LEFT JOIN `ONEFORCE.OF_QUEUE`            AS of_queue ON of_queue.ONEForce_ID = of_case.OwnerId
      LEFT JOIN `ONEFORCE.OF_OFFICE_HIERARCHY` AS service_office_hierarchy ON ( service_office_hierarchy.Office_Code=of_case.Office )
      LEFT JOIN `ONEFORCE.OF_OFFICE_HIERARCHY` AS user_office_hierarchy ON ( user_office_hierarchy.Office_Code = case_owner.Office_Code_Number)
      LEFT JOIN `ONEFORCE.OF_OFFICE_HIERARCHY` AS queue_name_office_hierarchy ON ( queue_name_office_hierarchy.Country = (CASE
      WHEN instr(of_queue.DeveloperName,"_")=3 AND substr(of_queue.DeveloperName,1, instr(of_queue.DeveloperName,"_")-1)="NA" THEN "US"
      WHEN instr(of_queue.DeveloperName,"_")=3 THEN substr(of_queue.DeveloperName,1, instr(of_queue.DeveloperName,"_")-1) ELSE "Unknown" END)) and queue_name_office_hierarchy.Regional_Head_Office IS NOT NULL
      LEFT JOIN `ONEFORCE.OF_CUSTOMER`         AS of_customer ON ( of_customer.ONEForce_ID = CASE WHEN of_case.Contract_Customer_Name IS NOT NULL THEN of_case.Contract_Customer_Name ELSE of_case.AccountId END and  of_customer.ONEForce_ID IS NOT NULL )
      LEFT JOIN ckam_skam_lst AS kam ON ( -- case ownership mapping --
      ( kam.sales_person = of_case.OwnerId)
      OR
      -- kam mapping using cust grp and country --
      ( of_customer.cust_grp_id = kam.cust_grp_id AND
      ( -- without country
      kam.kam_country_code IS NULL OR
      -- with country
      kam.kam_country_code = (CASE WHEN service_office_hierarchy.Country is not Null THEN service_office_hierarchy.Country
      WHEN queue_name_office_hierarchy.Country is not Null THEN queue_name_office_hierarchy.Country
      ELSE user_office_hierarchy.Country END)
      )
      )
      )
      WHERE 1=1
      -- correspond to sql-always-where in of_case
      AND   ( of_case.Origin in ('Chat','Phone','Email','Web','Internal') and
      of_case.Status not in  ('Waiting on Customer Response','Waiting on Internal ONE Team','On Hold','Merged') and
      of_case.Office is not null  and not ( of_case.Origin is null and case_owner.FirstName = 'CRM' and case_owner.LastName = 'System User' ) and
      (DATE(of_case.CreatedDate )) >= DATE('2022-03-28')
      )
      --group by 1, 2, 3, 4, 5, 6, 7, 8
      ;;

    persist_for: "1 hour"
  }


  dimension: case_ownerid {
    type: string
    sql: ${TABLE}.case_ownerid ;;
  }

  dimension: case_sales_week {
    type: string
    sql: ${TABLE}.case_sales_week ;;
  }

  dimension: case_total_escalation {
    type: number
    sql: ${TABLE}.case_total_escalation ;;
  }

  dimension: case_status {
    type: string
    sql: ${TABLE}.case_status ;;
    label:"Status"
  }

  dimension: case_is_active {
    type: string
    sql:  ${TABLE}.case_is_active;;
    label:"Case Is Active"
  }

  dimension: case_resolution_reason {
    type: string
    sql:  ${TABLE}.case_resolution_reason ;;
    label: "Resolution Reason"
  }

  dimension: case_suppliedemail {
    type: string
    sql: ${TABLE}.case_suppliedemail ;;
    label: "Web Email"
  }

  dimension: no_of_days_since_created_order {
    type: number
    sql:  ${TABLE}.no_of_days_since_created_order ;;
    hidden: yes
  }

  dimension: no_of_days_since_created {
    type: string
    sql:  ${TABLE}.no_of_days_since_created ;;
    label: "No of days since created"
    order_by_field: no_of_days_since_created_order
  }

  dimension: case_priority {
    type: string
    sql: ${TABLE}.case_priority ;;
    label:"Priority"
  }

  dimension: case_kam {
    type: string
    sql: ${TABLE}.case_kam ;;
    label:"CKAM/SKAM"
  }

  dimension: case_cust_cd {
    type: string
    sql: ${TABLE}.case_cust_cd ;;
    hidden:  yes
  }

  dimension: case_casenumber {
    type: string
    sql: ${TABLE}.case_casenumber ;;
    label:"Case Number"
  }

  dimension: case_createddate {
    type: date
    datatype: datetime
    sql: ${TABLE}.case_createddate ;;
    label:"Open Date"
  }

  dimension_group: case_createddate_filter {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    group_label: "Open Date For Filter"
    label: "Open Date For Filter"
    sql: ${TABLE}.case_createddate ;;
  }

  dimension: case_office {
    type: string
    sql: ${TABLE}.case_office ;;
    label:"Office"

  }

  dimension: case_type {
    type: string
    sql: ${TABLE}.case_type ;;
    label:"Type"
  }

  dimension: case_origin {
    type: string
    sql: ${TABLE}.case_origin ;;
    label:"Case Origin"
  }

  dimension: case_category_l2 {
    type: string
    sql: ${TABLE}.case_category_l2 ;;
    label:"Category (L2)"
  }

  dimension: case_owner_fullname {
    type: string
    sql: ${TABLE}.case_owner_fullname ;;
    label:"Owner"
  }

  dimension: case_customer_cd_n_nm {
    type: string
    sql: ${TABLE}.case_customer_cd_n_nm ;;
    label:"Customer"
  }

  measure: case_count {
    type: count_distinct
    sql: ${TABLE}.case_casenumber ;;
    drill_fields: [detail*]
  }

  set: detail {
    fields: [case_casenumber,case_origin,case_priority,case_type,case_status,case_office,case_category_l2,case_createddate,case_owner_fullname,case_customer_cd_n_nm]
  }
}

view: na_case_inquiry_core {
  derived_table: {
    sql: SELECT
      of_case.CaseNumber                  AS case_casenumber,
      of_case.OwnerId                     AS case_ownerid,
      CAST(of_case.Total_Escalation AS NUMERIC) AS case_total_escalation,
      of_case.Priority                    AS case_priority,
      wk.Sales_Week                       AS case_sales_week,
      of_case.Status                      AS case_status,
      CASE WHEN of_case.Status IN ('Resolved', 'Closed') THEN 'No' ELSE 'Yes' END as case_is_active,
      of_case.Resolution_Reason           AS case_resolution_reason_raw,
      IFNULL( of_case.Resolution_Reason, 'None') as case_resolution_reason,
      of_case.SuppliedEmail               AS case_suppliedemail,
      of_case.CreatedDate                 AS case_createddate,
      of_case.Office                      AS case_office ,
      of_case.Type                        AS case_type,
      of_case.Origin                      AS case_origin,
      of_case.Sub_Category_L2             AS case_category_l2,
      (CASE WHEN service_office_hierarchy.Country is not Null THEN service_office_hierarchy.Country
      WHEN queue_name_office_hierarchy.Country is not Null THEN queue_name_office_hierarchy.Country
      ELSE user_office_hierarchy.Country END)       AS case_country_code,
      case_owner.firstname||' '||case_owner.lastname AS case_owner_fullname,
      -- Customer
      of_customer.cust_cd ||'-'||of_customer.name    AS case_customer_cd_n_nm ,
      of_customer.cust_cd                 AS case_cust_cd,
      of_customer.cust_grp_id             AS case_cust_grp_id,
      -- Case Open Date
      CASE WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) <=7               THEN 0
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 8 and 14  THEN 1
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 15 and 30 THEN 2
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 31 and 90 THEN 3
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) > 90              THEN 4
      ELSE NULL END           AS no_of_days_since_created_order,

      CASE WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) <=7               THEN '0-7 days'
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 8 and 14  THEN '8-14 days'
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 15 and 30 THEN '15-30 days'
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) BETWEEN 31 and 90 THEN '31-90 days'
      WHEN DATE_DIFF( CURRENT_DATE(), DATE(of_case.CreatedDate), DAY ) > 90              THEN 'More than 90 days'
      ELSE NULL END           AS no_of_days_since_created

      FROM `ONEFORCE.OF_CASE`      AS of_case
      LEFT JOIN `ONEFORCE.OF_USER` AS case_owner   ON ( case_owner.ONEForce_ID = of_case.OwnerId )
      LEFT JOIN `ONEFORCE.OF_SALES_WEEK_MASTER` wk ON (EXTRACT(DATE FROM of_case.CreatedDate) BETWEEN wk.week_start_date and wk.week_end_date )
      -- for ckam-skam mapping
      LEFT JOIN `ONEFORCE.OF_QUEUE`            AS of_queue ON of_queue.ONEForce_ID = of_case.OwnerId
      LEFT JOIN `ONEFORCE.OF_OFFICE_HIERARCHY` AS service_office_hierarchy ON ( service_office_hierarchy.Office_Code=of_case.Office )
      LEFT JOIN `ONEFORCE.OF_OFFICE_HIERARCHY` AS user_office_hierarchy ON ( user_office_hierarchy.Office_Code = case_owner.Office_Code_Number)
      LEFT JOIN `ONEFORCE.OF_OFFICE_HIERARCHY` AS queue_name_office_hierarchy ON ( queue_name_office_hierarchy.Country = (CASE
      WHEN instr(of_queue.DeveloperName,"_")=3 AND substr(of_queue.DeveloperName,1, instr(of_queue.DeveloperName,"_")-1)="NA" THEN "US"
      WHEN instr(of_queue.DeveloperName,"_")=3 THEN substr(of_queue.DeveloperName,1, instr(of_queue.DeveloperName,"_")-1) ELSE "Unknown" END)) and queue_name_office_hierarchy.Regional_Head_Office IS NOT NULL
      LEFT JOIN `ONEFORCE.OF_CUSTOMER`         AS of_customer ON ( of_customer.ONEForce_ID = CASE WHEN of_case.Contract_Customer_Name IS NOT NULL THEN of_case.Contract_Customer_Name ELSE of_case.AccountId END and  of_customer.ONEForce_ID IS NOT NULL )
      WHERE 1=1
      -- correspond to sql-always-where in of_case
      AND   ( of_case.Origin in ('Chat','Phone','Email','Web','Internal') and
      of_case.Status not in  ('Waiting on Customer Response','Waiting on Internal ONE Team','On Hold','Merged') and
      of_case.Office is not null  and not ( of_case.Origin is null and case_owner.FirstName = 'CRM' and case_owner.LastName = 'System User' ) and
      DATE(of_case.CreatedDate ) >= DATE('2022-03-28')
      )
      -- other condition moved from dashboard to core SQL
      AND   of_case.CreatedDate   >= DATETIME_ADD(DATETIME_TRUNC(CURRENT_DATETIME('UTC'), DAY), INTERVAL -364 DAY)
      AND   of_case.CreatedDate   <  DATETIME_ADD(DATETIME_ADD(DATETIME_TRUNC(CURRENT_DATETIME('UTC'), DAY), INTERVAL -364 DAY), INTERVAL 365 DAY)
      AND   IFNULL( of_case.Resolution_Reason, 'None')  IN ('Customer Query Resolved', 'Customer Query Un-resolved', 'None')
      AND   ( of_case.SuppliedEmail  NOT LIKE '%@one-line.com%' OR of_case.SuppliedEmail IS NULL )


      ;;
    persist_for: "1 hour"

  }

  measure: count {
    type: count
  }

  dimension: case_casenumber {
    type: string
    sql: ${TABLE}.case_casenumber ;;
  }

  dimension: case_ownerid {
    type: string
    sql: ${TABLE}.case_ownerid ;;
  }

  dimension: case_total_escalation {
    type: number
    sql: ${TABLE}.case_total_escalation ;;
  }

  dimension: case_priority {
    type: string
    sql: ${TABLE}.case_priority ;;
  }

  dimension: case_sales_week {
    type: string
    sql: ${TABLE}.case_sales_week ;;
  }

  dimension: case_status {
    type: string
    sql: ${TABLE}.case_status ;;
  }

  dimension: case_is_active {
    type: string
    sql: ${TABLE}.case_is_active ;;
  }

  dimension: case_resolution_reason_raw {
    type: string
    sql: ${TABLE}.case_resolution_reason_raw ;;
  }

  dimension: case_resolution_reason {
    type: string
    sql: ${TABLE}.case_resolution_reason ;;
  }

  dimension: case_suppliedemail {
    type: string
    sql: ${TABLE}.case_suppliedemail ;;
  }

  dimension_group: case_createddate {
    type: time
    datatype: datetime
    sql: ${TABLE}.case_createddate ;;
  }

  dimension: case_office {
    type: string
    sql: ${TABLE}.case_office ;;
  }

  dimension: case_type {
    type: string
    sql: ${TABLE}.case_type ;;
  }

  dimension: case_origin {
    type: string
    sql: ${TABLE}.case_origin ;;
  }

  dimension: case_category_l2 {
    type: string
    sql: ${TABLE}.case_category_l2 ;;
  }

  dimension: case_country_code {
    type: string
    sql: ${TABLE}.case_country_code ;;
  }

  dimension: case_owner_fullname {
    type: string
    sql: ${TABLE}.case_owner_fullname ;;
  }

  dimension: case_customer_cd_n_nm {
    type: string
    sql: ${TABLE}.case_customer_cd_n_nm ;;
  }

  dimension: case_cust_cd {
    type: string
    sql: ${TABLE}.case_cust_cd ;;
  }

  dimension: case_cust_grp_id {
    type: string
    sql: ${TABLE}.case_cust_grp_id ;;
  }

  dimension: no_of_days_since_created_order {
    type: number
    sql: ${TABLE}.no_of_days_since_created_order ;;
  }

  dimension: no_of_days_since_created {
    type: string
    sql: ${TABLE}.no_of_days_since_created ;;
  }


}

view: na_case_inquiry_kam {
  derived_table: {
    sql:
      WITH ckam_skam_lst as (
           SELECT
              mbr.sales_person ,
              ckam_ctry.contract_country_code as kam_country_code,
              g.cust_grp_id
              FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
              LEFT JOIN ${of_sales_team_member_contract_country.SQL_TABLE_NAME} ckam_ctry on (mbr.oneforce_id = ckam_ctry.oneforce_id )
              LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (mbr.customer_group = g.ONEForce_Id )
              WHERE mbr.team_role in ( 'Contract Key Account Manager (C-KAM)', 'Contract Key Account Support (C-KAS)' )
              and mbr.sales_person is not null
              and mbr.inactive = 'false'
              UNION DISTINCT
              SELECT
              mbr.sales_person ,
              skam_ctry.service_country_code as kam_country_code,
              g.cust_grp_id
              FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` mbr
              LEFT JOIN ${of_sales_team_member_service_country.SQL_TABLE_NAME} as skam_ctry on (mbr.oneforce_id = skam_ctry.oneforce_id )
              LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (mbr.customer_group = g.ONEForce_Id )
              WHERE mbr.team_role in ( 'Service Key Account Manager (S-KAM)', 'Service Key Account Support (S-KAS)')
              and mbr.sales_person is not null
              and mbr.inactive = 'false'
      )
            SELECT
            of_case.case_casenumber                  AS case_casenumber,
            of_case.case_ownerid                     AS case_ownerid,
            of_case.case_total_escalation            AS case_total_escalation,
            of_case.case_priority                    AS case_priority,
            of_case.case_sales_week                  AS case_sales_week,
            of_case.case_status                      AS case_status,
            of_case.case_is_active                   as case_is_active,
            of_case.case_resolution_reason           as case_resolution_reason,
            of_case.case_suppliedemail               AS case_suppliedemail,
            of_case.case_createddate                 AS case_createddate,
            of_case.case_office                      AS case_office ,
            of_case.case_type                        AS case_type,
            of_case.case_origin                      AS case_origin,
            of_case.case_category_l2                 AS case_category_l2,
            of_case.case_country_code                AS case_country_code,
            of_case.case_owner_fullname              AS case_owner_fullname,
            -- Customer
            of_case.case_customer_cd_n_nm            AS case_customer_cd_n_nm ,
            of_case.case_cust_cd                     AS case_cust_cd,
            of_case.case_cust_grp_id                 AS case_cust_grp_id,
            -- CKAM & SKAM
            kam.sales_person                         AS case_kam,
            -- open days
            of_case.no_of_days_since_created_order   AS no_of_days_since_created_order,
            of_case.no_of_days_since_created         AS no_of_days_since_created
            FROM  ${na_case_inquiry_core.SQL_TABLE_NAME} of_case
            LEFT JOIN ckam_skam_lst AS kam ON ( -- case ownership mapping --
                                                ( kam.sales_person = of_case.case_ownerid)
                                                OR
                                                -- kam mapping using cust grp and country --
                                                ( of_case.case_cust_grp_id = kam.cust_grp_id AND
                                                  ( -- without country
                                                    kam.kam_country_code IS NULL OR
                                                    -- with country
                                                    kam.kam_country_code = of_case.case_country_code
                                                  )
                                                )
                                              )
            WHERE 1=1
            ;;

    persist_for: "1 hour"
  }


  dimension: case_ownerid {
    type: string
    sql: ${TABLE}.case_ownerid ;;
  }

  dimension: case_sales_week {
    type: string
    sql: ${TABLE}.case_sales_week ;;
  }

  dimension: case_total_escalation {
    type: number
    sql: ${TABLE}.case_total_escalation ;;
  }

  dimension: case_status {
    type: string
    sql: ${TABLE}.case_status ;;
    label:"Status"
  }

  dimension: case_is_active {
    type: string
    sql:  ${TABLE}.case_is_active;;
    label:"Case Is Active"
  }

  dimension: case_resolution_reason {
    type: string
    sql:  ${TABLE}.case_resolution_reason ;;
    label: "Resolution Reason"
  }

  dimension: case_suppliedemail {
    type: string
    sql: ${TABLE}.case_suppliedemail ;;
    label: "Web Email"
  }

  dimension: no_of_days_since_created_order {
    type: number
    sql:  ${TABLE}.no_of_days_since_created_order ;;
    hidden: yes
  }

  dimension: no_of_days_since_created {
    type: string
    sql:  ${TABLE}.no_of_days_since_created ;;
    label: "No of days since created"
    order_by_field: no_of_days_since_created_order
  }

  dimension: case_priority {
    type: string
    sql: ${TABLE}.case_priority ;;
    label:"Priority"
  }

  dimension: case_kam {
    type: string
    sql: ${TABLE}.case_kam ;;
    label:"CKAM/SKAM"
  }

  dimension: case_cust_cd {
    type: string
    sql: ${TABLE}.case_cust_cd ;;
    hidden:  yes
  }

  dimension: case_casenumber {
    type: string
    sql: ${TABLE}.case_casenumber ;;
    label:"Case Number"
  }

  dimension: case_createddate {
    type: date
    datatype: datetime
    sql: ${TABLE}.case_createddate ;;
    label:"Open Date"
  }

  dimension_group: case_createddate_filter {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    group_label: "Open Date For Filter"
    label: "Open Date For Filter"
    sql: ${TABLE}.case_createddate ;;
  }

  dimension: case_office {
    type: string
    sql: ${TABLE}.case_office ;;
    label:"Office"

  }

  dimension: case_type {
    type: string
    sql: ${TABLE}.case_type ;;
    label:"Type"
  }

  dimension: case_origin {
    type: string
    sql: ${TABLE}.case_origin ;;
    label:"Case Origin"
  }

  dimension: case_category_l2 {
    type: string
    sql: ${TABLE}.case_category_l2 ;;
    label:"Category (L2)"
  }

  dimension: case_owner_fullname {
    type: string
    sql: ${TABLE}.case_owner_fullname ;;
    label:"Owner"
  }

  dimension: case_customer_cd_n_nm {
    type: string
    sql: ${TABLE}.case_customer_cd_n_nm ;;
    label:"Customer"
  }

  measure: case_count {
    type: count_distinct
    sql: ${TABLE}.case_casenumber ;;
    drill_fields: [detail*]
  }

  set: detail {
    fields: [case_casenumber,case_origin,case_priority,case_type,case_status,case_office,case_category_l2,case_createddate,case_owner_fullname,case_customer_cd_n_nm]
  }
}

view: na_dashboard_param {
  derived_table: {
    sql: SELECT 1 as Col1
      ;;
  }

  parameter: measure_choice {
    label: "Choice of Measure"
    allowed_value: { value:"CM"  label:"CM" }
    allowed_value: { value:"TEU" label:"TEU" }
    default_value: "TEU"
  }

  measure: count {
    type: count
  }

  dimension: measure_chosen {
    type: string
    sql:  {% if    measure_choice._parameter_value == "'CM'" %} 'CM'
          {% elsif measure_choice._parameter_value == "'TEU'" %} 'TEU'
          {% else %} 'TEU'
          {% endif %};;
  }

  dimension: col_1 {
    type: number
    sql: ${TABLE}.Col1 ;;
  }

}

view: na_event_query {
  derived_table: {
    sql:
    WITH e AS (
      SELECT e.*, svc_scp_grp_cd AS svc_scp_grp_cd
      FROM `ONEFORCE.OF_EVENT` e cross join unnest(SPLIT( e.Service_Scope_Group , ';' ) ) as svc_scp_grp_cd
      WHERE e.Service_Scope_Group  is NOT NULL
      UNION ALL
      SELECT e.*, CAST(NULL as STRING) svc_scp_grp_cd
      FROM `ONEFORCE.OF_EVENT` e
      WHERE e.Service_Scope_Group  is NULL
    )
    SELECT
          e.ONEForce_ID      as evnt_oneforce_id,
          e.Event_Status     as evnt_status,
          e.OwnerId          as evnt_owner_id,
          e.Subject          as evnt_subject,
          e.Sales_Call_Type  as evnt_event_type,
          e.Event_Category   as evnt_category,
          w.Sales_Week    as evnt_sales_week ,
          e.StartDateTime as evnt_start_date ,
          (CASE e.event_priority WHEN '2'  THEN 'High'  WHEN '1'  THEN 'Normal'  WHEN '0'  THEN 'Low' ELSE NULL END ) as evnt_priority,
          e.WhatId         as evnt_what_id,
          REPLACE( IFNULL(e.svc_scp_grp_cd, 'ALL'),'ALL','All or (Blank)' )
                           as evnt_svc_scp_grp_cd,
          c.CUST_CD        as evnt_cust_cd,
          c.NAME           as evnt_cust_name,
          coalesce(g.CUST_GRP_ID, g2.CUST_GRP_ID ) as evnt_cust_grp_id,
          CASE WHEN g.cust_grp_id  IS NOT NULL THEN (CASE WHEN IFNULL( g.KEY_ACCT_TP_CD,  'SME' ) = 'SME' THEN 'ONECare' ELSE g.KEY_ACCT_TP_CD  END )
               WHEN g2.cust_grp_id IS NOT NULL THEN (CASE WHEN IFNULL( g2.KEY_ACCT_TP_CD, 'SME' ) = 'SME' THEN 'ONECare' ELSE g2.KEY_ACCT_TP_CD END )
               ELSE NULL END as evnt_cust_key_acct_typ
          FROM e
          INNER JOIN `ONEFORCE.OF_SALES_WEEK_MASTER` w ON (EXTRACT(DATE FROM e.StartDateTime) BETWEEN w.week_start_date and w.week_end_date )
          LEFT JOIN `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` c ON (e.WhatId = c.ONEForce_ID)
          LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g ON (c.CUST_GRP_ID = g.CUST_GRP_ID)
          -- NA dashboard 2022 Nov 2,after checking the data, consider do not use the join betweene WhatId = g2.ONEForce_ID, since sales call
          -- of these data pattern look rather exceptional.The dashboard Sales Activity Monitor also does not treat WhatId as cust_grp
          -- The join condition is diabled using 1=2
          LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g2 ON (e.WhatId = g2.ONEForce_ID and 1=2)
          LEFT JOIN `ONEFORCE.OF_USER` u ON (e.OwnerId = u.ONEForce_Id)
          WHERE e.Event_Status  = 'Completed'
          -- Jack 2022.8.29 follow logic of Sales Activity Monitoring (Event)
          AND e.CreatedById = e.OwnerId
          AND u.profile_name in ('Sales Executive', 'Third Party Agent')
          AND e.WhatId is not null
           ;;

    persist_for: "1 hour"
  }

  measure: count {
    label: "Count"
    type: count_distinct
    sql: ${TABLE}.evnt_oneforce_id ;;
    drill_fields: [detail*]
  }

  dimension: evnt_oneforce_id {
    type: string
    sql: ${TABLE}.evnt_oneforce_id ;;
  }

  dimension: evnt_owner_id {
    type: string
    sql: ${TABLE}.evnt_owner_id ;;
  }

  dimension: evnt_subject {
    label: "Subject"
    type: string
    sql: ${TABLE}.evnt_subject ;;
    link: {
      label: "View Sales Call"
      url: "https://one-line.lightning.force.com/{{ evnt_oneforce_id }}"
      icon_url: "https://www.salesforce.com/content/dam/sfdc-docs/www/logos/logo-salesforce.svg"
    }
  }

  dimension: evnt_event_type {
    label: "Event Type"
    type: string
    sql: ${TABLE}.evnt_event_type ;;
  }

  dimension: evnt_status {
    type: string
    sql: ${TABLE}.evnt_status ;;
  }

  dimension: evnt_category {
    label: "Event Category"
    type: string
    sql: ${TABLE}.evnt_category ;;
  }

  dimension: evnt_cust_name {
    type: string
    sql: ${TABLE}.evnt_cust_name ;;
  }

  dimension: evnt_sales_week {
    type: string
    sql: ${TABLE}.evnt_sales_week ;;
  }

  dimension: evnt_sales_week_new_fmt {
    label: "Sales Week"
    type: string
    sql: LEFT(${evnt_sales_week},4) ||'/W'|| RIGHT(${evnt_sales_week},2)  ;;
  }

  dimension: evnt_start_date  {
    label: "Start"
    type: date_time
    sql: ${TABLE}.evnt_start_date ;;
  }


  dimension: evnt_priority {
    label: "Priority"
    type: string
    sql: ${TABLE}.evnt_priority ;;
  }

  dimension: evnt_what_id {
    type: string
    sql: ${TABLE}.evnt_what_id ;;
  }

  dimension: evnt_cust_cd {
    type: string
    sql: ${TABLE}.evnt_cust_cd ;;
  }

  dimension: evnt_cust_key_acct_typ {
    type: string
    sql: ${TABLE}.evnt_cust_key_acct_typ ;;
  }

  dimension: evnt_cust_grp_id {
    type: string
    sql: ${TABLE}.evnt_cust_grp_id ;;
  }

  dimension: svc_scp_grp_cd {
    label: "Service Scope Group Code"
    type: string
    sql: ${TABLE}.evnt_svc_scp_grp_cd  ;;
  }

  dimension: na_trade {
    type: string
    sql: CASE ${TABLE}.evnt_svc_scp_grp_cd
         WHEN 'LN' THEN 'Latin'
         WHEN 'LW' THEN 'Latin'
         ELSE evnt_svc_scp_grp_cd END
        ;;
  }

#  dimension: svc_scp_grp_fake {
#    label: "Service Scope Group Code (fake)"
#    type: string
#    sql: (CASE SUBSTR( ${TABLE}.evnt_cust_cd, 8, 1)
#               WHEN '1' THEN 'TP'
#               WHEN '2' THEN 'TP'
#               WHEN '3' THEN 'TP'
#               WHEN '4' THEN 'TP'
#               WHEN '5' THEN 'TP'
#               WHEN '6' THEN 'TP'
#               WHEN '7' THEN 'TP'
#               WHEN '8' THEN 'TP'
#               WHEN '9' THEN 'TA'
#               WHEN '0' THEN 'LN'
#          END)    ;;

#    sql: (CASE WHEN SUBSTR( ${TABLE}.evnt_cust_cd, 8, 1) BETWEEN '1' AND '3' THEN 'TPT'
#               WHEN SUBSTR( ${TABLE}.evnt_cust_cd, 8, 1) BETWEEN '4' AND '6' THEN 'TAT'
#               WHEN SUBSTR( ${TABLE}.evnt_cust_cd, 8, 1) = '7' THEN 'LAT'
#               WHEN SUBSTR( ${TABLE}.evnt_cust_cd, 8, 1) = '8' THEN 'LET'
#               WHEN SUBSTR( ${TABLE}.evnt_cust_cd, 8, 1) = '9' THEN 'LNT'
#               WHEN SUBSTR( ${TABLE}.evnt_cust_cd, 8, 1) = '0' THEN 'LWT' END)
#  }

  set: detail {
    fields: [
      evnt_subject,
      evnt_priority,
      evnt_start_date,
      evnt_sales_week_new_fmt,
      v_customer_opus_n_prospect.customer_cd_and_name,
      of_customer_group.cust_grp_and_name,
      evnt_event_type,
      evnt_category,
      na_user_evnt.full_name,
    ]
  }
}

view: na_landing_last_n_week {
  derived_table: {
    sql:
    SELECT 'Current and Past' as rec_type,
           Week_Start_Date,
           Week_End_Date,
           Sales_Week,
           row_num
    FROM (
       SELECT wk.Week_Start_Date,   wk.Week_End_Date, wk.Sales_Week,
              row_number() over (order by sales_week desc) row_num
       FROM `ONEFORCE.OF_SALES_WEEK_MASTER` wk
       WHERE wk.Week_Start_Date <= CURRENT_DATE()
    )
    WHERE row_num <= {% parameter param_last_n_week %} OR NOT( {% parameter param_last_future_n_week_filtered %} )
    UNION ALL
    SELECT 'Future' as rec_type,
           Week_Start_Date,
           Week_End_Date,
           Sales_Week,
           row_num
    FROM (
       SELECT wk.Week_Start_Date,   wk.Week_End_Date, wk.Sales_Week,
              row_number() over (order by sales_week) row_num
       FROM `ONEFORCE.OF_SALES_WEEK_MASTER` wk
       WHERE wk.Week_Start_Date > CURRENT_DATE()
    )
    WHERE row_num <= {% parameter param_next_n_week %} OR NOT( {% parameter param_last_future_n_week_filtered %} )
     ;;
  }



  parameter: param_last_future_n_week_filtered {
    type: yesno
    default_value: "No"
  }

  #dimension: is_last_n_future_n_week_filter_applied {
  #  type: string
  #  sql: 'Within the range' ;;
  #  suggestions: ["Within the range"]
  #}

  parameter: param_last_n_week {
    type: number
    allowed_value: {value: "1"}
    allowed_value: {value: "2"}
    allowed_value: {value: "3"}
    allowed_value: {value: "4"}
    allowed_value: {value: "5"}
    allowed_value: {value: "6"}
    allowed_value: {value: "7"}
    allowed_value: {value: "8"}
    allowed_value: {value: "9"}
    allowed_value: {value: "10"}
    allowed_value: {value: "11"}
    allowed_value: {value: "12"}
    allowed_value: {value: "13"}
    default_value: "10"
  }

  parameter: param_next_n_week {
    type: number
    allowed_value: {value: "1"}
    allowed_value: {value: "2"}
    allowed_value: {value: "3"}
    allowed_value: {value: "4"}
    allowed_value: {value: "5"}
    allowed_value: {value: "6"}
    allowed_value: {value: "7"}
    allowed_value: {value: "8"}
    allowed_value: {value: "9"}
    allowed_value: {value: "10"}
    allowed_value: {value: "11"}
    allowed_value: {value: "12"}
    allowed_value: {value: "13"}
    default_value: "2"
  }

  measure: count {
    type: count
  }

  dimension: rec_type {
    type: string
    sql: ${TABLE}.rec_type ;;
  }

  dimension: week_start_date {
    type: date
    datatype: date
    sql: ${TABLE}.Week_Start_Date ;;
  }

  dimension: week_end_date {
    type: date
    datatype: date
    sql: ${TABLE}.Week_End_Date ;;
  }

  dimension: sales_week {
    type: string
    sql: ${TABLE}.Sales_Week ;;
  }

  dimension: row_num {
    type: string
    sql: ${TABLE}.row_num ;;
  }



}

view: na_user {
  derived_table: {
    sql: SELECT
        'Yes'                               as na_users_only
      , u.ONEForce_ID                       as oneforce_id
      , u.FirstName ||' ' || u.LastName     as full_name
      , u.Sub_Region                        as sub_region
      , mgr.FirstName ||' ' || mgr.LastName as mgr_full_name
      , u.Username                          as username
      , u.Profile_Name
      , u.User_role_name
      , u.CRM_Trainer
      , u.Suppressed_in_CRM_Usage_KPI_Dashboard
      , u.Regional_Head_Office
      , u.Office_Code_Number
      , u.IsActive
      , u.OfficeType
      , u.TPA_user
      , u.Email
      , u.Email_2
      , mgr.Regional_Head_Office as mgr_regional_head_office
      , mgr.Office_Code_Number as mgr_office_code_number
      , mgr.Sub_Region as mgr_sub_region
      , mgr.Username as mgr_username
      FROM ${of_user.SQL_TABLE_NAME} u
      LEFT JOIN ${of_user.SQL_TABLE_NAME} mgr ON (u.ManagerId = mgr.ONEForce_ID)
      WHERE u.Regional_Head_Office like '%RICHQ%'
      AND (  {% condition manager_full_name %} u.FirstName ||' '|| u.LastName {% endcondition %}
             OR
             {% condition manager_full_name %} mgr.FirstName ||' '|| mgr.LastName {% endcondition %}
          )
       ;;
  }

  filter: manager_full_name   {
    label: "Manager Filter"
    suggest_dimension: mgr_full_name
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: email_4_join_with_cust  {
    hidden: yes
    type: string
    sql: CASE WHEN ${TABLE}.TPA_user = 'true' THEN ${TABLE}.Email_2 ELSE ${TABLE}.Email END   ;;
  }

  dimension: na_users_only {
    type: string
    sql: ${TABLE}.na_users_only ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
    primary_key: yes
  }

  dimension: full_name {
    label: "Sales Person"
    type: string
    sql: ${TABLE}.full_name ;;
  }

  dimension: mgr_full_name {
    label: "Manager Full Name"
    type: string
    sql: ${TABLE}.mgr_full_name ;;
  }

  dimension: mgr_username {
    label: "Manager Username"
    type: string
    sql: ${TABLE}.mgr_username ;;
  }

  dimension: username {
    label: "Username"
    type: string
    sql: ${TABLE}.username ;;
  }

  dimension: sub_region {
    label: "Sub Region"
    type: string
    sql: ${TABLE}.sub_region ;;
  }

  dimension: profile_name {
    label: "Profile"
    type: string
    sql: ${TABLE}.Profile_Name ;;
  }

  dimension: user_role_name {
    label: "Role"
    type: string
    sql: ${TABLE}.User_role_name ;;
  }

  dimension: crm_trainer {
    label: "Is CRM Trainer"
    type: string
    sql: ${TABLE}.CRM_Trainer ;;
  }

  dimension: suppressed_in_crm_usage_kpi_dashboard {
    label: "Is Suppressed in KPI Dashboard"
    type: string
    sql: ${TABLE}.Suppressed_in_CRM_Usage_KPI_Dashboard ;;
  }

  dimension: office_code_number {
    label: "Office Code"
    type: string
    sql: ${TABLE}.Office_Code_Number ;;
  }

  dimension: regional_head_office {
    label: "Regional Head Office"
    type: string
    sql: ${TABLE}.Regional_Head_Office ;;
  }

  dimension: mgr_regional_head_office {
    label: "Manager Regional Head Office"
    type: string
    sql: ${TABLE}.mgr_regional_head_office ;;
  }

  dimension: mgr_office_code_number {
    label: "Manager Office Code"
    type: string
    sql: ${TABLE}.mgr_office_code_number ;;
  }

  dimension: mgr_sub_region {
    label: "Manager Sub Region"
    type: string
    sql: ${TABLE}.mgr_sub_region ;;
  }


  dimension: is_active {
    label: "Is Active"
    type: string
    sql: ${TABLE}.IsActive ;;
  }

  dimension: office_type {
    label: "Office Type"
    type: string
    sql: ${TABLE}.OfficeType ;;
  }

  set: detail {
    fields: [
      oneforce_id,
      full_name,
      sub_region,
      profile_name,
      user_role_name,
      crm_trainer,
      suppressed_in_crm_usage_kpi_dashboard,
      office_code_number,
      is_active,
      office_type
    ]
  }
}

# include: "na_user.view"
view: na_user_evnt {
  extends: [na_user]

  dimension: full_name {
    label: "Assigned To"
  }
}

# include: "na_user.view"
view: na_user_opp {
  extends: [na_user]

  dimension: full_name {
    label: "Opportunity Owner"
  }

}

# include: "na_user.view"
view: na_user_sales_rep_in_contract_n_budget {
  extends: [na_user]

  dimension: full_name {
    #label: "Sales Person"
    label: "{% if    _view._name ==  'na_user_sales_rep_in_contract_n_budget'  %}Sales Person{%
    elsif _view._name ==  'na_user_scrfa_main_sls_rep'              %}SC/RFA Main Sales Rep{%
    elsif _view._name ==  'na_user_scrfa_dtl_sls_rep'               %}SC/RFA Svc Scp Sales Rep{%
    else  %}Sales Person{% endif %}"
    #label: "{{_view._name}}"
  }
}

view: of_account_plan {
  sql_table_name: `ONEFORCE.OF_ACCOUNT_PLAN`
    ;;

  dimension: record_id {
    label: "Record Id"  # programmatically added by LookML modifier
    description: "By GENERATE_UUID()"
    primary_key: yes
    type: string
    sql: ${TABLE}.Record_Id ;;
  }

  dimension: ap_submission_office {
    label: "AP Submission Office" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.AP_Submission_Office ;;
  }

##  ## 22 Oct 2021 by Zoe ## (future enhancement)
##  dimension: ap_submission_country_manual {
##    label: "AP Submission Country (Manual)" # programmatically added by LookML modifier
##    type: string
##    sql:
##      CASE WHEN ${TABLE}.AP_Submission_Office IS NOT NULL THEN LEFT(${of_office.Location_Code},2)
##       ELSE NULL
##      END ;;
##  }



  dimension: ap_teu {
    label: "AP TEU" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.AP_TEU ;;
  }

  dimension: cif_fob {
    label: "CIF/FOB"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CIF_FOB ;;
  }

  dimension: contract_office_code {
    label: "Contract Office Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Contract_Office_Code ;;
  }

  dimension: contract_office_country_code {
    label: "Contract Office Country Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Contract_Office_Country_Code ;;
  }

  dimension: dominant_leg_flag {
    label: "Dominant Leg Flag"  # programmatically added by LookML modifier
    type: string
    sql:
      CASE
        WHEN ${TABLE}.Dominant_Leg_Flag = 'Y' THEN 'DOM'
        WHEN ${TABLE}.Dominant_Leg_Flag = 'N' THEN 'N-DOM'
      ELSE NULL
      END
      ;;
  }

  dimension: gka_flag {
    label: "GKA Flag" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.GKA_Flag ;;
  }

  dimension: loading_sales_rep_office_code {
    label: "Loading Sales Rep Office Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Loading_Sales_Rep_Office_Code ;;
  }

  dimension: loading_sales_rep_office_country_code {
    label: "Loading Sales Rep Office Country Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Loading_Sales_Rep_Office_Country_Code ;;
  }

  dimension: office_rhq_code {
    label: "Office RHQ Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Office_RHQ_Code ;;
  }

  dimension: rf_flag {
    label: "RF Flag"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.RF_Flag ;;
  }

  dimension: sales_week {
    label: "Sales Week" # programmatically added by LookML modifier
    type: number
    sql: cast(regexp_replace(${TABLE}.Sales_Week, '[/W]', '') as int64)  ;;
  }

  dimension: sc_rfa_contract_type {
    label: "SC/RFA Contract Type" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_Contract_Type ;;
  }

  dimension: sc_rfa_customer_code {
    label: "SC/RFA Customer Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_Customer_Code ;;
  }

  dimension: sc_rfa_customer_group_code {
    label: "SC/RFA Customer Group Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_Customer_Group_Code ;;
  }

  dimension: sc_rfa_customer_type_label {
    label: "SC/RFA Customer Type label" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_Customer_Type_label ;;
  }

  dimension: sc_rfa_number {
    label: "SC/RFA Number"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_Number ;;
  }

  dimension: sub_trade_code {
    label: "Sub Trade Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Sub_Trade_Code ;;
  }

  dimension: trade_code {
    label: "Trade Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Trade_Code ;;
  }

  dimension: trunk_vvd_code {
    label: "Trunk VVD Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Trunk_VVD_Code ;;
  }

  dimension: trunk_vvd_direction_code {
    label: "Trunk VVD Direction Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Trunk_VVD_Direction_Code ;;
  }

  dimension: trunk_vvd_service_lane_code {
    label: "Service Lane (Rev)"
    type: string
    sql: ${TABLE}.Trunk_VVD_Service_Lane_Code ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

##  ## Add by Zoe Cheung on 21 Oct ##
  dimension: Account_Plan_Tab_link {
    type: string
    sql:  CONCAT(1,2);;
    html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
        <nav style="font-size: 18px;">
        <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed; " href="https://onelinedev.cloud.looker.com/dashboards-next/202?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&Service%20Scope%20Code={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}" target="_blank" > Overview </a>
        <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://onelinedev.cloud.looker.com/dashboards-next/258?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&Service%20Scope%20Code={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}" target="_blank" > Raw Data </a>
         </nav>
       </div>
  ;;
  }

  dimension: Account_Plan_Tab_link2 {
    type: string
    sql:  CONCAT(1,2);;
    html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
        <nav style="font-size: 18px;">
        <a style="olor: #efefef; padding: 5px 15px; float: left; line-height: 40px; " href="https://onelinedev.cloud.looker.com/dashboards-next/202?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&Service%20Scope%20Code={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}" target="_blank" > Overview </a>
        <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed;" href="https://onelinedev.cloud.looker.com/dashboards-next/258?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&Service%20Scope%20Code={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}" target="_blank" > Raw Data </a>
         </nav>
       </div>
  ;;
  }


  set: primary_key {
    fields: [record_id, count]
  }
}

view: of_account_plan_grfa_grp {
  sql_table_name: `ONEFORCE.OF_ACCOUNT_PLAN_GRFA_GRP`
    ;;

  dimension: record_id {
    label: "Record Id"  # programmatically added by LookML modifier
    description: "By GENERATE_UUID()"
    primary_key: yes
    type: string
    sql: ${TABLE}.Record_Id ;;
  }

  dimension: cust_contract_no {
    label: "Cust Contract No."  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Cust_Contract_No ;;
  }

  dimension: is_unique_group {
    label: "Is Unique Group"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Is_Unique_Group ;;
  }

  dimension: opus_cust_grp_code {
    label: "OPUS Cust Grp Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OPUS_Cust_Grp_Code ;;
  }

  dimension: sbc_cust_grp_id {
    label: "SBC Cust Grp Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SBC_Cust_Grp_Id ;;
  }

  dimension: sbc_cust_grp_name {
    label: "SBC Cust Grp Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SBC_Cust_Grp_Name ;;
  }

  dimension: trade_code {
    label: "Trade Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Trade_Code ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [sbc_cust_grp_name]
  }

  set: primary_key {
    fields: [record_id, count]
  }
}

# include: "oneforce.model.lkml"
# include: "/views/of_consolidated.view.lkml"
# include: "/views/of_customer_group.view.lkml"
# include: "/views/of_sales_week_master.view.lkml"

view: of_account_plan_rowtot_sort {
  derived_table: {
    explore_source: account_plan {
      column: cust_grp_id { field: of_customer_group.cust_grp_id }
      column: cust_grp_nm { field: of_customer_group.cust_grp_nm }
      #column: sales_week { field: of_sales_week_master.sales_week }
      column: deviation { field: of_consolidated.deviation }
      derived_column: deviation_total {
        sql: SUM(deviation) over (partition by cust_grp_id) ;;
      }
      bind_all_filters: yes
    }
  }
  dimension: cust_grp_id {
    label: "Customer Group Code"
    description: ""
  }
  dimension: cust_grp_nm {
    label: "Customer Group Code Customer Group Name"
    description: ""
  }
  dimension: sales_week {
    label: "Sales Week"
    description: ""
  }
  dimension: deviation {
    label: "Deviation"
    description: ""
    value_format: "#,##0"
    type: number
  }
  dimension: deviation_total {
    label: "Total Deviation"
    description: ""
    value_format: "#,##0"
    type: number
  }
}

view: of_actuals {
  derived_table: {
    sql:
      SELECT of_actuals.*
         -- add by Helen on 2021.12.28 for DCN-491
      , coalesce(of_svc_contract.cust_cd, of_actuals.cnt_cust_cd) as CNT_CUST_CD2
      , v_customer_opus_n_prospect.cust_grp_id as CUST_GRP_CD2
      , v_customer_opus_n_prospect.name as CNT_CUST_NM2
      , v_customer_opus_n_prospect.cust_grp_nm as CUST_GRP_NM2
    -- end 2021.12.28 for DCN-491
      FROM `ONEFORCE.OF_ACTUALS` as of_actuals
           -- add by Helen on 2021.12.28 for DCN-491
      LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON of_actuals.svc_cont_no = of_svc_contract.sc_rfa_no
      LEFT JOIN (
          SELECT distinct vv.cust_cd, vv.name, vv.cust_grp_id, g.cust_grp_nm
          FROM ${v_customer_opus_n_prospect.SQL_TABLE_NAME} vv,
               ${of_customer_group.SQL_TABLE_NAME} g
          WHERE vv.cust_grp_id = g.cust_grp_id
        ) as v_customer_opus_n_prospect
      ON coalesce(of_svc_contract.cust_cd, of_actuals.cnt_cust_cd) = v_customer_opus_n_prospect.cust_cd
      -- end change on 2021.12.28 for DCN-491
      WHERE bkg_no IS NOT NULL AND bkg_no != '' ;;
  }

  dimension: primary_key {
    primary_key: yes
    hidden: yes
    type: string
    sql: concat(${bkg_no}, ${cntr_tpsz_cd}) ;;
  }

  dimension: ac_com_amt {
    label: "Agency" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.AC_COM_AMT as NUMERIC) ;;
  }

  dimension: ac_fac_amt {
    label: "Brokerage." # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.AC_FAC_AMT as NUMERIC) ;;
  }

  dimension_group: act_arr_dt {
    label: "Actual Arrival Datetime - Final Dsch. Port" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ACT_ARR_DT ;;
  }

  dimension_group: act_dep_dt {
    label: "Actual Depature Datetime - 1st Load Port" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ACT_DEP_DT ;;
  }

  dimension: act_mty_pkup_scc_cd {
    label: "Actual Empty Pick Up SCC Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ACT_MTY_PKUP_SCC_CD ;;
  }

  dimension: act_mty_pkup_yd_cd {
    label: "Actual Empty Pick Up Yard Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ACT_MTY_PKUP_YD_CD ;;
  }

  dimension: actual_cust_cd {
    label: "Actual Customer Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ACTUAL_CUST_CD ;;
  }

  dimension: actual_cust_nm {
    label: "Actual Customer Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ACTUAL_CUST_NM ;;
  }

  dimension: aft_curr_cd {
    label: "AFT CURR CD"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.AFT_CURR_CD ;;
  }

  dimension: aft_expt_dc_amt {
    label: "AFT EXPT DC AMT"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.AFT_EXPT_DC_AMT ;;
  }

  dimension: aft_expt_dc_amt_usd {
    label: "Additional deduction based on DAR after Booking, in USD"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.AFT_EXPT_DC_AMT_USD ;;
  }

  dimension: avg_rpb_flg {
    label: "Avg RPB Flag (Y/N)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.AVG_RPB_FLG ;;
  }

  dimension: bil_amt {
    label: "BIL AMT"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.BIL_AMT ;;
  }

  dimension: bil_curr_cd {
    label: "BIL CURR CD"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BIL_CURR_CD ;;
  }

  dimension: bill_amt_usd {
    label: "Final billable amount for Per Diem in USD"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.BILL_AMT_USD ;;
  }

  dimension: bkg_cgo_wgt {
    label: "Gross weight."  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.BKG_CGO_WGT ;;
  }

  dimension: bkg_cgo_wgt_teu {
    label: "Gross weight per TEU" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.BKG_CGO_WGT_TEU ;;
  }

  dimension: bkg_del_conti {
    label: "To Continent" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_DEL_CONTI ;;
  }

  dimension: bkg_mty_rtn_scc_cd {
    label: "Empty Return SCC Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_MTY_RTN_SCC_CD ;;
  }

  dimension: bkg_no {
    view_label: "B/L Information"
    label: "BKG Number"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_NO ;;
    hidden: yes
  }

  dimension: bkg_ofc_cd {
    view_label: "Office Information"
    label: "Booking Office Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_OFC_CD ;;
  }

  dimension: bkg_ofc_cnt_cd {
    view_label: "Office Information"
    label: "BKG Office Country Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_OFC_CNT_CD ;;
  }

  dimension: bkg_ofc_cnt_nm {
    view_label: "Office Information"
    label: "BKG Office Country Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_OFC_CNT_NM ;;
  }

  dimension: bkg_oft_rev {
    label: "Freight Revenue"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.BKG_OFT_REV as NUMERIC) ;;
  }

  dimension: bkg_por_conti {
    label: "From Continent" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_POR_CONTI ;;
  }

  dimension: bkg_sts_cd {
    view_label: "B/L Information"
    label: "BKG Status Code" # programmatically added by LookML modifier
    type: string
    sql: CAST(${TABLE}.BKG_STS_CD as STRING) ;;
  }

  dimension: bkg_teu {
    label: "TEU"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.BKG_TEU ;;
  }

  dimension: bl_no {
    label: "Bill of Lading number." # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BL_NO ;;
  }

  dimension: cgo_ntr_cd {
    label: "Cargo Nature Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CGO_NTR_CD ;;
  }

  dimension: cgo_ntr_nm {
    label: "Cargo Nature Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CGO_NTR_NM ;;
  }

  dimension: cif_fob_split_cd {
    label: "CIF / FOB Split Code (Obsoluete)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CIF_FOB_SPLIT_CD ;;
  }

  dimension: cm_amt2 {
    label: "CM (EPP B)."  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.CM_AMT2 as NUMERIC);;
  }

  dimension: cmd_expt_amt_usd {
    label: "Deduction by commodity exception, in USD" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.CMD_EXPT_AMT_USD ;;
  }

  dimension: cmdt_cd {
    label: "Commodity Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CMDT_CD ;;
  }

  dimension: cmdt_nm {
    label: "Commodity label"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CMDT_NM ;;
  }

  dimension: cnee_cust_cd {
    label: "Consignee code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CNEE_CUST_CD ;;
  }

  dimension: cnee_cust_nm {
    label: "Consignee name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CNEE_CUST_NM ;;
  }

  dimension: cnt_cust_cd {
    label: "Contract Party Customer Code" # programmatically added by LookML modifier
    type: string
    # change for DCN-491
    #sql: ${TABLE}.CNT_CUST_CD ;;
    sql: ${TABLE}.CNT_CUST_CD2 ;;
    # end change DCN-491
  }

  dimension: cnt_cust_nm {
    label: "Contract Party Customer Name" # programmatically added by LookML modifier
    type: string
    # change for DCN-491
    #sql: ${TABLE}.CNT_CUST_NM ;;
    sql: ${TABLE}.CNT_CUST_NM2 ;;
    # end change DCN-491
  }

  dimension: cntr {
    label: "CNTR" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.CNTR as NUMERIC) ;;
  }

  dimension: cntr_lterm_pa_amt {
    label: "Container Fixed Cost (Per Diem)"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.CNTR_LTERM_PA_AMT as NUMERIC) ;;
  }

  dimension: cntr_qty {
    label: "Container Quantity" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.CNTR_QTY ;;
  }

  dimension: cntr_tpsz_cd {
    view_label: "B/L Information"
    label: "Container Type Size Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CNTR_TPSZ_CD ;;
    hidden: yes
  }

  dimension: col_chg_amt {
    label: "Collect Ocean Freight Revenue"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.COL_CHG_AMT as NUMERIC);;
  }

  dimension_group: cont_effective_dt {
    label: "Customer contract effective date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CONT_EFFECTIVE_DT ;;
  }

  dimension_group: cont_expiry_dt {
    label: "Customer contract expiry date"  # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CONT_EXPIRY_DT ;;
  }

  dimension: cont_period_typ_cd {
    label: "Contract Period Type Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CONT_PERIOD_TYP_CD ;;
  }

  dimension: cop_cd {
    label: "Collect payer code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.COP_CD ;;
  }

  dimension: cop_nm {
    label: "Collect payer name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.COP_NM ;;
  }

  dimension: crm_if_flg {
    label: "Contract Cust [Track in CRM] Indicator" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CRM_IF_FLG ;;
  }

  dimension: crm_removal_flg {
    label: "CRM Remove Flag - a programmatic control field to identify lifting records not longer qualified for OUPS-CRM interfaace"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CRM_REMOVAL_FLG ;;
  }

  dimension: ctrt_prop_ofc_cd {
    view_label: "Office Information"
    label: "Contract sales rep office code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_PROP_OFC_CD ;;
  }

  dimension: ctrt_prop_ofc_nm {
    view_label: "Office Information"
    label: "Service Contract Sales Rep Office Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_PROP_OFC_NM ;;
  }

  dimension: ctrt_prop_srep_eml {
    label: "Service Contract Sales Rep Email" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_PROP_SREP_EML ;;
  }

  dimension: ctrt_prop_srep_nm {
    label: "Service Contract Sales Rep" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_PROP_SREP_NM ;;
  }

  dimension: ctrt_scp_srep_eml {
    label: "S/C Service Scope Sales Rep Email"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_SCP_SREP_EML ;;
  }

  dimension: ctrt_scp_srep_nm {
    label: "S/C Service Scope Sales Rep"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_SCP_SREP_NM ;;
  }

  dimension: ctrt_scp_srep_ofc_cd {
    view_label: "Office Information"
    label: "Service Scope sale rep office code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_SCP_SREP_OFC_CD ;;
  }

  dimension: ctrt_scp_srep_ofc_nm {
    view_label: "Office Information"
    label: "S/C Service Scope Sales Rep Office Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_SCP_SREP_OFC_NM ;;
  }

  dimension: cust_grp_cd {
    label: "Contract Party Customer Group Code" # programmatically added by LookML modifier
    type: string
    # change for DCN-491
    #sql: ${TABLE}.CUST_GRP_CD ;;
    sql: ${TABLE}.CUST_GRP_CD2 ;;
    # end change DCN-491
  }

  dimension: cust_grp_nm {
    label: "Contract Party Customer Group Name" # programmatically added by LookML modifier
    type: string
    # change for DCN-491
    #sql: ${TABLE}.CUST_GRP_NM ;;
    sql: ${TABLE}.CUST_GRP_NM2 ;;
    # end change DCN-491
  }

  dimension: dcgo_flg {
    label: "Hazardous Commodity Indicator"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DCGO_FLG ;;
  }

  dimension: de_term_cd {
    label: "CY / Door (Destination)"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DE_TERM_CD ;;
  }

  dimension: del_cd {
    label: "Place of delivery code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DEL_CD ;;
  }

  dimension: del_cnt {
    label: "Destination Country"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DEL_CNT ;;
  }

  dimension: del_nm {
    label: "Place of Delivery Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DEL_NM ;;
  }

  dimension: dest_trns_svc_mod_cd {
    label: "IB Service Mode Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DEST_TRNS_SVC_MOD_CD ;;
  }

  dimension: dir_cd {
    label: "Direction Code (N/S/E/W)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DIR_CD ;;
  }

  dimension: dominant_flg {
    label: "Dom/Non-dominant Indicator (Y/N)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DOMINANT_FLG ;;
  }

  dimension: ete_dys {
    label: "End to End Shipment Transit Days" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.ETE_DYS as NUMERIC);;
  }

  dimension: fi {
    label: "FI" # programmatically added by LookML modifier
    type: number
    sql: cast(${TABLE}.FI as NUMERIC) ;;
  }

  dimension: final_pod_cd {
    label: "Final discharge port code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FINAL_POD_CD ;;
  }

  dimension: frt_term_cd {
    label: "Prepaid / Collect Payer Indicator (P/C)"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRT_TERM_CD ;;
  }

  dimension: frwd_cust_cd {
    label: "Forwarder code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRWD_CUST_CD ;;
  }

  dimension: frwd_cust_nm {
    label: "Forwarder name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRWD_CUST_NM ;;
  }

  dimension: ib_mty_pa_amt {
    label: "IB EPP A" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.IB_MTY_PA_AMT AS NUMERIC) ;;
  }

  dimension: ib_mty_pa_amt2 {
    label: "IB EPP B" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.IB_MTY_PA_AMT2 AS NUMERIC) ;;
  }

  dimension: imdg_clss_cd {
    label: "IMDG Class Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.IMDG_CLSS_CD ;;
  }

  dimension: imdg_pck_grp_cd {
    label: "IMDG Pack Grp Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.IMDG_PCK_GRP_CD ;;
  }

  dimension: imdg_un_no {
    label: "IMDG UN No."  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.IMDG_UN_NO ;;
  }

  dimension: ioc_cd {
    label: "IOC Code (I/O)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.IOC_CD ;;
  }

  dimension: ld {
    label: "LD" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.LD as NUMERIC) ;;
  }

  dimension: lst_vvd_cd {
    label: "Last VVD Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LST_VVD_CD ;;
  }

  dimension: misc_rev {
    label: "Miscellaneous Revenue"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.MISC_REV as NUMERIC) ;;
  }

  dimension: misc_rev_teu {
    label: "Per TEU - Miscellaneous Revenue"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.MISC_REV_TEU AS NUMERIC) ;;
  }

#  dimension: month {
#    label: "MONTH (do not use)"  # programmatically added by LookML modifier
#    type: string
#    sql: ${TABLE}.MONTH ;;
#  }

  dimension: mty_pkup_scc_cd {
    label: "Empty Pick Up SCC Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MTY_PKUP_SCC_CD ;;
  }

  dimension: mty_rtn_scc_cd {
    label: "Actual Empty Return SCC Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MTY_RTN_SCC_CD ;;
  }

  dimension: mty_rtn_yd_cd {
    label: "Empty Return Yard Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MTY_RTN_YD_CD ;;
  }

  dimension: n1st_finc_vvd_cd {
    label: "First VVD code."  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.N1ST_FINC_VVD_CD ;;
  }

  dimension: n1st_pod_cd {
    label: "First Discharge Port" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.N1ST_POD_CD ;;
  }

  dimension: n1st_pol_cd {
    label: "First Load Port"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.N1ST_POL_CD ;;
  }

  dimension: n1st_rlane_cd {
    label: "N1ST RLANE CD"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.N1ST_RLANE_CD ;;
  }

  dimension: ncust_cd {
    label: "Notify Party 1 code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NCUST_CD ;;
  }

  dimension: ncust_lgl_eng_nm {
    label: "Notify Party 1 name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NCUST_LGL_ENG_NM ;;
  }

  dimension: ntlt_grp_nm {
    label: "SC/RFA Customer Nationality Group"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NTLT_GRP_NM ;;
  }

  dimension: ob_mty_pa_amt {
    label: "OB EPP A" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.OB_MTY_PA_AMT as NUMERIC) ;;
  }

  dimension: ob_mty_pa_amt2 {
    label: "OB EPP B" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.OB_MTY_PA_AMT2 as NUMERIC) ;;
  }

  dimension: ob_ofc_nm {
    view_label: "Office Information"
    label: "Loading Sales Rep Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_OFC_NM ;;
  }

  dimension: ob_sls_ofc_cd {
    view_label: "Office Information"
    label: "Loading sales rep office code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_SLS_OFC_CD ;;
  }

  dimension: ob_srep_cd {
    label: "Loading Sales Rep Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_SREP_CD ;;
  }

  dimension: ob_srep_eml {
    label: "Loading Sales Rep Email"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_SREP_EML ;;
  }

  dimension: ob_srep_nm {
    label: "Loading Sales Rep"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_SREP_NM ;;
  }

  dimension_group: obl_iss_dt {
    label: "B/L Issue Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.OBL_ISS_DT ;;
  }

  dimension: ofr_col_per_teu {
    type: number
    sql: CAST(${TABLE}.OFR_COL_PER_TEU as NUMERIC) ;;
  }

  dimension: ofr_ppd_per_teu {
    type: number
    sql: CAST(${TABLE}.OFR_PPD_PER_TEU as NUMERIC) ;;
  }

  dimension: oft_rev_scg {
    label: "Freight Revenue (OFT+Surcharge Total)"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.OFT_REV_SCG as NUMERIC) ;;
  }

  dimension: oft_rev_scg_teu {
    label: "Per TEU - Freight Revenue (OFT+Surcharge Total)"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.OFT_REV_SCG_TEU as NUMERIC) ;;
  }

  dimension_group: onboard_dt {
    label: "Onboard Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ONBOARD_DT ;;
  }

  dimension: org_chg_amt {
    label: "Charges based on Tariff"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.ORG_CHG_AMT ;;
  }

  dimension: org_chg_amt_usd {
    label: "Per Diem charges calculated based on Tariff in USD" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.ORG_CHG_AMT_USD ;;
  }

  dimension: org_curr_cd {
    label: "Charges based on Tariff - Currency" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ORG_CURR_CD ;;
  }

  dimension: org_trns_svc_mod_cd {
    label: "OB Service Mode Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ORG_TRNS_SVC_MOD_CD ;;
  }

  dimension: ori_cnt {
    label: "Origin Country" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ORI_CNT ;;
  }

  dimension: ovr_void_slt_qty_teu {
    label: "Void TEU" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.OVR_VOID_SLT_QTY_TEU ;;
  }

  dimension: pa_cm_amt {
    label: "CM (EPP A)" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.PA_CM_AMT as NUMERIC) ;;
  }

  dimension: pa_cm_amt_teu {
    label: "CM Per TEU (EPP A)" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.PA_CM_AMT_TEU as NUMERIC) ;;
  }

  dimension: pa_cm_cost_ttl_amt {
    label: "Total Cost" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.PA_CM_COST_TTL_AMT as NUMERIC) ;;
  }

  dimension: pa_cm_cost_ttl_amt_teu {
    label: "Cost per TEU" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.PA_CM_COST_TTL_AMT_TEU as NUMERIC) ;;
  }

  dimension: pck_tp_cd {
    label: "Package type" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.PCK_TP_CD ;;
  }

  dimension: pod_loc_cd {
    label: "Trunk POD Location Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POD_LOC_CD ;;
  }

  dimension: pod_loc_nm {
    label: "Trunk POD Location Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POD_LOC_NM ;;
  }

  dimension: pol_loc_cd {
    label: "Trunk POL Location Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POL_LOC_CD ;;
  }

  dimension: pol_loc_nm {
    label: "Trunk POL Location Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POL_LOC_NM ;;
  }

  dimension: por_cd {
    label: "Place of receipt code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POR_CD ;;
  }

  dimension: por_nm {
    label: "Place of Receipt Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POR_NM ;;
  }

  dimension: ppd_chg_amt {
    label: "Prepaid Ocean Freight Revenue"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.PPD_CHG_AMT as. NUMERIC);;
  }

  dimension: ppp_cd {
    label: "Pre-paid Payer code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.PPP_CD ;;
  }

  dimension: ppp_nm {
    label: "Pre-paid Payer Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.PPP_NM ;;
  }

  dimension: pre_bl_no {
    label: "Previous BL No" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.PRE_BL_NO ;;
  }

  dimension: quarter {
    label: "QUARTER (do not use)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.QUARTER ;;
  }

  dimension: rcv_term_cd {
    label: "CY / Door (Origin)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.RCV_TERM_CD ;;
  }

  dimension: rd_cgo_flg {
    label: "Reefer As Dry Indicator"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.RD_CGO_FLG ;;
  }

  dimension: rep_trd_cd {
    label: "Representative Trade" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.REP_TRD_CD ;;
  }

  dimension: rev_mon {
    label: "Revenue Month"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.REV_MON ;;
  }

  dimension: rev_ttl {
    label: "Revenue Total"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.REV_TTL as NUMERIC) ;;
  }

  dimension: rev_ttl_teu {
    label: "Per TEU - Revenue Total"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.REV_TTL_TEU as NUMERIC) ;;
  }

  dimension: rlane_cd {
    label: "Revenue Lane code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.RLANE_CD ;;
  }

  dimension: sc_curr_cd {
    label: "SC CURR CD" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_CURR_CD ;;
  }

  dimension: sc_rfa_ctrt_tp_nm {
    label: "SC/RFA Contract Type (RFA, TAA, S/C)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_CTRT_TP_NM ;;
  }

  dimension: sc_rfa_expt_amt {
    label: "Charges based on RFA/SC exception"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.SC_RFA_EXPT_AMT ;;
  }

  dimension: sc_rfa_expt_amt_usd {
    label: "Deduction based on RFA/SC exception, in USD"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.SC_RFA_EXPT_AMT_USD ;;
  }

  dimension: sc_rfa_sls_rep_ofc_cnt_cd {
    view_label: "Office Information"
    label: "SC/RFA Customer Sales Rep Office Country Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_SLS_REP_OFC_CNT_CD ;;
  }

  dimension: sc_rfa_sls_rep_ofc_cnt_nm {
    view_label: "Office Information"
    label: "SC/RFA Customer Sales Rep Office Country Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_SLS_REP_OFC_CNT_NM ;;
  }

  dimension: shpr_cust_cd {
    label: "Shipper code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SHPR_CUST_CD ;;
  }

  dimension: shpr_cust_nm {
    label: "Shipper name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SHPR_CUST_NM ;;
  }

  # dimension: slane_cd {
  #   hidden: yes
  #   label: "Service Lane (Rev)"
  #   type: string
  #   sql: ${TABLE}.slane_cd ;;
  # }

  dimension: slane_cd {
    hidden: yes
    label: "Service Lane (Rev)"
    type: string
    sql: substr(${rlane_cd},1,3) ;;
  }

  dimension: sub_trd_cd {
    label: "Sub TRADE Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SUB_TRD_CD ;;
  }

  dimension: svc_cont_no {
    label: "Service contract number." # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SVC_CONT_NO ;;
  }

  dimension: svc_scp_cd {
    label: "Service Scope Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SVC_SCP_CD ;;
  }

  dimension: trd_cd {
    label: "Trade Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.TRD_CD ;;
  }

  dimension: vvd {
    label: "Revenue VVD code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.VVD ;;
  }

  dimension: week {
    label: "Sales Week" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.WEEK ;;
  }

#  dimension: year {
#    label: "YEAR (do not use)" # programmatically added by LookML modifier
#    type: string
#    sql: ${TABLE}.YEAR ;;
#  }


  measure: TotalTeu {
    view_label: "V Customer Opus N Prospect"
    label: "{{ _view._name }}: Total Teu"
    type: sum
    sql: ${bkg_teu};;
  }


  measure: count {
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [primary_key, bkg_no, cntr_tpsz_cd, count]
  }

  set: non_consolidated {
    fields: [
      act_arr_dt_date
      , act_arr_dt_month
      , act_arr_dt_quarter
      , act_arr_dt_year
      , act_dep_dt_date
      , act_dep_dt_month
      , act_dep_dt_quarter
      , act_dep_dt_year
      , cont_effective_dt_date
      , cont_effective_dt_month
      , cont_effective_dt_quarter
      , cont_effective_dt_year
      , cont_expiry_dt_date
      , cont_expiry_dt_month
      , cont_expiry_dt_quarter
      , cont_expiry_dt_year
      , obl_iss_dt_date
      , obl_iss_dt_month
      , obl_iss_dt_quarter
      , obl_iss_dt_year
      , onboard_dt_date
      , onboard_dt_month
      , onboard_dt_quarter
      , onboard_dt_year
      , ofr_col_per_teu
      , ofr_ppd_per_teu
    ]
  }
}

view: of_ap_distinct {
  derived_table: {
    sql: select distinct  ap.sales_week  ,
       trade_code, trunk_vvd_service_lane_code, dominant_leg_flag, sc_rfa_number , sc_rfa_customer_group_code
from ${of_account_plan.SQL_TABLE_NAME} as ap
 ;;

    persist_for: "24 hours"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: sales_week {
    type: string
    sql: ${TABLE}.sales_week;;
  }

  dimension: trade_code {
    type: string
    sql: ${TABLE}.trade_code ;;
  }

  dimension: trunk_vvd_service_lane_code {
    type: string
    sql: ${TABLE}.trunk_vvd_service_lane_code ;;
  }

  dimension: dominant_leg_flag {
    type: string
    sql: ${TABLE}.dominant_leg_flag ;;
  }

  dimension: sc_rfa_number {
    type: string
    sql: ${TABLE}.sc_rfa_number ;;
  }

  dimension: sc_rfa_customer_group_code {
    type: string
    sql: ${TABLE}.sc_rfa_customer_group_code ;;
  }

  set: detail {
    fields: [
      sales_week,
      trade_code,
      trunk_vvd_service_lane_code,
      dominant_leg_flag,
      sc_rfa_number,
      sc_rfa_customer_group_code
    ]
  }
}

view: of_audit_responses {
  sql_table_name: `ONEFORCE.OF_AUDIT_RESPONSES`
    ;;

  dimension: accuracy_remarks {
    type: string
    sql: ${TABLE}.Accuracy_Remarks ;;
  }

  dimension: acknowledgement {
    type: string
    sql: ${TABLE}.Acknowledgement ;;
  }

  measure: Avg_acknowledgement {
    type: average
    sql: ${TABLE}.Acknowledgement  ;;
    label: "Average Acknowledgement"
    value_format: "0.00"
  }

  dimension: auditee {
    type: string
    sql: ${TABLE}.Auditee ;;
  }

  dimension: authenticated {
    type: string
    sql: ${TABLE}.Authenticated ;;
  }

  dimension: case_id_chat_information {
    type: string
    sql: ${TABLE}.Case_ID_Chat_Information ;;
  }

  dimension: case_nurturing_score {
    type: string
    sql: ${TABLE}.Case_Nurturing_Score ;;
  }

  dimension: contact_name {
    type: string
    sql: ${TABLE}.Contact_Name ;;
  }

  dimension: contract_customer {
    type: string
    sql: ${TABLE}.Contract_Customer ;;
  }

  dimension: contract_customer_chat_information {
    type: string
    sql: ${TABLE}.Contract_Customer_Chat_Information ;;
  }

  dimension: contract_customer_code_chat_information {
    type: string
    sql: ${TABLE}.Contract_Customer_Code_Chat_Information ;;
  }

  dimension: correct_contact_name {
    type: string
    sql: ${TABLE}.Correct_Contact_Name ;;
  }

  dimension: correct_contract_customer {
    type: string
    sql: ${TABLE}.Correct_Contract_Customer ;;
  }

  dimension: correct_contract_customer_code {
    type: string
    sql: ${TABLE}.Correct_Contract_Customer_Code ;;
  }

  dimension: correct_reference_number {
    type: string
    sql: ${TABLE}.Correct_Reference_Number ;;
  }

  dimension: correct_service_customer {
    type: string
    sql: ${TABLE}.Correct_Service_Customer ;;
  }

  dimension: correct_service_customer_code {
    type: string
    sql: ${TABLE}.Correct_Service_Customer_Code ;;
  }

  dimension: country {
    type: string
    sql: ${TABLE}.Country ;;
  }

  dimension: customer_email_add_chat_information {
    type: string
    sql: ${TABLE}.Customer_email_add_Chat_Information ;;
  }

  dimension: customer_rating {
    type: string
    sql: ${TABLE}.Customer_Rating ;;
  }

  measure: Customer_good_rating {
    type: average
    sql: CASE WHEN ${TABLE}.Customer_Rating = 'Rated Good' THEN 1 ELSE 0 END;;
    drill_fields: [detail*]
    label: "Rate Good Ratio"
    value_format_name: percent_0
  }



  dimension_group: date {
    type: time
    datatype: datetime
    timeframes: [year, month, week, week_of_year, month_num, month_name, date, raw]
    sql: ${TABLE}.Date ;;
  }

  dimension: dry_run_audit {
    type: string
    sql: ${TABLE}.Dry_Run_Audit ;;
  }

  dimension: email_address {
    type: string
    sql: ${TABLE}.Email_Address ;;
  }

  dimension: followed_solution_skillset {
    type: string
    sql: ${TABLE}.Followed_Solution_Skillset ;;
    label: "Solution Skillset"
  }

  measure: Avg_followed_solution_skillset {
    type: average
    sql: ${TABLE}.Followed_Solution_Skillset  ;;
    label: "Average Followed Solution Skillset"
    value_format: "0.00"
  }

  dimension: how_was_the_closing {
    type: string
    sql: ${TABLE}.How_was_the_Closing ;;
  }

  dimension: how_was_the_opening {
    type: string
    sql: ${TABLE}.How_was_the_Opening ;;
  }

  dimension: hows_opening_and_closing {
    type: string
    sql: ${TABLE}.Hows_opening_and_Closing ;;
  }

  measure: Avg_hows_opening_and_closing {
    type: average
    sql: ${TABLE}.Hows_opening_and_Closing  ;;
    label: "Average Opening and Closing"
    value_format: "0.00"
  }

  dimension: month {
    type: string
    sql: ${TABLE}.Month ;;
  }

  dimension: nam_opus_notes_remarks {
    type: string
    sql: ${TABLE}.NAM_OPUS_Notes_Remarks ;;
  }

  dimension: office_hierarchy {
    type: string
    sql: ${TABLE}.Office_Hierarchy ;;
  }

  dimension: offices {
    type: string
    sql: ${TABLE}.Offices ;;
  }

  dimension: platform {
    type: string
    sql: ${TABLE}.Platform ;;
  }

  dimension: qualify_as_best_practice {
    type: string
    sql: ${TABLE}.Qualify_as_best_practice ;;
  }

  dimension: record_id {
    type: string
    primary_key: yes
    sql: ${TABLE}.Record_ID ;;
  }

  dimension: reference_number {
    type: string
    sql: ${TABLE}.Reference_Number ;;
  }

  dimension: region {
    type: string
    sql: ${TABLE}.Region ;;
  }

  dimension: score {
    type: string
    sql: ${TABLE}.Score ;;
    label: "QA Score"
  }

  dimension: service_customer {
    type: string
    sql: ${TABLE}.Service_Customer ;;
  }

  dimension: service_customer_chat_information {
    type: string
    sql: ${TABLE}.Service_Customer_Chat_Information ;;
  }

  dimension: service_customer_code_chat_information {
    type: string
    sql: ${TABLE}.Service_Customer_Code_Chat_Information ;;
  }

  dimension: Timestamp {
    type: string
    sql: ${TABLE}.Timestamp ;;
  }


  dimension: Date_dynamic {
    type: string
    label: "date Dynamic"
    sql:
     {% if timeframe_picker._parameter_value == 'Day' %} ${date_date}
     {% elsif timeframe_picker._parameter_value == 'Week' %} ${Week_1}
     {% elsif timeframe_picker._parameter_value == 'Month' %} ${date_month}
     {% elsif timeframe_picker._parameter_value == 'Year' %} ${date_year}
     {% else %} null {% endif %} ;;
  }


  parameter: timeframe_picker {
    label: "Date Granularity"
    type: unquoted
    allowed_value: { value: "Day" }
    allowed_value: { value: "Week" }
    allowed_value: { value: "Month" }
    allowed_value: { value: "Year" }
    default_value: "Month"
  }

  dimension_group: Date_for_filter {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    label: "Date For Filter"
    sql: ${TABLE}.Date ;;
  }

  dimension: week_number {
    type: string
    sql: ${TABLE}.Week_Number ;;
  }

  dimension: wow_factor {
    type: string
    sql: ${TABLE}.WOW_Factor ;;
  }

  measure: Avg_QA_count {
    type: average
    sql: ${TABLE}.Score  ;;
    label: "Average QA Score"
    drill_fields: [detail*]
    value_format_name: decimal_0
  }

  measure: Avg_case_nurturing_score {
    type: average
    sql: ${TABLE}.Case_Nurturing_Score  ;;
    label: "Average Case Nurturing Score"
    drill_fields: [detail*]
    value_format: "0.00"
  }


  dimension: month_segment {
    type: string
    sql: CASE
          WHEN ${month} ='January' THEN '01'
          WHEN ${month} ='February' THEN '02'
          WHEN ${month} ='March' THEN '03'
          WHEN ${month} ='April' THEN '04'
          WHEN ${month} ='May' THEN '05'
          WHEN ${month} ='June' THEN '06'
          WHEN ${month} ='July' THEN '07'
          WHEN ${month} ='August' THEN '08'
          WHEN ${month} ='September' THEN '09'
          WHEN ${month} ='October' THEN '10'
          WHEN ${month} ='November' THEN '11'
          ELSE '12' END
          ;;
    label: "Month segment"
  }

  dimension: Week_1 {
    type: string
    sql: concat(${date_year},"-",${week_segment}) ;;
  }

  dimension: yearstr {
    type: string
    sql: FORMAT(GETDATE(), 'yy') ;;
  }

  dimension: week_segment {
    type: string
    alpha_sort: yes
    sql: CASE
          WHEN ${week_number} ='Week 1' THEN 'Week 01'
          WHEN ${week_number} ='Week 2' THEN 'Week 02'
          WHEN ${week_number} ='Week 3' THEN 'Week 03'
          WHEN ${week_number} ='Week 4' THEN 'Week 04'
          WHEN ${week_number} ='Week 5' THEN 'Week 05'
          WHEN ${week_number} ='Week 6' THEN 'Week 06'
          WHEN ${week_number} ='Week 7' THEN 'Week 07'
          WHEN ${week_number} ='Week 8' THEN 'Week 08'
          WHEN ${week_number} ='Week 9' THEN 'Week 09'
          ELSE ${week_number} END
          ;;
    label: "Week Segment"
  }


  set: detail {
    fields: [
      region,
      country,
      offices,
      auditee,
      platform,
    ]
  }
}

view: of_booking {
  derived_table: {
    sql:
      SELECT booking.*, coalesce(booking.act_mty_rtn_yd_cd, booking.bkg_mty_rtn_yd_cd) as mty_rtn_yd_cd
    -- add by Helen on 2021.12.28 for DCN-491
      , coalesce(of_svc_contract.cust_cd, booking.ctrt_cust_cd, '<blank>') as CTRT_CUST_CD2
      , v_customer_opus_n_prospect.cust_grp_id as CTRT_CUST_GRP_ID2
      , v_customer_opus_n_prospect.name as CTRT_CUST_NM2
      , v_customer_opus_n_prospect.cust_grp_nm as CTRT_CUST_GRP_NM2
    -- end 2021.12.28 for DCN-491
      , etd_lp1_of_sales_week_master.sales_week as etd_lp1_sales_week
      FROM `ONEFORCE.OF_BOOKING` as booking
      LEFT JOIN ${of_sales_week_master.SQL_TABLE_NAME} as etd_lp1_of_sales_week_master ON FORMAT_DATE("%b%Y", booking.etd_lp1) = etd_lp1_of_sales_week_master.Sales_Month AND cast(booking.etd_lp1 as date) BETWEEN etd_lp1_of_sales_week_master.Week_Start_date AND etd_lp1_of_sales_week_master.Week_End_Date
      -- add by Helen on 2021.12.28 for DCN-491
      LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON booking.svc_cont_no = of_svc_contract.sc_rfa_no
      LEFT JOIN (
          SELECT distinct vv.cust_cd, vv.name, vv.cust_grp_id, g.cust_grp_nm
          FROM ${v_customer_opus_n_prospect.SQL_TABLE_NAME} vv,
               ${of_customer_group.SQL_TABLE_NAME} g
          WHERE vv.cust_grp_id = g.cust_grp_id
        ) as v_customer_opus_n_prospect
      ON coalesce(of_svc_contract.cust_cd, booking.ctrt_cust_cd) = v_customer_opus_n_prospect.cust_cd
      -- end change on 2021.12.28 for DCN-491
    ;;
  }

  drill_fields: [basic_details*]

  dimension: primary_key {
    primary_key: yes
    hidden: yes
    type: string
    sql: concat(${bkg_no}, ${cntr_tpsz}) ;;
  }

  dimension: ac_com_amt {
    label: "Agency" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.AC_COM_AMT as NUMERIC) ;;
  }

  dimension: ac_fac_amt {
    label: "Brokerage." # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.AC_FAC_AMT as NUMERIC) ;;
  }

  dimension: act_mty_pkup_scc_cd {
    label: "Actual Empty Pick Up SCC Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ACT_MTY_PKUP_SCC_CD ;;
  }

  dimension: act_mty_pkup_yd_cd {
    label: "Actual Empty Pick Up Yard Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ACT_MTY_PKUP_YD_CD ;;
  }

  dimension: actual_cust_cd {
    label: "Actual Customer Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ACTUAL_CUST_CD ;;
  }

  dimension: actual_cust_nm {
    label: "Actual Customer Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ACTUAL_CUST_NM ;;
  }

  dimension: avg_rpb_flg {
    label: "Avg RPB Flag (Y/N)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.AVG_RPB_FLG ;;
  }

  dimension: bkg_cgo_tp_cd {
    label: "Booking cargo type" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_CGO_TP_CD ;;
  }

  dimension: bkg_cgo_wgt {
    label: "Gross weight."  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.BKG_CGO_WGT ;;
  }

  dimension_group: bkg_cre_dt {
    label: "BKG creation date"  # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.BKG_CRE_DT ;;
    html: {{ rendered_value | date: "%b %d, %y" }} ;;
  }

  dimension_group: bkg_cxl_dt {
    label: "Booking cancellation date"  # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.BKG_CXL_DT ;;
    html: {{ rendered_value | date: "%b %d, %y" }} ;;
  }

  dimension: canel_date_diff_raw {
    hidden: yes
    type: number
    sql: date_diff(${etd_lp1_raw},${bkg_cxl_dt_raw},Day) ;;
#    sql: date_diff(${bkg_cxl_dt_raw}, ${etd_lp1_raw}, Day) ;;
  }

  dimension: cancel_date_diff {
    type: string
    sql:
    CASE
      WHEN ${bkg_cxl_dt_raw} IS NULL AND ${bkg_sts_cd} = 'X' THEN 'No Cancel Date'
      WHEN ${canel_date_diff_raw} = 0 THEN '0 Departure Day'
      WHEN ${canel_date_diff_raw} > 0 AND ${canel_date_diff_raw} <= 2 THEN '02 Days Before'
      WHEN ${canel_date_diff_raw} > 2 AND ${canel_date_diff_raw} <= 5 THEN '05 Days Before'
      WHEN ${canel_date_diff_raw} > 5 AND ${canel_date_diff_raw} <= 7 THEN '07 Days Before'
      WHEN ${canel_date_diff_raw} > 7 AND ${canel_date_diff_raw} <= 10 THEN '10 Days Before'
      WHEN ${canel_date_diff_raw} > 10 THEN 'More than 10 Days Before'
      WHEN ${canel_date_diff_raw} < 0 THEN '- After Departure'
      ELSE NULL
      END
    ;;
  }

  dimension: bkg_cxl_rmk {
    label: "Booking cancellation reason remarks"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_CXL_RMK ;;
  }

  dimension: len_bkg_cxl_rmk {
    label: "Length of booking cancellation reason remarks"
    type: number
    sql: length(${bkg_cxl_rmk}) ;;
    value_format_name: decimal_0
  }

  dimension: bkg_cxl_rsn_cd {
    label: "Booking cancellation reason code" # programmatically added by LookML modifier
    type: string
    sql: case when ${TABLE}.BKG_STS_CD = 'X' AND ${TABLE}.BKG_CXL_RSN_CD IS NULL THEN "Z" ELSE ${TABLE}.BKG_CXL_RSN_CD END ;;
  }

  dimension: bkg_mty_rtn_scc_cd {
    label: "Empty Return SCC Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_MTY_RTN_SCC_CD ;;
  }

  dimension: bkg_no {
    label: "Booking No."  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_NO ;;

    link: { # -- Arul+Jack OPUS Direct Link -- Start 28-Jul-2021 Rleased
      label: "View Booking"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_0079_Q.do%3FmainPage%3Dtrue%26pid%3DESM_BKG_M020%26MENU%3DY%26pgmNo%3DESM_BKG_0079_Q%26parentPgmNo%3DESM_BKG_M001%26mainMenuLinkFlag%3Dtrue%26menuflag%3Dtrue%26mainPage%3Dtrue%26bkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    }
    link: {
      label: "B/L Preview"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_0927_POP.do%3Fbkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    }
    link: {
      label: "Standby Booking Detail"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_2020.do%3Fbkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    } # -- Arul OPUS Direct Link -- Start 28-Jul-2021


  }

  dimension: bkg_sts {
    label: "Status"
    type: string
    sql:
    CASE
        WHEN  ${TABLE}.BKG_STS_CD  = 'X' THEN 'Cancelled'
        WHEN  ${TABLE}.BKG_STS_CD  = 'F' THEN 'Firm'
        WHEN  ${TABLE}.BKG_STS_CD  = 'S' THEN 'Firm (S)'
        WHEN  ${TABLE}.BKG_STS_CD  = 'W' THEN 'Waitlisted'
        WHEN  ${TABLE}.BKG_STS_CD  = 'A' THEN 'Pseudo Booking'
        ELSE  ${TABLE}.BKG_STS_CD
      END;;
  }

  dimension: bkg_no_stripped {
    label: "BKG NO (1st 10 characters)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_NO_STRIPPED ;;
  }

  dimension: bkg_ofc_cd {
    view_label: "Office Information"
    label: "Booking Office code." # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_OFC_CD ;;
  }

  dimension: bkg_ofc_cnt_cd {
    view_label: "Office Information"
    label: "BKG Office Country Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_OFC_CNT_CD ;;
  }

  dimension: bkg_ofc_cnt_nm {
    view_label: "Office Information"
    label: "BKG Office Country Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_OFC_CNT_NM ;;
  }

  dimension: bkg_oft_rev {
    label: "Freight Revenue"  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.BKG_OFT_REV as NUMERIC) ;;
  }

  dimension: bkg_sts_cd {
    view_label: "B/L Information"
    label: "BKG Status Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_STS_CD ;;
  }

  dimension: bkg_teu {
    label: "TEU"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.BKG_TEU ;;
  }

  dimension: cgo_ntr_cd {
    label: "Cargo Nature Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CGO_NTR_CD ;;
  }

  dimension: cgo_ntr_nm {
    label: "Cargo Nature Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CGO_NTR_NM ;;
  }

  dimension: cif_fob_split_cd {
    label: "CIF / FOB Split Code (Obsoluete)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CIF_FOB_SPLIT_CD ;;
  }

  dimension: cm_amt1 {
    label: "CM (EPP A)."  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.CM_AMT1 as NUMERIC) ;;
  }

  dimension: cm_amt2 {
    label: "CM (EPP B)."  # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.CM_AMT2 as NUMERIC);;
  }

  dimension: cmdt_cd {
    label: "Commodity Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CMDT_CD ;;
  }

  dimension: cmdt_nm {
    label: "Commodity label"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CMDT_NM ;;
  }

##Zoe - 21 Jul##
  dimension: cmdt_nm_and_Cd{
    label: "Commodity label and code"  # programmatically added by LookML modifier
    type: string
    sql:concat(${cmdt_cd}, "-" ,${cmdt_nm}) ;;
  }


  dimension: cnee_cust_cd {
    label: "Consignee code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CNEE_CUST_CD ;;
  }

  dimension: cnee_cust_nm {
    label: "Consignee name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CNEE_CUST_NM ;;
  }

  dimension: cntr {
    label: "CNTR" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.CNTR as NUMERIC) ;;
  }

  dimension: cntr_qty {
    label: "Container Quantity" # programmatically added by LookML modifier
    type: number
    sql: cast(${TABLE}.CNTR_QTY as NUMERIC) ;;
  }

  dimension: cntr_tpsz {
    label: "Equipment type size"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CNTR_TPSZ ;;
  }

  dimension: consolidated_reason_code {
    type: string
    label: "Z means no reason"
    sql:
      CASE
        WHEN ${bkg_sts_cd} = 'X' AND ${bkg_cxl_rsn_cd} IS NOT NULL THEN ${bkg_cxl_rsn_cd}
        WHEN ${bkg_sts_cd} = 'X' AND ${bkg_cxl_rsn_cd} IS NULL THEN 'Z'
        WHEN ${bkg_sts_cd} = 'X' THEN NULL
        ELSE NULL
      END;;
  }

  dimension_group: cont_effective_dt {
    label: "Customer contract effective date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CONT_EFFECTIVE_DT ;;
  }

  dimension_group: cont_expiry_dt {
    label: "Customer contract expiry date"  # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CONT_EXPIRY_DT ;;
  }

  dimension: cont_period_typ_cd {
    label: "Contract Period Type Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CONT_PERIOD_TYP_CD ;;
  }

  dimension: crm_if_flg {
    label: "Contract Cust [Track in CRM] Indicator" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CRM_IF_FLG ;;
  }

  dimension: ctrt_cust_cd {
    label: "Contract Party Customer Code" # programmatically added by LookML modifier
    type: string
    # change by Helen on 2021.12.28 for DCN-491
    #sql: ${TABLE}.CTRT_CUST_CD ;;
    sql: ${TABLE}.CTRT_CUST_CD2 ;;
    # end change by on 2021.12.28 for DCN-491
  }

  dimension: ctrt_cust_grp_id {
    label: "Contract Party Customer Group Name" # programmatically added by LookML modifier
    type: string
    # change by Helen on 2021.12.28 for DCN-491
    #sql: ${TABLE}.CTRT_CUST_GRP_ID ;;
    sql: ${TABLE}.CTRT_CUST_GRP_ID2;;
    # end change by on 2021.12.28 for DCN-491
  }

  dimension: ctrt_cust_grp_nm {
    label: "Contract Party Customer Group Code" # programmatically added by LookML modifier
    type: string
    # change by Helen on 2021.12.28 for DCN-491
    #sql: ${TABLE}.CTRT_CUST_GRP_NM ;;
    sql: ${TABLE}.CTRT_CUST_GRP_NM2 ;;
    # end change by on 2021.12.28 for DCN-491
  }

  dimension: ctrt_cust_nm {
    label: "Contract Party Customer Name" # programmatically added by LookML modifier
    type: string
    # change by Helen on 2021.12.28 for DCN-491
    #sql: ${TABLE}.CTRT_CUST_NM ;;
    sql: ${TABLE}.CTRT_CUST_NM2 ;;
    # end change by on 2021.12.28 for DCN-491
  }

  dimension: ctrt_prop_ofc_cd {
    view_label: "Office Information"
    label: "Contract sales rep office code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_PROP_OFC_CD ;;
  }

  dimension: ctrt_prop_ofc_nm {
    view_label: "Office Information"
    label: "Service Contract Sales Rep Office Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_PROP_OFC_NM ;;
  }

  dimension: ctrt_prop_srep_eml {
    label: "Service Contract Sales Rep Email" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_PROP_SREP_EML ;;
  }

  dimension: ctrt_prop_srep_nm {
    label: "Service Contract Sales Rep" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_PROP_SREP_NM ;;
  }

  dimension: ctrt_scp_srep_eml {
    label: "S/C Service Scope Sales Rep Email"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_SCP_SREP_EML ;;
  }

  dimension: ctrt_scp_srep_nm {
    label: "S/C Service Scope Sales Rep"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_SCP_SREP_NM ;;
  }

  dimension: ctrt_scp_srep_ofc_cd {
    view_label: "Office Information"
    label: "Service Scope sale rep office code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_SCP_SREP_OFC_CD ;;
  }

  dimension: ctrt_scp_srep_ofc_nm {
    view_label: "Office Information"
    label: "S/C Service Scope Sales Rep Office Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTRT_SCP_SREP_OFC_NM ;;
  }

  dimension: dcgo_flg {
    label: "Hazardous Commodity Indicator"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DCGO_FLG ;;
  }

  dimension: de_term_cd {
    label: "CY / Door (Destination)"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DE_TERM_CD ;;
  }

  dimension: del_cd {
    label: "Place of delivery code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DEL_CD ;;
  }

  dimension: del_cnt {
    label: "Destination Country"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DEL_CNT ;;
  }

  dimension: del_nm {
    label: "Place of Delivery Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DEL_NM ;;
  }

  dimension: del_nm_and_del_cnt {
    type: string
    sql: concat(${del_nm}, ', ', ${del_cnt}) ;;
  }

  dimension: dest_trns_svc_mod_cd {
    label: "IB Service Mode Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DEST_TRNS_SVC_MOD_CD ;;
  }

  dimension: dir_cd {
    label: "Direction Code (N/S/E/W)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DIR_CD ;;
  }

  dimension: dominant_flg {
    label: "Dom/Non-dominant Indicator (Y/N)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DOMINANT_FLG ;;
  }

  dimension_group: etd_lp1 {
    label: "EPS - First Load Port"  # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.ETD_LP1 ;;
  }

  dimension: ete_dys {
    label: "End to End Shipment Transit Days" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.ETE_DYS as NUMERIC);;
  }

  dimension: fi {
    label: "FI" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.FI as NUMERIC) ;;
  }

  dimension: final_pod_cd {
    label: "Final discharge port code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FINAL_POD_CD ;;
  }

  dimension: frst_vvd {
    label: "First VVD code."  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRST_VVD ;;
  }

  dimension: frt_term_cd {
    label: "Prepaid / Collect Payer Indicator (P/C)"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRT_TERM_CD ;;
  }

  dimension: frwd_cust_cd {
    label: "Forwarder code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRWD_CUST_CD ;;
  }

  dimension: frwd_cust_nm {
    label: "Forwarder name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRWD_CUST_NM ;;
  }

  dimension: ib_mty_pa_amt {
    label: "IB EPP A" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.IB_MTY_PA_AMT AS NUMERIC) ;;
  }

  dimension: ib_mty_pa_amt2 {
    label: "IB EPP B" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.IB_MTY_PA_AMT2 AS NUMERIC) ;;
  }

  dimension: ioc_cd {
    label: "IOC Code (I/O)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.IOC_CD ;;
  }

  dimension: ld {
    label: "LD" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.LD as NUMERIC) ;;
  }

  dimension: line_code1 {
    label: "First service lane code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LINE_CODE1 ;;
  }

  dimension: lst_vvd_cd {
    label: "Last VVD Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LST_VVD_CD ;;
  }

  # dimension: month {
  #  label: "MONTH (do not use)"  # programmatically added by LookML modifier
  #  type: string
  #  sql: ${TABLE}.MONTH ;;
  # }

  dimension: mty_pkup_scc_cd {
    label: "Empty Pick Up SCC Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MTY_PKUP_SCC_CD ;;
  }

  dimension: mty_rtn_scc_cd {
    label: "Actual Empty Return SCC Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MTY_RTN_SCC_CD ;;
  }

  dimension: mty_rtn_yd_cd {
    label: "Empty Return Yard Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MTY_RTN_YD_CD ;;
  }

  dimension: bkg_mty_rtn_yd_cd {
    label: "Booking Empty Return Yard Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_MTY_RTN_YD_CD ;;
  }

  dimension: act_mty_rtn_yd_cd {
    label: "Actual Empty Return Yard Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ACT_MTY_RTN_YD_CD ;;
  }

  dimension: n1st_pod_cd {
    label: "First Discharge Port" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.N1ST_POD_CD ;;
  }

  dimension_group: n1st_pol_atd_dt {
    label: "First POL ATD Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.N1ST_POL_ATD_DT ;;
  }

  dimension: n1st_pol_cd {
    label: "First Load Port"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.N1ST_POL_CD ;;
  }

  dimension: n1st_rlane_cd {
    label: "N1ST RLANE CD"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.N1ST_RLANE_CD ;;
  }

  dimension: ntfy_cust_cd {
    label: "Notify Party Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NTFY_CUST_CD ;;
  }

  dimension: ntfy_cust_nm {
    label: "Notify Party Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NTFY_CUST_NM ;;
  }

  dimension: ntlt_grp_nm {
    label: "SC/RFA Customer Nationality Group"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NTLT_GRP_NM ;;
  }

  dimension: ob_mty_pa_amt {
    label: "OB EPP A" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.OB_MTY_PA_AMT as NUMERIC) ;;
  }

  dimension: ob_mty_pa_amt2 {
    label: "OB EPP B" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.OB_MTY_PA_AMT2 as NUMERIC) ;;
  }

  dimension: ob_ofc_nm {
    view_label: "Office Information"
    label: "Loading Sales Rep Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_OFC_NM ;;
  }

  dimension: ob_sls_ofc_cd {
    view_label: "Office Information"
    label: "Loading sales rep office code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_SLS_OFC_CD ;;
  }

  dimension: ob_srep_cd {
    label: "Loading Sales Rep Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_SREP_CD ;;
  }

  dimension: ob_srep_eml {
    label: "Loading Sales Rep Email"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_SREP_EML ;;
  }

  dimension: ob_srep_nm {
    label: "Loading Sales Rep"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OB_SREP_NM ;;
  }

  dimension: org_trns_svc_mod_cd {
    label: "OB Service Mode Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ORG_TRNS_SVC_MOD_CD ;;
  }

  dimension: ori_cnt {
    label: "Origin Country" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ORI_CNT ;;
  }

  dimension: pod_loc_cd {
    label: "Trunk POD Location Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POD_LOC_CD ;;
  }

  dimension: pod_loc_nm {
    label: "Trunk POD Location Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POD_LOC_NM ;;
  }

  dimension: pol_loc_cd {
    label: "Trunk POL Location Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POL_LOC_CD ;;
  }

  dimension: pol_loc_nm {
    label: "Trunk POL Location Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POL_LOC_NM ;;
  }

  dimension: por_cd {
    label: "Place of receipt code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POR_CD ;;
  }

  dimension: por_nm {
    label: "Place of Receipt Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POR_NM ;;
  }

  dimension: por_nm_and_ori_cnt {
    type: string
    sql: concat(${por_nm},', ', ${ori_cnt}) ;;
  }

  # dimension: quarter {
  #  label: "QUARTER (do not use)"  # programmatically added by LookML modifier
  #  type: string
  #  sql: ${TABLE}.QUARTER ;;
  # }

  dimension: rcv_term_cd {
    label: "CY / Door (Origin)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.RCV_TERM_CD ;;
  }

  dimension: rd_cgo_flg {
    label: "Reefer As Dry Indicator"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.RD_CGO_FLG ;;
  }

  dimension: rlane_cd {
    label: "Revenue Lane code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.RLANE_CD ;;
  }

  dimension: slane_cd {
    label: "Service Lane (Rev)"
    type: string
    sql: substr(${of_booking.rlane_cd}, 1, 3) ;;
  }

  dimension: sc_rfa_ctrt_tp_nm {
    label: "SC/RFA Contract Type (RFA, TAA, S/C)" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_CTRT_TP_NM ;;
  }

  dimension: sc_rfa_sls_rep_ofc_cnt_cd {
    view_label: "Office Information"
    label: "SC/RFA Customer Sales Rep Office Country Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_SLS_REP_OFC_CNT_CD ;;
  }

  dimension: sc_rfa_sls_rep_ofc_cnt_nm {
    view_label: "Office Information"
    label: "SC/RFA Customer Sales Rep Office Country Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_SLS_REP_OFC_CNT_NM ;;
  }

  dimension: shpr_cust_cd {
    label: "Shipper code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SHPR_CUST_CD ;;
  }

  dimension: shpr_cust_nm {
    label: "Shipper name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SHPR_CUST_NM ;;
  }

  dimension: sub_trd_cd {
    label: "Sub TRADE Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SUB_TRD_CD ;;
  }

  dimension: svc_cont_no {
    label: "Service contract number." # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SVC_CONT_NO ;;
    link: { # -- Arul OPUS Direct Link -- Start Released to Prod on 28-Jul-2021
      label: "{% if  of_booking.sc_rfa_ctrt_tp_nm._value == 'RFA' %}
      View RFA
      {% else %}
      View Service Contract
      {% endif %}"
      url: "{% if  of_booking.sc_rfa_ctrt_tp_nm._value == 'RFA' %}
      https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_PRI_2019.do%3Fpid%3DESM_PRI_M012%26MENU%3DY%26pgmNo%3DESM_PRI_2019%26parentPgmNo%3DESM_PRI_M001%26main_page%3Dtrue%26mainMenuLinkFlag%3Dtrue%26menuflag%3Dtrue%26mainPage%3Dtrue%26s_rfa_no%3D{{ value }}
      {% else %}
      https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_PRI_0004.do%3Fpid%3DESM_PRI_M006%26MENU%3DY%26pgmNo%3DESM_PRI_0004%26parentPgmNo%3DESM_PRI_M001%26main_page%3Dtrue%26mainMenuLinkFlag%3Dtrue%26menuflag%3Dtrue%26mainPage%3Dtrue%26sc_no_s%3D{{ value }}
      {% endif %}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico" # -- Arul OPUS Direct Link -- End Released to Prod on 28-Jul-2021
    }
  }

  dimension: svc_scp_cd {
    label: "Service Scope Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SVC_SCP_CD ;;
    suggest_persist_for: "24 hour"
  }

  dimension: t_slan_cd {
    label: "Trunk VVD Service Lane Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.T_SLAN_CD ;;
  }

  dimension: t_vvd_cd {
    label: "Trunk VVD Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.T_VVD_CD ;;
    # link: { # -- Arul OPUS Direct Link -- Start 28-Jul-2021
    #   label: "Standby Detail"
    #   url: "https://cntr.one-line.com/opuscntr/ESM_BKG_2025.do?bkg_vvd={{value}}"
    #   icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    # } # -- Arul OPUS Direct Link -- End 28-Jul-2021
  }

  dimension: tot_g_rev {
    label: "Total Gross Revenue USD Amount" # programmatically added by LookML modifier
    type: number
    sql: CAST(${TABLE}.TOT_G_REV as NUMERIC) ;;
  }

  dimension: trd_cd {
    label: "Trade Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.TRD_CD ;;
  }

  dimension: week {
    label: "Sales Week" # programmatically added by LookML modifier
    type: string
    sql: coalesce(${TABLE}.week, cast(${TABLE}.etd_lp1_sales_week as int64)) ;;
  }

  dimension: etd_lp1_sales_week {
    hidden: yes
    type: string
    sql: ${TABLE}.etd_lp1_sales_week ;;
  }

  dimension: is_with_cancellation_code {
    type: yesno
    sql: ${bkg_cxl_rsn_cd} IS NULL OR ${bkg_cxl_rsn_cd} = '' ;;
  }

  dimension: xter_rmk {
    label: "Cancellation reason"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.XTER_RMK ;;
  }

  #DCN-944
  dimension: Is_ONEQuote {
    label: "Is ONE Quote"
    type: yesno
    sql: COALESCE(${TABLE}.XTER_BKG_RQST_CD,'XX') = 'WEQ' ;;
  }

  dimension: xter_bkg_rqst_cd {
    label: "Booking Request Code"
    type: string
    sql: XTER_BKG_RQST_CD;;
  }

  dimension: ONEQuote {
    label: "ONE Quote"
    type: string
    sql: CASE WHEN COALESCE(${TABLE}.XTER_BKG_RQST_CD,'XX') = 'WEQ' THEN 'Yes' ELSE 'No' END;;
  }

  # dimension: year {
  #  label: "YEAR (do not use)" # programmatically added by LookML modifier
  #  type: string
  #  sql: ${TABLE}.YEAR ;;
  # }

# Sharon added on 19 Nov 2021
  dimension: Booking_Cancellation_Tab_link {
    type: string
    sql:  CONCAT(1,2);;
    html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
        <nav style="font-size: 18px;">
        <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed;"href="https://oneline.cloud.looker.com/embed/dashboards-next/5?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&Team={{ _filters['of_one_team.name'] | url_encode }}&Origin%20Country= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Bkg%20Office%20Country={{_filters['of_booking.bkg_ofc_cnt_nm']| url_encode }}&Load%20Port={{_filters['of_booking.n1st_pol_cd'] | url_encode }}&Discharge%20Port={{ _filters['of_booking.n1st_pod_cd']|url_encode }}&Bkg%20No%281st+10+characters%29={{ _filters['of_booking.bkg_no_stripped']| url_encode }}&Contract%20office={{ _filters['of_booking.ctrt_prop_ofc_cd']| url_encode }}&Booking%20RHQ={{ _filters['of_salesperson.regional_head_office']| url_encode }}&Service%20Lane%28Rev%29{{ _filters['of_booking.slane_cd']|url_encode }}&Booking%20Office={{ _filters['of_booking.bkg_ofc_cd']| url_encode }}&Svc%2FRFA%20No={{ _filters['of_booking.svc_cont_no']|url_encode }}&Contract%20Sales%20Person={{ _filters['of_booking.ctrt_prop_srep_nm']| url_encode }}&Actual%20Customer%20Name%28NAC%29={{ _filters['of_booking.actual_cust_nm']|url_encode }}&Cancel%20Reason={{ _filters['bkg_cncl_reason.cancel_reason']| url_encode }}&Booking%20Status={{ _filters['v_booking_cancellation_teu_drop.Bkg_grp_sts_Description']| url_encode }}&Cancellation+Category={{ _filters['bkg_cncl_reason.category'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_booking.Is_ONEQuote']| url_encode }}" target="_blank" > Booking Cancellation Monitor </a>
        <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;"href="https://oneline.cloud.looker.com/embed/dashboards-next/135?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&Team={{ _filters['of_one_team.name'] | url_encode }}&Origin%20Country= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Bkg%20Office%20Country={{_filters['of_booking.bkg_ofc_cnt_nm']| url_encode }}&Load%20Port={{_filters['of_booking.n1st_pol_cd'] | url_encode }}&Discharge%20Port={{ _filters['of_booking.n1st_pod_cd']|url_encode }}&Bkg%20No%281st+10+characters%29={{ _filters['of_booking.bkg_no_stripped']| url_encode }}&Contract%20office={{ _filters['of_booking.ctrt_prop_ofc_cd']|url_encode }}&Booking%20RHQ={{ _filters['of_salesperson.regional_head_office']| url_encode }}&Service%20Lane%28Rev%29{{ _filters['of_booking.slane_cd']|url_encode }}&Booking%20Office={{ _filters['of_booking.bkg_ofc_cd']| url_encode }}&Svc%2FRFA%20No={{ _filters['of_booking.svc_cont_no']| url_encode }}&Contract%20Sales%20Person={{ _filters['of_booking.ctrt_prop_srep_nm']|url_encode }}&Actual%20Customer%20Name%28NAC%29={{ _filters['of_booking.actual_cust_nm']| url_encode }}&Cancel%20Reason={{ _filters['bkg_cncl_reason.cancel_reason']| url_encode }}&Booking%20Status={{ _filters['v_booking_cancellation_teu_drop.Bkg_grp_sts_Description']| url_encode }}&Cancellation+Category={{ _filters['bkg_cncl_reason.category'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_booking.Is_ONEQuote'] | url_encode }}" target="_blank" > Booking Cancellation Matrix </a>
         </nav>
       </div>
  ;;
  }

  dimension: Booking_Cancellation_Tab_link2 {
    type: string
    sql:  CONCAT(1,2);;
    html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
       <nav style="font-size: 18px;">
       <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;"href="https://oneline.cloud.looker.com/embed/dashboards-next/5?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&Team={{ _filters['of_one_team.name'] | url_encode }}&Origin%20Country= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Bkg%20Office%20Country={{_filters['of_booking.bkg_ofc_cnt_nm']| url_encode }}&Load%20Port={{ _filters['of_booking.n1st_pol_cd'] | url_encode }}&Discharge%20Port={{ _filters['of_booking.n1st_pod_cd']|url_encode }}&Bkg%20No%201st+10+characters%29={{ _filters['of_booking.bkg_no_stripped'] | url_encode }}&Contract%20office={{ _filters['of_booking.ctrt_prop_ofc_cd'] | url_encode }}&Booking%20RHQ={{ _filters['of_salesperson.regional_head_office']|url_encode }}&Service%20Lane%28Rev%29={{ _filters['of_booking.slane_cd']|url_encode }}&Booking%20Office={{ _filters['of_booking.bkg_ofc_cd']| url_encode }}&Svc%2FRFA%20No={{ _filters['of_booking.svc_cont_no']| url_encode }}&Contract%20Sales%20Person={{ _filters['of_booking.ctrt_prop_srep_nm']|url_encode }}&Actual%20Customer%20Name%28NAC%29={{ _filters['of_booking.actual_cust_nm']| url_encode }}&Cancel%20Reason={{ _filters['bkg_cncl_reason.cancel_reason']| url_encode }}&Booking%20Status={{ _filters['v_booking_cancellation_teu_drop.Bkg_grp_sts_Description']| url_encode }}&Cancellation+Category={{ _filters['bkg_cncl_reason.category'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_booking.Is_ONEQuote'] | url_encode }}" target="_blank" > Booking Cancellation Monitor </a>
       <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed;" href="https://oneline.cloud.looker.com/embed/dashboards-next/135?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&Team={{ _filters['of_one_team.name'] | url_encode }}&Origin%20Country= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Bkg%20Office%20Country={{_filters['of_booking.bkg_ofc_cnt_nm']| url_encode }}&Load%20Port={{ _filters['of_booking.n1st_pol_cd'] | url_encode }}&Discharge%20Port={{ _filters['of_booking.n1st_pod_cd']|url_encode }}&Bkg%20No%281st+10+characters%29={{ _filters['of_booking.bkg_no_stripped']| url_encode }}&Contract%20office={{ _filters['of_booking.ctrt_prop_ofc_cd']| url_encode }}&Booking%20RHQ={{ _filters['of_salesperson.regional_head_office']| url_encode }}&Service%20Lane%28Rev%29{{ _filters['of_booking.slane_cd']|url_encode }}&Booking%20Office={{ _filters['of_booking.bkg_ofc_cd']| url_encode }}&Svc%2FRFA%20No={{ _filters['of_booking.svc_cont_no']|url_encode }}&Contract%20Sales%20Person={{ _filters['of_booking.ctrt_prop_srep_nm']|url_encode }}&Actual%20Customer%20Name%28NAC%29={{ _filters['of_booking.actual_cust_nm']|url_encode }}&Cancel%20Reason={{ _filters['bkg_cncl_reason.cancel_reason']| url_encode }}&Booking%20Status={{ _filters['v_booking_cancellation_teu_drop.Bkg_grp_sts_Description']| url_encode }}&Cancellation+Category={{ _filters['bkg_cncl_reason.category'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_booking.Is_ONEQuote'] | url_encode }}" target="_blank" > Booking Cancellation Matrix </a>
        </nav>
      </div>
  ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  measure: count_booking_no_stripped_non_distinct {
    type: number
    sql: COUNT(${bkg_no_stripped}) ;;
    value_format_name: decimal_0
    drill_fields: [bkg_no_stripped, count_booking_no_stripped_non_distinct]
  }

  measure: count_booking_no_stripped {
    type: count_distinct
    sql: ${bkg_no_stripped} ;;
    value_format_name: decimal_0
    drill_fields: [bkg_no_stripped, count_booking_no_stripped]
  }

  measure: total_teu {
    type: sum
    sql: ${bkg_teu} ;;
    drill_fields: [basic_details*, total_teu]
  }

  set: primary_key {
    fields: [primary_key, bkg_no, cntr_tpsz, count]
  }

  set: non_consolidated {
    fields: [
      bkg_cre_dt_date
      , bkg_cre_dt_month
      , bkg_cre_dt_quarter
      , bkg_cre_dt_year
      , bkg_cxl_dt_date
      , bkg_cxl_dt_month
      , bkg_cxl_dt_quarter
      , bkg_cxl_dt_year
      , cont_effective_dt_date
      , cont_effective_dt_month
      , cont_effective_dt_quarter
      , cont_effective_dt_year
      , cont_expiry_dt_date
      , cont_expiry_dt_month
      , cont_expiry_dt_quarter
      , cont_expiry_dt_year
      , etd_lp1_date
      , etd_lp1_month
      , etd_lp1_quarter
      , etd_lp1_year
      , n1st_pol_atd_dt_date
      , n1st_pol_atd_dt_month
      , n1st_pol_atd_dt_quarter
      , n1st_pol_atd_dt_year
      , cont_period_typ_cd
    ]
  }

  set: basic_details {
    fields: [
      bkg_no
      , cntr_tpsz
      , bkg_sts_cd
      , ctrt_cust_cd
      , ctrt_cust_grp_id
      , ctrt_scp_srep_eml
      , ctrt_scp_srep_nm
    ]
  }


}

view: of_booking_ap {
  derived_table: {
    sql: select distinct bkg_no as plan_bkg
               FROM ${of_booking.SQL_TABLE_NAME} AS of_booking
                    LEFT JOIN `ONEFORCE.OF_SVC_SCP`
                   AS of_svc_scp ON of_booking.svc_scp_cd = of_svc_scp.service_scope_code
                   LEFT JOIN `ONEFORCE.OF_SVC_CONTRACT` as of_svc_contract ON of_booking.svc_cont_no = of_svc_contract.sc_rfa_no
                    LEFT JOIN (
                      SELECT cust_cd, cust_grp_id, cntr_cust_tp_cd
                      FROM `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT`

      ) as v_customer_opus_n_prospect ON coalesce(of_svc_contract.cust_cd, of_booking.ctrt_cust_cd) = v_customer_opus_n_prospect.cust_cd
      AND coalesce(of_svc_contract.cust_cd, of_booking.ctrt_cust_cd) IS NOT NULL
      inner join ${of_account_plan.SQL_TABLE_NAME} as ap on cast(regexp_replace(ap.sales_week, '[/W]', '') as int64) = of_booking.week
      and ap.sc_rfa_customer_group_code = v_customer_opus_n_prospect.cust_grp_id and ap.sc_rfa_number = svc_cont_no
      and ap.trade_code = of_svc_scp.service_scope_group_code
      and ap.loading_sales_rep_office_code = of_booking.bkg_ofc_cd
      and ap.trunk_vvd_service_lane_code = t_slan_cd
      and (case when ap.dominant_leg_flag = 'Y' then 'DOM' when  ap.dominant_leg_flag = 'N' then 'N-DOM' else 'XXX' end) = (CASE
      WHEN svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N-DOM'
      WHEN svc_scp_cd = 'LEA' THEN 'DOM'
      WHEN svc_scp_cd = 'IAA' AND right(t_vvd_cd,1) IN ('S','W') THEN 'DOM'
      WHEN svc_scp_cd = 'IAA' THEN 'N-DOM'
      ELSE of_svc_scp.dominant_flag
      END )
      WHERE of_booking.bkg_sts_cd  != 'X'
      ;;
    persist_for: "4 hours"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
    hidden: yes
  }

  dimension: plan_bkg {
    type: string
    sql: ${TABLE}.plan_bkg ;;
  }

  #dimension: week {
  #   type: string
  #   sql: ${TABLE}.week ;;
  #}

  set: detail {
    fields: [plan_bkg]
  }
}

view: of_bound {
  derived_table: {
    sql: SELECT 'N' as bound UNION ALL
          SELECT 'S' as bound UNION ALL
          SELECT 'W' as bound UNION ALL
          SELECT 'E' as bound
       ;;
  }

  dimension: bound {
    label: "Bound"
    type: string
    sql: ${TABLE}.bound ;;
  }

}

view: of_business_hours {
  sql_table_name: `ONEFORCE.OF_BUSINESS_HOURS`
    ;;

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension_group: friday_end {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.FridayEndTime ;;
  }

  dimension_group: friday_start {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.FridayStartTime ;;
  }

  dimension: is_active {
    type: string
    sql: ${TABLE}.IsActive ;;
  }

  dimension: is_default {
    type: string
    sql: ${TABLE}.IsDefault ;;
  }

  dimension: is_dummy {
    type: string
    sql: ${TABLE}.IsDummy ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension_group: last_viewed {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastViewedDate ;;
  }

  dimension_group: monday_end {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.MondayEndTime ;;
  }

  dimension_group: monday_start {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.MondayStartTime ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_Id ;;
  }

  dimension_group: saturday_end {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SaturdayEndTime ;;
  }

  dimension_group: saturday_start {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SaturdayStartTime ;;
  }

  dimension_group: sunday_end {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SundayEndTime ;;
  }

  dimension_group: sunday_start {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SundayStartTime ;;
  }

  dimension_group: system_modstamp {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SystemModstamp ;;
  }

  dimension_group: thursday_end {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ThursdayEndTime ;;
  }

  dimension_group: thursday_start {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ThursdayStartTime ;;
  }

  dimension: time_zone_sid_key {
    type: string
    sql: ${TABLE}.TimeZoneSidKey ;;
  }

  dimension_group: tuesday_end {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.TuesdayEndTime ;;
  }

  dimension_group: tuesday_start {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.TuesdayStartTime ;;
  }

  dimension_group: wednesday_end {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.WednesdayEndTime ;;
  }

  dimension_group: wednesday_start {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.WednesdayStartTime ;;
  }

  measure: count {
    type: count
    drill_fields: [name]
  }
}

view: of_calendar {
  derived_table: {
    sql: SELECT  FORMAT_DATE('%Y%m%d',calendar_date) primKey
        ,calendar_date
        ,cast(EXTRACT(YEAR FROM calendar_date) as string) as calendar_year
        ,cast(EXTRACT(MONTH FROM calendar_date) as string) as calendar_month
        ,CONCAT(cast(EXTRACT(YEAR FROM calendar_date) as string),LPAD(cast(EXTRACT(MONTH FROM calendar_date) as string),2,'0')) as calendar_year_month
        ,EXTRACT(ISOWEEK FROM calendar_date) as isoweek
        ,DATE_TRUNC(calendar_date, ISOWEEK) as isoweek_start_date
        ,LAST_DAY(calendar_date, WEEK(MONDAY)) AS isoweek_end_date
        ,EXTRACT(WEEK FROM calendar_date) as week
        ,DATE_TRUNC(calendar_date, WEEK) as week_start_date
        ,LAST_DAY(calendar_date, WEEK(SUNDAY)) AS week_end_date

      FROM
      (
      SELECT DATE_ADD('2021-01-01',INTERVAL param DAY) AS calendar_date
      FROM unnest(GENERATE_ARRAY(0, 10000, 1)) as param
      )
      ;;
    persist_for: "100 hours"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  measure: month_count {
    type: count_distinct
    sql: ${calendar_year_month} ;;
  }

  measure: week_count {
    type: count_distinct
    sql: ${isoweek_start_date} ;;
    drill_fields: [detail*]
  }

  measure: year_count {
    type: count_distinct
    sql: ${calendar_year};;
    drill_fields: [detail*]
  }

  dimension: primKey {
    type: string
    sql: ${TABLE}.primKey ;;
    primary_key: yes
  }

  dimension: calendar_date {
    type: date
    datatype: date
    sql: ${TABLE}.calendar_date ;;
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.calendar_year ;;
  }

  dimension: calendar_year_month {
    type: string
    sql: ${TABLE}.calendar_year_month ;;
  }

  dimension: calendar_month {
    type: string
    sql: ${TABLE}.calendar_month ;;
  }

  dimension: isoweek {
    type: number
    sql: ${TABLE}.isoweek ;;
  }

  dimension: isoweek_start_date {
    type: date
    datatype: date
    sql: ${TABLE}.isoweek_start_date ;;
  }

  dimension: isoweek_end_date {
    type: date
    datatype: date
    sql: ${TABLE}.isoweek_end_date ;;
  }

  dimension: week {
    type: number
    sql: ${TABLE}.week ;;
  }

  dimension: week_start_date {
    type: date
    datatype: date
    sql: ${TABLE}.week_start_date ;;
  }

  dimension: week_end_date {
    type: date
    datatype: date
    sql: ${TABLE}.week_end_date ;;
  }

  set: detail {
    fields: [
      calendar_date,
      calendar_year,
      calendar_month,
      isoweek,
      isoweek_start_date,
      isoweek_end_date,
      week,
      week_start_date,
      week_end_date
    ]
  }
}

view: of_calendar_week {
  derived_table: {
    sql: select  isoweek_start_date,
                 isoweek_end_date,
                 MIN(calendar_month)      as calendar_month,
                 MIN(calendar_year_month) as calendar_year_month,
                 MIN(calendar_year)       as calendar_year
      from ${of_calendar.SQL_TABLE_NAME}
      group by 1,2
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: isoweek_start_date {
    type: date
    datatype: date
    sql: ${TABLE}.isoweek_start_date ;;
    primary_key: yes
  }

  dimension: isoweek_end_date {
    type: date
    datatype: date
    sql: ${TABLE}.isoweek_end_date ;;
  }

  dimension: calendar_month {
    type: string
    sql: ${TABLE}.calendar_month ;;
  }

  dimension: calendar_year_month {
    type: string
    sql: ${TABLE}.calendar_year_month ;;
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.calendar_year ;;
  }

  measure: year_count {
    type: count_distinct
    sql: ${TABLE}.calendar_year ;;
  }

  measure: month_count {
    type: count_distinct
    sql: ${TABLE}.calendar_year_month ;;
  }

  measure: week_count {
    type: count_distinct
    sql: ${TABLE}.isoweek_start_date ;;
  }

  set: detail {
    fields: [isoweek_start_date, isoweek_end_date, calendar_month, calendar_year_month, calendar_year]
  }
}

view: of_campaign {
  sql_table_name: `ONEFORCE.OF_CAMPAIGN`
    ;;

  dimension: actual_cost {
    type: number
    sql: ${TABLE}.ActualCost ;;
  }

  dimension: amount_all_opportunities {
    type: number
    sql: ${TABLE}.AmountAllOpportunities ;;
  }

  dimension: budgeted_cost {
    type: number
    sql: ${TABLE}.BudgetedCost ;;
  }

  dimension: campaign_member_record_type_id {
    type: string
    sql: ${TABLE}.CampaignMemberRecordTypeId ;;
  }

  dimension: campaign_owner_full_name {
    type: string
    sql: ${TABLE}.Campaign_Owner_FullName ;;
  }

  dimension: createdbyid {
    type: string
    sql: ${TABLE}.Createdbyid ;;
  }

  dimension_group: createddate {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.Createddate ;;
  }

  dimension: description {
    type: string
    sql: ${TABLE}.Description ;;
  }

  dimension: description_ {
    type: string
    sql: ${TABLE}.Description_ ;;
  }

  dimension: destination {
    type: string
    sql: ${TABLE}.Destination ;;
  }

  dimension: destination_country {
    type: string
    sql: ${TABLE}.Destination_Country ;;
  }

  dimension: enddate {
    type: string
    sql: ${TABLE}.Enddate ;;
  }

  dimension: equipment_type {
    type: string
    sql: ${TABLE}.Equipment_Type ;;
  }

  dimension: expected_response {
    type: number
    sql: ${TABLE}.ExpectedResponse ;;
  }

  dimension: expected_revenue {
    type: number
    sql: ${TABLE}.ExpectedRevenue ;;
  }

  dimension: isactive {
    type: string
    sql: ${TABLE}.Isactive ;;
  }

  dimension: isdeleted {
    type: string
    sql: ${TABLE}.Isdeleted ;;
  }

  dimension: last_activity_date {
    type: string
    sql: ${TABLE}.LastActivityDate ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedByID ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension_group: last_referenced {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastReferencedDate ;;
  }

  dimension_group: last_viewed {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastViewedDate ;;
  }

  dimension: name {
    label: "Campaign Name"
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: number_sent {
    type: string
    sql: ${TABLE}.NumberSent ;;
  }

  dimension: numberof_contacts {
    type: number
    sql: ${TABLE}.NumberofContacts ;;
  }

  dimension: numberof_converted_leads {
    type: number
    sql: ${TABLE}.NumberofConvertedLeads ;;
  }

  dimension: numberof_leads {
    type: number
    sql: ${TABLE}.NumberofLeads ;;
  }

  dimension: numberof_opportunities {
    type: number
    sql: ${TABLE}.NumberofOpportunities ;;
  }

  dimension: numberof_responses {
    type: number
    sql: ${TABLE}.NumberofResponses ;;
  }

  dimension: numberof_won_opportunities {
    type: number
    sql: ${TABLE}.NumberofWonOpportunities ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
    primary_key: yes
  }

  dimension: origin {
    type: string
    sql: ${TABLE}.Origin ;;
  }

  dimension: origin_country {
    type: string
    sql: ${TABLE}.Origin_Country ;;
  }

  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerID ;;
  }

  dimension: parent_id {
    type: string
    sql: ${TABLE}.ParentID ;;
  }

  dimension: service_lane {
    type: string
    sql: ${TABLE}.Service_Lane ;;
  }

  dimension: service_scope {
    type: string
    sql: ${TABLE}.Service_Scope ;;
  }

  dimension: service_scope_code {
    type: string
    sql: ${TABLE}.Service_Scope_Code ;;
  }

  dimension: service_scope_group {
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: start_date {
    type: string
    sql: ${TABLE}.StartDate ;;
  }

  dimension: status {
    type: string
    sql: ${TABLE}.Status ;;
  }

  dimension: trade_marketing_direction {
    type: string
    sql: ${TABLE}.Trade_marketing_direction ;;
  }

  dimension: type {
    type: string
    sql: ${TABLE}.Type ;;
  }

  dimension: commodity {
    type: string
    sql:  ${TABLE}.Commodity;;
  }

  dimension: camp_eff_from {
    label: "Effective Date From"
    type: date
    datatype: date
    sql:  ${TABLE}.Effective_From;;
  }

  dimension: camp_eff_to {
    label: "Effective Date To"
    type: date
    datatype: date
    sql:  ${TABLE}.Effective_To;;
  }

  measure: count {
    type: count
    drill_fields: [name, campaign_owner_full_name]
  }
}

view: of_case {

  #FOR OFPROD before DCN-1065 deployment
  sql_table_name: `ONEFORCE.OF_CASE` ;;

  #FOR OFTRAIN
  #derived_table: {
  #  sql:
  #  SELECT * FROM `ONEFORCE.OF_CASE` t1
  #  WHERE
  #  t1.Origin in ('Chat','Phone','Email','Web','Manual')
  #  and t1.Status not in ('Waiting on Customer Response','Waiting on Internal ONE Team','Merged')
  #  and t1.Office is not null
  #  and t1.CreatedDate >= DATE('2022-03-28')
  #  and coalesce(case_handle_time_minutes,0) >= 0
  #  ;;

  #  partition_keys: ["createddate"]
  #  persist_for: "2 hours"
  #}

  # sql_table_name: `ONEFORCE.OF_CASE`;;
  # Below Dimensions and Measures from Line 5-94 created for Box-Plot
  dimension: case_handling_time_new {
    label: "case Handling Time1"
    type: number
    sql:  ${TABLE}.Case_Handle_Time_Minutes ;;
    value_format_name: decimal_1
  }

  measure: chat_handling_time_new {
    label: "chat Handling Time"
    type: number
    sql:  sum(${TABLE}.Case_Handle_Time_Minutes) ;;
    value_format_name: decimal_1
  }

  dimension: min_case_handling_time_dim {
    label: "min case Handling Time dim"
    type: string
    sql:  min(${TABLE}.Case_Handle_Time_Minutes) ;;
    value_format_name: decimal_1
  }

  dimension: max_case_handling_time_dim {
    label: "max case Handling Time dim"
    type: string
    sql:  max(${TABLE}.Case_Handle_Time_Minutes) ;;
    value_format_name: decimal_1
  }

  dimension: avg_case_handling_time_dim {
    label: "avg case Handling Time dim"
    type: string
    sql:  avg(distinct ${TABLE}.Case_Handle_Time_Minutes) ;;
    value_format_name: decimal_1
  }

  measure: min_case_handling_time_new {
    label: "min case Handling Time"
    type: min
    sql:  ${TABLE}.Case_Handle_Time_Minutes ;;
    value_format_name: decimal_1
  }

  measure: max_case_handling_time_new {
    label: "max case Handling Time"
    type: max
    sql:  ${TABLE}.Case_Handle_Time_Minutes ;;
    value_format_name: decimal_1
  }

  measure: avg_case_handling_time_new {
    label: "avg case Handling Time"
    type: average
    sql:  ${TABLE}.Case_Handle_Time_Minutes ;;
    value_format_name: decimal_1
  }

  measure: min_case_handling_time_string {
    label: "min case Handling Time string"
    type: string
    sql:  min(${TABLE}.Case_Handle_Time_Minutes) ;;
    value_format_name: decimal_1
  }

  measure: max_ase_handling_time_string {
    label: "max ase Handling Time string"
    type: string
    sql:  max(${TABLE}.Case_Handle_Time_Minutes) ;;
    value_format_name: decimal_1
  }

  measure: avg_case_handling_time_string {
    label: "avg case Handling Time string"
    type: string
    sql:  avg(distinct ${TABLE}.Case_Handle_Time_Minutes) ;;
    value_format_name: decimal_1
  }

  dimension: 25_case_handling_time_new {
    label: "25% case Handling Time"
    type: number
    sql:  safe_multiply(${TABLE}.Case_Handle_Time_Minutes,0.25) ;;
    value_format_name: decimal_1
  }

  dimension: 75_case_handling_time_new {
    label: "75% case Handling Time"
    type: number
    sql:  safe_multiply(${TABLE}.Case_Handle_Time_Minutes,0.75) ;;
    value_format_name: decimal_1
  }
  # Above Dimesions and Measures from line 5-94 created for Box-Plot

  dimension: casenumber {
    type: string
    sql: ${TABLE}.CaseNumber ;;
    #label:"{{ _view._name }}"
    label: "{% if  _view._name  == 'parent_case' %} Parent Case Number {% else %} Case Number {% endif %}"
  }

  dimension: parentid {
    type: string
    sql: ${TABLE}.ParentId ;;
    label: "Parent Case"
    group_label: "Subject & Description"
    hidden: yes
  }

  dimension: subject {
    type: string
    sql: ${TABLE}.Subject ;;
    label: : "Subject"
    group_label: "Subject & Description"
  }

  dimension: description {
    type: string
    sql: ${TABLE}.Description ;;
    label: "Description"
    group_label: "Subject & Description"
  }


  dimension: contactemail {
    type: string
    sql: ${TABLE}.ContactEmail ;;
    label: "Contact Email"
  }

  dimension: contract_customer_name {
    type: string
    sql: ${TABLE}.Contract_Customer_Name ;;
    label: "Contract Customer Name"
    group_label: "Customer Information"
    hidden: no
  }


  dimension: accountid {
    type: string
    sql: ${TABLE}.AccountId ;;
    label: "Customer Name"
    group_label: "Customer Information"
    hidden: yes
  }

  dimension: contactid {
    type: string
    sql: ${TABLE}.ContactId ;;
    label: "Contact Name"
    group_label: "Customer Information"
  }

  dimension: customer_segment {
    type: string
    sql: ${TABLE}.Customer_Segment ;;
    label: "Customer Segment"
    group_label: "Customer Information"
    hidden: yes
  }

  dimension: Reference_Type {
    type: string
    sql: ${TABLE}.Reference_Type ;;
    label: "Reference Type"
    group_label: "Additional Information"
  }

  dimension: p_i_claim_number {
    type: string
    sql: ${TABLE}.P_I_Claim_Number ;;
    label: "P & I Claim Number"
    group_label: "Additional Information"
  }

  dimension: container_number {
    type: string
    sql: ${TABLE}.Container_Number ;;
    label: "Container Number"
    group_label: "Additional Information"
  }

  dimension: booking_number {
    type: string
    sql: ${TABLE}.Booking_Number ;;
    label: "Booking Number"
    group_label: "Additional Information"
  }

  dimension: is_valid_booking_number {
    type: string
    sql: CASE WHEN LENGTH(${TABLE}.Booking_Number)=12 AND UPPER(${TABLE}.Booking_Number)=${TABLE}.Booking_Number THEN 'Yes' ELSE 'No' END  ;;
    label: "Is Valid Booking Number"
    group_label: "Additional Information"
  }


  dimension: contract_number {
    type: string
    sql: ${TABLE}.Contract_Number ;;
    label: "Contract Number"
    group_label: "Additional Information"

  }

  dimension: is_valid_contract_number {
    type: string
    sql: CASE WHEN ${TABLE}.Contract_Number IS NOT NULL AND ${TABLE}.Contract_Customer_Name IS NULL THEN 'No' ELSE 'Yes' END ;;
    label: "Is Valid Contract Number"
    group_label: "Additional Information"

  }

  dimension: has_contract_customer_name {
    type: string
    sql: CASE WHEN ${TABLE}.Contract_Customer_Name IS NOT NULL THEN 'Yes' ELSE 'No' END ;;
    label: "Has Contract Customer Name"
    group_label: "Additional Information"
  }


  dimension: support_email_cc {
    type: string
    sql: ${TABLE}.Support_Email_CC ;;
    label: "Support Email CC"
    group_label: "Additional Information"
  }

  dimension: support_email_to {
    type: string
    sql: ${TABLE}.Support_Email_TO ;;
    label: "Support Email TO"
    group_label: "Additional Information"
  }

  dimension: claim_amount {
    type: number
    sql: ${TABLE}.Claim_Amount ;;
    label: "Claim Amount"
    group_label: "Additional Information"
  }


  dimension: origin {
    type: string
    sql: ${TABLE}.Origin ;;
    label: : "Channel"
    group_label: "Case Information"
    drill_fields: [drillfields*]
  }

  dimension: is_online_channel {
    type: string
    sql: (CASE WHEN ${TABLE}.Origin ="Chat" or ${TABLE}.Origin ="Phone"  THEN "Yes" ELSE "No" END) ;;
    label: : "Is Online Channel"
    group_label: "Case Information"
  }


  dimension: type {
    type: string
    sql: ${TABLE}.Type ;;
    label: : "Type"
    group_label: "Case Information"
  }


  dimension: status {
    type: string
    sql: ${TABLE}.Status ;;
    label: "Status"
    group_label: "Case Information"
    drill_fields: [drillfields*]
  }

  dimension: priority {
    type: string
    sql: ${TABLE}.Priority ;;
    label: : "Priority"
  }


  dimension: country {
    type: string
    label: "Individual Country"
    group_label: "Case Information"
    sql: case when ${country2}='HK' then 'HK & SCN'
      when ${country2}='CN' then 'NCCN' else ${country2} end ;;
  }

  dimension: country2 {
    type: string
    group_label: "Case Information"
    sql: ${TABLE}.Country ;;
  }

  dimension: office {
    type: string
    sql: ${TABLE}.Office ;;
    label: : "Service Office"
    group_label: "Case Information"
  }

  dimension: case_resolved {
    type: string
    sql: ${TABLE}.Case_Resolved ;;
    label: : "Is Case Resolved"
    group_label: "Resolution Information"
  }

  dimension: transfer_reason {
    type: string
    sql: ${TABLE}.Transfer_Reason ;;
    label: : "Transfer Reason"
    group_label: "Resolution Information"
  }

  dimension: transfer_ratio {
    type: string
    sql: case
          when ${TABLE}.Transfer_Reason is null and ${createddate_filter_year}<2023 then 'No'
          when ${is_transfer}='true' and ${createddate_filter_year}>2022 then 'Yes'
          when ${is_transfer}='false' and ${createddate_filter_year}>2022 then 'No'
       else 'Yes' end ;;
    label: : "Transfer Ratio"
    group_label: "Resolution Information"
  }

  dimension: transfer_reason_others {
    type: string
    sql: ${TABLE}.Transfer_Reason_Others ;;
    label: : "Transfer Reason Others"
    group_label: "Resolution Information"
  }

  dimension: resolution_reason {
    type: string
    sql: CASE WHEN ${TABLE}.Resolution_Reason IS NULL THEN 'None' ELSE ${TABLE}.Resolution_Reason END ;;
    label: : "Resolution Reason "
    group_label: "Resolution Information"
    drill_fields: [drillfields*]
  }

  dimension: sub_resolution_reason {
    type: string
    sql: ${TABLE}.Sub_Resolution_Reason ;;
    label: : "Sub Resolution Reason"
    group_label: "Resolution Information"
    drill_fields: [drillfields*]
  }

  dimension: other_resolution_reason {
    type: string
    sql: ${TABLE}.Other_Resolution_Reason ;;
    label: : "Other Resolution Reason "
    group_label: "Resolution Information"
  }

  dimension: survey_comment {
    type: string
    sql: ${TABLE}.Survey_Comment ;;
    label: : "Survey Comment"
    group_label: "Customer Feedback"
  }


  dimension: case_rating {
    type: string
    sql: CASE WHEN ${TABLE}.Case_Rating IS NULL THEN 'No Rating' ELSE ${TABLE}.Case_Rating END ;;
    label: : "Case Rating"
    group_label: "Customer Feedback"
  }


  dimension: is_need_get_transcript {
    type: string
    sql: ${TABLE}.Is_Need_Get_Transcript ;;
    label: : "Is Need Get Transcript"
    group_label: "Customer Feedback"
  }

  dimension: first_time_use_chat {
    type: string
    sql: ${TABLE}.First_Time_Use_Chat ;;
    label: : "First_Time_Use_Chat"
    group_label: "Customer Feedback"
  }

  dimension: reason {
    type: string
    sql: ${TABLE}.Reason ;;
    label: "Category (L1)"
    group_label: "Intent"
    drill_fields: [drillfields*]
  }

  dimension: case_sub_reason {
    type: string
    sql: ${TABLE}.Case_Sub_Reason ;;
    label: "Case Sub Reason"
    group_label: "Case Details"
  }

  dimension: total_escalation {
    type: number
    sql: CAST(${TABLE}.Total_Escalation AS NUMERIC) ;;
    label:"Total Escalation"
    view_label:"Current Escalation Details"
  }

  dimension: escalated_by {
    type: string
    sql: ${TABLE}.Escalated_By ;;
    label:"Escalated By"
    group_label:"Current Escalation Details"
    hidden: yes
  }

  dimension: escalated_to {
    type: string
    sql: ${TABLE}.Escalated_To ;;
    label:"Escalated To"
    group_label:"Current Escalation Details"
    hidden: yes
  }


  dimension_group: escalation_open_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Escalation_Open_Date;;
    label:"Escalated Open Date"
    group_label:"Current Escalation Details"
    hidden: yes
  }

  dimension: escalation_reason {
    type: string
    sql: ${TABLE}.Escalation_Reason ;;
    label:"Escalated Reason"
    group_label:"Current Escalation Details"
    hidden: yes
  }


  dimension: escalation_type {
    type: string
    sql: ${TABLE}.Escalation_Type ;;
    label:"Escalated Type"
    group_label:"Current Escalation Details"
    hidden: yes
  }

  dimension: case_age {
    type: number
    sql: ${TABLE}.Case_Age ;;
    label:"Case Age"
    group_label: "System Information"
  }
  dimension: case_age_group {

    type: number
    sql: CASE
      WHEN ${TABLE}.Case_Age <=2 THEN "1-2 Days"
      WHEN ${TABLE}.Case_Age >2 and ${TABLE}.Case_Age <=5 THEN "3-5 Days"
      WHEN ${TABLE}.Case_Age >5 and ${TABLE}.Case_Age <=10 THEN "6-10 Days"
      WHEN ${TABLE}.Case_Age >10 and ${TABLE}.Case_Age <=20 THEN "11-20 Days"
      ELSE "More than 20 Days"
      END;;
    label:"Case Age Group"
    group_label: "System Information"
  }

  dimension: is_nurtured {
    type: string
    sql: ${TABLE}.Is_Nurtured ;;
    label: "Is Nurtured"
    group_label: "System Information"
  }

  dimension: FRT_sql_distinct_key {
    type: string
    label: "SQL Distinct Key"
    sql: case when {% parameter responsetime_Param %}= "Case Level" then
           ${of_case.oneforce_id}
          when {% parameter responsetime_Param %}= "Chat Transcript"  then
           ${of_case.oneforce_id}||${of_case.origin}||${of_chat_transcript.oneforce_id}
          end;;
  }

  dimension: case_owner {
    type: string
    sql: ${TABLE}.Case_Owner ;;
    label: "Case Owner"
    group_label:"System Information"
    hidden: yes
  }

  dimension: case_owner_role {
    type: string
    sql: ${TABLE}.Case_Owner_Role ;;
    label: "Case Owner Role"
    group_label: "System Information"
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
    label: "Created By Id"
    group_label: "System Information"
    hidden: yes
  }


  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
    label: "Last Modified Date"
    view_label: "System Information"
  }

  dimension_group: closeddate {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      fiscal_quarter,
      quarter,
      year
    ]
    sql: ${TABLE}.ClosedDate ;;
    group_label:"Close Date"
    label: "Close Date"
  }

  dimension_group: first_response_time {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.First_Response_Time ;;
    group_label: "First Response Time"
    label: "First Response Time"
    hidden: yes
  }

  dimension_group: first_response_date_time {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.First_Response_Date_Time ;;
    group_label: "First Response Date Time"
    label: "First Response Date Time"
  }

  dimension_group: createddate {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      hour_of_day,
      date,
      week,
      month,
      fiscal_quarter,
      quarter,
      year
    ]
    group_label: "Open Date"
    label: "Open Date"
    sql: ${TABLE}.CreatedDate ;;
    drill_fields: [drillfields*]
  }


  dimension: createddate_Weekfilter {
    type: date
    label: "Open Date Week"
    sql: ${createddate_week} ;;
  }

  dimension: isescalated{
    type: string
    sql: ${TABLE}.IsEscalated ;;
    label: "Is Escalated"
  }



  dimension: category_l1 {
    type: string
    sql: ${TABLE}.Category_L1 ;;
    label:"category_l1"
    group_label: "Intents"
    hidden: yes
  }

  dimension: sub_category_l2 {
    type: string
    sql: ${TABLE}.Sub_Category_L2 ;;
    label: "Category (L2)"
    group_label: "Intents"
    drill_fields: [drillfields*]
  }


  dimension: subordinate_category_l3 {
    type: string
    sql: ${TABLE}.Subordinate_Category_L3 ;;
    label:"Topic (L3)"
    group_label: "Intents"
    drill_fields: [drillfields*]
  }



  dimension: ownerid {
    type: string
    sql: ${TABLE}.OwnerId ;;
    label:"Owner ID"
    hidden: yes

  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_Id ;;
    label:"Case ID"
    hidden: yes
    primary_key: yes
  }

  dimension: escalation_history {
    type: string
    sql: ${TABLE}.Escalation_History ;;
    label: "EH Name"
    group_label: "Current Escalation Details"
    hidden: yes
  }

  set: detail {
    fields: [
      casenumber,
      service_office_hierarchy.country,
      case_owner.officetype,
      case_owner_name,
      ct_owner_name1,
      of_user.name,
      ecomm_id,
      of_contact.name,
      contactemail,
      of_customer.name,
      status,
      origin,
      type,
      reason,
      sub_category_l2,
      subordinate_category_l3,
      createddate_date,
      resolved_date_date,
      closeddate_date,
      case_age,
      first_contact_resolution,
      Case_Net_Promoter_Score,
      Case_First_Response_Time_Minutes,
      of_chat_transcript.Chat_First_Response_Time_Mins_avg,
      case_handling_time,
      of_chat_transcript.chat_handle_time1,
    ]
  }

  set: detail_csat {
    fields: [
      casenumber,
      service_office_hierarchy.country,
      case_owner.officetype,
      case_owner_name,
      ct_owner_name1,
      of_user.name,
      ecomm_id,
      of_contact.name,
      contactemail,
      of_customer.name,
      status,
      origin,
      type,
      reason,
      sub_category_l2,
      subordinate_category_l3,
      createddate_date,
      resolved_date_date,
      closeddate_date,
      case_age,
      first_contact_resolution,
      case_rating,
      of_chat_transcript.chat_case_rating,
      Case_Net_Promoter_Score,
      of_chat_transcript.chat_case_net_promoter_score,
      Case_First_Response_Time_Minutes,
      of_chat_transcript.Chat_First_Response_Time_Mins_avg,
      case_handling_time,
      of_chat_transcript.chat_handle_time1,
    ]
  }
  set: detail_fcr {
    fields: [
      casenumber,
      service_office_hierarchy.country,
      case_owner.officetype,
      case_owner_name,
      ct_owner_name1,
      of_user.name,
      ecomm_id,
      of_contact.name,
      contactemail,
      of_customer.name,
      status,
      origin,
      type,
      reason,
      sub_category_l2,
      subordinate_category_l3,
      createddate_date,
      resolved_date_date,
      closeddate_date,
      case_age,
      first_contact_resolution,
      total_transfer,
      total_escalation,
      Case_Net_Promoter_Score,
      Case_First_Response_Time_Minutes,
      of_chat_transcript.Chat_First_Response_Time_Mins_avg,
      case_handling_time,
      of_chat_transcript.chat_handle_time1,
    ]
  }

  set: responsetime_details {
    fields: [
      casenumber,
      service_office_hierarchy.country,
      case_owner.officetype,
      case_owner_name,
      of_user.name,
      ecomm_id,
      of_contact.name,
      contactemail,
      of_customer.name,
      status,
      origin,
      type,
      reason,
      sub_category_l2,
      subordinate_category_l3,
      createddate_date,
      resolved_date_date,
      closeddate_date,
      case_age,
      first_contact_resolution,
      Case_Net_Promoter_Score,
      Case_First_Response_Time_Minutes,
      of_chat_transcript.Chat_First_Response_Time_Mins_avg,
      case_handling_time,
      of_chat_transcript.chat_handle_time1,
    ]
  }

  set: details1 {
    fields: [
      casenumber,
      service_office_hierarchy.country,
      case_owner.officetype,
      case_owner_name,
      ct_owner_name1,
      of_user.name,
      ecomm_id,
      of_contact.name,
      contactemail,
      of_customer.name,
      status,
      origin,
      type,
      reason,
      sub_category_l2,
      subordinate_category_l3,
      createddate_date,
      resolved_date_date,
      closeddate_date,
      case_age,
      total_transfer,
      first_contact_resolution,
      Avg_First_Response_Time,
      avg_handling_time,
      of_chat_transcript.avg_chat_handle_time,
      Case_Net_Promoter_Score,
    ]
  }

  set: escdetail {
    fields: [
      casenumber,
      number_of_escalated_cases,
      service_office_hierarchy.country,
      case_owner.officetype,
      case_owner_name,
      of_user.name,
      ecomm_id,
      of_contact.name,
      contactemail,
      of_customer.name,
      status,
      origin,
      type,
      reason,
      sub_category_l2,
      subordinate_category_l3,
      createddate_date,
      resolved_date_date,
      closeddate_date,
      case_age,
      first_contact_resolution,
      Avg_First_Response_Time,
      avg_handling_time,
      of_chat_transcript.avg_chat_handle_time,
      Case_Net_Promoter_Score,
    ]
  }

  set: drillfields {
    fields: [
      Regional_Head_Office,
      case_country,
      case_office_code,
      origin,
      Initial_Queue_Name,
      sub_category_l2,
      subordinate_category_l3,
      of_customer_group.cust_grp_and_name,
      of_customer.customer_cd_and_name,
      case_owner_name,
      of_user.name,
      priority,
      case_age_group,
      status,
      nps_group,
      createddate_month,
      ecomm_id,
      of_contact.name,
      contactemail
    ]
  }

  set: transferdetail {
    fields: [
      casenumber,
      service_office_hierarchy.country,
      case_owner.officetype,
      case_owner_name,
      case_transfer_history.transfer_by_name,
      case_transfer_history.transfer_from_name,
      case_transfer_history.transfer_to_name,
      case_transfer_history.transfer_type,
      case_transfer_history.last_transfer_date_time,
      case_transfer_history.transfer_duration_in_minutes,
      case_transfer_history.transfer_reason,
      total_transfer,
      of_customer.name,
      of_contact.name,
      contactemail,
      status,
      origin,
      type,
      reason,
      sub_category_l2,
      subordinate_category_l3,
    ]
  }

##############Added Dimensions


#dimension: additional_cargo_details {
#type: string
#sql: ${TABLE}.Additional_Cargo_Details ;;
#hidden: yes
#}

#dimension: additional_contact_emails {
#type: string
#sql: ${TABLE}.Additional_Contact_Emails ;;
#hidden: yes
#}

  dimension: amazon_connect_queue {
    type: string
    sql: ${TABLE}.Amazon_Connect_Queue ;;
    hidden: yes
  }

  dimension: applicant_email {
    type: string
    sql: ${TABLE}.Applicant_Email ;;
    hidden: yes
  }

  dimension: applicant_name {
    type: string
    sql: ${TABLE}.Applicant_Name ;;
    hidden: yes
  }

  dimension: applicant_party {
    type: string
    sql: ${TABLE}.Applicant_Party ;;
    hidden: yes
  }

  dimension: applicant_phone_number {
    type: string
    sql: ${TABLE}.Applicant_Phone_Number ;;
    hidden: yes
  }

#dimension: are_the_rates_filed_for_the_new_destinat {
#type: string
#sql: ${TABLE}.Are_the_rates_filed_for_the_new_destinat ;;
#hidden: yes
#}

  dimension: article_recommendation_reason {
    type: string
    sql: ${TABLE}.Article_Recommendation_Reason ;;
    hidden: yes
  }

#dimension: article_recommendation_type {
#type: string
#sql: ${TABLE}.Article_Recommendation_Type ;;
#hidden: yes
#}

  dimension: asset_id {
    type: string
    sql: ${TABLE}.AssetId ;;
    hidden: yes
  }

  dimension_group: assigned {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.AssignedDate ;;
    hidden: yes
  }

#dimension: auto_titles {
#type: string
#sql: ${TABLE}.Auto_Titles ;;
#hidden: yes
#}

  dimension: bill_of_lading_number {
    type: string
    sql: ${TABLE}.Bill_of_Lading_Number ;;
    hidden: yes
  }

  dimension: bkg_office {
    type: string
    sql: ${TABLE}.BKG_Office ;;
    hidden: yes
  }

#dimension: boilerplate_review {
#type: string
#sql: ${TABLE}.Boilerplate_Review ;;
#hidden: yes
#}

  dimension: business_hours_id {
    type: string
    sql: ${TABLE}.BusinessHoursId ;;
    hidden: yes
    label: "Business Hours"
    group_label: "System Information"
  }

  dimension: bypass_validation_rules {
    type: string
    sql: ${TABLE}.Bypass_Validation_Rules ;;
    hidden: yes
  }

  dimension_group: calculated_awaiting_cust_remind_datetime {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Calculated_Awaiting_Cust_Remind_Datetime ;;
    label: "Calculated Awaiting Cust Remind Datetime"
    view_label: "System Information"
  }

  dimension_group: calculated_close_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Calculated_Close_Date_Time ;;
    label: "Calculated Close Date/Time"
    view_label: "System Information"
  }

  dimension_group: calculated_date_time_for_one_team {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Calculated_Date_Time_for_ONE_Team ;;
    label: "Calculated Date/Time for ONE Team"
    view_label: "System Information"
  }

  dimension: cargo_nature {
    type: string
    sql: ${TABLE}.Cargo_Nature ;;
    hidden: yes
  }

#dimension_group: close_out {
#type: time
#timeframes: [
#raw,
#date,
#week,
#month,
#quarter,
#year
#]
#convert_tz: no
#datatype: date
#sql: ${TABLE}.Close_Out_Date ;;
#hidden: yes
#}


  dimension: comments {
    type: string
    sql: ${TABLE}.Comments ;;
    hidden: yes
  }

  dimension: commodity {
    type: string
    sql: ${TABLE}.Commodity ;;
    hidden: yes
  }

  dimension: company_name {
    type: string
    sql: ${TABLE}.Company_Name ;;
    hidden: yes
  }


  dimension: contact_fax {
    type: string
    sql: ${TABLE}.ContactFax ;;
    hidden: yes
  }

  dimension: contact_id {
    type: string
    sql: ${TABLE}.Contact_Id ;;
    hidden: yes
  }
  dimension: contact_mobile {
    type: string
    sql: ${TABLE}.ContactMobile ;;
    hidden: yes
  }

  dimension: contact_phone {
    type: string
    sql: ${TABLE}.ContactPhone ;;
    hidden: yes
  }

#dimension: container {
#type: string
#sql: ${TABLE}.Container ;;
#hidden: yes
#}

#dimension: container_type {
#type: string
#sql: ${TABLE}.Container_Type ;;
#hidden: yes
#}

  dimension: contract_account_name {
    type: string
    sql: ${TABLE}.Contract_Account_Name ;;
    hidden: yes
  }


#dimension: current_destination {
#type: string
#sql: ${TABLE}.Current_Destination ;;
#hidden: yes
#}

  dimension: customer_code {
    type: string
    sql: ${TABLE}.Customer_Code ;;
    hidden: yes
  }

  dimension: customer_info {
    type: string
    sql: ${TABLE}.Customer_Info ;;
    hidden: yes
  }

#dimension: customs_exam {
#type: string
#sql: ${TABLE}.CUSTOMS_Exam ;;
#hidden: yes
#}

  dimension_group: resolved_date  {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.DateTimeResolved ;;
    label: "Resolved Date"
  }

#dimension_group: date_time_resolved {
#type: time
#datatype: datetime
#timeframes: [
#raw,
#time,
#date,
#week,
#month,
#quarter,
#year
#]
#sql: ${TABLE}.DateTimeResolved ;;
#  group_label:"Resolved Date"
#  label: "Resolved Date"
#}


  dimension_group: date_time_waiting_on_customer_response {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Date_Time_Waiting_on_Customer_Response ;;
    hidden: yes
  }

#dimension: direct_care_account {
#type: string
#sql: ${TABLE}.Direct_Care_Account ;;
#hidden: yes
#}

#dimension: e_com_account {
#type: string
#sql: ${TABLE}.eCom_Account ;;
#hidden: yes
#}

#dimension: e_comm_user_id {
  # label: "eCom ID"
  #type: string
  #sql: ${TABLE}.eComm_User_ID ;;
#}

#  dimension: e_commerce_user_id{
#    label: "eComm ID"
#    type: string
#    sql: ${TABLE}.eCommerce_UserID ;;
#    drill_fields: [drillfields*]
#  }

#dimension: ebo {
#type: number
#sql: ${TABLE}.EBO ;;
#hidden: yes
#}

#dimension: edt {
#type: string
#sql: ${TABLE}.EDT ;;
#hidden: yes
#}

  dimension_group: edw_upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EDW_UPD_DT ;;
    hidden: yes
  }

#dimension: email_assigned {
#type: string
#sql: ${TABLE}.Email_Assigned ;;
#hidden: yes
#}

#dimension: end_status_1 {
#type: string
#sql: ${TABLE}.End_Status_1 ;;
#hidden: yes
#}

#dimension_group: end_status_time_1 {
#type: time
#timeframes: [
#raw,
#time,
#date,
#week,
#month,
#quarter,
#year
#]
#sql: ${TABLE}.End_Status_Time_1 ;;
#hidden: yes
#}

  dimension: entitlement_id {
    type: string
    sql: ${TABLE}.EntitlementId ;;
    hidden: yes
  }

  dimension: escalation_history_reason {
    type: string
    sql: ${TABLE}.Escalation_History_Reason ;;
    label: "Escalation Reason"
    group_label: "Current Escalation Details"
    hidden: yes
  }

  dimension_group: escalation_open {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Escalation_Open_Date ;;
    hidden: yes
  }

#dimension: eta {
#type: string
#sql: ${TABLE}.ETA ;;
#hidden: yes
#}

#dimension: etd {
#type: string
#sql: ${TABLE}.ETD ;;
#hidden: yes
#}

  dimension: first_end_status {
    type: string
    sql: ${TABLE}.First_End_Status ;;
    hidden: yes
  }

  dimension_group: first_end_status {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.First_End_Status_Time ;;
    hidden: yes
  }

  dimension: first_pending_reason {
    type: string
    sql: ${TABLE}.First_Pending_Reason ;;
    hidden: yes
  }

  dimension: first_processor {
    type: string
    sql: ${TABLE}.First_Processor ;;
    hidden: yes
  }

  dimension_group: first_reply {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.First_Reply_Time ;;
    hidden: yes
  }


  dimension: first_response_user {
    type: string
    sql: ${TABLE}.First_Response_User ;;
    hidden: yes
  }

  dimension_group: first_restart {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.First_Restart_Time ;;
    hidden: yes
  }

  dimension: forwarder_name {
    type: string
    sql: ${TABLE}.Forwarder_Name ;;
    hidden: yes
  }

  dimension: fourth_end_status {
    type: string
    sql: ${TABLE}.Fourth_End_Status ;;
    hidden: yes
  }

  dimension_group: fourth_end_status {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Fourth_End_Status_Time ;;
    hidden: yes
  }

  dimension: fourth_processor {
    type: string
    sql: ${TABLE}.Fourth_Processor ;;
    hidden: yes
  }

  dimension: internal_correspondence {
    type: string
    sql: ${TABLE}.Internal_Correspondence ;;
    hidden: yes
  }

  dimension: is_chat_survey_submitted {
    type: string
    sql: ${TABLE}.Is_Chat_Survey_Submitted ;;
    hidden: yes
  }

  dimension: is_closed {
    type: string
    sql: ${TABLE}.IsClosed ;;
    hidden: yes
  }

  dimension: is_closed_on_create {
    type: string
    sql: ${TABLE}.IsClosedOnCreate ;;
    hidden: yes
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
    hidden: yes
  }

  dimension: is_dummy {
    type: string
    sql: ${TABLE}.IsDummy ;;
    hidden: yes
  }


  dimension: is_stopped {
    type: string
    sql: ${TABLE}.IsStopped ;;
    hidden: yes
  }

#dimension: lane {
#type: string
#sql: ${TABLE}.Lane ;;
#hidden: yes
#}

  dimension: language {
    type: string
    sql: ${TABLE}.Language ;;
    hidden: yes
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
    hidden: yes
    label: "Last Modified By"
    group_label: "System Information"
  }

#dimension: late_gates {
#type: number
#sql: ${TABLE}.Late_Gates ;;
#hidden: yes
#}

  dimension: milestone_status {
    type: string
    sql: ${TABLE}.MilestoneStatus ;;
    hidden: yes
  }

#dimension: missing_s_i {
#type: string
#sql: ${TABLE}.Missing_S_I ;;
#hidden: yes
#}

#dimension: new_destination {
#type: string
#sql: ${TABLE}.New_Destination ;;
#hidden: yes
#}

  dimension: nfvoice__voicemail_callback_phone {
    type: string
    sql: ${TABLE}.nfvoice__Voicemail_Callback_Phone ;;
    hidden: yes
  }

  dimension: nfvoice__voicemail_link {
    type: string
    sql: ${TABLE}.nfvoice__Voicemail_Link ;;
    hidden: yes
  }

  dimension: nfvoice_voicemail_callback_phone {
    type: string
    sql: ${TABLE}.nfvoice_Voicemail_Callback_Phone ;;
    hidden: yes
  }

  dimension: nfvoice_voicemail_contact_attributes {
    type: string
    sql: ${TABLE}.nfvoice_Voicemail_Contact_Attributes ;;
    hidden: yes
  }

#dimension: onboarding {
#type: string
#sql: ${TABLE}.Onboarding ;;
#hidden: yes
#}

#dimension: opus_request_number {
#type: string
#sql: ${TABLE}.Opus_Request_Number ;;
#hidden: yes
#}

  dimension: origin_indicator {
    type: string
    sql: ${TABLE}.Origin_Indicator ;;
    hidden: yes
    label: "origin_indicator"
    group_label: "Header"
  }

#dimension: original_discharge_port_pod {
#type: string
#sql: ${TABLE}.Original_Discharge_Port_POD ;;
#hidden: yes
#}

  dimension: other_reason {
    type: string
    sql: ${TABLE}.Other_Reason ;;
    hidden: yes
  }

#dimension: out_of_scope {
#type: string
#sql: ${TABLE}.Out_of_Scope ;;
#hidden: yes
#}

#dimension: pending_reason_1 {
#type: string
#sql: ${TABLE}.Pending_Reason_1 ;;
#hidden: yes
#}

#dimension: pod_change_request {
#type: string
#sql: ${TABLE}.POD_CHANGE_REQUEST ;;
#hidden: yes
#}

  dimension: port {
    type: string
    sql: ${TABLE}.PORT ;;
    hidden: yes
  }

  dimension: post_reconciliation_completed_with_biz {
    type: string
    sql: ${TABLE}.Post_Reconciliation_Completed_with_biz ;;
    hidden: yes
  }


  dimension: priority_formula {
    type: string
    sql: ${TABLE}.Priority_Formula ;;
    hidden: yes
    label: "Priority Indicator"
    group_label: "Header"
  }

  dimension: privacy_policy_consent {
    type: string
    sql: ${TABLE}.Privacy_Policy_Consent ;;
    hidden: yes
  }

#dimension: processor_1 {
#type: string
#sql: ${TABLE}.Processor_1 ;;
#hidden: yes
#}

  dimension: product_id {
    type: string
    sql: ${TABLE}.ProductId ;;
    hidden: yes
  }

#dimension: reason_s_for_cod_diversion {
#type: string
#sql: ${TABLE}.Reason_s_for_COD_Diversion ;;
#hidden: yes
#}

  dimension: record_type_id {
    type: string
    sql: ${TABLE}.RecordTypeId ;;
    hidden: yes
    label: "Case Record Type"
    group_label: "System Information"
  }

  dimension: reference_number {
    type: string
    sql: ${TABLE}.Reference_Number ;;
    hidden: yes
  }

  dimension: reference_number_type {
    type: string
    sql: ${TABLE}.Reference_Number_Type ;;
    hidden: yes
  }


#dimension: reporting {
#type: string
#sql: ${TABLE}.Reporting ;;
#hidden: yes
#}

#dimension: request_type {
#type: string
#sql: ${TABLE}.Request_Type ;;
#hidden: yes
#}

  dimension: requestor_type {
    type: string
    sql: ${TABLE}.Requestor_Type ;;
    hidden: yes
  }

  dimension: response_flag {
    type: string
    sql: ${TABLE}.Response_Flag ;;
    hidden: yes
  }

  dimension: response_received {
    type: string
    sql: ${TABLE}.Response_Received ;;
    hidden: yes
  }

  dimension: revised_destination {
    type: string
    sql: ${TABLE}.Revised_Destination ;;
    hidden: yes
  }

  dimension: second_end_status {
    type: string
    sql: ${TABLE}.Second_End_Status ;;
    hidden: yes
  }

#dimension_group: second_end_status {
#type: time
#timeframes: [
#raw,
#time,
#date,
#week,
#month,
#quarter,
#year
#]
#sql: ${TABLE}.Second_End_Status_Time ;;
#hidden: yes
#}

  dimension: second_pending_reason {
    type: string
    sql: ${TABLE}.Second_Pending_Reason ;;
    hidden: yes
  }

  dimension: second_processor {
    type: string
    sql: ${TABLE}.Second_Processor ;;
    hidden: yes
  }

  dimension_group: second_reply {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Second_Reply_Time ;;
    hidden: yes
  }

  dimension_group: second_restart {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Second_Restart_Time ;;
    hidden: yes
  }

  dimension: service_contract_id {
    type: string
    sql: ${TABLE}.ServiceContractId ;;
    hidden: yes
  }

  dimension: shipment_number {
    type: string
    sql: ${TABLE}.Shipment_Number ;;
    hidden: yes
  }

  dimension: shipper_name {
    type: string
    sql: ${TABLE}.Shipper_Name ;;
    hidden: yes
  }

  dimension_group: sla_exit {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SlaExitDate ;;
    hidden: yes
  }

  dimension_group: sla_start {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SlaStartDate ;;
    hidden: yes
  }

  dimension: source_id {
    type: string
    sql: ${TABLE}.SourceId ;;
    hidden: yes
  }

  dimension_group: stop_start {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.StopStartDate ;;
    hidden: yes
  }

  dimension: subordinate_category_l4 {
    type: string
    sql: ${TABLE}.Subordinate_Category_L4 ;;
    label:"Subtopic (L4)"
    group_label: "Intents"
  }

  dimension: supplied_company {
    type: string
    sql: ${TABLE}.SuppliedCompany ;;
    hidden: yes
  }

  dimension: supplied_email {
    type: string
    sql: ${TABLE}.SuppliedEmail ;;
    label: "Web Email"
    group_label: "System Information"
  }

  dimension: supplied_first_name {
    type: string
    sql: ${TABLE}.SuppliedFirstName ;;
    hidden: yes
  }

  dimension: supplied_last_name {
    type: string
    sql: ${TABLE}.SuppliedLastName ;;
    hidden: yes
  }

  dimension: supplied_name {
    type: string
    sql: ${TABLE}.SuppliedName ;;
    hidden: yes
  }

  dimension: supplied_phone {
    type: string
    sql: ${TABLE}.SuppliedPhone ;;
    hidden: yes
  }

  dimension: third_end_status {
    type: string
    sql: ${TABLE}.Third_End_Status ;;
    hidden: yes
  }

  dimension_group: third_end_status {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Third_End_Status_Time ;;
    hidden: yes
  }

  dimension: third_pending_reason {
    type: string
    sql: ${TABLE}.Third_Pending_Reason ;;
    hidden: yes
  }

  dimension: third_processor {
    type: string
    sql: ${TABLE}.Third_Processor ;;
    hidden: yes
  }

  dimension_group: third_reply {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Third_Reply_Time ;;
    hidden: yes
  }

  dimension_group: third_restart {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Third_Restart_Time ;;
    hidden: yes
  }

  dimension: training {
    type: string
    sql: ${TABLE}.Training ;;
    hidden: yes
  }

#dimension: type_of_diversion {
#type: string
#sql: ${TABLE}.Type_of_Diversion ;;
#hidden: yes
#}

  dimension: unique_case_key {
    type: string
    sql: ${TABLE}.UniqueCaseKey ;;
    hidden: yes
  }

#dimension: vessel_cleaned {
#type: string
#sql: ${TABLE}.Vessel_Cleaned ;;
#hidden: yes
#}

  dimension: voice_call {
    type: string
    sql: ${TABLE}.Voice_Call ;;
    hidden: yes
  }

  dimension: vvd {
    type: string
    sql: ${TABLE}.VVD ;;
    hidden: yes
  }

  dimension: active_case {
    type: string
    sql: (CASE WHEN ${status} ='Resolved' or ${status} ='Closed' THEN 'No' ELSE 'Yes' END)   ;;

  }

  dimension : case_owner_name {
    type : string
    sql:  CASE WHEN ${of_queue.developer_name} is not Null then ${of_queue.developer_name} else ${case_owner.name} END;;
    label : "Case Owner Name"
    drill_fields: [drillfields*]
  }

  dimension : first_contact_resolution {
    type: string
    sql: CASE
          WHEN ${origin} = 'Chat' and ${TABLE}.is_fcr ='true' THEN 'Yes'
          WHEN ${origin} = 'Chat' and ${TABLE}.is_fcr ='false' THEN 'No'
          WHEN ${total_escalation} =0 and ${transfer_reason} is Null and ${active_case} = 'No' THEN 'Yes' ELSE 'No' END ;;
    label: "First Contact Resolution"
  }

  dimension: case_office_code {
    group_label: "Office Hierarchy"
    label: "Office Code"
    type: string
    sql: (CASE
      WHEN service_office_hierarchy.office_code is not Null THEN service_office_hierarchy.office_code
      ELSE  user_office_hierarchy.office_code
    END) ;;
    drill_fields: [drillfields*]
  }


  dimension: case_country {
    group_label: "Office Hierarchy"
    label: "Cluster Country"
    type: string
    #map_layer_name: countries
    sql: (case when ${case_country1}='AT' then 'AT & HU'
               when ${case_country1}='CZ' then 'CZ & SK'
               when ${case_country1}='SE' then 'SE & NO'
               when ${case_country1}='CN' then 'NCCN' else ${case_country1} end) ;;
    drill_fields: [drillfields*]
  }

  dimension: case_country1 {
    group_label: "Office Hierarchy"
    label: "Cluster"
    type: string
    #map_layer_name: countries
    sql: (CASE
      WHEN ${service_office_hierarchy.country} is not Null THEN ${service_office_hierarchy.country}
      WHEN ${queue_name_office_hierarchy.country} is not Null THEN ${queue_name_office_hierarchy.country}
      ELSE ${user_office_hierarchy.country}
    END) ;;
    drill_fields: [drillfields*]
  }

  dimension: Regional_Head_Office {
    group_label: "Office Hierarchy"
    label: "Regional_Head_Office"
    type: string
    # First Condition added to map Offshore Offices to Service Office
    sql: coalesce((CASE
               WHEN service_office_hierarchy.Regional_Head_Office is not Null THEN substr(service_office_hierarchy.Regional_Head_Office,-5)
               WHEN queue_name_office_hierarchy.Regional_Head_Office is not Null THEN  substr(queue_name_office_hierarchy.Regional_Head_Office,-5)
               WHEN user_office_hierarchy.Regional_Head_Office is not Null and substr(user_office_hierarchy.office_code,-2) = "OS" THEN substr(service_office_hierarchy.Regional_Head_Office,-5)
               WHEN user_office_hierarchy.Regional_Head_Office is not null THEN substr(user_office_hierarchy.Regional_Head_Office,-5)
    ELSE "Unclaimed"
    END),"Unclaimed") ;;
    drill_fields: [drillfields*]
  }

  dimension: Case_Geo {
    group_label: "Office Hierarchy"
    label: "Case Geography"
    type: string
    sql: CASE
          WHEN {% parameter Geo_Param %} = "RHQ" THEN ${Regional_Head_Office}
          WHEN {% parameter Geo_Param %} = "Cluster Country" THEN ${case_country}
          WHEN {% parameter Geo_Param %} = "Individual Country" THEN ${country}
          WHEN {% parameter Geo_Param %} = "Office" THEN ${office}
          WHEN {% parameter Geo_Param %} = "Channel" THEN ${origin}
          WHEN {% parameter Geo_Param %} = "Segment" THEN ${customer_segment_number}
          WHEN {% parameter Geo_Param %} = "Segment " THEN ${of_customer_group.key_acct_tp_cd}
          WHEN {% parameter Geo_Param %} = "Agent Role" THEN ${case_owner.profile_name_service}
          WHEN {% parameter Geo_Param %} = "Escalation Role" THEN ${of_escalation_history.role}
          WHEN {% parameter Geo_Param %} = "Office Type" THEN ${case_owner.officetype}
          WHEN {% parameter Geo_Param %} = "Service Type" THEN ${type}
          ELSE "Global" END;;
    drill_fields: [drillfields*]
  }

  dimension: case_RHQ {
    group_label: "Chat Office Hierarchy"
    label: "RHQ"
    type: string
    sql: ${Regional_Head_Office} ;;
    #sql: case
    #      when ${Regional_Head_Office}='SAOHQ' THEN 'SAOHQ'
    #      when ${Regional_Head_Office}='HKGHQ' THEN 'HKGHQ'
    #      when ${Regional_Head_Office}='LONHQ' THEN 'LONHQ'
    #      when ${Regional_Head_Office}='RICHQ' THEN 'RICHQ'
    #      when ${Regional_Head_Office}='SINHQ' THEN 'SINHQ'
    #        else "Unclaimed" end;;
    #hidden: yes
  }

  measure: count {
    type: count
    drill_fields: [detail*]
    label: "Count"
  }

  measure: count_transfer {
    type: count
    drill_fields: [transferdetail*]
    label: "Count Transfer"
  }

  measure: count_for_transfer {
    type: count
    drill_fields: [transferdetail*]
    label: "Count For Tranfer"
    html: Total Transfer: {{total_transfer._rendered_value}} <br> {{rendered_value}};;
  }

  measure: case_distinct_count1 {
    type: count_distinct
    sql: ${casenumber}  ;;
    drill_fields: [details1*]
    label: "Distinct Count"
  }

  measure: case_distinct_count_fcr {
    type: count_distinct
    sql: ${casenumber}  ;;
    drill_fields: [detail_fcr*]
    label: "Distinct Count FCR-related"
  }

  measure: case_distinct_count {
    type: count_distinct
    sql: ${casenumber}  ;;
    drill_fields: [detail*]
    label: "Distinct Count"
  }

  measure: case_distinct_count_csat {
    type: count_distinct
    sql: ${casenumber}  ;;
    drill_fields: [detail_csat*]
    label: "Distinct Count CSAT-related"
  }

  measure: case_distinct_count_nps {
    type: count_distinct
    sql: ${casenumber}  ;;
    drill_fields: [detail_csat*]
    label: "Distinct Count NPS-related"
  }

  measure: case_distinct_count_drill {
    type: count_distinct
    sql: ${casenumber}  ;;
    drill_fields: [detail*]
    label: "Distinct Count with drill"

    link: {
      label: "By chat owner name"
      url: "{{ CDC_by_chat_owner_name._link }}"
    }

    link: {
      label: "By RHQ"
      url: "{{ CDC_by_RHQ._link }}"
    }
    link: {
      label: "By Country"
      url: "{{ CDC_by_Country._link }}"
    }
    link: {
      label: "By Status"
      url: "{{ CDC_by_Status._link }}"
    }
    link: {
      label: "By Office"
      url: "{{ CDC_by_Office._link }}"
    }
    link: {
      label: "By Channel"
      url: "{{ CDC_by_Channel._link }}"
    }
    link: {
      label: "By Customer"
      url: "{{ CDC_by_Customer._link }}"
    }
    link: {
      label: "By case_age_group"
      url: "{{ CDC_by_case_age_group._link }}"
    }
    link: {
      label: "By case_owner_name"
      url: "{{ CDC_by_case_owner_name._link }}"
    }
    link: {
      label: "By Priority"
      url: "{{ CDC_by_Priority._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ CDC_by_Customer_Group._link }}"
    }
    link: {
      label: "By L2 Intent"
      url: "{{ CDC_by_L2_Intent._link }}"
    }
    link: {
      label: "By L3 Intent"
      url: "{{ CDC_by_L3_Intent._link }}"
    }
    link: {
      label: "By Open Date Month"
      url: "{{ CDC_by_Open_Date_Month._link }}"
    }
    link: {
      label: "By Initial Queue Name"
      url: "{{ CDC_by_Initial_Queue_Name._link }}"
    }

    link: {
      label: "By Contact Name"
      url: "{{ CDC_by_name._link }}"
    }

    link: {
      label: "By Contact Email"
      url: "{{ CDC_by_contactemail._link }}"
    }

    link: {
      label: "By eComm ID"
      url: "{{ CDC_by_ecomm_id._link }}"
    }
  }

  measure: CDC_by_chat_owner_name  {
    type: count
    drill_fields: [of_user.name, case_distinct_count_drill]
    hidden: yes
  }

  measure: CDC_by_RHQ {
    type: count
    drill_fields: [ Regional_Head_Office,case_distinct_count]
    hidden: yes
  }
  measure: CDC_by_case_age_group {
    type: count
    drill_fields: [ case_age_group,case_distinct_count]
    hidden: yes
  }
  measure: CDC_by_Status {
    type: count
    drill_fields: [ status,case_distinct_count]
    hidden: yes
  }
  measure: CDC_by_case_owner_name {
    type: count
    drill_fields: [ case_owner_name,case_distinct_count]
    hidden: yes
  }
  measure: CDC_by_Priority {
    type: count
    drill_fields: [ priority ,case_distinct_count]
    hidden: yes
  }

  measure: CDC_by_Country {
    type: count
    drill_fields: [ case_country,case_distinct_count]
    hidden: yes
  }

  measure: CDC_by_Office {
    type: count
    drill_fields: [ case_office_code,case_distinct_count]
    hidden: yes
  }

  measure: CDC_by_Channel {
    type: count
    drill_fields: [origin ,case_distinct_count]
    hidden: yes
  }
  measure: CDC_by_Customer_Group{
    type: count
    drill_fields: [ of_customer_group.cust_grp_and_name,case_distinct_count]
    hidden: yes
  }
  measure: CDC_by_Customer {
    type: count
    drill_fields: [ of_customer.customer_cd_and_name,case_distinct_count]
    hidden: yes
  }
  measure: CDC_by_L2_Intent {
    type: count
    drill_fields: [sub_category_l2 ,case_distinct_count]
    hidden: yes
  }
  measure: CDC_by_L3_Intent {
    type: count
    drill_fields: [subordinate_category_l3 ,case_distinct_count]
    hidden: yes
  }
  measure: CDC_by_Open_Date_Month {
    type: count
    drill_fields: [createddate_month ,case_distinct_count]
    hidden: yes
  }

  measure: CDC_by_Initial_Queue_Name {
    type: count
    drill_fields: [Initial_Queue_Name,case_distinct_count]
    hidden: yes
  }

  measure: CDC_by_name  {
    type: count
    drill_fields: [of_contact.name, case_distinct_count]
    hidden: yes
  }

  measure: CDC_by_contactemail  {
    type: count
    drill_fields: [contactemail, case_distinct_count]
    hidden: yes
  }

  measure: CDC_by_ecomm_id {
    type: count
    drill_fields: [ ecomm_id,case_distinct_count]
    hidden: yes
  }

  measure: Avg_First_Response_Time {
    type: average
    sql: ${FIRST_RESPONSE_TIME_CASE} ;;
    drill_fields: [detail*]
    label: "Avg First Response Time"
    value_format_name: decimal_1
  }

  dimension: First_Response_Time_Minutes {
    type: number
    sql: ${TABLE}.First_Response_Time_Minutes ;;
    label: "First Response Time Minutes"
    description: "To Plot the scatter plot outliers (FRT)"
  }

  dimension: Case_First_Response_Time_Minutes {
    type: number
    sql: ${TABLE}.First_Response_Time_Minutes ;;
    label: "Case FRT (mins)"
  }

  measure: AVG_FIRST_RESPONSE_TIME {
    type: average
    sql: ${TABLE}.First_Response_Time_Minutes ;;
    drill_fields: [detail*]
    label: "Average First Response Time"
    value_format_name: decimal_1
    link: {
      label: "By RHQ"
      url: "{{ FRT_by_RHQ._link }}"
    }
    link: {
      label: "By Country"
      url: "{{ FRT_by_Country._link }}"
    }
    link: {
      label: "By Status"
      url: "{{ FRT_by_Status._link }}"
    }
    link: {
      label: "By Office"
      url: "{{ FRT_by_Office._link }}"
    }
    link: {
      label: "By Channel"
      url: "{{ FRT_by_Channel._link }}"
    }
    link: {
      label: "By Customer"
      url: "{{ FRT_by_Customer._link }}"
    }
    link: {
      label: "By case_age_group"
      url: "{{ FRT_by_case_age_group._link }}"
    }
    link: {
      label: "By case_owner_name"
      url: "{{ FRT_by_case_owner_name._link }}"
    }
    link: {
      label: "By Priority"
      url: "{{ FRT_by_Priority._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ FRT_by_Customer_Group._link }}"
    }

    link: {
      label: "By L2 Intent"
      url: "{{ FRT_by_L2_Intent._link }}"
    }
    link: {
      label: "By L3 Intent"
      url: "{{ FRT_by_L3_Intent._link }}"
    }
    link: {
      label: "By Open Date Month"
      url: "{{ FRT_by_Open_Date_Month._link }}"
    }

    link: {
      label: "By Initial Queue Name"
      url: "{{ FRT_by_Initial_Queue_Name._link }}"
    }

    link: {
      label: "By Contact Name"
      url: "{{ FRT_by_name._link }}"
    }

    link: {
      label: "By Contact Email"
      url: "{{ FRT_by_contactemail._link }}"
    }

    link: {
      label: "By eComm ID"
      url: "{{ FRT_by_ecomm_id._link }}"
    }
  }

  measure: FRT_by_RHQ {
    type: count
    drill_fields: [ Regional_Head_Office,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_case_age_group {
    type: count
    drill_fields: [ case_age_group,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_Status {
    type: count
    drill_fields: [ status,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_case_owner_name {
    type: count
    drill_fields: [ case_owner_name,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_Priority {
    type: count
    drill_fields: [ priority,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_Country {
    type: count
    drill_fields: [ case_country,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }

  measure: FRT_by_Office {
    type: count
    drill_fields: [ case_office_code,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }

  measure: FRT_by_Channel {
    type: count
    drill_fields: [origin ,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_Customer_Group{
    type: count
    drill_fields: [ of_customer_group.cust_grp_and_name,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_Customer {
    type: count
    drill_fields: [ of_customer.customer_cd_and_name,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_L2_Intent {
    type: count
    drill_fields: [ sub_category_l2,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_L3_Intent {
    type: count
    drill_fields: [ subordinate_category_l3,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }
  measure: FRT_by_Open_Date_Month {
    type: count
    drill_fields: [createddate_month ,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }

  measure: FRT_by_Initial_Queue_Name {
    type: count
    drill_fields: [Initial_Queue_Name,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }

  measure: FRT_by_name  {
    type: count
    drill_fields: [of_contact.name, AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }

  measure: FRT_by_contactemail  {
    type: count
    drill_fields: [contactemail, AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }

  measure: FRT_by_ecomm_id {
    type: count
    drill_fields: [ ecomm_id,AVG_FIRST_RESPONSE_TIME]
    hidden: yes
  }

  measure: AVG_FIRST_CONTACT_RESOLUTION {
    type: average
    sql: CASE
         WHEN ${origin} = 'Chat' and ${TABLE}.is_fcr ='true' THEN 1
         WHEN ${origin} = 'Chat' and ${TABLE}.is_fcr ='false' THEN 0
         WHEN ${total_escalation} =0 and ${transfer_reason} is Null and ${active_case} ='No' THEN 1 ELSE 0 END ;;
    drill_fields: [detail_fcr*]
    label: "First Contact Resolution Ratio"
    value_format_name: percent_0
  }

  measure: NURTURE_RATE {
    type: average
    sql: CASE WHEN ${is_nurtured} ='true' THEN 1 ELSE 0 END  ;;
    drill_fields: [detail*]
    label: "Nurturing Rate"
    value_format_name: percent_0
  }
  measure: is_contract_customer {
    type: average
    label: "Is contract Customer"
    sql: CASE WHEN ${contract_customer_name} is not null THEN 1 ELSE 0 END   ;;
    value_format_name: percent_0
  }

  measure: has_container_number {
    type: sum
    label: "Has Container Number"
    sql: CASE WHEN ${container_number} is not null THEN 1 ELSE 0 END   ;;
    value_format_name: decimal_0
  }

  measure: has_booking_number {
    type: sum
    label: "Has Booking Number"
    sql: CASE WHEN ${booking_number} is not null THEN 1 ELSE 0 END   ;;
    value_format_name: decimal_0
  }


  dimension: Is_Chat_Self_Service {
    type: string
    sql: ${TABLE}.Is_Chat_Self_Service ;;
    label: "Is Chat Self Service"
    group_label: "Additional Information"
  }

  dimension: is_resolved_by_automation {
    label: "Is resolved by automation"
    type: string
    sql: CASE WHEN ${case_owner.name}='Platform Integration User' THEN 'Yes' else 'No' END ;;
  }

  dimension: Automation_Type {
    label: "Automation Type"
    type: string
    drill_fields: [drillfields*]
    sql: CASE
      WHEN ${of_chat_transcript.merged_d_d_used}='true' THEN 'D&D'
      WHEN ${of_chat_transcript.lfd_used}='true' THEN 'LFD'
      WHEN ${TABLE}.Is_Chat_Self_Service = "true" THEN 'Self-Service'
      ELSE 'Others'
      END ;;
  }

  measure: has_contract_number {
    type: sum
    label: "Has Contract Number"
    sql: CASE WHEN ${contract_number} is not null THEN 1 ELSE 0 END   ;;
    value_format_name: decimal_0
  }

  measure: queue_abandonment {
    type: sum
    sql: (CASE WHEN ${of_queue.developer_name} is not Null and ${status} not in ('Resolved','Closed') THEN 1 else 0 END) ;;
    drill_fields: [detail*]
  }

  measure: queue_abandonment_ratio {
    type: average
    sql: (CASE WHEN ${of_queue.developer_name} is not Null and ${status} not in ('Resolved','Closed') THEN 1 else 0 END) ;;
    value_format_name: percent_0
  }

  dimension_group: createddate_temp {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    label: "Created Date - Do Not Use"
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension_group: createddate_filter {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    group_label: "Open Date For Filter"
    label: "Open Date For Filter"
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: BOT_Cases {
    type: string
    sql: (CASE WHEN ${Automation_Type}="D&D" OR  ${Automation_Type}="LFD" THEN 'Yes' ELSE 'No' END) ;;
    label: "BOT Cases"
    drill_fields: [drillfields*]
  }

  dimension: case_handle_time_minutes {
    label: "Case Handle Time Minutes"
    type: string
    sql:  ${TABLE}.Case_Handle_Time_Minutes ;;
  }

# Below Dimension is created for DCN-966
  dimension: is_aht_calculated_excluded {
    type: string
    description: "Refined AHT Logic for Open and Resolved dates after 1st Jan 2023"
    sql: case when ((${createddate_filter_date}>=date(2023,01,01) and ${is_aht_calculated}="Yes") OR (${resolved_date_date}>=date(2023,01,01) and ${is_aht_calculated}="Yes"))
          OR (${createddate_filter_date}<date(2023,01,01) and (${is_aht_calculated}="No" OR ${is_aht_calculated}="Yes")) then "Yes"
          else "No"
          end ;;
  }

  ### Created for DCN:947
  parameter: Exclude_Awaiting_Internal_in_AHT{
    description: "Used for toggle AHT"
    type: string
    default_value: "No"
    allowed_value: {
      label: "Yes"
      value: "Yes"
    }
    allowed_value: {
      label: "No"
      value: "No"
    }
  }

  measure: average_handling_time_new {
    label: "Average Handling Time temp"
    type: average
    sql: case WHEN {% parameter Exclude_Awaiting_Internal_in_AHT %} = "Yes" and (${createddate_filter_date}<date(2023,01,01) ) THEN ${TABLE}.CASE_HANDLE_TIME_EXCL_INTERNAL_MINS
      WHEN {% parameter Exclude_Awaiting_Internal_in_AHT %} = "No" and (${createddate_filter_date}>=date(2023,01,01) ) THEN ${TABLE}.Case_Handle_Time_Minutes
      else null
      end;;
    value_format_name: decimal_1
    #filters: [is_aht_calculated_excluded: "Yes"]
  }

  measure: case_handling_time {
    label: "Case Handle Time (mins)"
    type: average
    sql:  ${TABLE}.Case_Handle_Time_Minutes ;;
    value_format_name: decimal_1
  }

  measure: avg_handling_time {
    label: "Avg Handle Time (Mins)"
    type: number
    drill_fields: [responsetime_details*]
    sql: CASE
          WHEN {% parameter handletime_Param %} = "Chat Transcript" THEN ${of_chat_transcript.chat_handle_time_avg}
          ELSE  ${average_handling_time_new} END;;
    value_format_name: decimal_1
  }

  dimension: Case_Handle_Time_excl_Internal_mins {
    type: number
    sql: ${TABLE}.CASE_HANDLE_TIME_EXCL_INTERNAL_MINS ;;
  }

  measure: average_handling_time {
    label: "Average Handling Time"
    type: number
    drill_fields: [responsetime_details*]
    sql: CASE
          WHEN {% parameter handletime_Param %} = "Chat Transcript" THEN ${of_chat_transcript.chat_handle_time_avg}
          ELSE  ${average_handling_time_new} END;;
    value_format_name: decimal_1



    link: {
      label: "By RHQ"
      url: "{{ AHT_by_RHQ._link }}"
    }
    link: {
      label: "By Country"
      url: "{{ AHT_by_Country._link }}"
    }
    link: {
      label: "By Status"
      url: "{{ AHT_by_Status._link }}"
    }
    link: {
      label: "By Channel"
      url: "{{ AHT_by_Channel._link }}"
    }
    link: {
      label: "By Customer"
      url: "{{ AHT_by_Customer._link }}"
    }
    link: {
      label: "By Office"
      url: "{{ AHT_by_Office._link }}"
    }
    link: {
      label: "By case_age_group"
      url: "{{ AHT_by_case_age_group._link }}"
    }
    link: {
      label: "By case_owner_name"
      url: "{{ AHT_by_case_owner_name._link }}"
    }
    link: {
      label: "By Priority"
      url: "{{ AHT_by_Priority._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ AHT_by_Customer_Group._link }}"
    }
    link: {
      label: "By L2 Intent"
      url: "{{ AHT_by_L2_Intent._link }}"
    }
    link: {
      label: "By L3 Intent"
      url: "{{ AHT_by_L3_Intent._link }}"
    }
    link: {
      label: "By Open Date Month"
      url: "{{ AHT_by_Open_Date_Month._link }}"
    }
    link: {
      label: "By Initial Queue Name"
      url: "{{ AHT_by_Initial_Queue_Name._link }}"
    }

    link: {
      label: "By Contact Name"
      url: "{{ AHT_by_name._link }}"
    }

    link: {
      label: "By Contact Email"
      url: "{{ AHT_by_contactemail._link }}"
    }

    link: {
      label: "By eComm ID"
      url: "{{ AHT_by_ecomm_id._link }}"
    }
  }

  measure: AHT_by_RHQ {
    type: count
    drill_fields: [ Regional_Head_Office,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_case_age_group {
    type: count
    drill_fields: [ case_age_group,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_Status {
    type: count
    drill_fields: [ status,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_case_owner_name {
    type: count
    drill_fields: [ case_owner_name,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_Priority {
    type: count
    drill_fields: [ priority,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_Country {
    type: count
    drill_fields: [ case_country,average_handling_time]
    hidden: yes
  }

  measure: AHT_by_Office {
    type: count
    drill_fields: [ case_office_code,average_handling_time]
    hidden: yes
  }

  measure: AHT_by_Channel {
    type: count
    drill_fields: [origin ,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_Customer_Group{
    type: count
    drill_fields: [ of_customer_group.cust_grp_and_name,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_Customer {
    type: count
    drill_fields: [ of_customer.customer_cd_and_name,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_L2_Intent {
    type: count
    drill_fields: [sub_category_l2 ,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_L3_Intent {
    type: count
    drill_fields: [subordinate_category_l3 ,average_handling_time]
    hidden: yes
  }
  measure: AHT_by_Open_Date_Month {
    type: count
    drill_fields: [createddate_month ,average_handling_time]
    hidden: yes
  }

  measure: AHT_by_Initial_Queue_Name {
    type: count
    drill_fields: [ Initial_Queue_Name,average_handling_time]
    hidden: yes
  }

  measure: AHT_by_name  {
    type: count
    drill_fields: [of_contact.name, average_handling_time]
    hidden: yes
  }

  measure: AHT_by_contactemail  {
    type: count
    drill_fields: [contactemail, average_handling_time]
    hidden: yes
  }

  measure: AHT_by_ecomm_id {
    type: count
    drill_fields: [ ecomm_id,average_handling_time]
    hidden: yes
  }

  dimension : No_KA_Mapping {
    type: string
    sql: CASE WHEN ${total_escalation} >0 and ${of_escalation_history.role} IS NULL THEN 'Yes' ELSE 'No' END ;;
    label: "No KA Mapping"
  }


  dimension: Initial_Queue_Name {
    type: string
    sql:CASE WHEN ${TABLE}.Origin = "Chat"  THEN ${of_chat_transcript.chat_first_queue_name_detail} else ${TABLE}.Initial_Queue_Name END;;
    label: "Initial Queue Name"
  }

  dimension: Case_Owned_by_System_Filter {
    label: "Case Owned by System Filter"
    type: string
    sql: CASE WHEN ${case_owner.name}= "Platform Integration User" OR ${case_owner.name}= "CRM System User" OR ${case_owner.name}="Automated Process" THEN 'Yes' else 'No' END ;;
  }

  dimension: has_leave_message {
    type: string
    sql: ${TABLE}.Has_Leave_Message ;;
    label: "Has Leave Message"
  }

  dimension: has_leave_message_filter {
    label: "Has Leave Message Filter"
    type: string
    sql: case when ${TABLE}.Has_Leave_Message="true" then "Yes"
          else "No"
          end;;
  }

  measure : L2_mandatory_1 {
    type: sum
    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Booking Management' THEN 1 ELSE 0 END) ;;
    label: "Mandatory L2_1"
    drill_fields: [drillfields*]
  }

  measure : L2_mandatory_2 {
    type: sum
    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Claims' THEN 1 ELSE 0 END) ;;
    label: "Mandatory L2_2"
    drill_fields: [drillfields*]
  }

  measure : L2_mandatory_3 {
    type: sum
    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Disputes' THEN 1 ELSE 0 END) ;;
    label: "Mandatory L2_3"
    drill_fields: [drillfields*]
  }

  measure : L2_mandatory_4 {
    type: sum
    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Export Documentation' THEN 1 ELSE 0 END) ;;
    label: "Mandatory L2_4"
    drill_fields: [drillfields*]
  }

  measure : L2_mandatory_5 {
    type: sum
    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Import Documentation' THEN 1 ELSE 0 END) ;;
    label: "Mandatory L2_5"
    drill_fields: [drillfields*]
  }

  measure : L2_mandatory_6 {
    type: sum
    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Import Management' THEN 1 ELSE 0 END) ;;
    label: "Mandatory L2_6"
    drill_fields: [drillfields*]
  }

  measure : L2_mandatory_7 {
    type: sum
    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Invoice & Charges' THEN 1 ELSE 0 END) ;;
    label: "Mandatory L2_7"
    drill_fields: [drillfields*]
  }

  measure : L2_mandatory_8 {
    type: sum
    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Last Free Day / Demurrage & Detention' THEN 1 ELSE 0 END) ;;
    label: "Mandatory L2_8"
    drill_fields: [drillfields*]
  }

  measure: all_cases {
    type: number
    label: "All Cases"
    sql: COUNT(DISTINCT CASE WHEN (CASE WHEN ${resolution_reason} IS NULL THEN 'None' ELSE ${resolution_reason} END  IN ('Customer Abandoned Chat', 'Customer Query Un-resolved', 'None', 'Customer Query Resolved')) THEN ${casenumber}  ELSE NULL END) ;;
    drill_fields: [drillfields*]
  }

  measure: duplicate_cases {
    type: number
    label: "Duplicate Cases"
    sql: COUNT(DISTINCT CASE WHEN ((CASE WHEN ${resolution_reason} IS NULL THEN 'None' ELSE ${resolution_reason} END) = 'Duplicate') THEN ${casenumber}  ELSE NULL END) ;;
    drill_fields: [drillfields*]
  }

  measure: no_action_required_cases {
    type: number
    label: "No Action Required Cases"
    sql: COUNT(DISTINCT CASE WHEN ((CASE WHEN ${resolution_reason} IS NULL THEN 'None' ELSE ${resolution_reason} END) = 'No Action Required') THEN ${casenumber}  ELSE NULL END) ;;
    drill_fields: [drillfields*]
  }

  parameter: Geo_Param {
    type: string
    allowed_value: {
      label: "Global"
      value: "Global"
    }
    allowed_value: {
      label: "RHQ"
      value: "RHQ"
    }
    allowed_value: {
      label: "Cluster Country"
      value: "Cluster Country"
    }
    allowed_value: {
      label: "Individual Country"
      value: "Individual Country"
    }
    allowed_value: {
      label: "Office"
      value: "Office"
    }
    allowed_value: {
      label: "Channel"
      value: "Channel"
    }
    allowed_value: {
      label: "Segment"
      value: "Segment"
    }
    allowed_value: {
      label: "Segment "
      value: "Segment "
    }
    allowed_value: {
      label: "Agent Role"
      value: "Agent Role"
    }
    allowed_value: {
      label: "Escalation Role"
      value: "Escalation Role"
    }
    allowed_value: {
      label: "Office Type"
      value: "Office Type"
    }
    allowed_value: {
      label: "Service Type"
      value: "Service Type"
    }
  }


  dimension: Reference_data {
    type: string
    sql: CASE
          WHEN ${booking_number} is not null THEN 'Booking'
          WHEN ${contract_number} is not null THEN 'Contract'
          WHEN ${container_number} is not null THEN 'Container'
          ELSE 'No Reference Number' END ;;
    label:"Reference Data"

  }

  dimension: channel_type {
    type: string
    sql: (CASE WHEN ${TABLE}.origin="Chat" or ${TABLE}.origin="Web" THEN "Digital" ELSE "Traditional " END) ;;
    label: "Channel Type"
    group_label: "Case Information"
    drill_fields: [drillfields*]
  }

  measure: deflection_ratio {
    type: average
    sql: (CASE WHEN ${origin} in ('Chat' , 'Web') THEN 1 ELSE 0 END);;
    drill_fields: [detail*]
    label: "Deflection Ratio"
    value_format_name: percent_0


    link: {
      label: "By RHQ"
      url: "{{ deflection_ratio_by_RHQ._link }}"
    }

    link: {
      label: "By Country"
      url: "{{ deflection_ratio_by_Country._link }}"
    }

    link: {
      label: "By Status"
      url: "{{ deflection_ratio_by_Status._link }}"
    }

    link: {
      label: "By Channel"
      url: "{{ deflection_ratio_by_Channel._link }}"
    }

    link: {
      label: "By Customer"
      url: "{{ deflection_ratio_by_Customer._link }}"
    }

    link: {
      label: "By Office"
      url: "{{ deflection_ratio_by_Office._link }}"
    }

    link: {
      label: "By case_age_group"
      url: "{{ deflection_ratio_by_case_age_group._link }}"
    }

    link: {
      label: "By case_owner_name"
      url: "{{ deflection_ratio_by_case_owner_name._link }}"
    }

    link: {
      label: "By Priority"
      url: "{{ deflection_ratio_by_Priority._link }}"
    }

    link: {
      label: "By Customer Group"
      url: "{{ deflection_ratio_by_Customer_Group._link }}"
    }

    link: {
      label: "By L2 Intent"
      url: "{{ deflection_ratio_by_L2_Intent._link }}"
    }

    link: {
      label: "By L3 Intent"
      url: "{{ deflection_ratio_by_L3_Intent._link }}"
    }
    link: {
      label: "By Open Date Month"
      url: "{{ deflection_ratio_by_Open_Date_Month._link }}"
    }
    link: {
      label: "By Initial Queue Name"
      url: "{{ deflection_ratio_by_Initial_Queue_Name._link }}"
    }

    link: {
      label: "By Contact Name"
      url: "{{ deflection_ratio_by_name._link }}"
    }

    link: {
      label: "By Contact Email"
      url: "{{ deflection_ratio_by_contactemail._link }}"
    }

    link: {
      label: "By eComm ID"
      url: "{{ deflection_ratio_by_ecomm_id._link }}"
    }
  }

  measure: deflection_ratio_by_RHQ {
    type: count
    drill_fields: [Regional_Head_Office,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_case_age_group {
    type: count
    drill_fields: [case_age_group,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_Status {
    type: count
    drill_fields: [status,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_case_owner_name {
    type: count
    drill_fields: [case_owner_name,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_Priority {
    type: count
    drill_fields: [priority,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_Country {
    type: count
    drill_fields: [case_country,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_Office {
    type: count
    drill_fields: [case_office_code,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_Channel {
    type: count
    drill_fields: [origin,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_Customer_Group{
    type: count
    drill_fields: [of_customer_group.cust_grp_and_name,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_Customer {
    type: count
    drill_fields: [of_customer.customer_cd_and_name,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_L2_Intent {
    type: count
    drill_fields: [sub_category_l2 ,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_L3_Intent {
    type: count
    drill_fields: [subordinate_category_l3 ,deflection_ratio]
    hidden: yes
  }
  measure: deflection_ratio_by_Open_Date_Month {
    type: count
    drill_fields: [createddate_month ,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_Initial_Queue_Name {
    type: count
    drill_fields: [Initial_Queue_Name,deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_name  {
    type: count
    drill_fields: [of_contact.name, deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_contactemail  {
    type: count
    drill_fields: [contactemail, deflection_ratio]
    hidden: yes
  }

  measure: deflection_ratio_by_ecomm_id {
    type: count
    drill_fields: [ ecomm_id,deflection_ratio]
    hidden: yes
  }

  dimension_group: Case_Resolved_Date_Time {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Case_Resolved_Date_Time ;;
    label: "Case Resolved Date Time"
  }

  dimension: createddate_dynamic {
    type: date
    datatype: datetime
    label: "Open Date Dynamic"
    sql:
    CASE
    WHEN {% parameter timeframe_picker %} = 'Day' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'),DAY)
    WHEN {% parameter timeframe_picker %} = 'Week' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'), WEEK(MONDAY))
    WHEN {% parameter timeframe_picker %} = 'Month' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'),MONTH)
    WHEN {% parameter timeframe_picker %} = 'Quarter' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'),QUARTER)
    WHEN {% parameter timeframe_picker %} = 'Year' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'),YEAR)
    ELSE NULL
    END ;;
    convert_tz: no
  }

  parameter: timeframe_picker {
    label: "Date Granularity"
    type: string
    allowed_value: { value: "Day" }
    allowed_value: { value: "Week" }
    allowed_value: { value: "Month" }
    allowed_value: { value: "Quarter" }
    allowed_value: { value: "Year" }
    default_value: "Month"

  }

  dimension: isWithInBusinessHour {
    type: string
    sql: CASE WHEN ${TABLE}.isWithInBusinessHour ='true' THEN 'Yes' ELSE 'No' END ;;
    label: "With In Business Hour"
  }

  dimension: is_channel_applicable_for_FRT {
    type: string
    sql: (CASE WHEN ${TABLE}.Origin ="Phone"  THEN "No" ELSE "Yes" END) ;;
    label: : "Is Channel Applicable For FRT"
    group_label: "Case Information"
  }

  measure: detractor_percentage{
    type: average
    sql: Case WHEN ${nps_group}='Detractors' THEN 1 ELSE 0 END ;;
    label:"Detractor Percentage"
    group_label: "Customer Feedback"
    filters: [nps_group: "-No Rating"]
    value_format_name: percent_0
    #hidden: yes
  }

  measure: promoter_percentage{
    type: average
    sql: Case WHEN ${nps_group}='Promoters' THEN 1 ELSE 0 END ;;
    label:"Promoters Percentage"
    group_label: "Customer Feedback"
    filters: [nps_group: "-No Rating"]
    value_format_name: percent_0
    #hidden: yes
  }

  measure: global_nps{
    type: number
    sql: (${promoter_percentage} - ${detractor_percentage}) *100 ;;
    label:"Global NPS"
    group_label: "Customer Feedback"
    value_format_name: decimal_0
    drill_fields: [detail*]

    link: {
      label: "By RHQ"
      url: "{{ global_nps_by_RHQ._link }}"
    }
    link: {
      label: "By Country"
      url: "{{ global_nps_by_Country._link }}"
    }
    link: {
      label: "By Status"
      url: "{{ global_nps_by_Status._link }}"
    }
    link: {
      label: "By Channel"
      url: "{{ global_nps_by_Channel._link }}"
    }
    link: {
      label: "By Customer"
      url: "{{ global_nps_by_Customer._link }}"
    }
    link: {
      label: "By Office"
      url: "{{ global_nps_by_Office._link }}"
    }
    link: {
      label: "By case_age_group"
      url: "{{ global_nps_by_case_age_group._link }}"
    }
    link: {
      label: "By case_owner_name"
      url: "{{ global_nps_by_case_owner_name._link }}"
    }
    link: {
      label: "By Priority"
      url: "{{ global_nps_by_Priority._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ global_nps_by_Customer_Group._link }}"
    }
    link: {
      label: "By L2 Intent"
      url: "{{ global_nps_by_L2_Intent._link }}"
    }
    link: {
      label: "By L3 Intent"
      url: "{{ global_nps_by_L3_Intent._link }}"
    }
    link: {
      label: "By Open Date Month"
      url: "{{ global_nps_by_Open_Date_Month._link }}"
    }

    link: {
      label: "By Initial Queue Name"
      url: "{{ global_nps_by_Initial_Queue_Name._link }}"
    }


    link: {
      label: "By Contact Name"
      url: "{{ global_nps_by_name._link }}"
    }

    link: {
      label: "By Contact Email"
      url: "{{ global_nps_by_contactemail._link }}"
    }

    link: {
      label: "By eComm ID"
      url: "{{ global_nps_by_ecomm_id._link }}"
    }
  }

  measure: global_nps_by_RHQ {
    type: count
    drill_fields: [ Regional_Head_Office,global_nps]
    hidden: yes
  }
  measure: global_nps_by_case_age_group {
    type: count
    drill_fields: [ case_age_group,global_nps]
    hidden: yes
  }
  measure: global_nps_by_Status {
    type: count
    drill_fields: [ status,global_nps]
    hidden: yes
  }
  measure: global_nps_by_case_owner_name {
    type: count
    drill_fields: [ case_owner_name,global_nps]
    hidden: yes
  }
  measure: global_nps_by_Priority {
    type: count
    drill_fields: [ priority,global_nps]
    hidden: yes
  }
  measure: global_nps_by_Country {
    type: count
    drill_fields: [ case_country,global_nps]
    hidden: yes
  }

  measure: global_nps_by_Office {
    type: count
    drill_fields: [ case_office_code,global_nps]
    hidden: yes
  }

  measure: global_nps_by_Channel {
    type: count
    drill_fields: [origin,global_nps]
    hidden: yes
  }
  measure: global_nps_by_Customer_Group{
    type: count
    drill_fields: [ of_customer_group.cust_grp_and_name,global_nps]
    hidden: yes
  }
  measure: global_nps_by_Customer {
    type: count
    drill_fields: [ of_customer.customer_cd_and_name,global_nps]
    hidden: yes
  }
  measure: global_nps_by_L2_Intent {
    type: count
    drill_fields: [sub_category_l2 ,global_nps]
    hidden: yes
  }
  measure: global_nps_by_L3_Intent {
    type: count
    drill_fields: [subordinate_category_l3 ,global_nps]
    hidden: yes
  }
  measure: global_nps_by_Open_Date_Month {
    type: count
    drill_fields: [createddate_month ,global_nps]
    hidden: yes
  }

  measure: global_nps_by_Initial_Queue_Name {
    type: count
    drill_fields: [Initial_Queue_Name,global_nps]
    hidden: yes
  }

  measure: global_nps_by_name  {
    type: count
    drill_fields: [of_contact.name, global_nps]
    hidden: yes
  }

  measure: global_nps_by_contactemail  {
    type: count
    drill_fields: [contactemail, global_nps]
    hidden: yes
  }

  measure: global_nps_by_ecomm_id {
    type: count
    drill_fields: [ ecomm_id, global_nps]
    hidden: yes
  }

  dimension: nps_group {
    type: string
    sql: (CASE
          WHEN ${TABLE}.Case_Net_Promoter_Score <7 THEN 'Detractors'
          WHEN ${TABLE}.Case_Net_Promoter_Score >=7 and ${TABLE}.Case_Net_Promoter_Score <9 THEN 'Passives'
          WHEN ${TABLE}.Case_Net_Promoter_Score >=9 THEN 'Promoters'
          ELSE 'No Rating' END);;
    label:"NPS Segment"
    group_label: "Customer Feedback"

  }

  dimension: Case_Net_Promoter_Score {
    type: string
    sql: ${TABLE}.Case_Net_Promoter_Score ;;
    label: "Case Net Promotor Score"
  }

  dimension: Service_Contract_Customer  {
    type: string
    sql: (CASE
      WHEN ${of_case.accountid} is not null AND ${of_case.contract_customer_name} is not null THEN 'Both'
      WHEN ${of_case.accountid} is not null THEN 'Service Customer'
      WHEN ${of_case.contract_customer_name} is not null THEN 'Contract Customer'
      Else 'None' END);;
    label: "Service or Contract Customer"
  }

  dimension: case_channel_or_geography_dynamic {
    type: string
    label: "Geography Dynamic Backlog History"
    sql: CASE
          WHEN {% parameter Customer_Param %} = "RHQ" THEN ${Regional_Head_Office}
          WHEN {% parameter Customer_Param %} = "Cluster Country" THEN ${case_country}
          WHEN {% parameter Customer_Param %} = "Individual Country" THEN ${country}
          WHEN {% parameter Customer_Param %} = "Office" THEN ${office}
          WHEN {% parameter Customer_Param %} = "Channel" THEN ${origin}
          WHEN {% parameter Customer_Param %} = "Status" THEN ${of_case_history_status_stat.status}
          WHEN {% parameter Customer_Param %} = "Segment" THEN ${of_customer_group.key_acct_tp_cd}
          WHEN {% parameter Customer_Param %} = "Agent Role" THEN ${case_owner.profile_name_service}
          WHEN {% parameter Customer_Param %} = "Escalation Role" THEN ${of_escalation_history.role}
          WHEN {% parameter Customer_Param %} = "Office Type" THEN ${case_owner.officetype}
          WHEN {% parameter Customer_Param %} = "Service Type" THEN ${type}
          ELSE "Global" END;;
    drill_fields: [drillfields*]
  }


  measure: customer_satisfaction_ratio_case_chat {
    type: number
    label: "CSAT Case/Chat"
    sql: case when {% parameter csat_Param %}= "Case Level" then
         ${Customer_satisfaction_ratio}
        when {% parameter csat_Param %}= "Chat Transcript"  then
          ${of_chat_transcript.Customer_chat_satisfaction_ratio}
          else null
          end;;
    value_format_name: percent_0
    drill_fields: [detail_csat*]
  }

  dimension: rating_case_chat {
    type: string
    label: "Rating Case/Chat"
    sql: case when {% parameter csat_Param %}= "Case Level" then
         ${case_rating}
        when {% parameter csat_Param %}= "Chat Transcript"  then
          ${of_chat_transcript.chat_case_rating}
          else null
          end;;
    drill_fields: [drillfields*]
  }

  parameter: csat_Param {
    type: string
    allowed_value: {
      label: "Case Level"
      value: "Case Level"
    }
    allowed_value: {
      label: "Chat Transcript"
      value: "Chat Transcript"
    }
  }

  measure: all_rating{
    type: count_distinct
    sql: Case WHEN ${case_rating}='Good' OR ${case_rating}='Bad'  THEN 1 ELSE 0 END ;;
    label:"All Rating Case"
  }

  measure: good_rating{
    type: count_distinct
    sql: Case WHEN ${case_rating}='Good'  THEN 1 ELSE 0 END ;;
    label:"Good Rating Case"
  }

  measure: difference_rating_case{
    type: number
    sql: (${good_rating}/NULLIF(${all_rating}, 0)) ;;
    label:"Difference Rating Case"
    drill_fields: [detail*]
  }

  measure: csat_case_analysis {
    type: number
    label: "CSAT Case Analysis"
    sql: case when {% parameter csat_Param %}= "Case Level" then
         ${difference_rating_case}
        when {% parameter csat_Param %}= "Chat Transcript"  then
          ${of_chat_transcript.difference_rating_chat}
          else null
          end;;
    value_format_name: percent_0
    drill_fields: [drillfields*]
  }


  dimension: customer_segment_number {
    type: string
    sql: CASE
          WHEN ${of_customer_group.key_acct_tp_cd} ='GKA' THEN '1'
          WHEN ${of_customer_group.key_acct_tp_cd} ='RKA' THEN '2'
          WHEN ${of_customer_group.key_acct_tp_cd} ='LKA' THEN '3'
          ELSE '4' END
          ;;
    label: "customer segment number"
  }

  dimension: customer_segment_number2 {
    type: string
    order_by_field: customer_segment_number
    sql: CASE
          WHEN ${of_customer_group.key_acct_tp_cd} ='GKA' THEN 'GKA'
          WHEN ${of_customer_group.key_acct_tp_cd} ='RKA' THEN 'RKA'
          WHEN ${of_customer_group.key_acct_tp_cd} ='LKA' THEN 'LKA'
          WHEN ${of_customer_group.key_acct_tp_cd} ='ONECare' THEN 'ONECare'
          ELSE '∅' END
          ;;
    label: "customer segment number2"
  }

  parameter: Customer_Param {
    type: string
    label: "Customer Parameter"
    allowed_value: {
      label: "Global"
      value: "Global"
    }
    allowed_value: {
      label: "RHQ"
      value: "RHQ"
    }
    allowed_value: {
      label: "Cluster Country"
      value: "Cluster Country"
    }
    allowed_value: {
      label: "Individual Country"
      value: "Individual Country"
    }
    allowed_value: {
      label: "Office"
      value: "Office"
    }
    allowed_value: {
      label: "Channel"
      value: "Channel"
    }
    allowed_value: {
      label: "Status"
      value: "Status"
    }
    allowed_value: {
      label: "Segment"
      value: "Segment"
    }
    allowed_value: {
      label: "Agent Role"
      value: "Agent Role"
    }
    allowed_value: {
      label: "Escalation Role"
      value: "Escalation Role"
    }
    allowed_value: {
      label: "Office Type"
      value: "Office Type"
    }
    allowed_value: {
      label: "Service Type"
      value: "Service Type"
    }
  }

  dimension: label {
    type: string
    sql: ${TABLE}.Label ;;
    label: "Label"
  }

  measure: Abandoned_ratio {
    type: average
    sql: CASE WHEN ${resolution_reason} = 'Customer Abandoned Chat' THEN 1 ELSE 0 END;;
    drill_fields: [detail*]
    label: "Abandoned Ratio"
    value_format_name: percent_0
  }


  measure: Customer_satisfaction_ratio {
    type: average
    sql: CASE WHEN ${case_rating} = 'Good' THEN 1 ELSE 0 END;;
    drill_fields: [detail*]
    label: "Customer Satisfaction Ratio"
    filters: [case_rating: "-No Rating"]
    value_format_name: percent_0
  }

  measure: Automation_ratio {
    type: average
    sql: (CASE WHEN ${is_resolved_by_automation} = 'Yes' and ${Automation_Type} in ('D&D', 'LFD', 'Self-Service') THEN 1 ELSE 0 END);;
    drill_fields: [detail*]
    label: "Automation Ratio"
    value_format_name: percent_0
  }

  measure: Case_Resolution_ratio {
    type: average
    sql: CASE WHEN ${status} in ('Resolved' , 'Closed')  THEN 1 ELSE 0 END;;
    drill_fields: [detail*]
    label: "Case Resolution Ratio"
    value_format_name: percent_0
  }

  dimension: filter_start{
    type: date
    datatype: datetime
    sql: {% date_start createddate_filter_date %} ;;
  }

  dimension: filter_end{
    type: date
    datatype: datetime
    sql: {% date_end createddate_filter_date %} ;;
  }

  dimension : ct_owner_name {
    type : string
    sql:  CASE WHEN ${ct_queue.developer_name} is not Null then ${ct_queue.developer_name} else ${ct_owner.name} END;;
    label : "Owner Name"
  }

  dimension : ct_owner_name1 {
    type : string
    sql:  CASE WHEN ${ct_queue.developer_name} is not Null then ${ct_queue.developer_name} else ${ct_owner.name} END;;
    label : "Chat Owner Name"
  }

  parameter: handletime_Param {
    type: string
    allowed_value: {
      label: "Case Level"
      value: "Case Level"
    }
    allowed_value: {
      label: "Chat Transcript"
      value: "Chat Transcript"
    }
  }

  parameter: responsetime_Param {
    type: string
    allowed_value: {
      label: "Case Level"
      value: "Case Level"
    }
    allowed_value: {
      label: "Chat Transcript"
      value: "Chat Transcript"
    }
  }

  dimension: Case_Resolved_Date_Time_dynamic {
    type: date
    datatype: datetime
    label: "Resolved Date Dynamic"
    sql:
    CASE
    WHEN {% parameter timeframe_picker %} = 'Day' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'),DAY)
    WHEN {% parameter timeframe_picker %} = 'Week' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'), WEEK(MONDAY))
    WHEN {% parameter timeframe_picker %} = 'Month' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'),MONTH)
    WHEN {% parameter timeframe_picker %} = 'Quarter' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'),QUARTER)
    WHEN {% parameter timeframe_picker %} = 'Year' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'),YEAR)
    ELSE NULL
    END ;;
    convert_tz: no
  }

  measure: case_escalation_ratio {
    type: average
    sql: CASE WHEN ${total_escalation} >0  THEN 1 ELSE 0 END;;
    label: "Case Escalation Ratio"
    drill_fields: [escdetail*]
    value_format_name: percent_0
  }

  measure: number_of_escalated_cases{
    type: count_distinct
    sql: case when ${total_escalation}>0 then ${casenumber} else null end;;
    drill_fields: [detail*]
    label: "Number of Escalated Cases"
  }

  measure: escalation_ratio {
    type:number
    sql: (${number_of_escalated_cases}/${case_distinct_count}) ;;
    value_format_name: percent_0
    drill_fields: [detail*]
  }

  measure: non_esc {
    type: average
    sql: case when ${total_escalation}=0 then 1 else 0 end ;;
    drill_fields: [detail*]
    value_format_name: percent_0
  }


  measure: global_nps_case_chat {
    type: number
    label: "Global NPS Case/Chat"
    sql: case when {% parameter globalnps_Param %}= "Case Level" then
         ${global_nps}
        when {% parameter globalnps_Param %}= "Chat Transcript"  then
          ${of_chat_transcript.chat_global_nps}
          else null
          end;;
    drill_fields: [detail_csat*]
  }

  dimension: nps_segment_case_chat {
    type: string
    label: "NPS Segment Case/Chat"
    sql: case when {% parameter globalnps_Param %}= "Case Level" then
         ${nps_group}
        when {% parameter globalnps_Param %}= "Chat Transcript"  then
          ${of_chat_transcript.chat_nps_group}
          else null
          end;;
  }

  parameter: globalnps_Param {
    type: string
    allowed_value: {
      label: "Case Level"
      value: "Case Level"
    }
    allowed_value: {
      label: "Chat Transcript"
      value: "Chat Transcript"
    }
  }


  measure: esc_ratio {
    type: number
    sql: 100-${non_esc} ;;
    drill_fields: [detail*]
    value_format_name: percent_0
  }

  dimension: FIRST_RESPONSE_TIME_CASE {
    type: number
    label: "FIRST RESPONSE TIME CASE"
    description: "Identifies First response time for case & chat handle time "
    sql: case when {% parameter responsetime_Param %}= "Case Level" then
         ${TABLE}.First_Response_Time_Minutes
        when {% parameter responsetime_Param %}= "Chat Transcript" and ${of_chat_transcript.Chat_First_Response_Time_Mins} >0 then
          ${of_chat_transcript.Chat_First_Response_Time_Mins}
          else null
          end;;
  }

  measure: AVG_FIRST_RESPONSE_TIME_NEW {
    type: average
    sql: ${FIRST_RESPONSE_TIME_CASE} ;;
    drill_fields: [responsetime_details*]
    label: "Average First Response Time New"
    value_format_name: decimal_1
    sql_distinct_key: ${FRT_sql_distinct_key} ;;

    link: {
      label: "By RHQ"
      url: "{{ FRT_New_by_RHQ._link }}"
    }
    link: {
      label: "By Country"
      url: "{{ FRT_New_by_Country._link }}"
    }
    link: {
      label: "By Status"
      url: "{{ FRT_New_by_Status._link }}"
    }
    link: {
      label: "By Office"
      url: "{{ FRT_New_by_Office._link }}"
    }
    link: {
      label: "By Channel"
      url: "{{ FRT_New_by_Channel._link }}"
    }
    link: {
      label: "By Customer"
      url: "{{ FRT_New_by_Customer._link }}"
    }
    link: {
      label: "By case_age_group"
      url: "{{ FRT_New_by_case_age_group._link }}"
    }
    link: {
      label: "By case_owner_name"
      url: "{{ FRT_New_by_case_owner_name._link }}"
    }
    link: {
      label: "By Priority"
      url: "{{ FRT_New_by_Priority._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ FRT_New_by_Customer_Group._link }}"
    }

    link: {
      label: "By L2 Intent"
      url: "{{ FRT_New_by_L2_Intent._link }}"
    }
    link: {
      label: "By L3 Intent"
      url: "{{ FRT_New_by_L3_Intent._link }}"
    }
    link: {
      label: "By Open Date Month"
      url: "{{ FRT_New_by_Open_Date_Month._link }}"
    }

    link: {
      label: "By Initial Queue Name"
      url: "{{ FRT_New_by_Initial_Queue_Name._link }}"
    }

    link: {
      label: "By Contact Name"
      url: "{{ FRT_New_by_name._link }}"
    }

    link: {
      label: "By Contact Email"
      url: "{{ FRT_New_by_contactemail._link }}"
    }

    link: {
      label: "By eComm ID"
      url: "{{ FRT_New_by_ecomm_id._link }}"
    }
  }

  measure: FRT_New_by_RHQ {
    type: count
    drill_fields: [ Regional_Head_Office,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_case_age_group {
    type: count
    drill_fields: [ case_age_group,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_Status {
    type: count
    drill_fields: [ status,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_case_owner_name {
    type: count
    drill_fields: [ case_owner_name,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_Priority {
    type: count
    drill_fields: [ priority,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_Country {
    type: count
    drill_fields: [ case_country,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }

  measure: FRT_New_by_Office {
    type: count
    drill_fields: [ case_office_code,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }

  measure: FRT_New_by_Channel {
    type: count
    drill_fields: [origin ,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_Customer_Group{
    type: count
    drill_fields: [ of_customer_group.cust_grp_and_name,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_Customer {
    type: count
    drill_fields: [ of_customer.customer_cd_and_name,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_L2_Intent {
    type: count
    drill_fields: [ sub_category_l2,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_L3_Intent {
    type: count
    drill_fields: [ subordinate_category_l3,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }
  measure: FRT_New_by_Open_Date_Month {
    type: count
    drill_fields: [createddate_month ,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }

  measure: FRT_New_by_Initial_Queue_Name {
    type: count
    drill_fields: [Initial_Queue_Name,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }

  measure: FRT_New_by_name  {
    type: count
    drill_fields: [of_contact.name, AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }

  measure: FRT_New_by_contactemail  {
    type: count
    drill_fields: [contactemail, AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }

  measure: FRT_New_by_ecomm_id {
    type: count
    drill_fields: [ ecomm_id,AVG_FIRST_RESPONSE_TIME_NEW]
    hidden: yes
  }


  dimension: original_record_type {
    type: string
    sql: ${TABLE}.Original_Record_Type ;;
    label:"Original Record Type"
  }

  dimension: ecomm_id {
    label: "eComm ID"
    type: string
    sql: ${TABLE}.Contact_eComm_User_ID ;;
    drill_fields: [drillfields*]
  }

  dimension: no_of_times_case_reopen{
    label: "No of times case reopen"
    type: number
    sql: ${TABLE}.No_of_Times_Case_Reopen ;;
  }

  dimension: is_reopened {
    label: "Is Reopened"
    type: string
    sql: ${TABLE}.Is_Reopened ;;
  }


  dimension: Case_reopened {
    label: "Case Reopened"
    type: string
    sql: case when ${is_reopened}="true" Then "Yes" Else "No" End;;
  }

  dimension: is_transfer {
    type: string
    label: "Is Transfer"
    sql: ${TABLE}.IsTransfer ;;
  }

  dimension: total_transfer {
    type: number
    label: "Total Transfer"
    sql:  ${TABLE}.Total_Transfer;;
    drill_fields: [transferdetail*]
  }


  dimension:group_total_transfer  {
    type: string
    label: "Group Total Transfer"
    sql:  case when   ${TABLE}.Total_Transfer=0 then 'Total Transfers: 0'
          when   ${TABLE}.Total_Transfer=1 then 'Total Transfers: 01'
          when   ${TABLE}.Total_Transfer=2 then 'Total Transfers: 02'
          when   ${TABLE}.Total_Transfer=3 then 'Total Transfers: 03'
          when   ${TABLE}.Total_Transfer=4 then 'Total Transfers: 04'
          when   ${TABLE}.Total_Transfer=5 then 'Total Transfers: 05'
                     when 6<=  ${TABLE}.Total_Transfer and ${TABLE}.Total_Transfer  <=50 then 'Total Transfers: 06-50'
                     when 51<=  ${TABLE}.Total_Transfer and ${TABLE}.Total_Transfer  <=100 then 'Total Transfers: 51-100'
                    else 'Total Transfers:100 Above' end
                     ;;
  }


  measure: Agent {
    type: number
    label: "Agent"
    sql: COUNT(DISTINCT CASE WHEN ((CASE WHEN (CASE WHEN case_owner.FirstName IS NULL THEN case_owner.LastName WHEN case_owner.LastName IS NULL THEN case_owner.FirstName ELSE  concat(case_owner.FirstName," ",case_owner.LastName) END)='Platform Integration User' THEN 'Yes' else 'No' END) = 'No') THEN ${casenumber}  ELSE NULL END)  ;;
    drill_fields: [drillfields*]
  }

  measure: DD {
    type: number
    label: "D&D"
    sql:  COUNT(DISTINCT CASE WHEN (((CASE WHEN (CASE WHEN case_owner.FirstName IS NULL THEN case_owner.LastName WHEN case_owner.LastName IS NULL THEN case_owner.FirstName ELSE  concat(case_owner.FirstName," ",case_owner.LastName) END)='Platform Integration User' THEN 'Yes' else 'No' END) = 'Yes')) AND (((CASE
      WHEN of_chat_transcript.Merged_D_D_Used='true' THEN 'D&D'
      WHEN of_chat_transcript.LFD_Used='true' THEN 'LFD'
      WHEN ${Is_Chat_Self_Service} = "true" THEN 'Self-Service'
      ELSE 'Others'
      END) = 'D&D')) THEN ${casenumber}  ELSE NULL END) ;;
    drill_fields: [drillfields*]
  }

  measure: LFD {
    type: number
    label: "LFD"
    sql: COUNT(DISTINCT CASE WHEN (((CASE WHEN (CASE WHEN case_owner.FirstName IS NULL THEN case_owner.LastName WHEN case_owner.LastName IS NULL THEN case_owner.FirstName ELSE  concat(case_owner.FirstName," ",case_owner.LastName) END)='Platform Integration User' THEN 'Yes' else 'No' END) = 'Yes')) AND (((CASE
      WHEN of_chat_transcript.Merged_D_D_Used='true' THEN 'D&D'
      WHEN of_chat_transcript.LFD_Used='true' THEN 'LFD'
      WHEN ${Is_Chat_Self_Service} = "true" THEN 'Self-Service'
      ELSE 'Others'
      END) = 'LFD')) THEN ${casenumber}  ELSE NULL END) ;;
    drill_fields: [drillfields*]
  }

  measure: selfservice {
    type: number
    label: "Self-Service"
    sql:  COUNT(DISTINCT CASE WHEN (((CASE WHEN (CASE WHEN case_owner.FirstName IS NULL THEN case_owner.LastName WHEN case_owner.LastName IS NULL THEN case_owner.FirstName ELSE  concat(case_owner.FirstName," ",case_owner.LastName) END)='Platform Integration User' THEN 'Yes' else 'No' END) = 'Yes')) AND (((CASE
      WHEN of_chat_transcript.Merged_D_D_Used='true' THEN 'D&D'
      WHEN of_chat_transcript.LFD_Used='true' THEN 'LFD'
      WHEN ${Is_Chat_Self_Service} = "true" THEN 'Self-Service'
      ELSE 'Others'
      END) = 'Self-Service')) THEN ${casenumber}  ELSE NULL END) ;;
    drill_fields: [drillfields*]

  }

  dimension: intent_key {
    type: string
    label: "Intent Key"
    sql: ${TABLE}.Intent_Key ;;
  }

  dimension : is_aht_calculated {
    type: string
    sql: CASE
          WHEN ${TABLE}.Is_AHT_Calculated = 'true' THEN 'Yes'
          WHEN ${TABLE}.Is_AHT_Calculated = 'false' THEN 'No' ELSE NULL END ;;
    label: "AHT Calculated"
  }

  dimension: no_reference_reason {
    label: "No Reference Reason"
    type: string
    sql: CASE
           WHEN ${TABLE}.No_Reference_Reason = 'Not applicable' THEN 'Not applicable'
           WHEN ${TABLE}.No_Reference_Reason = 'Undetermined from multiple references' THEN 'Undetermined from multiple references'
           WHEN ${TABLE}.No_Reference_Reason = 'Customer unwilling to provide' THEN 'Customer unwilling to provide'
           WHEN ${TABLE}.No_Reference_Reason = 'Not yet available' THEN 'Not yet available'
           ELSE 'None' END ;;
    drill_fields: [drillfields*]

  }


# Below Parameter is to select channel Target selection for Target Values ##


  # parameter: channel_target_selection {

  #   label: "channel Target"
  #   description: "Used for Target channel filtering."
  #   type: string
  #   allowed_value: {
  #     label: "WEB"
  #     value: "WEB"
  #   }
  #   allowed_value: {
  #     label: "CHAT"
  #     value: "CHAT"
  #   }
  #   allowed_value: {
  #     label: "EMAIL"
  #     value: "EMAIL"
  #   }

  #   allowed_value: {
  #     label: "No Target"
  #     value: "No Target"
  #   }
  # }

  # dimension: target_dimension_for_CHAT {
  #   label: "Target Lines for Channel-chat"
  #   type: number
  #   sql: {% if average_handling_time._in_query%}
  #         case when ${of_service_kpi_target.kpi}="Average Handling Time" AND ${of_service_kpi_target.channel}="Chat"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% elsif AVG_FIRST_RESPONSE_TIME_NEW._in_query %}
  #         case when ${of_service_kpi_target.kpi}="First Response Time" AND ${of_service_kpi_target.channel}="Chat"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% elsif AVG_FIRST_CONTACT_RESOLUTION._in_query %}
  #         case when ${of_service_kpi_target.kpi}="First Contact Resolution" AND ${of_service_kpi_target.channel}="Chat"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% elsif Abandoned_ratio._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Abandoned Chat Ratio" AND ${of_service_kpi_target.channel}="Chat"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% elsif case_escalation_ratio._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Case Escalation" AND ${of_service_kpi_target.channel}="Chat"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% elsif customer_satisfaction_ratio_case_chat._in_query %}
  #         case when ${of_service_kpi_target.kpi}="CSAT" AND ${of_service_kpi_target.channel}="Chat"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% elsif deflection_ratio._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Chat + Web Form Usage" AND ${of_service_kpi_target.channel}="Chat"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% endif %};;
  #   hidden: yes
  # }

  # measure: target_measure_for_CHAT {
  #   type: number
  #   sql: sum(${target_dimension_for_CHAT})/count(${target_dimension_for_CHAT});;
  #   hidden: yes
  # }

  # dimension: target_dimension_for_WEB {

  #   label: "Target Lines for Channel-WEB"
  #   type: number
  #   sql: {% if average_handling_time._in_query%}
  #         case when ${of_service_kpi_target.kpi}="Average Handling Time" AND ${of_service_kpi_target.channel}="Web"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% elsif AVG_FIRST_RESPONSE_TIME_NEW._in_query %}
  #         case when ${of_service_kpi_target.kpi}="First Response Time" AND ${of_service_kpi_target.channel}="Web"  then
  #         {% if of_service_kpi_target.units=="Hrs" %}${of_service_kpi_target.kpi_value}*60
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% elsif AVG_FIRST_CONTACT_RESOLUTION._in_query %}
  #         case when ${of_service_kpi_target.kpi}="First Contact Resolution" AND ${of_service_kpi_target.channel}="Web"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% elsif Abandoned_ratio._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Abandoned Chat Ratio" AND ${of_service_kpi_target.channel}="Web"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% elsif case_escalation_ratio._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Case Escalation" AND ${of_service_kpi_target.channel}="Web"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% elsif customer_satisfaction_ratio_case_chat._in_query %}
  #         case when ${of_service_kpi_target.kpi}="CSAT" AND ${of_service_kpi_target.channel}="Web"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% elsif deflection_ratio._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Chat + Web Form Usage" AND ${of_service_kpi_target.channel}="Web"  then
  #         {% if of_service_kpi_target.units=="%" %}${of_service_kpi_target.kpi_value}/100
  #         {% else %} ${of_service_kpi_target.kpi_value}
  #         {% endif %}
  #         end
  #         {% endif %};;
  #   hidden: yes
  # }

  # measure: target_measure_for_WEB {
  #   type: number
  #   sql: sum(${target_dimension_for_WEB})/count(${target_dimension_for_WEB});;
  #   hidden: yes
  # }

  # # Helen
  # measure: target_measure_for_WEB2 {
  #   label: "Web Target"
  #   type: max
  #   sql:  ${target_dimension_for_WEB};;
  #   filters: [origin: "Web"]
  # }
  # measure: target_measure_for_Chat2 {
  #   label: "Chat Target"
  #   type: max
  #   sql:  ${target_dimension_for_CHAT};;
  #   filters: [origin: "Chat"]
  # }

  # # End

  # dimension: target_dimension_for_EMAIL{
  #   label: "Target Lines for Channel- EMail"
  #   type: number
  #   sql: {% if average_handling_time._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Average Handling Time" AND ${of_service_kpi_target.channel}="Email"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% elsif AVG_FIRST_RESPONSE_TIME_NEW._in_query %}
  #         case when ${of_service_kpi_target.kpi}="First Response Time" AND ${of_service_kpi_target.channel}="Email"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% elsif AVG_FIRST_CONTACT_RESOLUTION._in_query %}
  #         case when ${of_service_kpi_target.kpi}="First Contact Resolution" AND ${of_service_kpi_target.channel}="Email"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% elsif Abandoned_ratio._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Abandoned Chat Ratio" AND ${of_service_kpi_target.channel}="Email"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% elsif case_escalation_ratio._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Case Escalation" AND ${of_service_kpi_target.channel}="Email"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% elsif customer_satisfaction_ratio_case_chat._in_query %}
  #         case when ${of_service_kpi_target.kpi}="CSAT" AND ${of_service_kpi_target.channel}="Email"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% elsif deflection_ratio._in_query %}
  #         case when ${of_service_kpi_target.kpi}="Chat + Web Form Usage" AND ${of_service_kpi_target.channel}="Email"  then ${of_service_kpi_target.kpi_value}
  #         end
  #         {% endif %}
  #         ;;
  #   hidden: yes
  # }


  # measure: target_measure_for_EMAIL {
  #   label: "reference line email"
  #   type: number
  #   sql: sum(${target_dimension_for_EMAIL})/count(${target_dimension_for_EMAIL});;
  #   hidden: yes
  # }

  #DCN-973/977: including target line
  dimension: kpi_in_query {
    type: string
    sql: CASE WHEN {% if of_case.AVG_FIRST_RESPONSE_TIME_NEW._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'First Response Time'
                    WHEN {% if of_case.Achieved_FRT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'First Response Time'
                    WHEN {% if of_case.AVG_FIRST_CONTACT_RESOLUTION._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'First Contact Resolution'
                    WHEN {% if of_case.case_escalation_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Case Escalation'
                    WHEN {% if of_case.average_handling_time._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Average Handling Time'
                    WHEN {% if of_case.Achieved_AHT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Average Handling Time'
                    WHEN {% if of_case.Abandoned_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Abandoned Chat Ratio'
                    WHEN {% if of_case.customer_satisfaction_ratio_case_chat._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'CSAT'
                    WHEN {% if of_case.deflection_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Chat + Web Form Usage'
                    ELSE null END
          ;;
  }

  measure: target_for_chat {
    label: "Chat Target"
    type: max
    sql:
        CASE  WHEN {% if of_case.Achieved_FRT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 0.9
              WHEN {% if of_case.Achieved_AHT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 0.9
              WHEN ${is_channel_filter} = true
              THEN (
                    CASE WHEN ${of_service_kpi_target.units} = '%'
                         THEN ${of_service_kpi_target.kpi_value}/100
                    ELSE ${of_service_kpi_target.kpi_value} END
                   )
              ELSE NULL END
        ;;
    filters: [origin: "Chat"]
  }

  measure: target_for_web {
    label: "Web Target"
    type: max
    sql:
        CASE  WHEN {% if of_case.Achieved_FRT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 0.9
              WHEN {% if of_case.Achieved_AHT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 0.9
              WHEN ${is_channel_filter} = true
              THEN (
                    CASE
                         WHEN ${of_service_kpi_target.units} = '%'
                          THEN ${of_service_kpi_target.kpi_value}/100
                      ELSE ${of_service_kpi_target.kpi_value} END
                   )
              ELSE NULL END
        ;;
    filters: [origin: "Web"]
  }

  measure: target_for_ChatWeb_Form_Usage {
    label: "Chat+Web Form Usage Target"
    type: max
    sql:

        CASE WHEN ${of_service_kpi_target.units} = '%'
        THEN ${of_service_kpi_target.kpi_value}/100
        ELSE ${of_service_kpi_target.kpi_value} END
        ;;
    filters: [origin: "Chat, Web"]
  }

  dimension: is_channel_filter  {
    type: yesno
    sql: {{ of_case.origin._is_filtered }}  ;;
  }

  ############## DCN-1004 Target-bar-and-Target-Achievement ##########################

  dimension: Average_Chat_Handling_Time {
    label: "Avg Chat Handling Time"
    type: number
    sql: ${TABLE}.Average_Chat_Handle_Time ;;
  }

  dimension: HANDLE_TIME_MINS {
    type: number
    label: "AHT mins (case/chat)"
    description: "Identifies Handle time for case & chat"
    sql: CASE WHEN {% parameter handletime_Param %}= "Case Level"
                THEN CAST(${TABLE}.Case_Handle_Time_Minutes as float64)
              WHEN {% parameter handletime_Param %}= "Chat Transcript"
                THEN CAST(${TABLE}.Average_Chat_Handle_Time as float64)
          ELSE null
          END;;
  }

  measure: Achieved_AHT_ratio {
    label: "Achieved AHT ratio"
    type: average
    sql: CASE WHEN ${HANDLE_TIME_MINS} = 0
                    THEN NULL
              WHEN ${HANDLE_TIME_MINS} <= ${of_service_kpi_target.kpi_value}
                    THEN 1
              WHEN ${HANDLE_TIME_MINS} > ${of_service_kpi_target.kpi_value}
                    THEN 0
                    ELSE NULL
                    END;;
    value_format_name: percent_0
    sql_distinct_key: ${of_case.oneforce_id} ;;
    filters: [origin: "Web,Chat", HANDLE_TIME_MINS: "NOT NULL"]
    drill_fields: [casenumber,Achieved_AHT_ratio]
  }

  dimension: Average_Chat_First_Response_Time_Minutes{
    label: "FRT Chat"
    type: number
    sql:  ${TABLE}.Avg_Chat_First_Response_Time_Minutes ;;
  }

  dimension: FIRST_RESPONSE_TIME_MINS {
    type: number
    label: "FRT mins (case/chat)"
    description: "Identifies First response time for case & chat"
    sql: CASE WHEN {% parameter responsetime_Param %}= "Case Level"
                THEN ${TABLE}.First_Response_Time_Minutes
              WHEN {% parameter responsetime_Param %}= "Chat Transcript"
                THEN ${TABLE}.Avg_Chat_First_Response_Time_Minutes
          ELSE null
          END;;
  }

  measure: Achieved_FRT_ratio {
    label: "Achieved FRT ratio"
    type: average
    sql: CASE WHEN ${FIRST_RESPONSE_TIME_MINS} = 0
                    THEN NULL
              WHEN ${FIRST_RESPONSE_TIME_MINS} <= ${of_service_kpi_target.kpi_value}
                    THEN 1
              WHEN ${FIRST_RESPONSE_TIME_MINS} > ${of_service_kpi_target.kpi_value}
                    THEN 0
                    ELSE null
                    END;;
    value_format_name: percent_0
    sql_distinct_key: ${of_case.oneforce_id} ;;
    filters: [origin: "Web,Chat", FIRST_RESPONSE_TIME_MINS: "NOT NULL"]
    drill_fields: [casenumber,Achieved_FRT_ratio]
  }
############## DCN-1067 Freeze the Chart Format to follow RHQ Selection ##########################
  dimension: Case_Geo_C_W_Usage {
    group_label: "Office Hierarchy"
    label: "Case Geography Chat + WebForm Usage"
    type: string
    sql: CASE
          WHEN {% parameter Geo_Param %} = "RHQ" THEN ${Regional_Head_Office}
          WHEN {% parameter Geo_Param %} = "Cluster Country" THEN ${case_country}
          WHEN {% parameter Geo_Param %} = "Individual Country" THEN ${country}
          WHEN {% parameter Geo_Param %} = "Office" THEN ${office}
          WHEN {% parameter Geo_Param %} = "Channel" THEN ${Regional_Head_Office}
          WHEN {% parameter Geo_Param %} = "Segment" THEN ${customer_segment_number}
          WHEN {% parameter Geo_Param %} = "Segment " THEN ${of_customer_group.key_acct_tp_cd}
          WHEN {% parameter Geo_Param %} = "Agent Role" THEN ${case_owner.profile_name_service}
          WHEN {% parameter Geo_Param %} = "Escalation Role" THEN ${Regional_Head_Office}
          WHEN {% parameter Geo_Param %} = "Office Type" THEN ${Regional_Head_Office}
          WHEN {% parameter Geo_Param %} = "Service Type" THEN ${Regional_Head_Office}
          ELSE "Global" END;;
    drill_fields: [drillfields*]
  }
############## DCN-1038 Change CSAT in CCA Analysis to Include All Channels ##########################
  parameter: Volume_per_Agent_Param {
    type: unquoted
    allowed_value: {
      label: "Case Level"
      value: "CaseLevel"
    }
    allowed_value: {
      label: "Chat Transcript"
      value: "ChatTranscript"
    }
  }
  dimension: Volume_per_Agent_sql_distinct_key {
    type: string
    label: "SQL Distinct Key for AHT"
    sql: case when "{% parameter Volume_per_Agent_Param %}"= "CaseLevel" then
          ${of_case.oneforce_id}
          when "{% parameter Volume_per_Agent_Param %}"= "ChatTranscript"  then
          ${of_case.oneforce_id}||${of_case.origin}||${of_chat_transcript.oneforce_id}
          end;;
  }
  dimension: Case_Chat_Owner {
    label: "{% if Volume_per_Agent_Param._parameter_value == 'ChatTranscript' %} Chat Owner
    {% else %} Case Owner {% endif %}"
    type: string
    sql: CASE WHEN "{% parameter Volume_per_Agent_Param %}"= "CaseLevel"
                THEN ${case_owner.name}
              WHEN "{% parameter Volume_per_Agent_Param %}"= "ChatTranscript"
                THEN ${ct_owner.name}
          ELSE null
          END ;;
  }
  measure: Case_Chat_Volume {
    label: "{% if Volume_per_Agent_Param._parameter_value == 'ChatTranscript' %} Chat Volume
    {% else %} Case Volume {% endif %}"
    type: count_distinct
    sql: CASE WHEN "{% parameter Volume_per_Agent_Param %}"= "CaseLevel"
                THEN ${oneforce_id}
              WHEN "{% parameter Volume_per_Agent_Param %}"= "ChatTranscript"
                THEN ${of_chat_transcript.oneforce_id}
          ELSE null
          END ;;
    value_format_name: decimal_0
    sql_distinct_key: ${Volume_per_Agent_sql_distinct_key} ;;
  }
  measure: Case_Chat_Response_Time{
    label: "{% if Volume_per_Agent_Param._parameter_value == 'ChatTranscript' %} Chat Avg Agent Response Time(in Secs)
    {% else %} Case Avg Response Time(in Mins) {% endif %}"
    type: average
    sql: CASE WHEN "{% parameter Volume_per_Agent_Param %}"= "CaseLevel"
                THEN ${Case_First_Response_Time_Minutes}
              WHEN "{% parameter Volume_per_Agent_Param %}"= "ChatTranscript"
                THEN ${of_chat_transcript.average_response_time_operator}
          ELSE null
          END ;;
    value_format_name: decimal_1
    sql_distinct_key: ${Volume_per_Agent_sql_distinct_key} ;;
  }
  measure: Case_Chat_Handle_Time{
    label: "{% if Volume_per_Agent_Param._parameter_value == 'ChatTranscript' %} Chat Handle Time(in Mins)
    {% else %} Case Handle Time(in Mins) {% endif %}"
    type: average
    sql: CASE WHEN "{% parameter Volume_per_Agent_Param %}"= "CaseLevel"
                THEN ${case_handling_time_new}
              WHEN "{% parameter Volume_per_Agent_Param %}"= "ChatTranscript"
                THEN ${of_chat_transcript.chat_handle_time}
          ELSE null
          END ;;
    value_format_name: decimal_1
    sql_distinct_key: ${Volume_per_Agent_sql_distinct_key} ;;
  }
  measure: Case_Chat_Good_Rating {
    label: "{% if Volume_per_Agent_Param._parameter_value == 'ChatTranscript' %} Chat CSAT Good Rating %
    {% else %} Case CSAT Good Rating % {% endif %}"
    type: average
    sql: CASE WHEN "{% parameter Volume_per_Agent_Param %}"= "CaseLevel"
                THEN
                    (CASE
                      WHEN ${case_rating} = "Good" THEN 1
                      WHEN ${case_rating} = "Bad"  THEN 0
                     ELSE NULL
                     END)
              WHEN "{% parameter Volume_per_Agent_Param %}"= "ChatTranscript"
                THEN
                    (CASE
                      WHEN ${of_chat_transcript.chat_case_rating} = "Good" THEN 1
                      WHEN ${of_chat_transcript.chat_case_rating} = "Bad"  THEN 0
                     ELSE NULL
                     END)
          ELSE null
          END ;;
    value_format_name: percent_0
    sql_distinct_key: ${Volume_per_Agent_sql_distinct_key} ;;
  }

##### DCN-1099: Create 3 charts in Case Analysis tab in Looker Dashboard #####
  parameter: Transferred_chat_case_Param {
    type: string
    allowed_value: {
      label: "User Office"
      value: "User Office"
    }
    allowed_value: {
      label: "User"
      value: "Transfer by"
    }
    allowed_value: {
      label: "Reason"
      value: "Transfer Reason"
    }
  }
  dimension: Transferred_chat_case_Dynamic {
    type: string
    sql: CASE WHEN {% parameter Transferred_chat_case_Param %} = "User Office"
              THEN ${first_case_transfer_history.Transfer_by_office}
              WHEN {% parameter Transferred_chat_case_Param %} = "Transfer by"
              THEN ${first_case_transfer_history.Transfer_by_name}
              WHEN {% parameter Transferred_chat_case_Param %} = "Transfer Reason"
              THEN ${first_case_transfer_history.Transfer_Reason}
              ELSE NULL
              END
              ;;
  }
  measure: Transferred_Case_count_distinct {
    label: "Transferred Case Distinct Count"
    type: count_distinct
    sql: ${oneforce_id};;
    filters: [is_transfer: "true"]
    drill_fields: [detail*]
  }

##### DCN-1093: Create 2 charts 1) On-Hold Cases by Location and 2) On-Hold Cases by Sub-Category #####
  dimension: No_of_Times_Case_On_Hold {
    type: number
    sql: ${TABLE}.No_of_Times_Case_On_Hold ;;
  }
  dimension: On_Hold_Reason {
    type: string
    sql: ${TABLE}.On_Hold_Reason ;;
  }
  dimension_group: On_hold_Start_Date_Time {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.On_hold_Start_Date_Time ;;
    label: "On hold Start Date Time"
  }
  dimension_group: On_hold_End_Date_Time {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.On_hold_End_Date_Time ;;
    label: "On hold End Date Time"
  }
  dimension: On_Hold_Status_Time_Mins {
    type: number
    sql: ${TABLE}.On_Hold_Status_Time_Mins ;;
  }
  dimension: Is_On_Hold {
    type: string
    sql: CASE WHEN ${status} = "Closed" AND ${No_of_Times_Case_On_Hold} > 0  THEN "On-Hold Cases"
              WHEN ${status} = "Closed" AND coalesce(${No_of_Times_Case_On_Hold},0) =  0  THEN "Non On-Hold Cases"
         ELSE NULL END;;
  }
  dimension_group: On_hold_chart_date {
    label: "Date for on-hold chart"
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: CASE WHEN ${Is_On_Hold} = "On-Hold Cases" THEN ${TABLE}.On_hold_Start_Date_Time
              ELSE ${TABLE}.CreatedDate END
              ;;
  }

############## Create Charts : FRT in CCA Analysis tab and AHT in Average Handling Time tab in Looker Dashboard ##########################
  dimension: FRT_chat_tier {
    type: tier
    sql:
       CASE WHEN ${of_chat_transcript.Chat_First_Response_Time_Mins} > 0 then ${of_chat_transcript.Chat_First_Response_Time_Mins} * 60 else null end;;
    tiers: [0.1,30.1,60.1,120.1,180.1,240.1]
    style: relational
  }

  dimension: FRT_web_tier {
    type: tier
    sql:
       CASE WHEN ${origin} = 'Web' then ${TABLE}.First_Response_Time_Minutes else null end;;
    tiers: [0.1,60.1,120.1,180.1,240.1,300.1]
    style: relational
  }

  parameter: FRT_selector {
    allowed_value: {
      label: "Chat"
      value: "Chat"
    }
    allowed_value: {
      label: "Web"
      value: "Web"
    }
  }

  dimension: dynamic_FRT_tier {
    type: string
    sql: CASE WHEN {% parameter FRT_selector %}= "Chat" THEN ${FRT_chat_tier}
              WHEN {% parameter FRT_selector %}= "Web" THEN ${FRT_web_tier}
              ELSE null END
    ;;
    order_by_field: dynamic_FRT_for_order
  }

  dimension: dynamic_FRT_for_order {
    type: number
    hidden: yes
    sql:
    CASE WHEN {% parameter FRT_selector %}= "Chat" THEN
    (CASE
      WHEN ${dynamic_FRT_tier} = ">= 0.1 and < 30.1" THEN 1
      WHEN ${dynamic_FRT_tier} = ">= 30.1 and < 60.1" THEN 2
      WHEN ${dynamic_FRT_tier} = ">= 60.1 and < 120.1" THEN 3
      WHEN ${dynamic_FRT_tier} = ">= 120.1 and < 180.1" THEN 4
      WHEN ${dynamic_FRT_tier} = ">= 180.1 and < 240.1" THEN 5
      WHEN ${dynamic_FRT_tier} = ">= 240.1" THEN 6 ELSE NULL END
    )
        WHEN {% parameter FRT_selector %}= "Web" THEN
    (CASE
      WHEN ${dynamic_FRT_tier} = ">= 0.1 and < 60.1" THEN 1
      WHEN ${dynamic_FRT_tier} = ">= 60.1 and < 120.1" THEN 2
      WHEN ${dynamic_FRT_tier} = ">= 120.1 and < 180.1" THEN 3
      WHEN ${dynamic_FRT_tier} = ">= 180.1 and < 240.1" THEN 4
      WHEN ${dynamic_FRT_tier} = ">= 240.1 and < 300.1" THEN 5
      WHEN ${dynamic_FRT_tier} = ">= 300.1" THEN 6 ELSE NULL END
    ) ELSE null END;;
  }

  measure: FRT_tier_count {
    type: count_distinct
    sql: CASE WHEN {% parameter FRT_selector %}= "Chat" THEN ${of_chat_transcript.oneforce_id}
              WHEN {% parameter FRT_selector %}= "Web" THEN ${oneforce_id}
              ELSE NULL END;;
    drill_fields: [details1*]
    link: {
      label: "By RHQ"
      url: "{{ FRT_count_by_RHQ._link }}"
    }
    link: {
      label: "By Country"
      url: "{{ FRT_count_by_Country._link }}"
    }
    link: {
      label: "By Status"
      url: "{{ FRT_count_by_Status._link }}"
    }
    link: {
      label: "By Office"
      url: "{{ FRT_count_by_Office._link }}"
    }
    link: {
      label: "By Channel"
      url: "{{ FRT_count_by_Channel._link }}"
    }
    link: {
      label: "By Customer"
      url: "{{ FRT_count_by_Customer._link }}"
    }
    link: {
      label: "By case_age_group"
      url: "{{ FRT_count_by_case_age_group._link }}"
    }
    link: {
      label: "By case_owner_name"
      url: "{{ FRT_count_by_case_owner_name._link }}"
    }
    link: {
      label: "By Priority"
      url: "{{ FRT_count_by_Priority._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ FRT_count_by_Customer_Group._link }}"
    }

    link: {
      label: "By L2 Intent"
      url: "{{ FRT_count_by_L2_Intent._link }}"
    }
    link: {
      label: "By L3 Intent"
      url: "{{ FRT_count_by_L3_Intent._link }}"
    }
    link: {
      label: "By Open Date Month"
      url: "{{ FRT_count_by_Open_Date_Month._link }}"
    }

    link: {
      label: "By Initial Queue Name"
      url: "{{ FRT_count_by_Initial_Queue_Name._link }}"
    }

    link: {
      label: "By Contact Name"
      url: "{{ FRT_count_by_name._link }}"
    }

    link: {
      label: "By Contact Email"
      url: "{{ FRT_count_by_contactemail._link }}"
    }

    link: {
      label: "By eComm ID"
      url: "{{ FRT_count_by_ecomm_id._link }}"
    }
  }

  measure: FRT_count_by_RHQ {
    type: count
    drill_fields: [ Regional_Head_Office,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_case_age_group {
    type: count
    drill_fields: [ case_age_group,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_Status {
    type: count
    drill_fields: [ status,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_case_owner_name {
    type: count
    drill_fields: [ case_owner_name,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_Priority {
    type: count
    drill_fields: [ priority,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_Country {
    type: count
    drill_fields: [ case_country,FRT_tier_count]
    hidden: yes
  }

  measure: FRT_count_by_Office {
    type: count
    drill_fields: [ case_office_code,FRT_tier_count]
    hidden: yes
  }

  measure: FRT_count_by_Channel {
    type: count
    drill_fields: [origin ,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_Customer_Group{
    type: count
    drill_fields: [ of_customer_group.cust_grp_and_name,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_Customer {
    type: count
    drill_fields: [ of_customer.customer_cd_and_name,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_L2_Intent {
    type: count
    drill_fields: [ sub_category_l2,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_L3_Intent {
    type: count
    drill_fields: [ subordinate_category_l3,FRT_tier_count]
    hidden: yes
  }
  measure: FRT_count_by_Open_Date_Month {
    type: count
    drill_fields: [createddate_month ,FRT_tier_count]
    hidden: yes
  }

  measure: FRT_count_by_Initial_Queue_Name {
    type: count
    drill_fields: [Initial_Queue_Name,FRT_tier_count]
    hidden: yes
  }

  measure: FRT_count_by_name  {
    type: count
    drill_fields: [of_contact.name, FRT_tier_count]
    hidden: yes
  }

  measure: FRT_count_by_contactemail  {
    type: count
    drill_fields: [contactemail, FRT_tier_count]
    hidden: yes
  }

  measure: FRT_count_by_ecomm_id {
    type: count
    drill_fields: [ ecomm_id,FRT_tier_count]
    hidden: yes
  }

  dimension: AHT_chat_tier {
    type: tier
    sql:
       CASE WHEN ${origin} = 'Chat' then ${case_handle_time_minutes} else null end;;
    tiers: [0.1,8.1,10.1,20.1,30.1]
    style: relational
  }

  dimension: AHT_web_tier {
    type: tier
    sql:
       CASE WHEN ${origin} = 'Web' then ${case_handle_time_minutes} else null end;;
    tiers: [0.1,120.1,180.1,240.1,300.1]
    style: relational
  }

  parameter: AHT_selector {
    allowed_value: {
      label: "Chat"
      value: "Chat"
    }
    allowed_value: {
      label: "Web"
      value: "Web"
    }
  }

  dimension: dynamic_AHT_tier {
    type: string
    sql: CASE WHEN {% parameter AHT_selector %}= "Chat" THEN ${AHT_chat_tier}
          WHEN {% parameter AHT_selector %}= "Web" THEN ${AHT_web_tier}
          ELSE null END
          ;;
    order_by_field: dynamic_AHT_for_order
  }

  dimension: dynamic_AHT_for_order {
    hidden: yes
    type: number
    sql: CASE WHEN ${dynamic_AHT_tier} = ">= 0.1 and < 8.1" or ${dynamic_AHT_tier} = ">= 0.1 and < 120.1" THEN 1
              WHEN ${dynamic_AHT_tier} = ">= 8.1 and < 10.1" or ${dynamic_AHT_tier} = ">= 120.1 and < 180.1" THEN 2
              WHEN ${dynamic_AHT_tier} = ">= 10.1 and < 20.1" or ${dynamic_AHT_tier} = ">= 180.1 and < 240.1" THEN 3
              WHEN ${dynamic_AHT_tier} = ">= 20.1 and < 30.1" or ${dynamic_AHT_tier} = ">= 240.1 and < 300.1" THEN 4
              WHEN ${dynamic_AHT_tier} = ">= 30.1" or ${dynamic_AHT_tier} = ">= 300.1" THEN 5
              ELSE NULL END;;
  }

  measure: AHT_tier_count {
    type: count_distinct
    sql: ${casenumber};;
    drill_fields: [details1*]
    link: {
      label: "By RHQ"
      url: "{{ AHT_count_by_RHQ._link }}"
    }
    link: {
      label: "By Country"
      url: "{{ AHT_count_by_Country._link }}"
    }
    link: {
      label: "By Status"
      url: "{{ AHT_count_by_Status._link }}"
    }
    link: {
      label: "By Office"
      url: "{{ AHT_count_by_Office._link }}"
    }
    link: {
      label: "By Channel"
      url: "{{ AHT_count_by_Channel._link }}"
    }
    link: {
      label: "By Customer"
      url: "{{ AHT_count_by_Customer._link }}"
    }
    link: {
      label: "By case_age_group"
      url: "{{ AHT_count_by_case_age_group._link }}"
    }
    link: {
      label: "By case_owner_name"
      url: "{{ AHT_count_by_case_owner_name._link }}"
    }
    link: {
      label: "By Priority"
      url: "{{ AHT_count_by_Priority._link }}"
    }
    link: {
      label: "By Customer Group"
      url: "{{ AHT_count_by_Customer_Group._link }}"
    }

    link: {
      label: "By L2 Intent"
      url: "{{ AHT_count_by_L2_Intent._link }}"
    }
    link: {
      label: "By L3 Intent"
      url: "{{ AHT_count_by_L3_Intent._link }}"
    }
    link: {
      label: "By Open Date Month"
      url: "{{ AHT_count_by_Open_Date_Month._link }}"
    }

    link: {
      label: "By Initial Queue Name"
      url: "{{ AHT_count_by_Initial_Queue_Name._link }}"
    }

    link: {
      label: "By Contact Name"
      url: "{{ AHT_count_by_name._link }}"
    }

    link: {
      label: "By Contact Email"
      url: "{{ AHT_count_by_contactemail._link }}"
    }

    link: {
      label: "By eComm ID"
      url: "{{ AHT_count_by_ecomm_id._link }}"
    }
  }

  measure: AHT_count_by_RHQ {
    type: count
    drill_fields: [ Regional_Head_Office,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_case_age_group {
    type: count
    drill_fields: [ case_age_group,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_Status {
    type: count
    drill_fields: [ status,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_case_owner_name {
    type: count
    drill_fields: [ case_owner_name,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_Priority {
    type: count
    drill_fields: [ priority,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_Country {
    type: count
    drill_fields: [ case_country,AHT_tier_count]
    hidden: yes
  }

  measure: AHT_count_by_Office {
    type: count
    drill_fields: [ case_office_code,AHT_tier_count]
    hidden: yes
  }

  measure: AHT_count_by_Channel {
    type: count
    drill_fields: [origin ,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_Customer_Group{
    type: count
    drill_fields: [ of_customer_group.cust_grp_and_name,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_Customer {
    type: count
    drill_fields: [ of_customer.customer_cd_and_name,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_L2_Intent {
    type: count
    drill_fields: [ sub_category_l2,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_L3_Intent {
    type: count
    drill_fields: [ subordinate_category_l3,AHT_tier_count]
    hidden: yes
  }
  measure: AHT_count_by_Open_Date_Month {
    type: count
    drill_fields: [createddate_month ,AHT_tier_count]
    hidden: yes
  }

  measure: AHT_count_by_Initial_Queue_Name {
    type: count
    drill_fields: [Initial_Queue_Name,AHT_tier_count]
    hidden: yes
  }

  measure: AHT_count_by_name  {
    type: count
    drill_fields: [of_contact.name, AHT_tier_count]
    hidden: yes
  }

  measure: AHT_count_by_contactemail  {
    type: count
    drill_fields: [contactemail, AHT_tier_count]
    hidden: yes
  }

  measure: AHT_count_by_ecomm_id {
    type: count
    drill_fields: [ ecomm_id,AHT_tier_count]
    hidden: yes
  }

### DDCN-1152-Create-a-chart-in-CCA-Analysis-to-show-AHT-and-Waiting-time-of-On-Hold-Cases

  measure: on_hold_wait_time {
    type: average
    sql: ${On_Hold_Status_Time_Mins} ;;
    filters: [Is_On_Hold: "On-Hold Cases"]
    value_format_name: decimal_1
  }

  measure: non_on_hold_time {
    label: "Non-On Hold Time"
    type: average
    sql: CASE WHEN (${createddate_filter_date}<date(2023,01,01) ) THEN ${Case_Handle_Time_excl_Internal_mins}
              ELSE ${case_handling_time_new}
              END;;
    filters: [Is_On_Hold: "On-Hold Cases"]
    value_format_name: decimal_1
  }

  measure: total_handling_time {
    type: average
    sql: ${On_Hold_Status_Time_Mins} + (CASE WHEN (${createddate_filter_date}<date(2023,01,01) ) THEN ${Case_Handle_Time_excl_Internal_mins} ELSE ${case_handling_time_new} END) ;;
    filters: [Is_On_Hold: "On-Hold Cases"]
    value_format_name: decimal_1
  }

}

view: of_case_history {
  sql_table_name: `ONEFORCE.OF_CASE_HISTORY`
    ;;

  dimension: case_id {
    type: string
    sql: ${TABLE}.CaseId ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: data_type {
    type: string
    sql: ${TABLE}.DataType ;;
  }

  dimension_group: edw_upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.EDW_UPD_DT ;;
  }

  dimension: field {
    type: string
    sql: ${TABLE}.Field ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: new_value {
    type: string
    sql: ${TABLE}.NewValue ;;
  }

  dimension: old_value {
    type: string
    sql: ${TABLE}.OldValue ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_Id ;;
  }

  dimension: status_case_Analysis {
    type: string
    sql: (CASE WHEN ${field} is not null  THEN 'Yes' ELSE 'No' END)   ;;
    label: "status Case Analysis Filter"
  }

  measure: count {
    type: count
    drill_fields: []
  }
}

view: of_case_history_owner {


  derived_table: {
    sql:
      SELECT O.CASEID,O.NEWVALUE AS OWNER,
      O.CREATEDDATE AS STARTDATE,
      DATETIME_ADD((SELECT COALESCE( Min(I.CREATEDDATE),DATETIME('2099-12-31'))
          from  ${of_case_history.SQL_TABLE_NAME}  I
          where I.CASEID=O.CASEID AND I.Field='Owner' and I.DATATYPE='EntityId'
          and I.CREATEDDATE>O.CREATEDDATE )
          ,INTERVAL -1 Second)  AS ENDDATE
      FROM ${of_case_history.SQL_TABLE_NAME}  O
      where O.Field='Owner' and O.DATATYPE='EntityId'
      union all
      --To include First Record
      SELECT CASEID,OWNER,CREATEDDATE,ENDDATE
      FROM(
          SELECT C.ONEFORCE_ID AS CASEID,
          COALESCE(O.OLDVALUE,c.OWNERID) as OWNER,
          C.CREATEDDATE,
          COALESCE( DATETIME_ADD(O.CREATEDDATE,INTERVAL -1 Second),DATETIME('2099-12-31')) AS ENDDATE,
          rank() over(partition by O.caseid order by O.createddate) R
          FROM   ${of_case.SQL_TABLE_NAME} C
          LEFT JOIN  ${of_case_history.SQL_TABLE_NAME} O
          On C.ONEFORCE_ID=O.CASEID AND O.Field='Owner' and O.DATATYPE='EntityId'
      ) x
      where R=1
    ;;
  }

  dimension: case_id {
    hidden: yes
    type: string
    sql: ${TABLE}.CASEID;;
    primary_key: yes
  }

  dimension: owner {
    type: string
    sql: ${TABLE}.OWNER;;
    hidden: yes
  }

  dimension: owner_type {
    label: "Owner Type"
    type: string
    sql: CASE WHEN ${of_case_history_queue_name.developer_name} is NULL THEN 'Individual' ELSE 'Queue' END;;
  }

  dimension: owner_name {
    label: "Owner Name"
    type: string
    sql: CASE WHEN ${of_case_history_queue_name.developer_name}  is NULL THEN ${of_case_history_user_name.name}  ELSE ${of_case_history_queue_name.developer_name} END;;
  }

  dimension_group: start_date {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.STARTDATE;;
    label:"Start Date"
  }

  dimension_group: end_date {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ENDDATE;;
    label:"End Date"
  }
}

view: of_case_history_status {

  derived_table: {
    sql:
      SELECT O.CASEID,O.NEWVALUE AS STATUS,
      O.CREATEDDATE AS STARTDATE,
      DATETIME_ADD((SELECT COALESCE( Min(I.CREATEDDATE),DATETIME('2099-12-31'))
          from  ${of_case_history.SQL_TABLE_NAME}  I
          where I.CASEID=O.CASEID AND I.Field='Status'
          and I.CREATEDDATE>O.CREATEDDATE )
          ,INTERVAL -1 Second)  AS ENDDATE
      FROM ${of_case_history.SQL_TABLE_NAME}  O
      where O.Field='Status'
      union all
      --To include First Record
      SELECT CASEID,STATUS,CREATEDDATE,ENDDATE
      FROM(
          SELECT C.ONEFORCE_ID AS CASEID,
          COALESCE(O.OLDVALUE,c.STATUS) as STATUS,
          C.CREATEDDATE,
          COALESCE( DATETIME_ADD(O.CREATEDDATE,INTERVAL -1 Second),DATETIME('2099-12-31')) AS ENDDATE,
          rank() over(partition by O.caseid order by O.createddate) R
          FROM   ${of_case.SQL_TABLE_NAME} C
          LEFT JOIN  ${of_case_history.SQL_TABLE_NAME} O
          On C.ONEFORCE_ID=O.CASEID AND O.Field='Status'
      ) x
      where R=1
    ;;
  }

  dimension: case_id {
    hidden: yes
    type: string
    sql: ${TABLE}.CASEID;;
  }

  dimension: status {
    type: string
    sql: ${TABLE}.STATUS;;
  }

  dimension_group: start_date {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.STARTDATE;;
    label:"Start Date"
  }

  dimension_group: end_date {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ENDDATE;;
    label:"End Date"
  }

}

#undo for rls
#view: of_case_pdt {
#  derived_table: {
#    sql:
#    SELECT
#    t1.ONEForce_Id,
#    t1.IsClosed,
#    t1.IsDeleted,
#    t1.LastModifiedDate,
#    t1.Amazon_Connect_Queue,
#    t1.Applicant_Email,
#    t1.Applicant_Name,
#    t1.Applicant_Party,
#    t1.Applicant_Phone_Number,
#    t1.Article_Recommendation_Reason,
#    t1.AssetId,
#    t1.Origin,
#    t1.Bill_of_Lading_Number,
#    t1.BKG_Office,
#    t1.Booking_Number,
#    t1.BusinessHoursId,
#    t1.Bypass_Validation_Rules,
#    t1.nfvoice_Voicemail_Callback_Phone,
#    t1.Cargo_Nature,
#    t1.Case_Age,
#    t1.CaseNumber,
#    t1.Case_Origin,
#    t1.OwnerId,
#    t1.Case_Rating,
#    t1.Reason,
#    t1.RecordTypeId,
#    t1.SourceId,
#    t1.Case_Sub_Reason,
#    t1.IsClosedOnCreate,
#    t1.Commodity,
#    t1.Company_Name,
#    t1.nfvoice_Voicemail_Contact_Attributes,
#    t1.ContactEmail,
#    t1.ContactFax,
#    t1.Contact_Id,
#    t1.ContactMobile,
#    t1.ContactId,
#    t1.ContactPhone,
#    t1.CreatedById,
#    t1.Customer_Code,
#    t1.AccountId,
#    t1.AssignedDate,
#    t1.ClosedDate,
#    t1.CreatedDate,
#    t1.DateTimeResolved,
#    t1.Description,
#    t1.eCommerce_UserID,
#    t1.EntitlementId,
#    t1.SlaExitDate,
#    t1.SlaStartDate,
#    t1.IsEscalated,
#    t1.Escalation_Reason,
#    t1.First_End_Status,
#    t1.First_End_Status_Time,
#    t1.First_Pending_Reason,
#    t1.First_Processor,
#    t1.First_Reply_Time,
#    t1.First_Restart_Time,
#    t1.Forwarder_Name,
#    t1.Fourth_End_Status,
#    t1.Fourth_End_Status_Time,
#    t1.Fourth_Processor,
#    t1.Comments,
#    t1.Internal_Correspondence,
#    t1.Case_Resolved,
#    t1.Is_Chat_Survey_Submitted,
#    t1.First_Time_Use_Chat,
#    t1.Is_Need_Get_Transcript,
#    t1.Language,
#    t1.LastModifiedById,
#    t1.MilestoneStatus,
#    t1.ParentId,
#    t1.PORT,
#    t1.Post_Reconciliation_Completed_with_biz,
#    t1.Priority,
#    t1.ProductId,
#    t1.Requestor_Type,
#    t1.Response_Flag,
#    t1.Response_Received,
#    t1.Revised_Destination,
#    t1.Second_End_Status,
#    t1.Second_End_Status_Time,
#    t1.Second_Pending_Reason,
#    t1.Second_Processor,
#    t1.Second_Reply_Time,
#    t1.Second_Restart_Time,
#    t1.Shipment_Number,
#    t1.Shipper_Name,
#    t1.Status,
#    t1.IsStopped,
#    t1.StopStartDate,
#    t1.Subject,
#    t1.Survey_Comment,
#    t1.Third_End_Status,
#    t1.Third_End_Status_Time,
#    t1.Third_Pending_Reason,
#    t1.Third_Processor,
#    t1.Third_Reply_Time,
#    t1.Third_Restart_Time,
#    t1.Training,
#    t1.Type,
#    t1.UniqueCaseKey,
#    t1.Voice_Call,
#    t1.nfvoice__Voicemail_Callback_Phone,
#    t1.nfvoice__Voicemail_Link,
#    t1.VVD,
#    t1.SuppliedCompany,
#    t1.SuppliedEmail,
#    t1.SuppliedName,
#    t1.SuppliedPhone,
#    t1.Calculated_Awaiting_Cust_Remind_Datetime,
#    t1.Calculated_Close_Date_Time,
#    t1.Calculated_Date_Time_for_ONE_Team,
#    t1.Case_Owner,
#    t1.Case_Owner_Role,
#    t1.Origin_Indicator,
#    t1.Claim_Amount,
#    t1.Container_Number,
#    t1.Contract_Customer_Name,
#    t1.Contract_Number,
#    t1.Customer_Info,
#    t1.Customer_Segment,
#    t1.Date_Time_Waiting_on_Customer_Response,
#    t1.Escalation_History,
#    t1.Escalated_By,
#    t1.Escalated_To,
#    t1.Escalation_Open_Date,
#    t1.Escalation_History_Reason,
#    t1.Escalation_Type,
#    t1.SuppliedFirstName,
#    t1.Is_Nurtured,
#    t1.SuppliedLastName,
#    t1.Office,
#    t1.Other_Reason,
#    t1.Other_Resolution_Reason,
#    t1.P_I_Claim_Number,
#    t1.Priority_Formula,
#    t1.Privacy_Policy_Consent,
#    t1.Reference_Number,
#    t1.Reference_Number_Type,
#    t1.Reference_Type,
#    t1.Resolution_Reason,
#    t1.Country,
#    t1.Sub_Category_L2,
#    t1.Subordinate_Category_L3,
#    t1.Subordinate_Category_L4,
#    t1.Support_Email_CC,
#    t1.Support_Email_TO,
#    t1.Total_Escalation,
#    t1.Transfer_Reason,
#    t1.Transfer_Reason_Others,
#    t1.Initial_Queue_Name,
#    t1.First_Response_Date_Time,
#    t1.First_Response_Time_Minutes,
#    t1.Case_Handle_Time_Minutes,
#    t1.Has_Leave_Message,
#    t1.Is_Chat_Self_Service,
#    t1.Sub_Resolution_Reason,
#    t1.Is_FCR,
#    t1.Case_Resolved_Date_Time,
#    t1.isWithInBusinessHour,
#    t1.Case_Net_Promoter_Score,
#    t1.Label,
#    t1.Is_Reopened,
#    t1.No_of_Times_Case_Reopen,
#    t1.Original_Record_Type,
#    t1.Contact_eComm_User_ID,
#    t1.Total_Transfer,
#    t1.IsTransfer,
#    t1.Customer_Abandoned_Chat,
#    t1.Intent_Key,
#    t1.Intent_Key_Without_Office_Code,
#    t1.Avg_Chat_First_Response_Time_Minutes,
#    t1.Awaiting_Customer_Response_Time_Mins,
#    t1.Is_AHT_Calculated,
#    t1.Average_Chat_Handle_Time,
#    t1.No_Reference_Reason,
#    t1.Is_Booking_Contract_No_Required,
#    t1.Case_Handle_Time_excl_Internal_Mins,
#    t2.Abandoned,
#    t2.AccountId as ct_AccountID,
#    t2.Additional_Requests,
#    t2.Agent_Accepted_First_Transfer,
#    t2.Agent_Chatting_Time_sec,
#    t2.AverageResponseTimeOperator,
#    t2.AverageResponseTimeVisitor,
#    t2.Body,
#    t2.Bot_Chatting_Time_sec,
#    t2.Bot_Initiated_Transfer,
#    t2.Bot_Transfer_Abandoned,
#    t2.Browser,
#    t2.BrowserLanguage,
#    t2.Calculated_Wait_Time_sec,
#    t2.Case_Number as ct_Case_Number,
#    t2.Case_Rating as ct_Case_Rating,
#    t2.CaseId,
#    t2.Chat_First_Queue_Name,
#    t2.Chat_First_Queue_Name_Detail,
#    t2.Chat_Log_Additional_Recipient,
#    t2.Chat_Log_Recipient,
#    t2.Chat_Preferred_Language,
#    t2.ChatDuration,
#    t2.ChatKey,
#    t2.CMS_SSO_Status,
#    t2.Company_Name as ct_Company_Name,
#    t2.Contact_Email,
#    t2.Contact_Name,
#    t2.ContactId as ct_ContactId,
#    t2.Corporate_Office,
#    t2.Country as ct_Country,
#    t2.CreatedById as ct_CreatedById,
#    t2.CreatedDate as ct_CreatedDate,
#    t2.Disable_One_Quote,
#    t2.eCommerce_UserID as ct_eCommerce_UserID,
#    t2.Email,
#    t2.EndedBy,
#    t2.EndTime,
#    t2.First_Name,
#    t2.First_Queue_Name,
#    t2.First_Resolved,
#    t2.HasLeaveMessage,
#    t2.intent,
#    t2.Intent_L1,
#    t2.Intent_L2,
#    t2.Intent_L3,
#    t2.Intent_L4,
#    t2.IpAddress,
#    t2.Is_Case_Closed,
#    t2.Is_Mobile,
#    t2.Is_Need_Get_Transcript as ct_Is_Need_Get_Transcript,
#    t2.Is_Nurtured as ct_Is_Nurtured,
#    t2.Is_Queue,
#    t2.IsChatbotSession,
#    t2.IsDeleted as ct_IsDeleted,
#    t2.Janrain_UUID,
#    t2.Language as ct_Language,
#    t2.Last_Name,
#    t2.LastModifiedById as ct_LastModifiedById,
#    t2.LastModifiedDate as ct_LastModifiedDate,
#    t2.LastReferencedDate,
#    t2.LastViewedDate,
#    t2.LeadId,
#    t2.LFD_Used,
#    t2.LiveChatButtonId,
#    t2.LiveChatDeploymentId,
#    t2.LiveChatVisitorId,
#    t2.Location,
#    t2.MaxResponseTimeOperator,
#    t2.MaxResponseTimeVisitor,
#    t2.Merged_D_D_Transferred,
#    t2.Merged_D_D_Used,
#    t2.Name,
#    t2.Office as ct_Office,
#    t2.OperatorMessageCount,
#    t2.Origin as ct_Origin,
#    t2.OwnerId as ct_OwnerId,
#    t2.Platform,
#    t2.Queue_Wait_Time,
#    t2.Reference_Number as ct_Reference_Number,
#    t2.Reference_Number_Type as ct_Reference_Number_Type,
#    t2.ReferrerUri,
#    t2.RequestTime,
#    t2.ScreenResolution,
#    t2.Shipment_Number as ct_Shipment_Number,
#    t2.SkillId,
#    t2.StartTime,
#    t2.Status as ct_Status,
#    t2.SupervisorTranscriptBody,
#    t2.SystemModstamp,
#    t2.Transferred_Queues,
#    t2.TransferType,
#    t2.UserAgent,
#    t2.VisitorMessageCount,
#    t2.VisitorNetwork,
#    t2.WaitTime,
#    t2.ONEForce_ID as ct_ONEForce_ID,
#    t2.IsDummy,
#    t2.Case_Net_Promoter_Score as ct_Case_Net_Promoter_Score,
#    t2.Chat_Handle_Time,
#    t2.Customer_Abandoned_Chat as ct_Customer_Abandoned_Chat,
#    t2.Chat_First_Response_Date_Time,
#    t2.Chat_First_Response_Time_Mins,
#    t2.Is_Within_BusinessHour_Chat,
#    t2.Is_Chat_First_Transfer,
#    t2.Is_Chat_transferred,
#    t2.Total_Chat_Transfer,
#    t2.Agent_First_Accept_Date_Time,
#    t2.Chat_Case_Rating,
#    t2.Chat_Case_Net_Promoter_Score,
#    t2.Is_Chat_Survey_Submitted as ct_Is_Chat_Survey_Submitted
#    FROM `OF_CASE` t1
#    LEFT JOIN `OF_CHAT_TRANSCRIPT` t2
#    ON t1.ONEForce_ID = t2.Caseid
#    WHERE
#    t1.Origin in ('Chat','Phone','Email','Web','Manual')
#    and t1.Status not in ('Waiting on Customer Response','Waiting on Internal ONE Team','Merged')
#    and t1.Office is not null
#    and t1.CreatedDate >= DATE('2022-03-28')
#    and coalesce(case_handle_time_minutes,0) >= 0
#    ;;
#
#    persist_for: "2 hours"
#  }
#
#  dimension: casenumber {
#    type: string
#    sql: ${TABLE}.CaseNumber ;;
#    #label:"{{ _view._name }}"
#    label: "{% if  _view._name  == 'parent_case' %} Parent Case Number {% else %} Case Number {% endif %}"
#  }
#
#  dimension: parentid {
#    type: string
#    sql: ${TABLE}.ParentId ;;
#    label: "Parent Case"
#    group_label: "Subject & Description"
#    hidden: yes
#  }
#
#  dimension: subject {
#    type: string
#    sql: ${TABLE}.Subject ;;
#    label: : "Subject"
#    group_label: "Subject & Description"
#  }
#
#  dimension: description {
#    type: string
#    sql: ${TABLE}.Description ;;
#    label: "Description"
#    group_label: "Subject & Description"
#  }
#
#
#  dimension: contactemail {
#    type: string
#    sql: ${TABLE}.ContactEmail ;;
#    label: "Contact Email"
#  }
#
#  dimension: contract_customer_name {
#    type: string
#    sql: ${TABLE}.Contract_Customer_Name ;;
#    label: "Contract Customer Name"
#    group_label: "Customer Information"
#    hidden: no
#  }
#
#
#  dimension: accountid {
#    type: string
#    sql: ${TABLE}.AccountId ;;
#    label: "Customer Name"
#    group_label: "Customer Information"
#    hidden: yes
#  }
#
#  dimension: contactid {
#    type: string
#    sql: ${TABLE}.ContactId ;;
#    label: "Contact Name"
#    group_label: "Customer Information"
#  }
#
#  dimension: customer_segment {
#    type: string
#    sql: ${TABLE}.Customer_Segment ;;
#    label: "Customer Segment"
#    group_label: "Customer Information"
#    hidden: yes
#  }
#
#  dimension: Reference_Type {
#    type: string
#    sql: ${TABLE}.Reference_Type ;;
#    label: "Reference Type"
#    group_label: "Additional Information"
#  }
#
#  dimension: p_i_claim_number {
#    type: string
#    sql: ${TABLE}.P_I_Claim_Number ;;
#    label: "P & I Claim Number"
#    group_label: "Additional Information"
#  }
#
#  dimension: container_number {
#    type: string
#    sql: ${TABLE}.Container_Number ;;
#    label: "Container Number"
#    group_label: "Additional Information"
#  }
#
#  dimension: booking_number {
#    type: string
#    sql: ${TABLE}.Booking_Number ;;
#    label: "Booking Number"
#    group_label: "Additional Information"
#  }
#
#  dimension: is_valid_booking_number {
#    type: string
#    sql: CASE WHEN LENGTH(${TABLE}.Booking_Number)=12 AND UPPER(${TABLE}.Booking_Number)=${TABLE}.Booking_Number THEN 'Yes' ELSE 'No' END  ;;
#    label: "Is Valid Booking Number"
#    group_label: "Additional Information"
#  }
#
#
#  dimension: contract_number {
#    type: string
#    sql: ${TABLE}.Contract_Number ;;
#    label: "Contract Number"
#    group_label: "Additional Information"
#
#  }
#
#  dimension: is_valid_contract_number {
#    type: string
#    sql: CASE WHEN ${TABLE}.Contract_Number IS NOT NULL AND ${TABLE}.Contract_Customer_Name IS NULL THEN 'No' ELSE 'Yes' END ;;
#    label: "Is Valid Contract Number"
#    group_label: "Additional Information"
#
#  }
#
#  dimension: has_contract_customer_name {
#    type: string
#    sql: CASE WHEN ${TABLE}.Contract_Customer_Name IS NOT NULL THEN 'Yes' ELSE 'No' END ;;
#    label: "Has Contract Customer Name"
#    group_label: "Additional Information"
#  }
#
#
#  dimension: support_email_cc {
#    type: string
#    sql: ${TABLE}.Support_Email_CC ;;
#    label: "Support Email CC"
#    group_label: "Additional Information"
#  }
#
#  dimension: support_email_to {
#    type: string
#    sql: ${TABLE}.Support_Email_TO ;;
#    label: "Support Email TO"
#    group_label: "Additional Information"
#  }
#
#  dimension: claim_amount {
#    type: number
#    sql: ${TABLE}.Claim_Amount ;;
#    label: "Claim Amount"
#    group_label: "Additional Information"
#  }
#
#
#  dimension: origin {
#    type: string
#    sql: ${TABLE}.Origin ;;
#    label: : "Channel"
#    group_label: "Case Information"
#    drill_fields: [drillfields*]
#  }
#
#  dimension: is_online_channel {
#    type: string
#    sql: (CASE WHEN ${TABLE}.Origin ="Chat" or ${TABLE}.Origin ="Phone"  THEN "Yes" ELSE "No" END) ;;
#    label: : "Is Online Channel"
#    group_label: "Case Information"
#  }
#
#
#  dimension: type {
#    type: string
#    sql: ${TABLE}.Type ;;
#    label: : "Type"
#    group_label: "Case Information"
#  }
#
#
#  dimension: status {
#    type: string
#    sql: ${TABLE}.Status ;;
#    label: "Status"
#    group_label: "Case Information"
#    drill_fields: [drillfields*]
#  }
#
#  dimension: priority {
#    type: string
#    sql: ${TABLE}.Priority ;;
#    label: : "Priority"
#  }
#
#
#  dimension: country {
#    type: string
#    label: "Individual Country"
#    group_label: "Case Information"
#    sql: case when ${country2}='HK' then 'HK & SCN' else ${country2} end ;;
#  }
#
#  dimension: country2 {
#    type: string
#    group_label: "Case Information"
#    sql: ${TABLE}.Country ;;
#  }
#
#  dimension: office {
#    type: string
#    sql: ${TABLE}.Office ;;
#    label: : "Service Office"
#    group_label: "Case Information"
#  }
#
#  dimension: case_resolved {
#    type: string
#    sql: ${TABLE}.Case_Resolved ;;
#    label: : "Is Case Resolved"
#    group_label: "Resolution Information"
#  }
#
#  dimension: transfer_reason {
#    type: string
#    sql: ${TABLE}.Transfer_Reason ;;
#    label: : "Transfer Reason"
#    group_label: "Resolution Information"
#  }
#
#  dimension: transfer_ratio {
#    type: string
#    sql: case
#          when ${TABLE}.Transfer_Reason is null and ${createddate_filter_year}<2023 then 'No'
#          when ${is_transfer}='true' and ${createddate_filter_year}>2022 then 'Yes'
#          when ${is_transfer}='false' and ${createddate_filter_year}>2022 then 'No'
#       else 'Yes' end ;;
#    label: : "Transfer Ratio"
#    group_label: "Resolution Information"
#  }
#
#  dimension: transfer_reason_others {
#    type: string
#    sql: ${TABLE}.Transfer_Reason_Others ;;
#    label: : "Transfer Reason Others"
#    group_label: "Resolution Information"
#  }
#
#  dimension: resolution_reason {
#    type: string
#    sql: CASE WHEN ${TABLE}.Resolution_Reason IS NULL THEN 'None' ELSE ${TABLE}.Resolution_Reason END ;;
#    label: : "Resolution Reason "
#    group_label: "Resolution Information"
#    drill_fields: [drillfields*]
#  }
#
#  dimension: sub_resolution_reason {
#    type: string
#    sql: ${TABLE}.Sub_Resolution_Reason ;;
#    label: : "Sub Resolution Reason"
#    group_label: "Resolution Information"
#    drill_fields: [drillfields*]
#  }
#
#  dimension: other_resolution_reason {
#    type: string
#    sql: ${TABLE}.Other_Resolution_Reason ;;
#    label: : "Other Resolution Reason "
#    group_label: "Resolution Information"
#  }
#
#  dimension: survey_comment {
#    type: string
#    sql: ${TABLE}.Survey_Comment ;;
#    label: : "Survey Comment"
#    group_label: "Customer Feedback"
#  }
#
#
#  dimension: case_rating {
#    type: string
#    sql: CASE WHEN ${TABLE}.Case_Rating IS NULL THEN 'No Rating' ELSE ${TABLE}.Case_Rating END ;;
#    label: : "Case Rating"
#    group_label: "Customer Feedback"
#  }
#
#
#  dimension: is_need_get_transcript {
#    type: string
#    sql: ${TABLE}.Is_Need_Get_Transcript ;;
#    label: : "Is Need Get Transcript"
#    group_label: "Customer Feedback"
#  }
#
#  dimension: first_time_use_chat {
#    type: string
#    sql: ${TABLE}.First_Time_Use_Chat ;;
#    label: : "First_Time_Use_Chat"
#    group_label: "Customer Feedback"
#  }
#
#  dimension: reason {
#    type: string
#    sql: ${TABLE}.Reason ;;
#    label: "Category (L1)"
#    group_label: "Intent"
#    drill_fields: [drillfields*]
#  }
#
#  dimension: case_sub_reason {
#    type: string
#    sql: ${TABLE}.Case_Sub_Reason ;;
#    label: "Case Sub Reason"
#    group_label: "Case Details"
#  }
#
#  dimension: total_escalation {
#    type: number
#    sql: CAST(${TABLE}.Total_Escalation AS NUMERIC) ;;
#    label:"Total Escalation"
#    view_label:"Current Escalation Details"
#  }
#
#  dimension: escalated_by {
#    type: string
#    sql: ${TABLE}.Escalated_By ;;
#    label:"Escalated By"
#    group_label:"Current Escalation Details"
#    hidden: yes
#  }
#
#  dimension: escalated_to {
#    type: string
#    sql: ${TABLE}.Escalated_To ;;
#    label:"Escalated To"
#    group_label:"Current Escalation Details"
#    hidden: yes
#  }
#
#
#  dimension_group: escalation_open_date {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Escalation_Open_Date;;
#    label:"Escalated Open Date"
#    group_label:"Current Escalation Details"
#    hidden: yes
#  }
#
#  dimension: escalation_reason {
#    type: string
#    sql: ${TABLE}.Escalation_Reason ;;
#    label:"Escalated Reason"
#    group_label:"Current Escalation Details"
#    hidden: yes
#  }
#
#
#  dimension: escalation_type {
#    type: string
#    sql: ${TABLE}.Escalation_Type ;;
#    label:"Escalated Type"
#    group_label:"Current Escalation Details"
#    hidden: yes
#  }
#
#  dimension: case_age {
#    type: number
#    sql: ${TABLE}.Case_Age ;;
#    label:"Case Age"
#    group_label: "System Information"
#  }
#  dimension: case_age_group {
#
#    type: number
#    sql: CASE
#      WHEN ${TABLE}.Case_Age <=2 THEN "1-2 Days"
#      WHEN ${TABLE}.Case_Age >2 and ${TABLE}.Case_Age <=5 THEN "3-5 Days"
#      WHEN ${TABLE}.Case_Age >5 and ${TABLE}.Case_Age <=10 THEN "6-10 Days"
#      WHEN ${TABLE}.Case_Age >10 and ${TABLE}.Case_Age <=20 THEN "11-20 Days"
#      ELSE "More than 20 Days"
#      END;;
#    label:"Case Age Group"
#    group_label: "System Information"
#  }
#
#  dimension: is_nurtured {
#    type: string
#    sql: ${TABLE}.Is_Nurtured ;;
#    label: "Is Nurtured"
#    group_label: "System Information"
#  }
#
#  dimension: FRT_sql_distinct_key {
#    type: string
#    label: "SQL Distinct Key"
#    sql: case when {% parameter responsetime_Param %}= "Case Level" then
#           ${oneforce_id}
#          when {% parameter responsetime_Param %}= "Chat Transcript"  then
#           ${oneforce_id}||${origin}|| coalesce(${ct_ONEForce_ID}, '')
#          end;;
#  }
#
#  dimension: case_owner {
#    type: string
#    sql: ${TABLE}.Case_Owner ;;
#    label: "Case Owner"
#    group_label:"System Information"
#    hidden: yes
#  }
#
#  dimension: case_owner_role {
#    type: string
#    sql: ${TABLE}.Case_Owner_Role ;;
#    label: "Case Owner Role"
#    group_label: "System Information"
#  }
#
#  dimension: created_by_id {
#    type: string
#    sql: ${TABLE}.CreatedById ;;
#    label: "Created By Id"
#    group_label: "System Information"
#    hidden: yes
#  }
#
#
#  dimension_group: last_modified {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.LastModifiedDate ;;
#    label: "Last Modified Date"
#    view_label: "System Information"
#  }
#
#  dimension_group: closeddate {
#    type: time
#    datatype: datetime
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      fiscal_quarter,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.ClosedDate ;;
#    group_label:"Close Date"
#    label: "Close Date"
#  }
#
#  dimension_group: first_response_time {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.First_Response_Time ;;
#    group_label: "First Response Time"
#    label: "First Response Time"
#    hidden: yes
#  }
#
#  dimension_group: first_response_date_time {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.First_Response_Date_Time ;;
#    group_label: "First Response Date Time"
#    label: "First Response Date Time"
#  }
#
#  dimension_group: createddate {
#    type: time
#    datatype: datetime
#    timeframes: [
#      raw,
#      time,
#      hour_of_day,
#      date,
#      week,
#      month,
#      fiscal_quarter,
#      quarter,
#      year
#    ]
#    group_label: "Open Date"
#    label: "Open Date"
#    sql: ${TABLE}.CreatedDate ;;
#    drill_fields: [drillfields*]
#  }
#
#
#  dimension: createddate_Weekfilter {
#    type: date
#    label: "Open Date Week"
#    sql: ${createddate_week} ;;
#  }
#
#  dimension: isescalated{
#    type: string
#    sql: ${TABLE}.IsEscalated ;;
#    label: "Is Escalated"
#  }
#
#
#
#  dimension: category_l1 {
#    type: string
#    sql: ${TABLE}.Category_L1 ;;
#    label:"category_l1"
#    group_label: "Intents"
#    hidden: yes
#  }
#
#  dimension: sub_category_l2 {
#    type: string
#    sql: ${TABLE}.Sub_Category_L2 ;;
#    label: "Category (L2)"
#    group_label: "Intents"
#    drill_fields: [drillfields*]
#  }
#
#
#  dimension: subordinate_category_l3 {
#    type: string
#    sql: ${TABLE}.Subordinate_Category_L3 ;;
#    label:"Topic (L3)"
#    group_label: "Intents"
#    drill_fields: [drillfields*]
#  }
#
#
#
#  dimension: ownerid {
#    type: string
#    sql: ${TABLE}.OwnerId ;;
#    label:"Owner ID"
#    hidden: yes
#
#  }
#
#  dimension: oneforce_id {
#    type: string
#    sql: ${TABLE}.ONEForce_Id ;;
#    label:"Case ID"
#    hidden: yes
#    #primary_key: yes
#  }
#
#  dimension: ct_ONEForce_ID {
#    type: string
#    sql: ${TABLE}.ct_ONEForce_Id ;;
#    label:"Case ID"
#    hidden: yes
#    #primary_key: yes
#  }
#
#  dimension: primary_key {
#    type: string
#    sql: ${oneforce_id} || coalesce(${ct_ONEForce_ID}, '') ;;
#    hidden: yes
#    primary_key: yes
#  }
#
#  dimension: escalation_history {
#    type: string
#    sql: ${TABLE}.Escalation_History ;;
#    label: "EH Name"
#    group_label: "Current Escalation Details"
#    hidden: yes
#  }
#
#  set: detail {
#    fields: [
#      casenumber,
#      service_office_hierarchy.country,
#      case_owner.officetype,
#      case_owner_name,
#      ct_owner_name1,
#      of_user.name,
#      ecomm_id,
#      of_contact.name,
#      contactemail,
#      of_customer.name,
#      status,
#      origin,
#      type,
#      reason,
#      sub_category_l2,
#      subordinate_category_l3,
#      createddate_date,
#      resolved_date_date,
#      closeddate_date,
#      case_age,
#      first_contact_resolution,
#      Case_Net_Promoter_Score,
#      Case_First_Response_Time_Minutes,
#      Chat_First_Response_Time_Mins_avg,
#      case_handling_time,
#      chat_handle_time1,
#    ]
#  }
#
#  set: detail_csat {
#    fields: [
#      casenumber,
#      service_office_hierarchy.country,
#      case_owner.officetype,
#      case_owner_name,
#      ct_owner_name1,
#      of_user.name,
#      ecomm_id,
#      of_contact.name,
#      contactemail,
#      of_customer.name,
#      status,
#      origin,
#      type,
#      reason,
#      sub_category_l2,
#      subordinate_category_l3,
#      createddate_date,
#      resolved_date_date,
#      closeddate_date,
#      case_age,
#      first_contact_resolution,
#      case_rating,
#      chat_case_rating,
#      Case_Net_Promoter_Score,
#      chat_case_net_promoter_score,
#      Case_First_Response_Time_Minutes,
#      Chat_First_Response_Time_Mins_avg,
#      case_handling_time,
#      chat_handle_time1,
#    ]
#  }
#  set: detail_fcr {
#    fields: [
#      casenumber,
#      service_office_hierarchy.country,
#      case_owner.officetype,
#      case_owner_name,
#      ct_owner_name1,
#      of_user.name,
#      ecomm_id,
#      of_contact.name,
#      contactemail,
#      of_customer.name,
#      status,
#      origin,
#      type,
#      reason,
#      sub_category_l2,
#      subordinate_category_l3,
#      createddate_date,
#      resolved_date_date,
#      closeddate_date,
#      case_age,
#      first_contact_resolution,
#      total_transfer,
#      total_escalation,
#      Case_Net_Promoter_Score,
#      Case_First_Response_Time_Minutes,
#      Chat_First_Response_Time_Mins_avg,
#      case_handling_time,
#      chat_handle_time1,
#    ]
#  }
#
#  set: responsetime_details {
#    fields: [
#      casenumber,
#      service_office_hierarchy.country,
#      case_owner.officetype,
#      case_owner_name,
#      of_user.name,
#      ecomm_id,
#      of_contact.name,
#      contactemail,
#      of_customer.name,
#      status,
#      origin,
#      type,
#      reason,
#      sub_category_l2,
#      subordinate_category_l3,
#      createddate_date,
#      resolved_date_date,
#      closeddate_date,
#      case_age,
#      first_contact_resolution,
#      Case_Net_Promoter_Score,
#      Case_First_Response_Time_Minutes,
#      Chat_First_Response_Time_Mins_avg,
#      case_handling_time,
#      chat_handle_time1,
#    ]
#  }
#
#  set: details1 {
#    fields: [
#      casenumber,
#      service_office_hierarchy.country,
#      case_owner.officetype,
#      case_owner_name,
#      ct_owner_name1,
#      of_user.name,
#      ecomm_id,
#      of_contact.name,
#      contactemail,
#      of_customer.name,
#      status,
#      origin,
#      type,
#      reason,
#      sub_category_l2,
#      subordinate_category_l3,
#      createddate_date,
#      resolved_date_date,
#      closeddate_date,
#      case_age,
#      total_transfer,
#      first_contact_resolution,
#      Avg_First_Response_Time,
#      avg_handling_time,
#      avg_chat_handle_time,
#      Case_Net_Promoter_Score,
#    ]
#  }
#
#  set: escdetail {
#    fields: [
#      casenumber,
#      number_of_escalated_cases,
#      service_office_hierarchy.country,
#      case_owner.officetype,
#      case_owner_name,
#      of_user.name,
#      ecomm_id,
#      of_contact.name,
#      contactemail,
#      of_customer.name,
#      status,
#      origin,
#      type,
#      reason,
#      sub_category_l2,
#      subordinate_category_l3,
#      createddate_date,
#      resolved_date_date,
#      closeddate_date,
#      case_age,
#      first_contact_resolution,
#      Avg_First_Response_Time,
#      avg_handling_time,
#      avg_chat_handle_time,
#      Case_Net_Promoter_Score,
#    ]
#  }
#
#  set: drillfields {
#    fields: [
#      Regional_Head_Office,
#      case_country,
#      case_office_code,
#      origin,
#      Initial_Queue_Name,
#      sub_category_l2,
#      subordinate_category_l3,
#      of_customer_group.cust_grp_and_name,
#      of_customer.customer_cd_and_name,
#      case_owner_name,
#      of_user.name,
#      priority,
#      case_age_group,
#      status,
#      nps_group,
#      createddate_month,
#      ecomm_id,
#      of_contact.name,
#      contactemail
#    ]
#  }
#
#  set: transferdetail {
#    fields: [
#      casenumber,
#      service_office_hierarchy.country,
#      case_owner.officetype,
#      case_owner_name,
#      case_transfer_history.transfer_by_name,
#      case_transfer_history.transfer_from_name,
#      case_transfer_history.transfer_to_name,
#      case_transfer_history.transfer_type,
#      case_transfer_history.last_transfer_date_time,
#      case_transfer_history.transfer_duration_in_minutes,
#      case_transfer_history.transfer_reason,
#      total_transfer,
#      of_customer.name,
#      of_contact.name,
#      contactemail,
#      status,
#      origin,
#      type,
#      reason,
#      sub_category_l2,
#      subordinate_category_l3,
#    ]
#  }
#
###############Added Dimensions
#
#
##dimension: additional_cargo_details {
##type: string
##sql: ${TABLE}.Additional_Cargo_Details ;;
##hidden: yes
##}
#
##dimension: additional_contact_emails {
##type: string
##sql: ${TABLE}.Additional_Contact_Emails ;;
##hidden: yes
##}
#
#  dimension: amazon_connect_queue {
#    type: string
#    sql: ${TABLE}.Amazon_Connect_Queue ;;
#    hidden: yes
#  }
#
#  dimension: applicant_email {
#    type: string
#    sql: ${TABLE}.Applicant_Email ;;
#    hidden: yes
#  }
#
#  dimension: applicant_name {
#    type: string
#    sql: ${TABLE}.Applicant_Name ;;
#    hidden: yes
#  }
#
#  dimension: applicant_party {
#    type: string
#    sql: ${TABLE}.Applicant_Party ;;
#    hidden: yes
#  }
#
#  dimension: applicant_phone_number {
#    type: string
#    sql: ${TABLE}.Applicant_Phone_Number ;;
#    hidden: yes
#  }
#
##dimension: are_the_rates_filed_for_the_new_destinat {
##type: string
##sql: ${TABLE}.Are_the_rates_filed_for_the_new_destinat ;;
##hidden: yes
##}
#
#  dimension: article_recommendation_reason {
#    type: string
#    sql: ${TABLE}.Article_Recommendation_Reason ;;
#    hidden: yes
#  }
#
##dimension: article_recommendation_type {
##type: string
##sql: ${TABLE}.Article_Recommendation_Type ;;
##hidden: yes
##}
#
#  dimension: asset_id {
#    type: string
#    sql: ${TABLE}.AssetId ;;
#    hidden: yes
#  }
#
#  dimension_group: assigned {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.AssignedDate ;;
#    hidden: yes
#  }
#
##dimension: auto_titles {
##type: string
##sql: ${TABLE}.Auto_Titles ;;
##hidden: yes
##}
#
#  dimension: bill_of_lading_number {
#    type: string
#    sql: ${TABLE}.Bill_of_Lading_Number ;;
#    hidden: yes
#  }
#
#  dimension: bkg_office {
#    type: string
#    sql: ${TABLE}.BKG_Office ;;
#    hidden: yes
#  }
#
##dimension: boilerplate_review {
##type: string
##sql: ${TABLE}.Boilerplate_Review ;;
##hidden: yes
##}
#
#  dimension: business_hours_id {
#    type: string
#    sql: ${TABLE}.BusinessHoursId ;;
#    hidden: yes
#    label: "Business Hours"
#    group_label: "System Information"
#  }
#
#  dimension: bypass_validation_rules {
#    type: string
#    sql: ${TABLE}.Bypass_Validation_Rules ;;
#    hidden: yes
#  }
#
#  dimension_group: calculated_awaiting_cust_remind_datetime {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Calculated_Awaiting_Cust_Remind_Datetime ;;
#    label: "Calculated Awaiting Cust Remind Datetime"
#    view_label: "System Information"
#  }
#
#  dimension_group: calculated_close_date {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Calculated_Close_Date_Time ;;
#    label: "Calculated Close Date/Time"
#    view_label: "System Information"
#  }
#
#  dimension_group: calculated_date_time_for_one_team {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Calculated_Date_Time_for_ONE_Team ;;
#    label: "Calculated Date/Time for ONE Team"
#    view_label: "System Information"
#  }
#
#  dimension: cargo_nature {
#    type: string
#    sql: ${TABLE}.Cargo_Nature ;;
#    hidden: yes
#  }
#
##dimension_group: close_out {
##type: time
##timeframes: [
##raw,
##date,
##week,
##month,
##quarter,
##year
##]
##convert_tz: no
##datatype: date
##sql: ${TABLE}.Close_Out_Date ;;
##hidden: yes
##}
#
#
#  dimension: comments {
#    type: string
#    sql: ${TABLE}.Comments ;;
#    hidden: yes
#  }
#
#  dimension: commodity {
#    type: string
#    sql: ${TABLE}.Commodity ;;
#    hidden: yes
#  }
#
#  dimension: company_name {
#    type: string
#    sql: ${TABLE}.Company_Name ;;
#    hidden: yes
#  }
#
#
#  dimension: contact_fax {
#    type: string
#    sql: ${TABLE}.ContactFax ;;
#    hidden: yes
#  }
#
#  dimension: contact_id {
#    type: string
#    sql: ${TABLE}.Contact_Id ;;
#    hidden: yes
#  }
#  dimension: contact_mobile {
#    type: string
#    sql: ${TABLE}.ContactMobile ;;
#    hidden: yes
#  }
#
#  dimension: contact_phone {
#    type: string
#    sql: ${TABLE}.ContactPhone ;;
#    hidden: yes
#  }
#
##dimension: container {
##type: string
##sql: ${TABLE}.Container ;;
##hidden: yes
##}
#
##dimension: container_type {
##type: string
##sql: ${TABLE}.Container_Type ;;
##hidden: yes
##}
#
#  dimension: contract_account_name {
#    type: string
#    sql: ${TABLE}.Contract_Account_Name ;;
#    hidden: yes
#  }
#
#
##dimension: current_destination {
##type: string
##sql: ${TABLE}.Current_Destination ;;
##hidden: yes
##}
#
#  dimension: customer_code {
#    type: string
#    sql: ${TABLE}.Customer_Code ;;
#    hidden: yes
#  }
#
#  dimension: customer_info {
#    type: string
#    sql: ${TABLE}.Customer_Info ;;
#    hidden: yes
#  }
#
##dimension: customs_exam {
##type: string
##sql: ${TABLE}.CUSTOMS_Exam ;;
##hidden: yes
##}
#
#  dimension_group: resolved_date  {
#    type: time
#    datatype: datetime
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.DateTimeResolved ;;
#    label: "Resolved Date"
#  }
#
##dimension_group: date_time_resolved {
##type: time
##datatype: datetime
##timeframes: [
##raw,
##time,
##date,
##week,
##month,
##quarter,
##year
##]
##sql: ${TABLE}.DateTimeResolved ;;
##  group_label:"Resolved Date"
##  label: "Resolved Date"
##}
#
#
#  dimension_group: date_time_waiting_on_customer_response {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Date_Time_Waiting_on_Customer_Response ;;
#    hidden: yes
#  }
#
##dimension: direct_care_account {
##type: string
##sql: ${TABLE}.Direct_Care_Account ;;
##hidden: yes
##}
#
##dimension: e_com_account {
##type: string
##sql: ${TABLE}.eCom_Account ;;
##hidden: yes
##}
#
##dimension: e_comm_user_id {
#  # label: "eCom ID"
#  #type: string
#  #sql: ${TABLE}.eComm_User_ID ;;
##}
#
##  dimension: e_commerce_user_id{
##    label: "eComm ID"
##    type: string
##    sql: ${TABLE}.eCommerce_UserID ;;
##    drill_fields: [drillfields*]
##  }
#
##dimension: ebo {
##type: number
##sql: ${TABLE}.EBO ;;
##hidden: yes
##}
#
##dimension: edt {
##type: string
##sql: ${TABLE}.EDT ;;
##hidden: yes
##}
#
#  dimension_group: edw_upd_dt {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.EDW_UPD_DT ;;
#    hidden: yes
#  }
#
##dimension: email_assigned {
##type: string
##sql: ${TABLE}.Email_Assigned ;;
##hidden: yes
##}
#
##dimension: end_status_1 {
##type: string
##sql: ${TABLE}.End_Status_1 ;;
##hidden: yes
##}
#
##dimension_group: end_status_time_1 {
##type: time
##timeframes: [
##raw,
##time,
##date,
##week,
##month,
##quarter,
##year
##]
##sql: ${TABLE}.End_Status_Time_1 ;;
##hidden: yes
##}
#
#  dimension: entitlement_id {
#    type: string
#    sql: ${TABLE}.EntitlementId ;;
#    hidden: yes
#  }
#
#  dimension: escalation_history_reason {
#    type: string
#    sql: ${TABLE}.Escalation_History_Reason ;;
#    label: "Escalation Reason"
#    group_label: "Current Escalation Details"
#    hidden: yes
#  }
#
#  dimension_group: escalation_open {
#    type: time
#    timeframes: [
#      raw,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    convert_tz: no
#    datatype: date
#    sql: ${TABLE}.Escalation_Open_Date ;;
#    hidden: yes
#  }
#
##dimension: eta {
##type: string
##sql: ${TABLE}.ETA ;;
##hidden: yes
##}
#
##dimension: etd {
##type: string
##sql: ${TABLE}.ETD ;;
##hidden: yes
##}
#
#  dimension: first_end_status {
#    type: string
#    sql: ${TABLE}.First_End_Status ;;
#    hidden: yes
#  }
#
#  dimension_group: first_end_status {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.First_End_Status_Time ;;
#    hidden: yes
#  }
#
#  dimension: first_pending_reason {
#    type: string
#    sql: ${TABLE}.First_Pending_Reason ;;
#    hidden: yes
#  }
#
#  dimension: first_processor {
#    type: string
#    sql: ${TABLE}.First_Processor ;;
#    hidden: yes
#  }
#
#  dimension_group: first_reply {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.First_Reply_Time ;;
#    hidden: yes
#  }
#
#
#  dimension: first_response_user {
#    type: string
#    sql: ${TABLE}.First_Response_User ;;
#    hidden: yes
#  }
#
#  dimension_group: first_restart {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.First_Restart_Time ;;
#    hidden: yes
#  }
#
#  dimension: forwarder_name {
#    type: string
#    sql: ${TABLE}.Forwarder_Name ;;
#    hidden: yes
#  }
#
#  dimension: fourth_end_status {
#    type: string
#    sql: ${TABLE}.Fourth_End_Status ;;
#    hidden: yes
#  }
#
#  dimension_group: fourth_end_status {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Fourth_End_Status_Time ;;
#    hidden: yes
#  }
#
#  dimension: fourth_processor {
#    type: string
#    sql: ${TABLE}.Fourth_Processor ;;
#    hidden: yes
#  }
#
#  dimension: internal_correspondence {
#    type: string
#    sql: ${TABLE}.Internal_Correspondence ;;
#    hidden: yes
#  }
#
#  dimension: is_chat_survey_submitted {
#    type: string
#    sql: ${TABLE}.Is_Chat_Survey_Submitted ;;
#    hidden: yes
#  }
#
#  dimension: is_closed {
#    type: string
#    sql: ${TABLE}.IsClosed ;;
#    hidden: yes
#  }
#
#  dimension: is_closed_on_create {
#    type: string
#    sql: ${TABLE}.IsClosedOnCreate ;;
#    hidden: yes
#  }
#
#  dimension: is_deleted {
#    type: string
#    sql: ${TABLE}.IsDeleted ;;
#    hidden: yes
#  }
#
#  dimension: is_dummy {
#    type: string
#    sql: ${TABLE}.IsDummy ;;
#    hidden: yes
#  }
#
#
#  dimension: is_stopped {
#    type: string
#    sql: ${TABLE}.IsStopped ;;
#    hidden: yes
#  }
#
##dimension: lane {
##type: string
##sql: ${TABLE}.Lane ;;
##hidden: yes
##}
#
#  dimension: language {
#    type: string
#    sql: ${TABLE}.Language ;;
#    hidden: yes
#  }
#
#  dimension: last_modified_by_id {
#    type: string
#    sql: ${TABLE}.LastModifiedById ;;
#    hidden: yes
#    label: "Last Modified By"
#    group_label: "System Information"
#  }
#
##dimension: late_gates {
##type: number
##sql: ${TABLE}.Late_Gates ;;
##hidden: yes
##}
#
#  dimension: milestone_status {
#    type: string
#    sql: ${TABLE}.MilestoneStatus ;;
#    hidden: yes
#  }
#
##dimension: missing_s_i {
##type: string
##sql: ${TABLE}.Missing_S_I ;;
##hidden: yes
##}
#
##dimension: new_destination {
##type: string
##sql: ${TABLE}.New_Destination ;;
##hidden: yes
##}
#
#  dimension: nfvoice__voicemail_callback_phone {
#    type: string
#    sql: ${TABLE}.nfvoice__Voicemail_Callback_Phone ;;
#    hidden: yes
#  }
#
#  dimension: nfvoice__voicemail_link {
#    type: string
#    sql: ${TABLE}.nfvoice__Voicemail_Link ;;
#    hidden: yes
#  }
#
#  dimension: nfvoice_voicemail_callback_phone {
#    type: string
#    sql: ${TABLE}.nfvoice_Voicemail_Callback_Phone ;;
#    hidden: yes
#  }
#
#  dimension: nfvoice_voicemail_contact_attributes {
#    type: string
#    sql: ${TABLE}.nfvoice_Voicemail_Contact_Attributes ;;
#    hidden: yes
#  }
#
##dimension: onboarding {
##type: string
##sql: ${TABLE}.Onboarding ;;
##hidden: yes
##}
#
##dimension: opus_request_number {
##type: string
##sql: ${TABLE}.Opus_Request_Number ;;
##hidden: yes
##}
#
#  dimension: origin_indicator {
#    type: string
#    sql: ${TABLE}.Origin_Indicator ;;
#    hidden: yes
#    label: "origin_indicator"
#    group_label: "Header"
#  }
#
##dimension: original_discharge_port_pod {
##type: string
##sql: ${TABLE}.Original_Discharge_Port_POD ;;
##hidden: yes
##}
#
#  dimension: other_reason {
#    type: string
#    sql: ${TABLE}.Other_Reason ;;
#    hidden: yes
#  }
#
##dimension: out_of_scope {
##type: string
##sql: ${TABLE}.Out_of_Scope ;;
##hidden: yes
##}
#
##dimension: pending_reason_1 {
##type: string
##sql: ${TABLE}.Pending_Reason_1 ;;
##hidden: yes
##}
#
##dimension: pod_change_request {
##type: string
##sql: ${TABLE}.POD_CHANGE_REQUEST ;;
##hidden: yes
##}
#
#  dimension: port {
#    type: string
#    sql: ${TABLE}.PORT ;;
#    hidden: yes
#  }
#
#  dimension: post_reconciliation_completed_with_biz {
#    type: string
#    sql: ${TABLE}.Post_Reconciliation_Completed_with_biz ;;
#    hidden: yes
#  }
#
#
#  dimension: priority_formula {
#    type: string
#    sql: ${TABLE}.Priority_Formula ;;
#    hidden: yes
#    label: "Priority Indicator"
#    group_label: "Header"
#  }
#
#  dimension: privacy_policy_consent {
#    type: string
#    sql: ${TABLE}.Privacy_Policy_Consent ;;
#    hidden: yes
#  }
#
##dimension: processor_1 {
##type: string
##sql: ${TABLE}.Processor_1 ;;
##hidden: yes
##}
#
#  dimension: product_id {
#    type: string
#    sql: ${TABLE}.ProductId ;;
#    hidden: yes
#  }
#
##dimension: reason_s_for_cod_diversion {
##type: string
##sql: ${TABLE}.Reason_s_for_COD_Diversion ;;
##hidden: yes
##}
#
#  dimension: record_type_id {
#    type: string
#    sql: ${TABLE}.RecordTypeId ;;
#    hidden: yes
#    label: "Case Record Type"
#    group_label: "System Information"
#  }
#
#  dimension: reference_number {
#    type: string
#    sql: ${TABLE}.Reference_Number ;;
#    hidden: yes
#  }
#
#  dimension: reference_number_type {
#    type: string
#    sql: ${TABLE}.Reference_Number_Type ;;
#    hidden: yes
#  }
#
#
##dimension: reporting {
##type: string
##sql: ${TABLE}.Reporting ;;
##hidden: yes
##}
#
##dimension: request_type {
##type: string
##sql: ${TABLE}.Request_Type ;;
##hidden: yes
##}
#
#  dimension: requestor_type {
#    type: string
#    sql: ${TABLE}.Requestor_Type ;;
#    hidden: yes
#  }
#
#  dimension: response_flag {
#    type: string
#    sql: ${TABLE}.Response_Flag ;;
#    hidden: yes
#  }
#
#  dimension: response_received {
#    type: string
#    sql: ${TABLE}.Response_Received ;;
#    hidden: yes
#  }
#
#  dimension: revised_destination {
#    type: string
#    sql: ${TABLE}.Revised_Destination ;;
#    hidden: yes
#  }
#
#  dimension: second_end_status {
#    type: string
#    sql: ${TABLE}.Second_End_Status ;;
#    hidden: yes
#  }
#
##dimension_group: second_end_status {
##type: time
##timeframes: [
##raw,
##time,
##date,
##week,
##month,
##quarter,
##year
##]
##sql: ${TABLE}.Second_End_Status_Time ;;
##hidden: yes
##}
#
#  dimension: second_pending_reason {
#    type: string
#    sql: ${TABLE}.Second_Pending_Reason ;;
#    hidden: yes
#  }
#
#  dimension: second_processor {
#    type: string
#    sql: ${TABLE}.Second_Processor ;;
#    hidden: yes
#  }
#
#  dimension_group: second_reply {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Second_Reply_Time ;;
#    hidden: yes
#  }
#
#  dimension_group: second_restart {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Second_Restart_Time ;;
#    hidden: yes
#  }
#
#  dimension: service_contract_id {
#    type: string
#    sql: ${TABLE}.ServiceContractId ;;
#    hidden: yes
#  }
#
#  dimension: shipment_number {
#    type: string
#    sql: ${TABLE}.Shipment_Number ;;
#    hidden: yes
#  }
#
#  dimension: shipper_name {
#    type: string
#    sql: ${TABLE}.Shipper_Name ;;
#    hidden: yes
#  }
#
#  dimension_group: sla_exit {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.SlaExitDate ;;
#    hidden: yes
#  }
#
#  dimension_group: sla_start {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.SlaStartDate ;;
#    hidden: yes
#  }
#
#  dimension: source_id {
#    type: string
#    sql: ${TABLE}.SourceId ;;
#    hidden: yes
#  }
#
#  dimension_group: stop_start {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.StopStartDate ;;
#    hidden: yes
#  }
#
#  dimension: subordinate_category_l4 {
#    type: string
#    sql: ${TABLE}.Subordinate_Category_L4 ;;
#    label:"Subtopic (L4)"
#    group_label: "Intents"
#  }
#
#  dimension: supplied_company {
#    type: string
#    sql: ${TABLE}.SuppliedCompany ;;
#    hidden: yes
#  }
#
#  dimension: supplied_email {
#    type: string
#    sql: ${TABLE}.SuppliedEmail ;;
#    label: "Web Email"
#    group_label: "System Information"
#  }
#
#  dimension: supplied_first_name {
#    type: string
#    sql: ${TABLE}.SuppliedFirstName ;;
#    hidden: yes
#  }
#
#  dimension: supplied_last_name {
#    type: string
#    sql: ${TABLE}.SuppliedLastName ;;
#    hidden: yes
#  }
#
#  dimension: supplied_name {
#    type: string
#    sql: ${TABLE}.SuppliedName ;;
#    hidden: yes
#  }
#
#  dimension: supplied_phone {
#    type: string
#    sql: ${TABLE}.SuppliedPhone ;;
#    hidden: yes
#  }
#
#  dimension: third_end_status {
#    type: string
#    sql: ${TABLE}.Third_End_Status ;;
#    hidden: yes
#  }
#
#  dimension_group: third_end_status {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Third_End_Status_Time ;;
#    hidden: yes
#  }
#
#  dimension: third_pending_reason {
#    type: string
#    sql: ${TABLE}.Third_Pending_Reason ;;
#    hidden: yes
#  }
#
#  dimension: third_processor {
#    type: string
#    sql: ${TABLE}.Third_Processor ;;
#    hidden: yes
#  }
#
#  dimension_group: third_reply {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Third_Reply_Time ;;
#    hidden: yes
#  }
#
#  dimension_group: third_restart {
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Third_Restart_Time ;;
#    hidden: yes
#  }
#
#  dimension: training {
#    type: string
#    sql: ${TABLE}.Training ;;
#    hidden: yes
#  }
#
##dimension: type_of_diversion {
##type: string
##sql: ${TABLE}.Type_of_Diversion ;;
##hidden: yes
##}
#
#  dimension: unique_case_key {
#    type: string
#    sql: ${TABLE}.UniqueCaseKey ;;
#    hidden: yes
#  }
#
##dimension: vessel_cleaned {
##type: string
##sql: ${TABLE}.Vessel_Cleaned ;;
##hidden: yes
##}
#
#  dimension: voice_call {
#    type: string
#    sql: ${TABLE}.Voice_Call ;;
#    hidden: yes
#  }
#
#  dimension: vvd {
#    type: string
#    sql: ${TABLE}.VVD ;;
#    hidden: yes
#  }
#
#  dimension: active_case {
#    type: string
#    sql: (CASE WHEN ${status} ='Resolved' or ${status} ='Closed' THEN 'No' ELSE 'Yes' END)   ;;
#
#  }
#
#  dimension : case_owner_name {
#    type : string
#    sql:  CASE WHEN ${of_queue.developer_name} is not Null then ${of_queue.developer_name} else ${case_owner.name} END;;
#    label : "Case Owner Name"
#    drill_fields: [drillfields*]
#  }
#
#  dimension : first_contact_resolution {
#    type: string
#    sql: CASE
#          WHEN ${origin} = 'Chat' and ${TABLE}.is_fcr ='true' THEN 'Yes'
#          WHEN ${origin} = 'Chat' and ${TABLE}.is_fcr ='false' THEN 'No'
#          WHEN ${total_escalation} =0 and ${transfer_reason} is Null and ${active_case} = 'No' THEN 'Yes' ELSE 'No' END ;;
#    label: "First Contact Resolution"
#  }
#
#  dimension: case_office_code {
#    group_label: "Office Hierarchy"
#    label: "Office Code"
#    type: string
#    sql: (CASE
#      WHEN service_office_hierarchy.office_code is not Null THEN service_office_hierarchy.office_code
#      ELSE  user_office_hierarchy.office_code
#    END) ;;
#    drill_fields: [drillfields*]
#  }
#
#
#  dimension: case_country {
#    group_label: "Office Hierarchy"
#    label: "Cluster Country"
#    type: string
#    #map_layer_name: countries
#    sql: (case when ${case_country1}='AT' then 'AT & HU'
#               when ${case_country1}='CZ' then 'CZ & SK'
#               when ${case_country1}='SE' then 'SE & NO' else ${case_country1} end) ;;
#    drill_fields: [drillfields*]
#  }
#
#  dimension: case_country1 {
#    group_label: "Office Hierarchy"
#    label: "Cluster"
#    type: string
#    #map_layer_name: countries
#    sql: (CASE
#      WHEN ${service_office_hierarchy.country} is not Null THEN ${service_office_hierarchy.country}
#      WHEN ${queue_name_office_hierarchy.country} is not Null THEN ${queue_name_office_hierarchy.country}
#      ELSE ${user_office_hierarchy.country}
#    END) ;;
#    drill_fields: [drillfields*]
#  }
#
#  dimension: Regional_Head_Office {
#    group_label: "Office Hierarchy"
#    label: "Regional_Head_Office"
#    type: string
#    # First Condition added to map Offshore Offices to Service Office
#    sql: coalesce((CASE
#               WHEN service_office_hierarchy.Regional_Head_Office is not Null THEN substr(service_office_hierarchy.Regional_Head_Office,-5)
#               WHEN queue_name_office_hierarchy.Regional_Head_Office is not Null THEN  substr(queue_name_office_hierarchy.Regional_Head_Office,-5)
#               WHEN user_office_hierarchy.Regional_Head_Office is not Null and substr(user_office_hierarchy.office_code,-2) = "OS" THEN substr(service_office_hierarchy.Regional_Head_Office,-5)
#               WHEN user_office_hierarchy.Regional_Head_Office is not null THEN substr(user_office_hierarchy.Regional_Head_Office,-5)
#    ELSE "Unclaimed"
#    END),"Unclaimed") ;;
#    drill_fields: [drillfields*]
#  }
#
#  dimension: Case_Geo {
#    group_label: "Office Hierarchy"
#    label: "Case Geography"
#    type: string
#    sql: CASE
#          WHEN {% parameter Geo_Param %} = "RHQ" THEN ${Regional_Head_Office}
#          WHEN {% parameter Geo_Param %} = "Cluster Country" THEN ${case_country}
#          WHEN {% parameter Geo_Param %} = "Individual Country" THEN ${country}
#          WHEN {% parameter Geo_Param %} = "Office" THEN ${office}
#          WHEN {% parameter Geo_Param %} = "Channel" THEN ${origin}
#          WHEN {% parameter Geo_Param %} = "Segment" THEN ${customer_segment_number}
#          WHEN {% parameter Geo_Param %} = "Segment " THEN ${of_customer_group.key_acct_tp_cd}
#          WHEN {% parameter Geo_Param %} = "Agent Role" THEN ${case_owner.profile_name_service}
#          WHEN {% parameter Geo_Param %} = "Escalation Role" THEN ${of_escalation_history_pdt.role}
#          WHEN {% parameter Geo_Param %} = "Office Type" THEN ${case_owner.officetype}
#          WHEN {% parameter Geo_Param %} = "Service Type" THEN ${type}
#          ELSE "Global" END;;
#    drill_fields: [drillfields*]
#  }
#
#  dimension: case_RHQ {
#    group_label: "Chat Office Hierarchy"
#    label: "RHQ"
#    type: string
#    sql: ${Regional_Head_Office} ;;
#    #sql: case
#    #      when ${Regional_Head_Office}='SAOHQ' THEN 'SAOHQ'
#    #      when ${Regional_Head_Office}='HKGHQ' THEN 'HKGHQ'
#    #      when ${Regional_Head_Office}='LONHQ' THEN 'LONHQ'
#    #      when ${Regional_Head_Office}='RICHQ' THEN 'RICHQ'
#    #      when ${Regional_Head_Office}='SINHQ' THEN 'SINHQ'
#    #        else "Unclaimed" end;;
#    #hidden: yes
#  }
#
#  measure: count {
#    type: count
#    sql_distinct_key: ${oneforce_id};;
#    drill_fields: [detail*]
#    label: "Count"
#  }
#
#  measure: count_transfer {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [transferdetail*]
#    label: "Count Transfer"
#  }
#
#  measure: count_for_transfer {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [transferdetail*]
#    label: "Count For Tranfer"
#    html: Total Transfer: {{total_transfer._rendered_value}} <br> {{rendered_value}};;
#  }
#
#  measure: case_distinct_count1 {
#    type: count_distinct
#    sql: ${casenumber}  ;;
#    drill_fields: [details1*]
#    label: "Distinct Count"
#  }
#
#  measure: case_distinct_count_fcr {
#    type: count_distinct
#    sql: ${casenumber}  ;;
#    drill_fields: [detail_fcr*]
#    label: "Distinct Count FCR-related"
#  }
#
#  measure: case_distinct_count {
#    type: count_distinct
#    sql: ${casenumber}  ;;
#    drill_fields: [detail*]
#    label: "Distinct Count"
#  }
#
#  measure: case_distinct_count_csat {
#    type: count_distinct
#    sql: ${casenumber}  ;;
#    drill_fields: [detail_csat*]
#    label: "Distinct Count CSAT-related"
#  }
#
#  measure: case_distinct_count_nps {
#    type: count_distinct
#    sql: ${casenumber}  ;;
#    drill_fields: [detail_csat*]
#    label: "Distinct Count NPS-related"
#  }
#
#  measure: case_distinct_count_drill {
#    type: count_distinct
#    sql: ${casenumber}  ;;
#    drill_fields: [detail*]
#    label: "Distinct Count with drill"
#
#    link: {
#      label: "By chat owner name"
#      url: "{{ CDC_by_chat_owner_name._link }}"
#    }
#
#    link: {
#      label: "By RHQ"
#      url: "{{ CDC_by_RHQ._link }}"
#    }
#    link: {
#      label: "By Country"
#      url: "{{ CDC_by_Country._link }}"
#    }
#    link: {
#      label: "By Status"
#      url: "{{ CDC_by_Status._link }}"
#    }
#    link: {
#      label: "By Office"
#      url: "{{ CDC_by_Office._link }}"
#    }
#    link: {
#      label: "By Channel"
#      url: "{{ CDC_by_Channel._link }}"
#    }
#    link: {
#      label: "By Customer"
#      url: "{{ CDC_by_Customer._link }}"
#    }
#    link: {
#      label: "By case_age_group"
#      url: "{{ CDC_by_case_age_group._link }}"
#    }
#    link: {
#      label: "By case_owner_name"
#      url: "{{ CDC_by_case_owner_name._link }}"
#    }
#    link: {
#      label: "By Priority"
#      url: "{{ CDC_by_Priority._link }}"
#    }
#    link: {
#      label: "By Customer Group"
#      url: "{{ CDC_by_Customer_Group._link }}"
#    }
#    link: {
#      label: "By L2 Intent"
#      url: "{{ CDC_by_L2_Intent._link }}"
#    }
#    link: {
#      label: "By L3 Intent"
#      url: "{{ CDC_by_L3_Intent._link }}"
#    }
#    link: {
#      label: "By Open Date Month"
#      url: "{{ CDC_by_Open_Date_Month._link }}"
#    }
#    link: {
#      label: "By Initial Queue Name"
#      url: "{{ CDC_by_Initial_Queue_Name._link }}"
#    }
#
#    link: {
#      label: "By Contact Name"
#      url: "{{ CDC_by_name._link }}"
#    }
#
#    link: {
#      label: "By Contact Email"
#      url: "{{ CDC_by_contactemail._link }}"
#    }
#
#    link: {
#      label: "By eComm ID"
#      url: "{{ CDC_by_ecomm_id._link }}"
#    }
#  }
#
#  measure: CDC_by_chat_owner_name  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [of_user.name, case_distinct_count_drill]
#    hidden: yes
#  }
#
#  measure: CDC_by_RHQ {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ Regional_Head_Office,case_distinct_count]
#    hidden: yes
#  }
#  measure: CDC_by_case_age_group {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_age_group,case_distinct_count]
#    hidden: yes
#  }
#  measure: CDC_by_Status {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ status,case_distinct_count]
#    hidden: yes
#  }
#  measure: CDC_by_case_owner_name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_owner_name,case_distinct_count]
#    hidden: yes
#  }
#  measure: CDC_by_Priority {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ priority ,case_distinct_count]
#    hidden: yes
#  }
#
#  measure: CDC_by_Country {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_country,case_distinct_count]
#    hidden: yes
#  }
#
#  measure: CDC_by_Office {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_office_code,case_distinct_count]
#    hidden: yes
#  }
#
#  measure: CDC_by_Channel {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [origin ,case_distinct_count]
#    hidden: yes
#  }
#  measure: CDC_by_Customer_Group{
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer_group.cust_grp_and_name,case_distinct_count]
#    hidden: yes
#  }
#  measure: CDC_by_Customer {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer.customer_cd_and_name,case_distinct_count]
#    hidden: yes
#  }
#  measure: CDC_by_L2_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [sub_category_l2 ,case_distinct_count]
#    hidden: yes
#  }
#  measure: CDC_by_L3_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [subordinate_category_l3 ,case_distinct_count]
#    hidden: yes
#  }
#  measure: CDC_by_Open_Date_Month {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [createddate_month ,case_distinct_count]
#    hidden: yes
#  }
#
#  measure: CDC_by_Initial_Queue_Name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [Initial_Queue_Name,case_distinct_count]
#    hidden: yes
#  }
#
#  measure: CDC_by_name  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [of_contact.name, case_distinct_count]
#    hidden: yes
#  }
#
#  measure: CDC_by_contactemail  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [contactemail, case_distinct_count]
#    hidden: yes
#  }
#
#  measure: CDC_by_ecomm_id {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ ecomm_id,case_distinct_count]
#    hidden: yes
#  }
#
#  measure: Avg_First_Response_Time {
#    type: average
#    sql: ${FIRST_RESPONSE_TIME_CASE} ;;
#    drill_fields: [detail*]
#    label: "Avg First Response Time"
#    value_format_name: decimal_1
#  }
#
#  dimension: First_Response_Time_Minutes {
#    type: number
#    sql: ${TABLE}.First_Response_Time_Minutes ;;
#    label: "First Response Time Minutes"
#    description: "To Plot the scatter plot outliers (FRT)"
#  }
#
#  dimension: Case_First_Response_Time_Minutes {
#    type: number
#    sql: ${TABLE}.First_Response_Time_Minutes ;;
#    label: "Case FRT (mins)"
#  }
#
#  measure: AVG_FIRST_RESPONSE_TIME {
#    type: average
#    sql: ${TABLE}.First_Response_Time_Minutes ;;
#    drill_fields: [detail*]
#    label: "Average First Response Time"
#    value_format_name: decimal_1
#    link: {
#      label: "By RHQ"
#      url: "{{ FRT_by_RHQ._link }}"
#    }
#    link: {
#      label: "By Country"
#      url: "{{ FRT_by_Country._link }}"
#    }
#    link: {
#      label: "By Status"
#      url: "{{ FRT_by_Status._link }}"
#    }
#    link: {
#      label: "By Office"
#      url: "{{ FRT_by_Office._link }}"
#    }
#    link: {
#      label: "By Channel"
#      url: "{{ FRT_by_Channel._link }}"
#    }
#    link: {
#      label: "By Customer"
#      url: "{{ FRT_by_Customer._link }}"
#    }
#    link: {
#      label: "By case_age_group"
#      url: "{{ FRT_by_case_age_group._link }}"
#    }
#    link: {
#      label: "By case_owner_name"
#      url: "{{ FRT_by_case_owner_name._link }}"
#    }
#    link: {
#      label: "By Priority"
#      url: "{{ FRT_by_Priority._link }}"
#    }
#    link: {
#      label: "By Customer Group"
#      url: "{{ FRT_by_Customer_Group._link }}"
#    }
#
#    link: {
#      label: "By L2 Intent"
#      url: "{{ FRT_by_L2_Intent._link }}"
#    }
#    link: {
#      label: "By L3 Intent"
#      url: "{{ FRT_by_L3_Intent._link }}"
#    }
#    link: {
#      label: "By Open Date Month"
#      url: "{{ FRT_by_Open_Date_Month._link }}"
#    }
#
#    link: {
#      label: "By Initial Queue Name"
#      url: "{{ FRT_by_Initial_Queue_Name._link }}"
#    }
#
#    link: {
#      label: "By Contact Name"
#      url: "{{ FRT_by_name._link }}"
#    }
#
#    link: {
#      label: "By Contact Email"
#      url: "{{ FRT_by_contactemail._link }}"
#    }
#
#    link: {
#      label: "By eComm ID"
#      url: "{{ FRT_by_ecomm_id._link }}"
#    }
#  }
#
#  measure: FRT_by_RHQ {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ Regional_Head_Office,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_case_age_group {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_age_group,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_Status {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ status,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_case_owner_name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_owner_name,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_Priority {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ priority,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_Country {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_country,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#
#  measure: FRT_by_Office {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_office_code,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#
#  measure: FRT_by_Channel {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [origin ,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_Customer_Group{
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer_group.cust_grp_and_name,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_Customer {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer.customer_cd_and_name,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_L2_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ sub_category_l2,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_L3_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ subordinate_category_l3,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#  measure: FRT_by_Open_Date_Month {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [createddate_month ,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#
#  measure: FRT_by_Initial_Queue_Name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [Initial_Queue_Name,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#
#  measure: FRT_by_name  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [of_contact.name, AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#
#  measure: FRT_by_contactemail  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [contactemail, AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#
#  measure: FRT_by_ecomm_id {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ ecomm_id,AVG_FIRST_RESPONSE_TIME]
#    hidden: yes
#  }
#
#  measure: AVG_FIRST_CONTACT_RESOLUTION {
#    type: average
#    sql: CASE
#          WHEN ${origin} = 'Chat' and ${TABLE}.is_fcr ='true' THEN 1
#          WHEN ${origin} = 'Chat' and ${TABLE}.is_fcr ='false' THEN 0
#          WHEN ${total_escalation} =0 and ${transfer_reason} is Null and ${active_case} ='No' THEN 1 ELSE 0 END ;;
#    drill_fields: [detail_fcr*]
#    label: "First Contact Resolution Ratio"
#    value_format_name: percent_0
#  }
#
#  measure: NURTURE_RATE {
#    type: average
#    sql: CASE WHEN ${is_nurtured} ='true' THEN 1 ELSE 0 END  ;;
#    drill_fields: [detail*]
#    label: "Nurturing Rate"
#    value_format_name: percent_0
#  }
#  measure: is_contract_customer {
#    type: average
#    label: "Is contract Customer"
#    sql: CASE WHEN ${contract_customer_name} is not null THEN 1 ELSE 0 END   ;;
#    value_format_name: percent_0
#  }
#
#  measure: has_container_number {
#    type: sum
#    label: "Has Container Number"
#    sql: CASE WHEN ${container_number} is not null THEN 1 ELSE 0 END   ;;
#    value_format_name: decimal_0
#  }
#
#  measure: has_booking_number {
#    type: sum
#    label: "Has Booking Number"
#    sql: CASE WHEN ${booking_number} is not null THEN 1 ELSE 0 END   ;;
#    value_format_name: decimal_0
#  }
#
#
#  dimension: Is_Chat_Self_Service {
#    type: string
#    sql: ${TABLE}.Is_Chat_Self_Service ;;
#    label: "Is Chat Self Service"
#    group_label: "Additional Information"
#  }
#
#  dimension: is_resolved_by_automation {
#    label: "Is resolved by automation"
#    type: string
#    sql: CASE WHEN ${case_owner.name}='Platform Integration User' THEN 'Yes' else 'No' END ;;
#  }
#
#  dimension: Automation_Type {
#    label: "Automation Type"
#    type: string
#    drill_fields: [drillfields*]
#    sql: CASE
#      WHEN ${merged_d_d_used}='true' THEN 'D&D'
#      WHEN ${lfd_used}='true' THEN 'LFD'
#      WHEN ${TABLE}.Is_Chat_Self_Service = "true" THEN 'Self-Service'
#      ELSE 'Others'
#      END ;;
#  }
#
#  measure: has_contract_number {
#    type: sum
#    label: "Has Contract Number"
#    sql: CASE WHEN ${contract_number} is not null THEN 1 ELSE 0 END   ;;
#    value_format_name: decimal_0
#  }
#
#  measure: queue_abandonment {
#    type: sum
#    sql: (CASE WHEN ${of_queue.developer_name} is not Null and ${status} not in ('Resolved','Closed') THEN 1 else 0 END) ;;
#    drill_fields: [detail*]
#  }
#
#  measure: queue_abandonment_ratio {
#    type: average
#    sql: (CASE WHEN ${of_queue.developer_name} is not Null and ${status} not in ('Resolved','Closed') THEN 1 else 0 END) ;;
#    value_format_name: percent_0
#  }
#
#  dimension_group: createddate_temp {
#    type: time
#    datatype: datetime
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    label: "Created Date - Do Not Use"
#    sql: ${TABLE}.CreatedDate ;;
#  }
#
#  dimension_group: createddate_filter {
#    type: time
#    datatype: datetime
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    group_label: "Open Date For Filter"
#    label: "Open Date For Filter"
#    sql: ${TABLE}.CreatedDate ;;
#  }
#
#  dimension: BOT_Cases {
#    type: string
#    sql: (CASE WHEN ${Automation_Type}="D&D" OR  ${Automation_Type}="LFD" THEN 'Yes' ELSE 'No' END) ;;
#    label: "BOT Cases"
#    drill_fields: [drillfields*]
#  }
#
#  dimension: case_handle_time_minutes {
#    label: "Case Handle Time Minutes"
#    type: string
#    sql:  ${TABLE}.Case_Handle_Time_Minutes ;;
#  }
#
## Below Dimension is created for DCN-966
#  dimension: is_aht_calculated_excluded {
#    type: string
#    description: "Refined AHT Logic for Open and Resolved dates after 1st Jan 2023"
#    sql: case when ((${createddate_filter_date}>=date(2023,01,01) and ${is_aht_calculated}="Yes") OR (${resolved_date_date}>=date(2023,01,01) and ${is_aht_calculated}="Yes"))
#          OR (${createddate_filter_date}<date(2023,01,01) and (${is_aht_calculated}="No" OR ${is_aht_calculated}="Yes")) then "Yes"
#          else "No"
#          end ;;
#  }
#
#  ### Created for DCN:947
#  parameter: Exclude_Awaiting_Internal_in_AHT{
#    description: "Used for toggle AHT"
#    type: string
#    default_value: "No"
#    allowed_value: {
#      label: "Yes"
#      value: "Yes"
#    }
#    allowed_value: {
#      label: "No"
#      value: "No"
#    }
#  }
#
#  measure: average_handling_time_new {
#    label: "Average Handling Time temp"
#    type: average
#    sql: case WHEN {% parameter Exclude_Awaiting_Internal_in_AHT %} = "Yes" and (${createddate_filter_date}<date(2023,01,01) ) THEN ${TABLE}.CASE_HANDLE_TIME_EXCL_INTERNAL_MINS
#      WHEN {% parameter Exclude_Awaiting_Internal_in_AHT %} = "No" and (${createddate_filter_date}>=date(2023,01,01) ) THEN ${TABLE}.Case_Handle_Time_Minutes
#      else null
#      end;;
#    value_format_name: decimal_1
#    #filters: [is_aht_calculated_excluded: "Yes"]
#  }
#
#  measure: case_handling_time {
#    label: "Case Handle Time (mins)"
#    type: average
#    sql:  ${TABLE}.Case_Handle_Time_Minutes ;;
#    value_format_name: decimal_1
#  }
#
#  measure: avg_handling_time {
#    label: "Avg Handle Time (Mins)"
#    type: number
#    drill_fields: [responsetime_details*]
#    sql: CASE
#          WHEN {% parameter handletime_Param %} = "Chat Transcript" THEN ${chat_handle_time_avg}
#          ELSE  ${average_handling_time_new} END;;
#    value_format_name: decimal_1
#  }
#
#  dimension: Case_Handle_Time_excl_Internal_mins {
#    type: number
#    sql: ${TABLE}.CASE_HANDLE_TIME_EXCL_INTERNAL_MINS ;;
#  }
#
#  measure: average_handling_time {
#    label: "Average Handling Time"
#    type: number
#    drill_fields: [responsetime_details*]
#    sql: CASE
#          WHEN {% parameter handletime_Param %} = "Chat Transcript" THEN ${chat_handle_time_avg}
#          ELSE  ${average_handling_time_new} END;;
#    value_format_name: decimal_1
#
#
#
#    link: {
#      label: "By RHQ"
#      url: "{{ AHT_by_RHQ._link }}"
#    }
#    link: {
#      label: "By Country"
#      url: "{{ AHT_by_Country._link }}"
#    }
#    link: {
#      label: "By Status"
#      url: "{{ AHT_by_Status._link }}"
#    }
#    link: {
#      label: "By Channel"
#      url: "{{ AHT_by_Channel._link }}"
#    }
#    link: {
#      label: "By Customer"
#      url: "{{ AHT_by_Customer._link }}"
#    }
#    link: {
#      label: "By Office"
#      url: "{{ AHT_by_Office._link }}"
#    }
#    link: {
#      label: "By case_age_group"
#      url: "{{ AHT_by_case_age_group._link }}"
#    }
#    link: {
#      label: "By case_owner_name"
#      url: "{{ AHT_by_case_owner_name._link }}"
#    }
#    link: {
#      label: "By Priority"
#      url: "{{ AHT_by_Priority._link }}"
#    }
#    link: {
#      label: "By Customer Group"
#      url: "{{ AHT_by_Customer_Group._link }}"
#    }
#    link: {
#      label: "By L2 Intent"
#      url: "{{ AHT_by_L2_Intent._link }}"
#    }
#    link: {
#      label: "By L3 Intent"
#      url: "{{ AHT_by_L3_Intent._link }}"
#    }
#    link: {
#      label: "By Open Date Month"
#      url: "{{ AHT_by_Open_Date_Month._link }}"
#    }
#    link: {
#      label: "By Initial Queue Name"
#      url: "{{ AHT_by_Initial_Queue_Name._link }}"
#    }
#
#    link: {
#      label: "By Contact Name"
#      url: "{{ AHT_by_name._link }}"
#    }
#
#    link: {
#      label: "By Contact Email"
#      url: "{{ AHT_by_contactemail._link }}"
#    }
#
#    link: {
#      label: "By eComm ID"
#      url: "{{ AHT_by_ecomm_id._link }}"
#    }
#  }
#
#  measure: AHT_by_RHQ {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ Regional_Head_Office,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_case_age_group {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_age_group,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_Status {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ status,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_case_owner_name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_owner_name,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_Priority {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ priority,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_Country {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_country,average_handling_time]
#    hidden: yes
#  }
#
#  measure: AHT_by_Office {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_office_code,average_handling_time]
#    hidden: yes
#  }
#
#  measure: AHT_by_Channel {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [origin ,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_Customer_Group{
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer_group.cust_grp_and_name,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_Customer {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer.customer_cd_and_name,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_L2_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [sub_category_l2 ,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_L3_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [subordinate_category_l3 ,average_handling_time]
#    hidden: yes
#  }
#  measure: AHT_by_Open_Date_Month {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [createddate_month ,average_handling_time]
#    hidden: yes
#  }
#
#  measure: AHT_by_Initial_Queue_Name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ Initial_Queue_Name,average_handling_time]
#    hidden: yes
#  }
#
#  measure: AHT_by_name  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [of_contact.name, average_handling_time]
#    hidden: yes
#  }
#
#  measure: AHT_by_contactemail  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [contactemail, average_handling_time]
#    hidden: yes
#  }
#
#  measure: AHT_by_ecomm_id {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ ecomm_id,average_handling_time]
#    hidden: yes
#  }
#
#  dimension : No_KA_Mapping {
#    type: string
#    sql: CASE WHEN ${total_escalation} >0 and ${of_escalation_history_pdt.role} IS NULL THEN 'Yes' ELSE 'No' END ;;
#    label: "No KA Mapping"
#  }
#
#
#  dimension: Initial_Queue_Name {
#    type: string
#    sql:CASE WHEN ${TABLE}.Origin = "Chat"  THEN ${chat_first_queue_name_detail} else ${TABLE}.Initial_Queue_Name END;;
#    label: "Initial Queue Name"
#  }
#
#  dimension: Case_Owned_by_System_Filter {
#    label: "Case Owned by System Filter"
#    type: string
#    sql: CASE WHEN ${case_owner.name}= "Platform Integration User" OR ${case_owner.name}= "CRM System User" OR ${case_owner.name}="Automated Process" THEN 'Yes' else 'No' END ;;
#  }
#
#  dimension: has_leave_message {
#    type: string
#    sql: ${TABLE}.Has_Leave_Message ;;
#    label: "Has Leave Message"
#  }
#
#  dimension: has_leave_message_filter {
#    label: "Has Leave Message Filter"
#    type: string
#    sql: case when ${TABLE}.Has_Leave_Message="true" then "Yes"
#          else "No"
#          end;;
#  }
#
#  measure : L2_mandatory_1 {
#    type: sum
#    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Booking Management' THEN 1 ELSE 0 END) ;;
#    label: "Mandatory L2_1"
#    drill_fields: [drillfields*]
#  }
#
#  measure : L2_mandatory_2 {
#    type: sum
#    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Claims' THEN 1 ELSE 0 END) ;;
#    label: "Mandatory L2_2"
#    drill_fields: [drillfields*]
#  }
#
#  measure : L2_mandatory_3 {
#    type: sum
#    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Disputes' THEN 1 ELSE 0 END) ;;
#    label: "Mandatory L2_3"
#    drill_fields: [drillfields*]
#  }
#
#  measure : L2_mandatory_4 {
#    type: sum
#    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Export Documentation' THEN 1 ELSE 0 END) ;;
#    label: "Mandatory L2_4"
#    drill_fields: [drillfields*]
#  }
#
#  measure : L2_mandatory_5 {
#    type: sum
#    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Import Documentation' THEN 1 ELSE 0 END) ;;
#    label: "Mandatory L2_5"
#    drill_fields: [drillfields*]
#  }
#
#  measure : L2_mandatory_6 {
#    type: sum
#    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Import Management' THEN 1 ELSE 0 END) ;;
#    label: "Mandatory L2_6"
#    drill_fields: [drillfields*]
#  }
#
#  measure : L2_mandatory_7 {
#    type: sum
#    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Invoice & Charges' THEN 1 ELSE 0 END) ;;
#    label: "Mandatory L2_7"
#    drill_fields: [drillfields*]
#  }
#
#  measure : L2_mandatory_8 {
#    type: sum
#    sql: (CASE WHEN ${TABLE}.Is_Booking_Contract_No_Required = 'true' and ${TABLE}.Sub_Category_L2 = 'Last Free Day / Demurrage & Detention' THEN 1 ELSE 0 END) ;;
#    label: "Mandatory L2_8"
#    drill_fields: [drillfields*]
#  }
#
#  measure: all_cases {
#    type: number
#    label: "All Cases"
#    sql: COUNT(DISTINCT CASE WHEN (CASE WHEN ${resolution_reason} IS NULL THEN 'None' ELSE ${resolution_reason} END  IN ('Customer Abandoned Chat', 'Customer Query Un-resolved', 'None', 'Customer Query Resolved')) THEN ${casenumber}  ELSE NULL END) ;;
#    drill_fields: [drillfields*]
#  }
#
#  measure: duplicate_cases {
#    type: number
#    label: "Duplicate Cases"
#    sql: COUNT(DISTINCT CASE WHEN ((CASE WHEN ${resolution_reason} IS NULL THEN 'None' ELSE ${resolution_reason} END) = 'Duplicate') THEN ${casenumber}  ELSE NULL END) ;;
#    drill_fields: [drillfields*]
#  }
#
#  measure: no_action_required_cases {
#    type: number
#    label: "No Action Required Cases"
#    sql: COUNT(DISTINCT CASE WHEN ((CASE WHEN ${resolution_reason} IS NULL THEN 'None' ELSE ${resolution_reason} END) = 'No Action Required') THEN ${casenumber}  ELSE NULL END) ;;
#    drill_fields: [drillfields*]
#  }
#
#  parameter: Geo_Param {
#    type: string
#    allowed_value: {
#      label: "Global"
#      value: "Global"
#    }
#    allowed_value: {
#      label: "RHQ"
#      value: "RHQ"
#    }
#    allowed_value: {
#      label: "Cluster Country"
#      value: "Cluster Country"
#    }
#    allowed_value: {
#      label: "Individual Country"
#      value: "Individual Country"
#    }
#    allowed_value: {
#      label: "Office"
#      value: "Office"
#    }
#    allowed_value: {
#      label: "Channel"
#      value: "Channel"
#    }
#    allowed_value: {
#      label: "Segment"
#      value: "Segment"
#    }
#    allowed_value: {
#      label: "Segment "
#      value: "Segment "
#    }
#    allowed_value: {
#      label: "Agent Role"
#      value: "Agent Role"
#    }
#    allowed_value: {
#      label: "Escalation Role"
#      value: "Escalation Role"
#    }
#    allowed_value: {
#      label: "Office Type"
#      value: "Office Type"
#    }
#    allowed_value: {
#      label: "Service Type"
#      value: "Service Type"
#    }
#  }
#
#
#  dimension: Reference_data {
#    type: string
#    sql: CASE
#          WHEN ${booking_number} is not null THEN 'Booking'
#          WHEN ${contract_number} is not null THEN 'Contract'
#          WHEN ${container_number} is not null THEN 'Container'
#          ELSE 'No Reference Number' END ;;
#    label:"Reference Data"
#
#  }
#
#  dimension: channel_type {
#    type: string
#    sql: (CASE WHEN ${TABLE}.origin="Chat" or ${TABLE}.origin="Web" THEN "Digital" ELSE "Traditional " END) ;;
#    label: "Channel Type"
#    group_label: "Case Information"
#    drill_fields: [drillfields*]
#  }
#
#  measure: deflection_ratio {
#    type: average
#    sql: (CASE WHEN ${origin} in ('Chat' , 'Web') THEN 1 ELSE 0 END);;
#    drill_fields: [detail*]
#    label: "Deflection Ratio"
#    value_format_name: percent_0
#
#
#    link: {
#      label: "By RHQ"
#      url: "{{ deflection_ratio_by_RHQ._link }}"
#    }
#
#    link: {
#      label: "By Country"
#      url: "{{ deflection_ratio_by_Country._link }}"
#    }
#
#    link: {
#      label: "By Status"
#      url: "{{ deflection_ratio_by_Status._link }}"
#    }
#
#    link: {
#      label: "By Channel"
#      url: "{{ deflection_ratio_by_Channel._link }}"
#    }
#
#    link: {
#      label: "By Customer"
#      url: "{{ deflection_ratio_by_Customer._link }}"
#    }
#
#    link: {
#      label: "By Office"
#      url: "{{ deflection_ratio_by_Office._link }}"
#    }
#
#    link: {
#      label: "By case_age_group"
#      url: "{{ deflection_ratio_by_case_age_group._link }}"
#    }
#
#    link: {
#      label: "By case_owner_name"
#      url: "{{ deflection_ratio_by_case_owner_name._link }}"
#    }
#
#    link: {
#      label: "By Priority"
#      url: "{{ deflection_ratio_by_Priority._link }}"
#    }
#
#    link: {
#      label: "By Customer Group"
#      url: "{{ deflection_ratio_by_Customer_Group._link }}"
#    }
#
#    link: {
#      label: "By L2 Intent"
#      url: "{{ deflection_ratio_by_L2_Intent._link }}"
#    }
#
#    link: {
#      label: "By L3 Intent"
#      url: "{{ deflection_ratio_by_L3_Intent._link }}"
#    }
#    link: {
#      label: "By Open Date Month"
#      url: "{{ deflection_ratio_by_Open_Date_Month._link }}"
#    }
#    link: {
#      label: "By Initial Queue Name"
#      url: "{{ deflection_ratio_by_Initial_Queue_Name._link }}"
#    }
#
#    link: {
#      label: "By Contact Name"
#      url: "{{ deflection_ratio_by_name._link }}"
#    }
#
#    link: {
#      label: "By Contact Email"
#      url: "{{ deflection_ratio_by_contactemail._link }}"
#    }
#
#    link: {
#      label: "By eComm ID"
#      url: "{{ deflection_ratio_by_ecomm_id._link }}"
#    }
#  }
#
#  measure: deflection_ratio_by_RHQ {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [Regional_Head_Office,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_case_age_group {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [case_age_group,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_Status {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [status,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_case_owner_name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [case_owner_name,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_Priority {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [priority,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_Country {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [case_country,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_Office {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [case_office_code,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_Channel {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [origin,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_Customer_Group{
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [of_customer_group.cust_grp_and_name,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_Customer {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [of_customer.customer_cd_and_name,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_L2_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [sub_category_l2 ,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_L3_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [subordinate_category_l3 ,deflection_ratio]
#    hidden: yes
#  }
#  measure: deflection_ratio_by_Open_Date_Month {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [createddate_month ,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_Initial_Queue_Name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [Initial_Queue_Name,deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_name  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [of_contact.name, deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_contactemail  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [contactemail, deflection_ratio]
#    hidden: yes
#  }
#
#  measure: deflection_ratio_by_ecomm_id {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ ecomm_id,deflection_ratio]
#    hidden: yes
#  }
#
#  dimension_group: Case_Resolved_Date_Time {
#    type: time
#    datatype: datetime
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Case_Resolved_Date_Time ;;
#    label: "Case Resolved Date Time"
#  }
#
#  dimension: createddate_dynamic {
#    type: date
#    datatype: datetime
#    label: "Open Date Dynamic"
#    sql:
#    CASE
#    WHEN {% parameter timeframe_picker %} = 'Day' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'),DAY)
#    WHEN {% parameter timeframe_picker %} = 'Week' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'), WEEK(MONDAY))
#    WHEN {% parameter timeframe_picker %} = 'Month' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'),MONTH)
#    WHEN {% parameter timeframe_picker %} = 'Quarter' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'),QUARTER)
#    WHEN {% parameter timeframe_picker %} = 'Year' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${createddate_raw}),'{{_query._query_timezone}}'),YEAR)
#    ELSE NULL
#    END ;;
#    convert_tz: no
#  }
#
#  parameter: timeframe_picker {
#    label: "Date Granularity"
#    type: string
#    allowed_value: { value: "Day" }
#    allowed_value: { value: "Week" }
#    allowed_value: { value: "Month" }
#    allowed_value: { value: "Quarter" }
#    allowed_value: { value: "Year" }
#    default_value: "Month"
#
#  }
#
#  dimension: isWithInBusinessHour {
#    type: string
#    sql: CASE WHEN ${TABLE}.isWithInBusinessHour ='true' THEN 'Yes' ELSE 'No' END ;;
#    label: "With In Business Hour"
#  }
#
#  dimension: is_channel_applicable_for_FRT {
#    type: string
#    sql: (CASE WHEN ${TABLE}.Origin ="Phone"  THEN "No" ELSE "Yes" END) ;;
#    label: : "Is Channel Applicable For FRT"
#    group_label: "Case Information"
#  }
#
#  measure: detractor_percentage{
#    type: average
#    sql: Case WHEN ${nps_group}='Detractors' THEN 1 ELSE 0 END ;;
#    label:"Detractor Percentage"
#    group_label: "Customer Feedback"
#    filters: [nps_group: "-No Rating"]
#    value_format_name: percent_0
#    #hidden: yes
#  }
#
#  measure: promoter_percentage{
#    type: average
#    sql: Case WHEN ${nps_group}='Promoters' THEN 1 ELSE 0 END ;;
#    label:"Promoters Percentage"
#    group_label: "Customer Feedback"
#    filters: [nps_group: "-No Rating"]
#    value_format_name: percent_0
#    #hidden: yes
#  }
#
#  measure: global_nps{
#    type: number
#    sql: (${promoter_percentage} - ${detractor_percentage}) *100 ;;
#    label:"Global NPS"
#    group_label: "Customer Feedback"
#    value_format_name: decimal_0
#    drill_fields: [detail*]
#
#    link: {
#      label: "By RHQ"
#      url: "{{ global_nps_by_RHQ._link }}"
#    }
#    link: {
#      label: "By Country"
#      url: "{{ global_nps_by_Country._link }}"
#    }
#    link: {
#      label: "By Status"
#      url: "{{ global_nps_by_Status._link }}"
#    }
#    link: {
#      label: "By Channel"
#      url: "{{ global_nps_by_Channel._link }}"
#    }
#    link: {
#      label: "By Customer"
#      url: "{{ global_nps_by_Customer._link }}"
#    }
#    link: {
#      label: "By Office"
#      url: "{{ global_nps_by_Office._link }}"
#    }
#    link: {
#      label: "By case_age_group"
#      url: "{{ global_nps_by_case_age_group._link }}"
#    }
#    link: {
#      label: "By case_owner_name"
#      url: "{{ global_nps_by_case_owner_name._link }}"
#    }
#    link: {
#      label: "By Priority"
#      url: "{{ global_nps_by_Priority._link }}"
#    }
#    link: {
#      label: "By Customer Group"
#      url: "{{ global_nps_by_Customer_Group._link }}"
#    }
#    link: {
#      label: "By L2 Intent"
#      url: "{{ global_nps_by_L2_Intent._link }}"
#    }
#    link: {
#      label: "By L3 Intent"
#      url: "{{ global_nps_by_L3_Intent._link }}"
#    }
#    link: {
#      label: "By Open Date Month"
#      url: "{{ global_nps_by_Open_Date_Month._link }}"
#    }
#
#    link: {
#      label: "By Initial Queue Name"
#      url: "{{ global_nps_by_Initial_Queue_Name._link }}"
#    }
#
#
#    link: {
#      label: "By Contact Name"
#      url: "{{ global_nps_by_name._link }}"
#    }
#
#    link: {
#      label: "By Contact Email"
#      url: "{{ global_nps_by_contactemail._link }}"
#    }
#
#    link: {
#      label: "By eComm ID"
#      url: "{{ global_nps_by_ecomm_id._link }}"
#    }
#  }
#
#  measure: global_nps_by_RHQ {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ Regional_Head_Office,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_case_age_group {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_age_group,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_Status {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ status,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_case_owner_name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_owner_name,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_Priority {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ priority,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_Country {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_country,global_nps]
#    hidden: yes
#  }
#
#  measure: global_nps_by_Office {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_office_code,global_nps]
#    hidden: yes
#  }
#
#  measure: global_nps_by_Channel {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [origin,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_Customer_Group{
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer_group.cust_grp_and_name,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_Customer {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer.customer_cd_and_name,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_L2_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [sub_category_l2 ,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_L3_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [subordinate_category_l3 ,global_nps]
#    hidden: yes
#  }
#  measure: global_nps_by_Open_Date_Month {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [createddate_month ,global_nps]
#    hidden: yes
#  }
#
#  measure: global_nps_by_Initial_Queue_Name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [Initial_Queue_Name,global_nps]
#    hidden: yes
#  }
#
#  measure: global_nps_by_name  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [of_contact.name, global_nps]
#    hidden: yes
#  }
#
#  measure: global_nps_by_contactemail  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [contactemail, global_nps]
#    hidden: yes
#  }
#
#  measure: global_nps_by_ecomm_id {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ ecomm_id, global_nps]
#    hidden: yes
#  }
#
#  dimension: nps_group {
#    type: string
#    sql: (CASE
#          WHEN ${TABLE}.Case_Net_Promoter_Score <7 THEN 'Detractors'
#          WHEN ${TABLE}.Case_Net_Promoter_Score >=7 and ${TABLE}.Case_Net_Promoter_Score <9 THEN 'Passives'
#          WHEN ${TABLE}.Case_Net_Promoter_Score >=9 THEN 'Promoters'
#          ELSE 'No Rating' END);;
#    label:"NPS Segment"
#    group_label: "Customer Feedback"
#
#  }
#
#  dimension: Case_Net_Promoter_Score {
#    type: string
#    sql: ${TABLE}.Case_Net_Promoter_Score ;;
#    label: "Case Net Promotor Score"
#  }
#
#  dimension: Service_Contract_Customer  {
#    type: string
#    sql: (CASE
#      WHEN ${accountid} is not null AND ${contract_customer_name} is not null THEN 'Both'
#      WHEN ${accountid} is not null THEN 'Service Customer'
#      WHEN ${contract_customer_name} is not null THEN 'Contract Customer'
#      Else 'None' END);;
#    label: "Service or Contract Customer"
#  }
#
#  dimension: case_channel_or_geography_dynamic {
#    type: string
#    label: "Geography Dynamic Backlog History"
#    sql: CASE
#          WHEN {% parameter Customer_Param %} = "RHQ" THEN ${Regional_Head_Office}
#          WHEN {% parameter Customer_Param %} = "Cluster Country" THEN ${case_country}
#          WHEN {% parameter Customer_Param %} = "Individual Country" THEN ${country}
#          WHEN {% parameter Customer_Param %} = "Office" THEN ${office}
#          WHEN {% parameter Customer_Param %} = "Channel" THEN ${origin}
#          WHEN {% parameter Customer_Param %} = "Status" THEN ${of_case_history_status_stat.status}
#          WHEN {% parameter Customer_Param %} = "Segment" THEN ${of_customer_group.key_acct_tp_cd}
#          WHEN {% parameter Customer_Param %} = "Agent Role" THEN ${case_owner.profile_name_service}
#          WHEN {% parameter Customer_Param %} = "Escalation Role" THEN ${of_escalation_history_pdt.role}
#          WHEN {% parameter Customer_Param %} = "Office Type" THEN ${case_owner.officetype}
#          WHEN {% parameter Customer_Param %} = "Service Type" THEN ${type}
#          ELSE "Global" END;;
#    drill_fields: [drillfields*]
#  }
#
#
#  measure: customer_satisfaction_ratio_case_chat {
#    type: number
#    label: "CSAT Case/Chat"
#    sql: case when {% parameter csat_Param %}= "Case Level" then
#         ${Customer_satisfaction_ratio}
#        when {% parameter csat_Param %}= "Chat Transcript"  then
#          ${Customer_chat_satisfaction_ratio}
#          else null
#          end;;
#    value_format_name: percent_0
#    drill_fields: [detail_csat*]
#  }
#
#  dimension: rating_case_chat {
#    type: string
#    label: "Rating Case/Chat"
#    sql: case when {% parameter csat_Param %}= "Case Level" then
#         ${case_rating}
#        when {% parameter csat_Param %}= "Chat Transcript"  then
#          ${chat_case_rating}
#          else null
#          end;;
#    drill_fields: [drillfields*]
#  }
#
#  parameter: csat_Param {
#    type: string
#    allowed_value: {
#      label: "Case Level"
#      value: "Case Level"
#    }
#    allowed_value: {
#      label: "Chat Transcript"
#      value: "Chat Transcript"
#    }
#  }
#
#  measure: all_rating{
#    type: count_distinct
#    sql: Case WHEN ${case_rating}='Good' OR ${case_rating}='Bad'  THEN 1 ELSE 0 END ;;
#    label:"All Rating Case"
#  }
#
#  measure: good_rating{
#    type: count_distinct
#    sql: Case WHEN ${case_rating}='Good'  THEN 1 ELSE 0 END ;;
#    label:"Good Rating Case"
#  }
#
#  measure: difference_rating_case{
#    type: number
#    sql: (${good_rating}/NULLIF(${all_rating}, 0)) ;;
#    label:"Difference Rating Case"
#    drill_fields: [detail*]
#  }
#
#  measure: csat_case_analysis {
#    type: number
#    label: "CSAT Case Analysis"
#    sql: case when {% parameter csat_Param %}= "Case Level" then
#         ${difference_rating_case}
#        when {% parameter csat_Param %}= "Chat Transcript"  then
#          ${difference_rating_chat}
#          else null
#          end;;
#    value_format_name: percent_0
#    drill_fields: [drillfields*]
#  }
#
#
#  dimension: customer_segment_number {
#    type: string
#    sql: CASE
#          WHEN ${of_customer_group.key_acct_tp_cd} ='GKA' THEN '1'
#          WHEN ${of_customer_group.key_acct_tp_cd} ='RKA' THEN '2'
#          WHEN ${of_customer_group.key_acct_tp_cd} ='LKA' THEN '3'
#          ELSE '4' END
#          ;;
#    label: "customer segment number"
#  }
#
#  dimension: customer_segment_number2 {
#    type: string
#    order_by_field: customer_segment_number
#    sql: CASE
#          WHEN ${of_customer_group.key_acct_tp_cd} ='GKA' THEN 'GKA'
#          WHEN ${of_customer_group.key_acct_tp_cd} ='RKA' THEN 'RKA'
#          WHEN ${of_customer_group.key_acct_tp_cd} ='LKA' THEN 'LKA'
#          WHEN ${of_customer_group.key_acct_tp_cd} ='ONECare' THEN 'ONECare'
#          ELSE '∅' END
#          ;;
#    label: "customer segment number2"
#  }
#
#  parameter: Customer_Param {
#    type: string
#    label: "Customer Parameter"
#    allowed_value: {
#      label: "Global"
#      value: "Global"
#    }
#    allowed_value: {
#      label: "RHQ"
#      value: "RHQ"
#    }
#    allowed_value: {
#      label: "Cluster Country"
#      value: "Cluster Country"
#    }
#    allowed_value: {
#      label: "Individual Country"
#      value: "Individual Country"
#    }
#    allowed_value: {
#      label: "Office"
#      value: "Office"
#    }
#    allowed_value: {
#      label: "Channel"
#      value: "Channel"
#    }
#    allowed_value: {
#      label: "Status"
#      value: "Status"
#    }
#    allowed_value: {
#      label: "Segment"
#      value: "Segment"
#    }
#    allowed_value: {
#      label: "Agent Role"
#      value: "Agent Role"
#    }
#    allowed_value: {
#      label: "Escalation Role"
#      value: "Escalation Role"
#    }
#    allowed_value: {
#      label: "Office Type"
#      value: "Office Type"
#    }
#    allowed_value: {
#      label: "Service Type"
#      value: "Service Type"
#    }
#  }
#
#  dimension: label {
#    type: string
#    sql: ${TABLE}.Label ;;
#    label: "Label"
#  }
#
#  measure: Abandoned_ratio {
#    type: average
#    sql: CASE WHEN ${resolution_reason} = 'Customer Abandoned Chat' THEN 1 ELSE 0 END;;
#    drill_fields: [detail*]
#    label: "Abandoned Ratio"
#    value_format_name: percent_0
#  }
#
#
#  measure: Customer_satisfaction_ratio {
#    type: average
#    sql: CASE WHEN ${case_rating} = 'Good' THEN 1 ELSE 0 END;;
#    drill_fields: [detail*]
#    label: "Customer Satisfaction Ratio"
#    filters: [case_rating: "-No Rating"]
#    value_format_name: percent_0
#  }
#
#  measure: Automation_ratio {
#    type: average
#    sql: (CASE WHEN ${is_resolved_by_automation} = 'Yes' and ${Automation_Type} in ('D&D', 'LFD', 'Self-Service') THEN 1 ELSE 0 END);;
#    drill_fields: [detail*]
#    label: "Automation Ratio"
#    value_format_name: percent_0
#  }
#
#  measure: Case_Resolution_ratio {
#    type: average
#    sql: CASE WHEN ${status} in ('Resolved' , 'Closed')  THEN 1 ELSE 0 END;;
#    drill_fields: [detail*]
#    label: "Case Resolution Ratio"
#    value_format_name: percent_0
#  }
#
#  dimension: filter_start{
#    type: date
#    datatype: datetime
#    sql: {% date_start createddate_filter_date %} ;;
#  }
#
#  dimension: filter_end{
#    type: date
#    datatype: datetime
#    sql: {% date_end createddate_filter_date %} ;;
#  }
#
#  dimension : ct_owner_name {
#    type : string
#    sql:  CASE WHEN ${ct_queue.developer_name} is not Null then ${ct_queue.developer_name} else ${ct_owner.name} END;;
#    label : "Owner Name"
#  }
#
#  dimension : ct_owner_name1 {
#    type : string
#    sql:  CASE WHEN ${ct_queue.developer_name} is not Null then ${ct_queue.developer_name} else ${ct_owner.name} END;;
#    label : "Chat Owner Name"
#  }
#
#  parameter: handletime_Param {
#    type: string
#    allowed_value: {
#      label: "Case Level"
#      value: "Case Level"
#    }
#    allowed_value: {
#      label: "Chat Transcript"
#      value: "Chat Transcript"
#    }
#  }
#
#  parameter: responsetime_Param {
#    type: string
#    allowed_value: {
#      label: "Case Level"
#      value: "Case Level"
#    }
#    allowed_value: {
#      label: "Chat Transcript"
#      value: "Chat Transcript"
#    }
#  }
#
#  dimension: Case_Resolved_Date_Time_dynamic {
#    type: date
#    datatype: datetime
#    label: "Resolved Date Dynamic"
#    sql:
#    CASE
#    WHEN {% parameter timeframe_picker %} = 'Day' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'),DAY)
#    WHEN {% parameter timeframe_picker %} = 'Week' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'), WEEK(MONDAY))
#    WHEN {% parameter timeframe_picker %} = 'Month' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'),MONTH)
#    WHEN {% parameter timeframe_picker %} = 'Quarter' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'),QUARTER)
#    WHEN {% parameter timeframe_picker %} = 'Year' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Case_Resolved_Date_Time_raw}),'{{_query._query_timezone}}'),YEAR)
#    ELSE NULL
#    END ;;
#    convert_tz: no
#  }
#
#  measure: case_escalation_ratio {
#    type: average
#    sql: CASE WHEN ${total_escalation} >0  THEN 1 ELSE 0 END;;
#    label: "Case Escalation Ratio"
#    drill_fields: [escdetail*]
#    value_format_name: percent_0
#  }
#
#  measure: number_of_escalated_cases{
#    type: count_distinct
#    sql: case when ${total_escalation}>0 then ${casenumber} else null end;;
#    drill_fields: [detail*]
#    label: "Number of Escalated Cases"
#  }
#
#  measure: escalation_ratio {
#    type:number
#    sql: (${number_of_escalated_cases}/${case_distinct_count}) ;;
#    value_format_name: percent_0
#    drill_fields: [detail*]
#  }
#
#  measure: non_esc {
#    type: average
#    sql: case when ${total_escalation}=0 then 1 else 0 end ;;
#    drill_fields: [detail*]
#    value_format_name: percent_0
#  }
#
#
#  measure: global_nps_case_chat {
#    type: number
#    label: "Global NPS Case/Chat"
#    sql: case when {% parameter globalnps_Param %}= "Case Level" then
#         ${global_nps}
#        when {% parameter globalnps_Param %}= "Chat Transcript"  then
#          ${chat_global_nps}
#          else null
#          end;;
#    drill_fields: [detail_csat*]
#  }
#
#  dimension: nps_segment_case_chat {
#    type: string
#    label: "NPS Segment Case/Chat"
#    sql: case when {% parameter globalnps_Param %}= "Case Level" then
#         ${nps_group}
#        when {% parameter globalnps_Param %}= "Chat Transcript"  then
#          ${chat_nps_group}
#          else null
#          end;;
#  }
#
#  parameter: globalnps_Param {
#    type: string
#    allowed_value: {
#      label: "Case Level"
#      value: "Case Level"
#    }
#    allowed_value: {
#      label: "Chat Transcript"
#      value: "Chat Transcript"
#    }
#  }
#
#
#  measure: esc_ratio {
#    type: number
#    sql: 100-${non_esc} ;;
#    drill_fields: [detail*]
#    value_format_name: percent_0
#  }
#
#  dimension: FIRST_RESPONSE_TIME_CASE {
#    type: number
#    label: "FIRST RESPONSE TIME CASE"
#    description: "Identifies First response time for case & chat handle time "
#    sql: case when {% parameter responsetime_Param %}= "Case Level" then
#         ${TABLE}.First_Response_Time_Minutes
#        when {% parameter responsetime_Param %}= "Chat Transcript" and ${Chat_First_Response_Time_Mins} >0 then
#          ${Chat_First_Response_Time_Mins}
#          else null
#          end;;
#  }
#
#  measure: AVG_FIRST_RESPONSE_TIME_NEW {
#    type: average
#    sql: ${FIRST_RESPONSE_TIME_CASE} ;;
#    drill_fields: [responsetime_details*]
#    label: "Average First Response Time New"
#    value_format_name: decimal_1
#    sql_distinct_key: ${FRT_sql_distinct_key} ;;
#
#    link: {
#      label: "By RHQ"
#      url: "{{ FRT_New_by_RHQ._link }}"
#    }
#    link: {
#      label: "By Country"
#      url: "{{ FRT_New_by_Country._link }}"
#    }
#    link: {
#      label: "By Status"
#      url: "{{ FRT_New_by_Status._link }}"
#    }
#    link: {
#      label: "By Office"
#      url: "{{ FRT_New_by_Office._link }}"
#    }
#    link: {
#      label: "By Channel"
#      url: "{{ FRT_New_by_Channel._link }}"
#    }
#    link: {
#      label: "By Customer"
#      url: "{{ FRT_New_by_Customer._link }}"
#    }
#    link: {
#      label: "By case_age_group"
#      url: "{{ FRT_New_by_case_age_group._link }}"
#    }
#    link: {
#      label: "By case_owner_name"
#      url: "{{ FRT_New_by_case_owner_name._link }}"
#    }
#    link: {
#      label: "By Priority"
#      url: "{{ FRT_New_by_Priority._link }}"
#    }
#    link: {
#      label: "By Customer Group"
#      url: "{{ FRT_New_by_Customer_Group._link }}"
#    }
#
#    link: {
#      label: "By L2 Intent"
#      url: "{{ FRT_New_by_L2_Intent._link }}"
#    }
#    link: {
#      label: "By L3 Intent"
#      url: "{{ FRT_New_by_L3_Intent._link }}"
#    }
#    link: {
#      label: "By Open Date Month"
#      url: "{{ FRT_New_by_Open_Date_Month._link }}"
#    }
#
#    link: {
#      label: "By Initial Queue Name"
#      url: "{{ FRT_New_by_Initial_Queue_Name._link }}"
#    }
#
#    link: {
#      label: "By Contact Name"
#      url: "{{ FRT_New_by_name._link }}"
#    }
#
#    link: {
#      label: "By Contact Email"
#      url: "{{ FRT_New_by_contactemail._link }}"
#    }
#
#    link: {
#      label: "By eComm ID"
#      url: "{{ FRT_New_by_ecomm_id._link }}"
#    }
#  }
#
#  measure: FRT_New_by_RHQ {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ Regional_Head_Office,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_case_age_group {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_age_group,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_Status {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ status,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_case_owner_name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_owner_name,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_Priority {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ priority,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_Country {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_country,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#
#  measure: FRT_New_by_Office {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ case_office_code,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#
#  measure: FRT_New_by_Channel {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [origin ,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_Customer_Group{
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer_group.cust_grp_and_name,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_Customer {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ of_customer.customer_cd_and_name,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_L2_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ sub_category_l2,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_L3_Intent {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ subordinate_category_l3,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#  measure: FRT_New_by_Open_Date_Month {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [createddate_month ,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#
#  measure: FRT_New_by_Initial_Queue_Name {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [Initial_Queue_Name,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#
#  measure: FRT_New_by_name  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [of_contact.name, AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#
#  measure: FRT_New_by_contactemail  {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [contactemail, AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#
#  measure: FRT_New_by_ecomm_id {
#    type: count_distinct
#    sql: ${oneforce_id};;
#    drill_fields: [ ecomm_id,AVG_FIRST_RESPONSE_TIME_NEW]
#    hidden: yes
#  }
#
#
#  dimension: original_record_type {
#    type: string
#    sql: ${TABLE}.Original_Record_Type ;;
#    label:"Original Record Type"
#  }
#
#  dimension: ecomm_id {
#    label: "eComm ID"
#    type: string
#    sql: ${TABLE}.Contact_eComm_User_ID ;;
#    drill_fields: [drillfields*]
#  }
#
#  dimension: no_of_times_case_reopen{
#    label: "No of times case reopen"
#    type: number
#    sql: ${TABLE}.No_of_Times_Case_Reopen ;;
#  }
#
#  dimension: is_reopened {
#    label: "Is Reopened"
#    type: string
#    sql: ${TABLE}.Is_Reopened ;;
#  }
#
#
#  dimension: Case_reopened {
#    label: "Case Reopened"
#    type: string
#    sql: case when ${is_reopened}="true" Then "Yes" Else "No" End;;
#  }
#
#  dimension: is_transfer {
#    type: string
#    label: "Is Transfer"
#    sql: ${TABLE}.IsTransfer ;;
#  }
#
#  dimension: total_transfer {
#    type: number
#    label: "Total Transfer"
#    sql:  ${TABLE}.Total_Transfer;;
#    drill_fields: [transferdetail*]
#  }
#
#
#  dimension:group_total_transfer  {
#    type: string
#    label: "Group Total Transfer"
#    sql:  case when   ${TABLE}.Total_Transfer=0 then 'Total Transfers: 0'
#          when   ${TABLE}.Total_Transfer=1 then 'Total Transfers: 01'
#          when   ${TABLE}.Total_Transfer=2 then 'Total Transfers: 02'
#          when   ${TABLE}.Total_Transfer=3 then 'Total Transfers: 03'
#          when   ${TABLE}.Total_Transfer=4 then 'Total Transfers: 04'
#          when   ${TABLE}.Total_Transfer=5 then 'Total Transfers: 05'
#                     when 6<=  ${TABLE}.Total_Transfer and ${TABLE}.Total_Transfer  <=50 then 'Total Transfers: 06-50'
#                     when 51<=  ${TABLE}.Total_Transfer and ${TABLE}.Total_Transfer  <=100 then 'Total Transfers: 51-100'
#                    else 'Total Transfers:100 Above' end
#                     ;;
#  }
#
#
#  measure: Agent {
#    type: number
#    label: "Agent"
#    sql: COUNT(DISTINCT CASE WHEN ((CASE WHEN (CASE WHEN case_owner.FirstName IS NULL THEN case_owner.LastName WHEN case_owner.LastName IS NULL THEN case_owner.FirstName ELSE  concat(case_owner.FirstName," ",case_owner.LastName) END)='Platform Integration User' THEN 'Yes' else 'No' END) = 'No') THEN ${casenumber}  ELSE NULL END)  ;;
#    drill_fields: [drillfields*]
#  }
#
#  measure: DD {
#    type: number
#    label: "D&D"
#    sql:  COUNT(DISTINCT CASE WHEN (((CASE WHEN (CASE WHEN case_owner.FirstName IS NULL THEN case_owner.LastName WHEN case_owner.LastName IS NULL THEN case_owner.FirstName ELSE  concat(case_owner.FirstName," ",case_owner.LastName) END)='Platform Integration User' THEN 'Yes' else 'No' END) = 'Yes')) AND (((CASE
#      WHEN Merged_D_D_Used='true' THEN 'D&D'
#      WHEN LFD_Used='true' THEN 'LFD'
#      WHEN ${Is_Chat_Self_Service} = "true" THEN 'Self-Service'
#      ELSE 'Others'
#      END) = 'D&D')) THEN ${casenumber}  ELSE NULL END) ;;
#    drill_fields: [drillfields*]
#  }
#
#  measure: LFD {
#    type: number
#    label: "LFD"
#    sql: COUNT(DISTINCT CASE WHEN (((CASE WHEN (CASE WHEN case_owner.FirstName IS NULL THEN case_owner.LastName WHEN case_owner.LastName IS NULL THEN case_owner.FirstName ELSE  concat(case_owner.FirstName," ",case_owner.LastName) END)='Platform Integration User' THEN 'Yes' else 'No' END) = 'Yes')) AND (((CASE
#      WHEN Merged_D_D_Used='true' THEN 'D&D'
#      WHEN LFD_Used='true' THEN 'LFD'
#      WHEN ${Is_Chat_Self_Service} = "true" THEN 'Self-Service'
#      ELSE 'Others'
#      END) = 'LFD')) THEN ${casenumber}  ELSE NULL END) ;;
#    drill_fields: [drillfields*]
#  }
#
#  measure: selfservice {
#    type: number
#    label: "Self-Service"
#    sql:  COUNT(DISTINCT CASE WHEN (((CASE WHEN (CASE WHEN case_owner.FirstName IS NULL THEN case_owner.LastName WHEN case_owner.LastName IS NULL THEN case_owner.FirstName ELSE  concat(case_owner.FirstName," ",case_owner.LastName) END)='Platform Integration User' THEN 'Yes' else 'No' END) = 'Yes')) AND (((CASE
#      WHEN Merged_D_D_Used='true' THEN 'D&D'
#      WHEN LFD_Used='true' THEN 'LFD'
#      WHEN ${Is_Chat_Self_Service} = "true" THEN 'Self-Service'
#      ELSE 'Others'
#      END) = 'Self-Service')) THEN ${casenumber}  ELSE NULL END) ;;
#    drill_fields: [drillfields*]
#
#  }
#
#  dimension: intent_key {
#    type: string
#    label: "Intent Key"
#    sql: ${TABLE}.Intent_Key ;;
#  }
#
#  dimension : is_aht_calculated {
#    type: string
#    sql: CASE
#          WHEN ${TABLE}.Is_AHT_Calculated = 'true' THEN 'Yes'
#          WHEN ${TABLE}.Is_AHT_Calculated = 'false' THEN 'No' ELSE NULL END ;;
#    label: "AHT Calculated"
#  }
#
#  dimension: no_reference_reason {
#    label: "No Reference Reason"
#    type: string
#    sql: CASE
#           WHEN ${TABLE}.No_Reference_Reason = 'Not applicable' THEN 'Not applicable'
#           WHEN ${TABLE}.No_Reference_Reason = 'Undetermined from multiple references' THEN 'Undetermined from multiple references'
#           WHEN ${TABLE}.No_Reference_Reason = 'Customer unwilling to provide' THEN 'Customer unwilling to provide'
#           WHEN ${TABLE}.No_Reference_Reason = 'Not yet available' THEN 'Not yet available'
#           ELSE 'None' END ;;
#    drill_fields: [drillfields*]
#
#  }
#
#  #DCN-973/977: including target line
#  dimension: kpi_in_query {
#    type: string
#    sql: CASE WHEN {% if of_case_pdt.AVG_FIRST_RESPONSE_TIME_NEW._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'First Response Time'
#                    WHEN {% if of_case_pdt.Achieved_FRT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'First Response Time'
#                    WHEN {% if of_case_pdt.AVG_FIRST_CONTACT_RESOLUTION._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'First Contact Resolution'
#                    WHEN {% if of_case_pdt.case_escalation_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Case Escalation'
#                    WHEN {% if of_case_pdt.average_handling_time._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Average Handling Time'
#                    WHEN {% if of_case_pdt.Achieved_AHT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Average Handling Time'
#                    WHEN {% if of_case_pdt.Abandoned_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Abandoned Chat Ratio'
#                    WHEN {% if of_case_pdt.customer_satisfaction_ratio_case_chat._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'CSAT'
#                    WHEN {% if of_case_pdt.deflection_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 'Chat + Web Form Usage'
#                    ELSE null END
#          ;;
#  }
#
#  measure: target_for_chat {
#    label: "Chat Target"
#    type: max
#    sql:
#        CASE WHEN ${is_channel_filter} = true
#        THEN (
#              CASE WHEN {% if of_case_pdt.Achieved_FRT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 0.9
#                   WHEN {% if of_case_pdt.Achieved_AHT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 0.9
#                   WHEN ${of_service_kpi_target.units} = '%'
#                    THEN ${of_service_kpi_target.kpi_value}/100
#              ELSE ${of_service_kpi_target.kpi_value} END
#             )
#        ELSE NULL END
#        ;;
#    filters: [origin: "Chat"]
#  }
#
#  measure: target_for_web {
#    label: "Web Target"
#    type: max
#    sql:
#        CASE WHEN ${is_channel_filter} = true
#        THEN (
#              CASE WHEN {% if of_case_pdt.Achieved_FRT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 0.9
#                   WHEN {% if of_case_pdt.Achieved_AHT_ratio._in_query %} 1=1 {% else %} 1=0 {% endif %} THEN 0.9
#                   WHEN ${of_service_kpi_target.units} = '%'
#                    THEN ${of_service_kpi_target.kpi_value}/100
#                ELSE ${of_service_kpi_target.kpi_value} END
#             )
#        ELSE NULL END
#        ;;
#    filters: [origin: "Web"]
#  }
#
#  measure: target_for_ChatWeb_Form_Usage {
#    label: "Chat+Web Form Usage Target"
#    type: max
#    sql:
#
#        CASE WHEN ${of_service_kpi_target.units} = '%'
#        THEN ${of_service_kpi_target.kpi_value}/100
#        ELSE ${of_service_kpi_target.kpi_value} END
#        ;;
#    filters: [origin: "Chat, Web"]
#  }
#
#  dimension: is_channel_filter  {
#    type: yesno
#    hidden: yes
#    sql: {{ of_case_pdt.origin._is_filtered }}  ;;
#  }
#
#  ############## DCN-1004 Target-bar-and-Target-Achievement ##########################
#
#  dimension: Average_Chat_Handling_Time {
#    label: "Avg Chat Handling Time"
#    type: number
#    sql: ${TABLE}.Average_Chat_Handle_Time ;;
#  }
#
#  dimension: HANDLE_TIME_MINS {
#    type: number
#    label: "AHT mins (case/chat)"
#    description: "Identifies Handle time for case & chat"
#    sql: CASE WHEN {% parameter handletime_Param %}= "Case Level"
#                THEN CAST(${TABLE}.Case_Handle_Time_Minutes as float64)
#              WHEN {% parameter handletime_Param %}= "Chat Transcript"
#                THEN CAST(${TABLE}.Average_Chat_Handle_Time as float64)
#          ELSE null
#          END;;
#  }
#
#  measure: Achieved_AHT_ratio {
#    label: "Achieved AHT ratio"
#    type: average
#    sql: CASE WHEN ${HANDLE_TIME_MINS} <= ${of_service_kpi_target.kpi_value}
#                    THEN 1
#              WHEN ${HANDLE_TIME_MINS} > ${of_service_kpi_target.kpi_value}
#                    THEN 0
#                    ELSE NULL
#                    END;;
#    value_format_name: percent_0
#    sql_distinct_key: ${oneforce_id} ;;
#    filters: [origin: "Web,Chat", HANDLE_TIME_MINS: "NOT NULL"]
#    drill_fields: [casenumber,Achieved_AHT_ratio]
#  }
#
#  dimension: Average_Chat_First_Response_Time_Minutes{
#    label: "FRT Chat"
#    type: number
#    sql:  ${TABLE}.Avg_Chat_First_Response_Time_Minutes ;;
#  }
#
#  dimension: FIRST_RESPONSE_TIME_MINS {
#    type: number
#    label: "FRT mins (case/chat)"
#    description: "Identifies First response time for case & chat"
#    sql: CASE WHEN {% parameter responsetime_Param %}= "Case Level"
#                THEN ${TABLE}.First_Response_Time_Minutes
#              WHEN {% parameter responsetime_Param %}= "Chat Transcript"
#                THEN ${TABLE}.Avg_Chat_First_Response_Time_Minutes
#          ELSE null
#          END;;
#  }
#
#  measure: Achieved_FRT_ratio {
#    label: "Achieved FRT ratio"
#    type: average
#    sql: CASE WHEN ${FIRST_RESPONSE_TIME_MINS} <= ${of_service_kpi_target.kpi_value}
#                    THEN 1
#              WHEN ${FIRST_RESPONSE_TIME_MINS} > ${of_service_kpi_target.kpi_value}
#                    THEN 0
#                    ELSE null
#                    END;;
#    value_format_name: percent_0
#    sql_distinct_key: ${oneforce_id} ;;
#    filters: [origin: "Web,Chat", FIRST_RESPONSE_TIME_MINS: "NOT NULL"]
#    drill_fields: [casenumber,Achieved_FRT_ratio]
#  }
############### DCN-1067 Freeze the Chart Format to follow RHQ Selection ##########################
#  dimension: Case_Geo_C_W_Usage {
#    group_label: "Office Hierarchy"
#    label: "Case Geography Chat + WebForm Usage"
#    type: string
#    sql: CASE
#          WHEN {% parameter Geo_Param %} = "RHQ" THEN ${Regional_Head_Office}
#          WHEN {% parameter Geo_Param %} = "Cluster Country" THEN ${case_country}
#          WHEN {% parameter Geo_Param %} = "Individual Country" THEN ${country}
#          WHEN {% parameter Geo_Param %} = "Office" THEN ${office}
#          WHEN {% parameter Geo_Param %} = "Channel" THEN ${Regional_Head_Office}
#          WHEN {% parameter Geo_Param %} = "Segment" THEN ${customer_segment_number}
#          WHEN {% parameter Geo_Param %} = "Segment " THEN ${of_customer_group.key_acct_tp_cd}
#          WHEN {% parameter Geo_Param %} = "Agent Role" THEN ${case_owner.profile_name_service}
#          WHEN {% parameter Geo_Param %} = "Escalation Role" THEN ${Regional_Head_Office}
#          WHEN {% parameter Geo_Param %} = "Office Type" THEN ${Regional_Head_Office}
#          WHEN {% parameter Geo_Param %} = "Service Type" THEN ${Regional_Head_Office}
#          ELSE "Global" END;;
#    drill_fields: [drillfields*]
#  }
#
############### Fields of OF_CHAT_TRANSCRIPT ##########################
#
#  dimension: abandoned {
#    label: "Abandoned After"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.Abandoned ;;
#  }
#
#  dimension: Customer_Abandoned_Chat {
#    label: "Customer Abandoned Chat (true/fales)"
#    description: "Customer chatting BOT and left halfway"
#    type: string
#    sql: ${TABLE}.Customer_Abandoned_Chat ;;
#  }
#
#  dimension: Is_Within_BusinessHour_Chat {
#    type: string
#    sql: CASE WHEN ${TABLE}.Is_Within_BusinessHour_Chat ='true' THEN 'Yes' ELSE 'No' END ;;
#    label: "With In Business Hour"
#  }
#
#  dimension: account_id {
#    label: "Customer Name"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.AccountId ;;
#  }
#
#  dimension: additional_requests {
#    label: "Additional Request"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Additional_Requests ;;
#  }
#
#  dimension_group: agent_accepted_first_transfer {
#    label: "Agent Accepted First Transfer"
#    hidden: yes
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Agent_Accepted_First_Transfer ;;
#  }
#
#  dimension_group: agent_first_accept_date_time {
#    label: "Agent Accepted First Transfer"
#    hidden: yes
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Agent_First_Accept_Date_Time ;;
#  }
#
#  dimension: Ishandled_by_agent {
#    label: "Is Handled By Agent"
#    type: string
#    sql:  CASE WHEN ${agent_first_accept_date_time_raw} IS NOT NULL OR ${agent_accepted_first_transfer_raw} IS NOT NULL THEN "Yes" ELSE "No" END ;;
#  }
#
#  dimension: chat_handle_time {
#    label: "Chat_Handle_Time (Mins)"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.Chat_Handle_Time ;;
#  }
#
#  dimension: Chat_First_Response_Time_Mins {
#    label: "Chat First Response Time (Mins)"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.Chat_First_Response_Time_Mins ;;
#  }
#
#  dimension: Chat_First_Response_Time_Mins1 {
#    label: "Chat FRT (mins)"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.Chat_First_Response_Time_Mins ;;
#  }
#
#
#  dimension: Chat_First_Response_Time_Mins2 {
#    label: "Chat FRT (if null then zero)"
#    hidden: yes
#    type: number
#    sql: coalesce(${TABLE}.Chat_First_Response_Time_Mins,0) ;;
#  }
#
#  measure: Chat_First_Response_Time_Mins_avg {
#    label: "Avg Chat FRT (mins)"
#    hidden: yes
#    type: average
#    value_format_name: decimal_2
#    filters: [Chat_First_Response_Time_Mins1: ">0"]
#    sql: ${Chat_First_Response_Time_Mins1} ;;
#  }
#
#  measure: average_Chat_First_Response_Time_Mins {
#    label: "Chat Average First Response Time (Mins)"
#    type: average
#    sql: ${Chat_First_Response_Time_Mins};;
#    drill_fields: [detail_1*]
#    value_format_name: decimal_1
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CLC_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CLC_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CLC_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CLC_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CLC_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CLC_by_chat_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CLC_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CLC_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CLC_by_intent_l3._link }}"
#    }
#  }
#
#  measure: Chat_without_Agent_Response {
#    label: "Chat without Agent Response"
#    type: count_distinct
#    sql:  ${ct_ONEForce_ID} ;;
#    filters: [Ishandled_by_agent: "Yes", Chat_First_Response_Time_Mins2: "0"]
#    drill_fields: [ct_detail*]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CLC_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CLC_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CLC_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CLC_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CLC_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CLC_by_chat_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CLC_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CLC_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CLC_by_intent_l3._link }}"
#    }
#  }
#
#  dimension: agent_chatting_time_sec {
#    label: "Agent Chatting Time (sec)"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.Agent_Chatting_Time_sec ;;
#  }
#
#  dimension: average_response_time_operator {
#    label: "Agent Response Time"
#    type: number
#    sql: ${TABLE}.AverageResponseTimeOperator ;;
#    value_format_name: decimal_0
#  }
#
#  dimension: response_time_visitor {
#    type: number
#    label: "Visitor Response Time"
#    sql: ${TABLE}.AverageResponseTimeVisitor ;;
#    value_format_name: decimal_0
#  }
#
#  measure: Average_response_time_visitor {
#    type: average
#    sql: ${TABLE}.AverageResponseTimeVisitor ;;
#    label: "Visitor Average Response Time"
#    value_format_name: decimal_1
#    drill_fields: [detail_1*]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ VART_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ VART_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ VART_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ VART_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ VART_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ VART_by_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ VART_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ VART_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ VART_by_intent_l3._link }}"
#    }
#  }
#
#  measure: VART_by_chat_first_queue_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_first_queue_name,Average_response_time_visitor]
#    hidden: yes
#  }
#
#  measure: VART_by_contact_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [contact_name,Average_response_time_visitor]
#    hidden: yes
#  }
#
#  measure: VART_by_email {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [email,Average_response_time_visitor]
#    hidden: yes
#  }
#
#  measure: VART_by_status {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [status,Average_response_time_visitor]
#    hidden: yes
#  }
#
#  measure: VART_by_chat_duration {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_duration,Average_response_time_visitor]
#    hidden: yes
#  }
#
#  measure: VART_by_case_rating {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_rating,Average_response_time_visitor]
#    hidden: yes
#  }
#
#  measure: VART_by_case_net_promoter_score {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_net_promoter_score,Average_response_time_visitor]
#    hidden: yes
#  }
#
#  measure: VART_by_intent_l2 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l2,Average_response_time_visitor]
#    hidden: yes
#  }
#
#  measure: VART_by_intent_l3 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l3,Average_response_time_visitor]
#    hidden: yes
#  }
#
#  measure: response_time_operator {
#    type: average
#    sql: ${TABLE}.AverageResponseTimeOperator ;;
#    label: "Average Agent Response Time"
#    value_format_name: decimal_1
#    drill_fields: [detail_1*]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ AART_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ AART_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ AART_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ AART_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ AART_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ AART_by_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ AART_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ AART_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ AART_by_intent_l3._link }}"
#    }
#  }
#
#  measure: AART_by_chat_first_queue_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_first_queue_name,response_time_operator]
#    hidden: yes
#  }
#
#  measure: AART_by_contact_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [contact_name,response_time_operator]
#    hidden: yes
#  }
#
#  measure: AART_by_email {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [email,response_time_operator]
#    hidden: yes
#  }
#
#  measure: AART_by_status {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [status,response_time_operator]
#    hidden: yes
#  }
#
#  measure: AART_by_chat_duration {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_duration,response_time_operator]
#    hidden: yes
#  }
#
#  measure: AART_by_case_rating {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_rating,response_time_operator]
#    hidden: yes
#  }
#
#  measure: AART_by_case_net_promoter_score {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_net_promoter_score,response_time_operator]
#    hidden: yes
#  }
#
#  measure: AART_by_intent_l2 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l2,response_time_operator]
#    hidden: yes
#  }
#
#  measure: AART_by_intent_l3 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l3,response_time_operator]
#    hidden: yes
#  }
#
#  dimension: body {
#    label: "Body"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Body ;;
#  }
#
#  dimension: bot_chatting_time_sec {
#    label: "Bot Chatting Time (sec)"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.Bot_Chatting_Time_sec ;;
#  }
#
#  dimension_group: bot_initiated_transfer {
#    label: "Bot Initiated Transfer"
#    hidden: yes
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Bot_Initiated_Transfer ;;
#  }
#
#  dimension_group: bot_transfer_abandoned {
#    label: "Bot Transfer Abandoned"
#    hidden: yes
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.Bot_Transfer_Abandoned ;;
#  }
#
#  dimension: browser {
#    label: "Browser"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Browser ;;
#  }
#
#  dimension: browser_language {
#    label: "Browser Language"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.BrowserLanguage ;;
#  }
#
#  dimension: calculated_wait_time_sec {
#    label: "Calculated Wait Time (sec)"
#    type: number
#    sql: ${TABLE}.Calculated_Wait_Time_sec ;;
#  }
#
#  dimension: case_id {
#    label: "Case"
#    #hidden: yes
#    type: string
#    sql: ${TABLE}.CaseId ;;
#  }
#
#  dimension: ct_case_number {
#    label: "Case Number"
#    type: number
#    sql: ${TABLE}.ct_Case_Number ;;
#  }
#
#  dimension: chat_case_rating {
#    type: string
#    sql: CASE WHEN ${TABLE}.Chat_Case_Rating IS NULL THEN 'No Rating' ELSE ${TABLE}.Chat_Case_Rating END ;;
#    label: "Chat Case Rating"
#  }
#
#  measure: Customer_chat_satisfaction_ratio {
#    type: average
#    sql: CASE WHEN ${chat_case_rating} = 'Good' THEN 1 ELSE 0 END;;
#    drill_fields: [detail_1*]
#    label: "Customer Chat Satisfaction Ratio"
#    filters: [chat_case_rating:  "-No Rating"]
#    value_format_name: percent_0
#  }
#
#  dimension: ct_case_rating {
#    label: "Case Rating"
#    type: string
#    sql: ${TABLE}.ct_Case_Rating ;;
#  }
#
#  dimension: chat_duration {
#    label: "Chat Duration"
#    #hidden: yes
#    type: number
#    sql: ${TABLE}.ChatDuration ;;
#  }
#
#  dimension: chat_first_queue_name {
#    label: "Chat First Queue Name"
#    type: string
#    #hidden: yes
#    sql: ${TABLE}.Chat_First_Queue_Name ;;
#  }
#
#  dimension: chat_first_queue_name_detail {
#    label: "Chat First Queue Name Detail"
#    type: string
#    sql: ${TABLE}.Chat_First_Queue_Name_Detail ;;
#  }
#
#
#  dimension: chat_key {
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ChatKey ;;
#  }
#
#  dimension: chat_log_additional_recipient {
#    label: "Chat Log Additional Recipient"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Chat_Log_Additional_Recipient ;;
#  }
#
#  dimension: chat_log_recipient {
#    label: "Chat Log Recipient"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Chat_Log_Recipient ;;
#  }
#
#  dimension: chat_preferred_language {
#    label: "Chat Preferred Language"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Chat_Preferred_Language ;;
#  }
#
#  dimension: cms_sso_status {
#    label: "CMS SSO Status"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.CMS_SSO_Status ;;
#  }
#
#  dimension: ct_company_name {
#    label: "Company Name"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_Company_Name ;;
#  }
#
#  dimension: contact_email {
#    label: "Contact_Email"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Contact_Email ;;
#  }
#
#  dimension: ct_contact_id {
#    label: "Contact Name"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_ContactId ;;
#  }
#
#  dimension: contact_name {
#    label: "Contact_Name"
#    #hidden: yes
#    type: string
#    sql: ${TABLE}.Contact_Name ;;
#  }
#
#  dimension: corporate_office {
#    label: "Corporate Office"
#    type: string
#    sql: ${TABLE}.Corporate_Office ;;
#  }
#
#  dimension: ct_country {
#    label: "Country"
#    type: string
#    #map_layer_name: countries
#    sql: ${TABLE}.ct_Country ;;
#  }
#
#  dimension: ct_created_by_id {
#    label: "Created By"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_CreatedById ;;
#  }
#
#  dimension_group: created {
#    type: time
#    datatype: datetime
#    timeframes: [year, hour_of_day, month, week, week_of_year, month_num, month_name,quarter, date, raw]
#    label: "Created Date"
#    sql: ${TABLE}.ct_CreatedDate ;;
#  }
#
#
## dimension: Date_dynamic {
##   type: string
##   label: "Date Dynamic Chat Transcript"
##   sql:
##    {% if timeframe_picker._parameter_value == 'Day' %} ${created_date}
##    {% elsif timeframe_picker._parameter_value == 'Week' %} ${created_week}
##    {% elsif timeframe_picker._parameter_value == 'Month' %} ${created_month}
##    {% elsif timeframe_picker._parameter_value == 'Quarter' %} ${created_quarter}
##    {% elsif timeframe_picker._parameter_value == 'Year' %} ${created_year}
##    {% else %} null {% endif %} ;;
##   drill_fields: [detail*]
## }
#
#  dimension: Date_dynamic {
#    type: date
#    datatype: datetime
#    label: "Date Dynamic Chat Transcript"
#    sql:
#     {% if timeframe_picker._parameter_value == 'Day' %}   DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'), DAY)
#     {% elsif timeframe_picker._parameter_value == 'Week' %}  DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'), WEEK(MONDAY))
#     {% elsif timeframe_picker._parameter_value == 'Month' %}  DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'),MONTH)
#     {% elsif timeframe_picker._parameter_value == 'Quarter' %}  DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'),QUARTER)
#     {% elsif timeframe_picker._parameter_value == 'Year' %}  DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'),YEAR)
#     {% else %} null {% endif %} ;;
#    convert_tz: no
#  }
#
#  parameter: ct_timeframe_picker {
#    label: "Date Granularity"
#    type: unquoted
#    allowed_value: { value: "Day" }
#    allowed_value: { value: "Week" }
#    allowed_value: { value: "Month" }
#    allowed_value: { value: "Quarter" }
#    allowed_value: { value: "Year" }
#    default_value: "Month"
#  }
#
#  dimension: disable_one_quote {
#    label: "Disable One Quote"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Disable_One_Quote ;;
#  }
#
#  dimension: ct_e_commerce_user_id {
#    label: "eCommerce UserID"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_eCommerce_UserID ;;
#  }
#
#  dimension: email {
#    label: "Email"
#    #hidden: yes
#    type: string
#    sql: ${TABLE}.Email ;;
#  }
#
#  dimension_group: end {
#    label: "End Time"
#    type: time
#    datatype: datetime
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.EndTime ;;
#  }
#
#  dimension: ended_by {
#    label: "Ended By"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.EndedBy ;;
#  }
#
#  dimension: first_name {
#    label: "First Name"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.First_Name ;;
#  }
#
#  dimension: first_queue_name {
#    label: "First Queue Name"
#    type: string
#    sql: ${TABLE}.First_Queue_Name ;;
#  }
#
#  dimension: first_resolved {
#    label: "First Resolved"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.First_Resolved ;;
#  }
#
#  dimension: ct_has_leave_message {
#    label: "Has Leave Message"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.HasLeaveMessage ;;
#  }
#
#  dimension: intent {
#    label: "intent"
#    type: string
#    sql: ${TABLE}.intent ;;
#  }
#
#  dimension: intent_l1 {
#    label: "Intent_L1"
#    type: string
#    sql: ${TABLE}.Intent_L1 ;;
#  }
#
#  dimension: intent_l2 {
#    label:"Intent_L2"
#    type: string
#    sql: ${TABLE}.Intent_L2 ;;
#  }
#
#  dimension: intent_l3 {
#    label: "Intent_L3"
#    type: string
#    sql: ${TABLE}.Intent_L3 ;;
#  }
#
#  dimension: intent_l4 {
#    label: "Intent_L4"
#    type: string
#    sql: ${TABLE}.Intent_L4 ;;
#  }
#
#  dimension: ip_address {
#    label: "Visitor IP Address"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.IpAddress ;;
#  }
#
#  dimension: is_case_closed {
#    label: "Is Case Closed?"
#    type: string
#    sql: ${TABLE}.Is_Case_Closed ;;
#  }
#
#  dimension: is_chatbot_session {
#    hidden: yes
#    type: string
#    sql: ${TABLE}.IsChatbotSession ;;
#  }
#
#  dimension: ct_is_deleted {
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_IsDeleted ;;
#  }
#
#  dimension: ct_is_dummy {
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_IsDummy ;;
#  }
#
#  dimension: is_mobile {
#    label: "Is Mobile"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Is_Mobile ;;
#  }
#
#  dimension: ct_is_need_get_transcript {
#    label: "Is Need Get Transcript"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_Is_Need_Get_Transcript ;;
#  }
#
#  dimension: ct_is_nurtured {
#    label: "Is Nurtured"
#    type: string
#    sql: ${TABLE}.ct_Is_Nurtured ;;
#  }
#
#  dimension: is_queue {
#    label: "Is Queue"
#    type: string
#    sql: ${TABLE}.Is_Queue ;;
#  }
#
#  measure: Queued_Abandonment_Ratio {
#    label: "Queue Abandonement Ratio"
#    type: number
#    sql:  ${Queued_Abandonment_Chats}/(CASE WHEN coalesce(${Queued_Chats},0) = 0 THEN 1 ELSE ${Queued_Chats} END ) ;;
#    drill_fields: [ct_detail*]
#    value_format_name: percent_1
#
#    link: {
#      label: "Show Only {{rendered_value}}"
#      url: "{{ Ratio_Drills._link }}&f[ct_is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CLC_by_chat_first_queue_name._link }}&f[ct_is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CLC_by_contact_name._link }}&f[ct_is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CLC_by_email._link }}&f[ct_is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CLC_by_status._link }}&f[ct_is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CLC_by_chat_duration._link }}&f[ct_is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By chat case rating"
#      url: "{{ CLC_by_chat_case_rating._link }}&f[ct_is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CLC_by_case_net_promoter_score._link }}&f[ct_is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CLC_by_intent_l2._link }}&f[ct_is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CLC_by_intent_l3._link }}&f[ct_is_queue]=Abandonment"
#    }
#  }
#
#  measure: customer_left_chat {
#    label: "Customer left chat"
#    description: "Customer queue and left while queuing"
#    type: count_distinct
#    sql: ${ct_ONEForce_ID} ;;
#    #sql: CASE WHEN ${is_queue} ='Abandonment' THEN 1 ELSE 0 END  ;;
#    drill_fields: [ct_detail*]
#    filters: [is_queue: "Abandonment"]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CLC_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CLC_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CLC_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CLC_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CLC_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CLC_by_chat_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CLC_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CLC_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CLC_by_intent_l3._link }}"
#    }
#  }
#
#  measure: Ratio_Drills {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [ct_detail*]
#    hidden: yes
#  }
#
#  measure: CLC_by_chat_first_queue_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_first_queue_name,customer_left_chat]
#    hidden: yes
#  }
#
#  measure: CLC_by_contact_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [contact_name,customer_left_chat]
#    hidden: yes
#  }
#
#  measure: CLC_by_email {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [email,customer_left_chat]
#    hidden: yes
#  }
#
#  measure: CLC_by_status {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [status,customer_left_chat]
#    hidden: yes
#  }
#
#  measure: CLC_by_chat_duration {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_duration,customer_left_chat]
#    hidden: yes
#  }
#
#  measure: CLC_by_chat_case_rating {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_case_rating,customer_left_chat]
#    hidden: yes
#  }
#
#  measure: CLC_by_case_net_promoter_score {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_net_promoter_score,customer_left_chat]
#    hidden: yes
#  }
#
#  measure: CLC_by_intent_l2 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l2,customer_left_chat]
#    hidden: yes
#  }
#
#  measure: CLC_by_intent_l3 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l3,customer_left_chat]
#    hidden: yes
#  }
#
#  measure: chat_resolved_self_service {
#    label: "Chat Resolved by Self Service Function"
#    type: count_distinct
#    sql: ${ct_ONEForce_ID} ;;
#    #sql: CASE WHEN ${of_case.Is_Chat_Self_Service} ='true' THEN 1 ELSE 0 END  ;;
#    filters: [of_case_pdt.Is_Chat_Self_Service: "true"]
#    drill_fields: [ct_detail*]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CRSS_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CRSS_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CRSS_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CRSS_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CRSS_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CRSS_by_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CRSS_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CRSS_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CRSS_by_intent_l3._link }}"
#    }
#  }
#
#  measure: CRSS_by_chat_first_queue_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_first_queue_name,chat_resolved_self_service]
#    hidden: yes
#  }
#
#  measure: CRSS_by_contact_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [contact_name,chat_resolved_self_service]
#    hidden: yes
#  }
#
#  measure: CRSS_by_email {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [email,chat_resolved_self_service]
#    hidden: yes
#  }
#
#  measure: CRSS_by_status {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [status,chat_resolved_self_service]
#    hidden: yes
#  }
#
#  measure: CRSS_by_chat_duration {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_duration,chat_resolved_self_service]
#    hidden: yes
#  }
#
#  measure: CRSS_by_case_rating {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_rating,chat_resolved_self_service]
#    hidden: yes
#  }
#
#  measure: CRSS_by_case_net_promoter_score {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_net_promoter_score,chat_resolved_self_service]
#    hidden: yes
#  }
#
#  measure: CRSS_by_intent_l2 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l2,chat_resolved_self_service]
#    hidden: yes
#  }
#
#  measure: CRSS_by_intent_l3 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l3,chat_resolved_self_service]
#    hidden: yes
#  }
#
#  dimension: janrain_uuid {
#    label: "Janrain UUID"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Janrain_UUID ;;
#  }
#
#  dimension: ct_language {
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_Language ;;
#  }
#
#  dimension: ct_last_modified_by_id {
#    label: "Last Modified By"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_LastModifiedById ;;
#  }
#
#  dimension_group: ct_last_modified {
#    label: "Last Modified Date"
#    hidden: yes
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.ct_LastModifiedDate ;;
#  }
#
#  dimension: last_name {
#    label: "Last Name"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Last_Name ;;
#  }
#
#  dimension_group: last_referenced {
#    hidden: yes
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.LastReferencedDate ;;
#  }
#
#  dimension_group: last_viewed {
#    hidden: yes
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.LastViewedDate ;;
#  }
#
#  dimension: lead_id {
#    hidden: yes
#    label: "Lead"
#    type: string
#    sql: ${TABLE}.LeadId ;;
#  }
#
#  dimension: lfd_used {
#    label: "LFD Used"
#    type: string
#    sql: ${TABLE}.LFD_Used ;;
#  }
#
#  dimension: live_chat_button_id {
#    label: "Chat Button"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.LiveChatButtonId ;;
#  }
#
#  dimension: live_chat_deployment_id {
#    label: "Deployment"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.LiveChatDeploymentId ;;
#  }
#
#  dimension: live_chat_visitor_id {
#    label: "Chat Visitor"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.LiveChatVisitorId ;;
#  }
#
#  dimension: location {
#    label: "Location"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Location ;;
#  }
#
#  dimension: max_response_time_operator {
#    label: "Agent Maximum Response Time"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.MaxResponseTimeOperator ;;
#  }
#
#  dimension: max_response_time_visitor {
#    label: "Visitor Maximum Response Time"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.MaxResponseTimeVisitor ;;
#  }
#
#  dimension: merged_d_d_transferred {
#    label: "Merged D&D Transferred"
#    type: string
#    sql: ${TABLE}.Merged_D_D_Transferred ;;
#    hidden: yes
#  }
#
#  dimension: merged_d_d_used {
#    label: "Merged D&D Used"
#    type: string
#    sql: ${TABLE}.Merged_D_D_Used ;;
#  }
#
#  dimension: name {
#    label: "Chat Transcript Name"
#    type: string
#    sql: ${TABLE}.Name ;;
#  }
#
#  measure: name1 {
#    label: "Chat Transcript Name"
#    type: max
#    sql: ${TABLE}.Name ;;
#  }
#
#  measure: name_max {
#    label: "Chat Transcript Name Max"
#    type:string
#    sql: max(${TABLE}.Name) ;;
#  }
#
#  dimension: ct_office {
#    label: "Office"
#    type: string
#    sql: ${TABLE}.ct_Office ;;
#  }
#
#  # dimension: oneforce_id {
#  #   label: "OneForce ID"
#  #   type: string
#  #   sql: ${TABLE}.ONEForce_ID ;;
#  #   primary_key: yes
#  # }
#
#  dimension: operator_message_count {
#    label: "Agent Message Count"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.OperatorMessageCount ;;
#  }
#
#  dimension: ct_origin {
#    label: "Origin"
#    type: string
#    sql: ${TABLE}.ct_Origin ;;
#  }
#
#  dimension: owner_id {
#    label: "Owner"
#    hidden: no
#    type: string
#    sql: ${TABLE}.OwnerId ;;
#  }
#
#  dimension: platform {
#    label: "Platform"
#    type: string
#    sql: ${TABLE}.Platform ;;
#  }
#
#  dimension: queue_wait_time {
#    label: "Queue Wait Time"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.Queue_Wait_Time ;;
#  }
#
#  dimension: ct_reference_number {
#    label: "Reference Number"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_Reference_Number ;;
#  }
#
#  dimension: ct_reference_number_type {
#    label: "Reference Number Type"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_Reference_Number_Type ;;
#  }
#
#  dimension: referrer_uri {
#    label: "Referring Site"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ReferrerUri ;;
#  }
#
#  dimension_group: request {
#    label: "Request Time"
#    hidden: yes
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.RequestTime ;;
#  }
#
#  dimension: screen_resolution {
#    label: "Screen Resolution"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ScreenResolution ;;
#  }
#
#  dimension: ct_shipment_number {
#    label: "Shipment Number"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.ct_Shipment_Number ;;
#  }
#
#  dimension: skill_id {
#    label: "Primary Skill"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.SkillId ;;
#  }
#
#  dimension_group: start {
#    label: "Start Time"
#    type: time
#    datatype: datetime
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.StartTime ;;
#  }
#
#  dimension: ct_status {
#    label: "Status"
#    type: string
#    sql: ${TABLE}.Status ;;
#  }
#
#  dimension: supervisor_transcript_body {
#    label: "Supervisor Transcript Body"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.SupervisorTranscriptBody ;;
#  }
#
#  dimension_group: system_modstamp {
#    hidden: yes
#    type: time
#    timeframes: [
#      raw,
#      time,
#      date,
#      week,
#      month,
#      quarter,
#      year
#    ]
#    sql: ${TABLE}.SystemModstamp ;;
#  }
#
#  dimension: transfer_type {
#    label: "TransferType"
#    type: string
#    sql: ${TABLE}.TransferType ;;
#  }
#
#  dimension: transferred_queues {
#    label: "Transferred Queues"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.Transferred_Queues ;;
#  }
#
#  dimension: user_agent {
#    label: "User Agent"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.UserAgent ;;
#  }
#
#  dimension: visitor_message_count {
#    label: "Visitor Message Count"
#    hidden: yes
#    type: number
#    sql: ${TABLE}.VisitorMessageCount ;;
#  }
#
#  dimension: visitor_network {
#    label: "Network"
#    hidden: yes
#    type: string
#    sql: ${TABLE}.VisitorNetwork ;;
#  }
#
#  dimension: wait_time {
#    label: "Wait Time"
#    description: "Wait Time in second"
#    type: number
#    sql: ${TABLE}.WaitTime ;;
#  }
#
#  measure: Average_wait_time {
#    type: average
#    sql: coalesce(${TABLE}.WaitTime,0)+coalesce(${TABLE}.Queue_Wait_Time,0) ;;
#    label: "Customer Waiting Time"
#    description: "Customer Waiting Time in second"
#    value_format_name: decimal_1
#    drill_fields: [detail_1*]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CWT_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CWT_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CWT_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CWT_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CWT_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CWT_by_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CWT_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CWT_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CWT_by_intent_l3._link }}"
#    }
#  }
#
#  measure: CWT_by_chat_first_queue_name {
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_first_queue_name,Average_wait_time]
#    hidden: yes
#  }
#
#  measure: CWT_by_contact_name {
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [contact_name,Average_wait_time]
#    hidden: yes
#  }
#
#  measure: CWT_by_email {
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [email,Average_wait_time]
#    hidden: yes
#  }
#
#  measure: CWT_by_status {
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [status,Average_wait_time]
#    hidden: yes
#  }
#
#  measure: CWT_by_chat_duration {
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_duration,Average_wait_time]
#    hidden: yes
#  }
#
#  measure: CWT_by_case_rating {
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_rating,Average_wait_time]
#    hidden: yes
#  }
#
#  measure: CWT_by_case_net_promoter_score {
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_net_promoter_score,Average_wait_time]
#    hidden: yes
#  }
#
#  measure: CWT_by_intent_l2 {
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l2,Average_wait_time]
#    hidden: yes
#  }
#
#  measure: CWT_by_intent_l3 {
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l3,Average_wait_time]
#    hidden: yes
#  }
#
#  measure: total_chat_handled_by_agents {
#    label: "Total Chat Handled by Agents"
#    type: sum
#    sql: CASE WHEN ${Ishandled_by_agent} = "Yes" THEN 1 ELSE 0 END  ;;
#    drill_fields: [detail_1*]
#
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ count_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ count_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ count_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ count_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ count_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ count_by_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ count_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ count_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ count_by_intent_l3._link }}"
#    }
#  }
#
#
#  measure: count_ct {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID} ;;
#    drill_fields: [detail_1*]
#
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ count_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ count_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ count_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ count_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ count_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ count_by_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ count_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ count_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ count_by_intent_l3._link }}"
#    }
#  }
#
#  measure: count_by_chat_first_queue_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_first_queue_name,count]
#    hidden: yes
#  }
#
#  measure: count_by_contact_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [contact_name,count]
#    hidden: yes
#  }
#
#  measure: count_by_email {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [email,count]
#    hidden: yes
#  }
#
#  measure: count_by_status {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [status,count]
#    hidden: yes
#  }
#
#  measure: count_by_chat_duration {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_duration,count]
#    hidden: yes
#  }
#
#  measure: count_by_case_rating {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_rating,count]
#    hidden: yes
#  }
#
#  measure: count_by_case_net_promoter_score {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_net_promoter_score,count]
#    hidden: yes
#  }
#
#  measure: count_by_intent_l2 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l2,count]
#    hidden: yes
#  }
#
#  measure: count_by_intent_l3 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l3,count]
#    hidden: yes
#  }
#
#
#  dimension: case_net_promoter_score {
#    label: "Chat Net Promoter Score"
#    type: string
#    sql: ${TABLE}.Case_Net_Promoter_Score ;;
#  }
#
#
#  #dimension: chat_handle_time {
#  #  label: "Chat Handle Time"
#  #  type: string
#  #  sql: ${TABLE}.Chat_Handle_Time ;;
#  #  value_format_name: decimal_1
#  #}
#
#  measure: avg_chat_handle_time {
#    label: "Avg Chat Handle Time (Mins)"
#    type: average
#    sql: ${TABLE}.Chat_Handle_Time ;;
#    filters: [of_case_pdt.origin : "Chat"]
#    drill_fields: [detail_1*]
#    value_format_name: decimal_1
#  }
#
#  measure: chat_handle_time1 {
#    label: "Avg Chat Handle Time (mins)"
#    type: average
#    sql: ${TABLE}.Chat_Handle_Time ;;
#    filters: [of_case_pdt.origin : "Chat"]
#    drill_fields: [detail_1*]
#    value_format_name: decimal_1
#  }
#
#  measure: chat_handle_time_avg {
#    label: "Average Chat Handle Time"
#    type: average
#    sql: ${TABLE}.Chat_Handle_Time ;;
#    filters: [of_case_pdt.origin : "Chat"]
#    drill_fields: [detail_1*]
#    value_format_name: decimal_1
#    filters: [of_case_pdt.is_aht_calculated_excluded: "Yes"]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ ACHT_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ ACHT_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ ACHT_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ ACHT_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ ACHT_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ ACHT_by_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ ACHT_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ ACHT_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ ACHT_by_intent_l3._link }}"
#    }
#  }
#
#  measure: chat_handle_time_avg2 {
#    label: "Average Chat Handle Time (Mins)"
#    type: average
#    sql: ${chat_handle_time} ;;
#    drill_fields: [detail_1*]
#    value_format_name: decimal_1
#    filters: [chat_handle_time: ">0"]
#
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ ACHT_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ ACHT_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ ACHT_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ ACHT_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ ACHT_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ ACHT_by_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ ACHT_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ ACHT_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ ACHT_by_intent_l3._link }}"
#    }
#  }
#
#  measure: ACHT_by_chat_first_queue_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_first_queue_name,chat_handle_time_avg]
#    hidden: yes
#  }
#
#  measure: ACHT_by_contact_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [contact_name,chat_handle_time_avg]
#    hidden: yes
#  }
#
#  measure: ACHT_by_email {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [email,chat_handle_time_avg]
#    hidden: yes
#  }
#
#  measure: ACHT_by_status {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [status,chat_handle_time_avg]
#    hidden: yes
#  }
#
#  measure: ACHT_by_chat_duration {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_duration,chat_handle_time_avg]
#    hidden: yes
#  }
#
#  measure: ACHT_by_case_rating {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_rating,chat_handle_time_avg]
#    hidden: yes
#  }
#
#  measure: ACHT_by_case_net_promoter_score {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_net_promoter_score,chat_handle_time_avg]
#    hidden: yes
#  }
#
#  measure: ACHT_by_intent_l2 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l2,chat_handle_time_avg]
#    hidden: yes
#  }
#
#  measure: ACHT_by_intent_l3 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l3,chat_handle_time_avg]
#    hidden: yes
#  }
#
#  measure: ct_owner {
#    type: count_distinct
#    sql: ${ct_owner_name} ;;
#
#  }
#
#  measure: chat_owner {
#    type: count_distinct
#    sql: ${owner_id} ;;
#  }
#
#  measure: chats_per_agent {
#    label: "Chats Per Agent"
#    type: number
#    sql: (${total_chat_handled_by_agents}/${chat_owner}) ;;
#    value_format_name: decimal_2
#    drill_fields: [detail_1*]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CPA_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CPA_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CPA_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CPA_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CPA_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CPA_by_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CPA_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CPA_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CPA_by_intent_l3._link }}"
#    }
#  }
#
#  measure: CPA_by_chat_first_queue_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_first_queue_name,chats_per_agent]
#    hidden: yes
#  }
#
#  measure: CPA_by_contact_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [contact_name,chats_per_agent]
#    hidden: yes
#  }
#
#  measure: CPA_by_email {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [email,chats_per_agent]
#    hidden: yes
#  }
#
#  measure: CPA_by_status {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [status,chats_per_agent]
#    hidden: yes
#  }
#
#  measure: CPA_by_chat_duration {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_duration,chats_per_agent]
#    hidden: yes
#  }
#
#  measure: CPA_by_case_rating {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_rating,chats_per_agent]
#    hidden: yes
#  }
#
#  measure: CPA_by_case_net_promoter_score {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_net_promoter_score,chats_per_agent]
#    hidden: yes
#  }
#
#  measure: CPA_by_intent_l2 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l2,chats_per_agent]
#    hidden: yes
#  }
#
#  measure: CPA_by_intent_l3 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l3,chats_per_agent]
#    hidden: yes
#  }
#
#  measure: days_of_month {
#    type: count_distinct
#    sql: (${created_date}) ;;
#    label: "Days of Month"
#  }
#
#  dimension: Geography_dynamic {
#    type: string
#    label: "Geography Chat Dynamic"
#    drill_fields: [detail_1*]
#    sql: CASE
#          WHEN {% parameter DB_Param %} = "RHQ" THEN ${case_RHQ}
#          WHEN {% parameter DB_Param %} = "Status" THEN ${ct_status}
#          WHEN {% parameter DB_Param %} = "Country" THEN ${ct_country}
#          WHEN {% parameter DB_Param %} = "Office" THEN ${ct_office}
#          WHEN {% parameter DB_Param %} = "Segment " THEN ${of_customer_group.key_acct_tp_cd}
#          ELSE "Global" END;;
#  }
#
#  parameter: DB_Param {
#    type: string
#    label: "Dashboard Parameter"
#
#    allowed_value: {
#      label: "Global"
#      value: "Global"
#    }
#
#    allowed_value: {
#      label: "RHQ"
#      value: "RHQ"
#    }
#
#    allowed_value: {
#      label: "Status"
#      value: "Status"
#    }
#    allowed_value: {
#      label: "Country"
#      value: "Country"
#    }
#    allowed_value: {
#      label: "Office"
#      value: "Office"
#    }
#    allowed_value: {
#      label: "Segment "
#      value: "Segment "
#    }
#  }
#
#  measure: all_rating_chat{
#    type: count_distinct
#    sql: Case WHEN ${chat_case_rating}='Good' OR ${chat_case_rating}='Bad'  THEN 1 ELSE 0 END ;;
#    label:"All Rating Chat"
#  }
#
#  measure: good_rating_chat{
#    type: count_distinct
#    sql: Case WHEN ${chat_case_rating}='Good'  THEN 1 ELSE 0 END ;;
#    label:"Good Rating Chat"
#  }
#
#  measure: difference_rating_chat{
#    type: number
#    sql: (${good_rating_chat}/NULLIF(${all_rating_chat}, 0)) ;;
#    label:"Difference Rating Chat"
#    drill_fields: [detail_1*]
#  }
#
#  dimension: total_chat_transfer {
#    label: "No. of Times Chat is Transferred"
#    type: number
#    sql: ${TABLE}.Total_Chat_Transfer ;;
#  }
#
#  measure: total_abandoned_chat {
#    label: "Total Abandoned Chat"
#    description: "Customer left while either queuing or chatting BOT"
#    type: sum
#    sql: CASE WHEN ${is_queue} ='Abandonment' OR ${Customer_Abandoned_Chat} = 'true' THEN 1 ELSE 0 END  ;;
#    drill_fields: [detail_1*]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CLC_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CLC_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CLC_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CLC_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CLC_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CLC_by_chat_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CLC_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CLC_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CLC_by_intent_l3._link }}"
#    }
#  }
#
#  measure: transferred_chat {
#    label: "Transferred Chat"
#    type: sum
#    sql:  CASE WHEN ${total_chat_transfer} >0 THEN 1 ELSE 0 END ;;
#    drill_fields: [detail_1*]
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CLC_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CLC_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CLC_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CLC_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CLC_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CLC_by_chat_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CLC_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CLC_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CLC_by_intent_l3._link }}"
#    }
#  }
#
#  measure: transferred_chat_ratio {
#    label: "Transfer Chat Ratio"
#    type: number
#    sql: (${transferred_chat}/IFNULL(${count},0)) ;;
#    drill_fields: [detail_1*]
#    value_format_name: percent_1
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CLC_by_chat_first_queue_name._link }}"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CLC_by_contact_name._link }}"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CLC_by_email._link }}"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CLC_by_status._link }}"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CLC_by_chat_duration._link }}"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CLC_by_chat_case_rating._link }}"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CLC_by_case_net_promoter_score._link }}"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CLC_by_intent_l2._link }}"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CLC_by_intent_l3._link }}"
#    }
#  }
#
#
#
#  measure: abandone_chat_b4_agent {
#    label: "Abandoned chat before connect agent"
#    type: count_distinct
#    #sql: CASE WHEN ${Customer_Abandoned_Chat} = 'true' THEN 1 ELSE 0 END ;;
#    sql: ${ct_ONEForce_ID} ;;
#    filters: [Customer_Abandoned_Chat: "true"]
#  }
#
#  measure: abandone_chat_b4_agent_ratio {
#    label: "Abandonement before agent Ratio"
#    type: number
#    sql: (${abandone_chat_b4_agent}/IFNULL(${Total_Chats},0)) ;;
#    drill_fields: [ct_detail*]
#    value_format_name: percent_1
#
#    link: {
#      label: "Show Only {{rendered_value}}"
#      url: "{{ Ratio_Drills._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CLC_by_chat_first_queue_name._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CLC_by_contact_name._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CLC_by_email._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CLC_by_status._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CLC_by_chat_duration._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ CLC_by_chat_case_rating._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CLC_by_case_net_promoter_score._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CLC_by_intent_l2._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CLC_by_intent_l3._link }}&f[Customer_Abandoned_Chat]=true"
#    }
#  }
#
#
#  measure: Queued_Abandonment_Chats  {
#    label: "Queued_Abandonment_Chats"
#    type: count_distinct
#    #sql: CASE WHEN ${is_queue} in ('Abandonment') THEN 1 ELSE 0 END  ;;
#    sql: ${ct_ONEForce_ID} ;;
#    filters: [is_queue: "Abandonment"]
#  }
#
#  measure: Queued_Chats  {
#    label: "Queued_Chats"
#    type: count_distinct
#    #sql: CASE WHEN ${is_queue} in ('Abandonment','Queue') THEN 1 ELSE 0 END  ;;
#    sql: ${ct_ONEForce_ID} ;;
#    filters: [is_queue: "Abandonment,Queue"]
#  }
#
#
#  measure: Total_Chats  {
#    label: "Total_Chats"
#    type: count_distinct
#    sql: ${ct_ONEForce_ID} ;;
#  }
#
#  measure: total_queued_chats {
#    label: "Total Queued Chats"
#    type: number
#    sql: (${Queued_Chats}/${Total_Chats}) ;;
#    drill_fields: [ct_detail*]
#    value_format_name: percent_1
#
#    link: {
#      label: "Show Only {{rendered_value}}"
#      url: "{{ Ratio_Drills._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ TQC_by_chat_first_queue_name._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ TQC_by_contact_name._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ TQC_by_email._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ TQC_by_status._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ TQC_by_chat_duration._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By case_rating"
#      url: "{{ TQC_by_case_rating._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ TQC_by_case_net_promoter_score._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ TQC_by_intent_l2._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ TQC_by_intent_l3._link }}&f[ct_is_queue]=Abandonment,Queue"
#    }
#  }
#
#  measure: TQC_by_chat_first_queue_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_first_queue_name,total_queued_chats]
#    hidden: yes
#  }
#
#  measure: TQC_by_contact_name {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [contact_name,total_queued_chats]
#    hidden: yes
#  }
#
#  measure: TQC_by_email {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [email,total_queued_chats]
#    hidden: yes
#  }
#
#  measure: TQC_by_status {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [status,total_queued_chats]
#    hidden: yes
#  }
#
#  measure: TQC_by_chat_duration {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [chat_duration,total_queued_chats]
#    hidden: yes
#  }
#
#  measure: TQC_by_case_rating {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_rating,total_queued_chats]
#    hidden: yes
#  }
#
#  measure: TQC_by_case_net_promoter_score {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [case_net_promoter_score,total_queued_chats]
#    hidden: yes
#  }
#
#  measure: TQC_by_intent_l2 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l2,total_queued_chats]
#    hidden: yes
#  }
#
#  measure: TQC_by_intent_l3 {
#    type: count_distinct
#    sql: ${ct_ONEForce_ID};;
#    drill_fields: [intent_l3,total_queued_chats]
#    hidden: yes
#  }
#
#  dimension:chat_nps_group {
#    type: string
#    sql: (CASE
#          WHEN ${TABLE}.Chat_Case_Net_Promoter_Score<7 THEN 'Detractors'
#          WHEN ${TABLE}.Chat_Case_Net_Promoter_Score>=7 and ${TABLE}.Chat_Case_Net_Promoter_Score<9 THEN 'Passives'
#          WHEN ${TABLE}.Chat_Case_Net_Promoter_Score>=9 THEN 'Promoters'
#          ELSE 'No Rating' END);;
#    label:"Chat NPS Segment"
#
#  }
#
#  dimension: chat_case_net_promoter_score{
#    type: string
#    sql: ${TABLE}.Chat_Case_Net_Promoter_Score;;
#    label: "Chat Net Promotor Score"
#  }
#
#  measure: ct_detractor_percentage{
#    type: average
#    sql: Case WHEN ${chat_nps_group}='Detractors' THEN 1 ELSE 0 END ;;
#    label:"Detractor Percentage"
#    filters: [chat_nps_group: "-No Rating"]
#    value_format_name: percent_0
#    #hidden: yes
#  }
#
#  measure: ct_promoter_percentage{
#    type: average
#    sql: Case WHEN ${chat_nps_group}='Promoters' THEN 1 ELSE 0 END ;;
#    label:"Promoters Percentage"
#    value_format_name: percent_0
#    filters: [chat_nps_group: "-No Rating"]
#    #hidden: yes
#  }
#
#
#  measure: chat_global_nps{
#    type: number
#    sql: (${promoter_percentage} - ${detractor_percentage}) *100 ;;
#    label:"Chat Global NPS"
#    value_format_name: decimal_0
#    drill_fields: [detail_1*]
#  }
#
#
#
#  # ----- Sets of fields for drilling ------
#  set: detail_1{
#    fields: [
#      name,
#      casenumber,
#      ct_owner_name,
#      of_user.name,
#      chat_first_queue_name,
#      intent_l2,
#      intent_l3,
#      ct_customer.name,
#      contact_name,
#      email,
#      status,
#      chat_duration,
#      start_time,
#      end_time,
#      chat_handle_time,
#      Chat_First_Response_Time_Mins,
#      average_response_time_operator,
#      response_time_visitor,
#      chat_case_rating,
#      case_net_promoter_score,
#    ]
#  }
#
#  # ----- Sets of fields for drilling ------
#  set: ct_detail {
#    fields: [
#      name,
#      casenumber,
#      ct_owner_name,
#      name,
#      of_user.name,
#      chat_first_queue_name,
#      intent_l2,
#      intent_l3,
#      ct_customer.name,
#      contact_name,
#      email,
#      status,
#      chat_duration,
#      start_time,
#      end_time,
#      chat_handle_time,
#      Chat_First_Response_Time_Mins,
#      average_response_time_operator,
#      response_time_visitor,
#      chat_case_rating,
#      case_net_promoter_score,
#      is_queue,
#      Customer_Abandoned_Chat
#    ]
#  }
#
#}
#

view: of_case_statistics {

  derived_table: {
    sql:
      SELECT CASEID,
      DATETIME(R_date||' ' ||EndTime) AS Split_LocalTime,
      timestamp(DATETIME(R_date||' ' ||EndTime),TimeZoneSidKey) AS Split_UTC
        from
        (
          SELECT C.ONEForce_Id AS CASEID,C.CaseNumber,C.CreatedDate_Local,C.ClosedDate_Local,R_date,TimeZoneSidKey,
              CASE
                  WHEN R_Day = 1 THEN SundayEndTime
                  WHEN R_Day = 2 THEN MondayEndTime
                  WHEN R_Day = 3 THEN TuesdayEndTime
                  WHEN R_Day = 4 THEN WednesdayEndTime
                  WHEN R_Day = 5 THEN ThursdayEndTime
                  WHEN R_Day = 6 THEN FridayEndTime
                  WHEN R_Day = 7 THEN SaturdayEndTime
              END as EndTime
              FROM
              (
                  SELECT C.ONEForce_Id, C.CaseNumber,
                  DATETIME( TIMESTAMP(C.CreatedDate,"UTC"), BH.TimeZoneSidKey) CreatedDate_Local,
                  DATETIME( TIMESTAMP(coalesce( C.ClosedDate,CURRENT_DATE() ),"UTC"), BH.TimeZoneSidKey) ClosedDate_Local,BH.TimeZoneSidKey,
                  SundayStartTime,MondayStartTime,TuesdayStartTime,WednesdayStartTime,ThursdayStartTime,FridayStartTime,SaturdayStartTime,
                  SundayEndTime,MondayEndTime,TuesdayEndTime,WednesdayEndTime,ThursdayEndTime,FridayEndTime,SaturdayEndTime
                  FROM ${of_case.SQL_TABLE_NAME} C
                  JOIN ${of_business_hours.SQL_TABLE_NAME} BH ON BH.ONEForce_Id=C.BusinessHoursId
              ) AS C
              LEFT JOIN
              (
                SELECT R_date,EXTRACT(DAYOFWEEK FROM R_date) R_Day
                FROM UNNEST(
                  GENERATE_DATE_ARRAY(DATE('2020-01-01'), CURRENT_DATE()-1, INTERVAL 1 DAY)) AS R_date
              ) D ON R_date >= DATE(C.CreatedDate_Local) AND R_date <= DATE(C.ClosedDate_Local)
        )T
      WHERE  EndTime is not null
    ;;
  }

  dimension: case_id {
    hidden: yes
    type: string
    sql: ${TABLE}.CASEID;;
  }

  dimension_group: split_localtime {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Split_LocalTime;;
    label:"Split LocalTime"
    drill_fields: [drillfields*]
  }

  dimension_group: split_utc {
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Split_UTC;;
    label:"Split UTC"
  }

  set: drillfields {
    fields: [
      of_case.Regional_Head_Office,
      of_case.case_country,
      of_case.case_office_code,
      of_case.origin,
      of_case.sub_category_l2,
      of_case.subordinate_category_l3,
      of_customer_group.cust_grp_and_name,
      of_customer.customer_cd_and_name,
      of_case_history_owner.owner_name,
      of_case.priority,
      of_case.case_age_group,
      of_case_history_status.status,
    ]
  }
}

view: of_case_transfer_history {
  sql_table_name: `ONEFORCE.OF_CASE_TRANSFER_HISTORY`
    ;;

  dimension: agent_work {
    type: string
    sql: ${TABLE}.Agent_Work ;;
  }

  dimension: case {
    type: string
    sql: ${TABLE}.`Case` ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: is_open_case_for_not_transfer_selected {
    type: string
    sql: ${TABLE}.Is_open_case_for_not_transfer_selected ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension_group: last_transfer_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.Last_Transfer_Date_Time ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
    primary_key: yes
  }

  dimension_group: system_modstamp {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.SystemModstamp ;;
  }

  dimension: transfer_by {
    type: string
    sql: ${TABLE}.Transfer_By ;;
  }

  dimension_group: transfer_date_time {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.Transfer_Date_Time ;;
  }

  dimension: transfer_duration_in_minutes {
    type: number
    sql: ${TABLE}.Transfer_Duration_In_Minutes ;;
  }

  dimension: transfer_from {
    type: string
    sql: ${TABLE}.Transfer_From ;;
  }

  dimension: transfer_from_queue {
    type: string
    sql: ${TABLE}.Transfer_From_Queue ;;
  }

  dimension: transfer_from_queue_id {
    type: string
    sql: ${TABLE}.Transfer_From_Queue_ID ;;
  }

  dimension: transfer_from_user {
    type: string
    sql: ${TABLE}.Transfer_From_User ;;
  }

  dimension: transfer_reason {
    type: string
    sql: ${TABLE}.Transfer_Reason ;;
  }

  dimension: transfer_to {
    type: string
    sql: ${TABLE}.Transfer_To ;;
  }

  dimension: transfer_to_queue {
    type: string
    sql: ${TABLE}.Transfer_To_Queue ;;
  }

  dimension: transfer_to_queue_id {
    type: string
    sql: ${TABLE}.Transfer_To_Queue_ID ;;
  }

  dimension: transfer_to_user {
    type: string
    sql: ${TABLE}.Transfer_To_User ;;
  }

  dimension: transfer_type {
    type: string
    sql: ${TABLE}.Transfer_Type ;;
  }

  dimension: transferred_by_me {
    type: string
    sql: ${TABLE}.Transferred_By_Me ;;
  }

  measure: count {
    type: sum
    drill_fields: [name]
  }

  measure: total_transfer{
    type: sum
    sql: (CASE WHEN ${TABLE}.Transfer_Type ="Assignment" or ${TABLE}.Transfer_Type ="Accept/Transfer Chat"  THEN 1 ELSE 0 END) ;;
    label:"Total Transfer history"
    drill_fields: [transferdetail*]
  }

  measure: avg_transfer_duration_in_minutes {
    type: average
    sql: ${TABLE}.Transfer_Duration_In_Minutes ;;
    label: "Avg Transfer Duration "
    value_format_name: decimal_1
    drill_fields: [transferdetail*]
  }

  dimension: transfer_by_name1 {
    type: string
    sql: ${transfer_by_owner.name} ;;
  }

  dimension: transfer_by_queue {
    type: string
    sql: ${transfer_by_queue.developer_name} ;;
  }

  dimension: transfer_by_name {
    type: string
    sql: case when ${transfer_by_name1} is not null then ${transfer_by_name1} else ${transfer_by_queue} end  ;;
  }

  dimension: transfer_from_name1 {
    type: string
    sql: ${transfer_from_owner.name} ;;
  }

  dimension: transfer_from_queue_name {
    type: string
    sql: ${transfer_from_queue.developer_name} ;;
  }

  dimension: transfer_from_name {
    type: string
    sql: case when ${transfer_from_name1} is not null then ${transfer_from_name1} else ${transfer_from_queue_name} end  ;;
  }

  dimension: transfer_to_name1 {
    type: string
    sql: ${transfer_to.name} ;;
  }

  dimension: transfer_to_queue_name {
    type: string
    sql: ${transfer_to_queue.developer_name} ;;
  }

  dimension: transfer_to_name {
    type: string
    sql: case when ${transfer_to_name1} is not null then ${transfer_to_name1} else ${transfer_to_queue_name} end  ;;
  }

  #measure: case_recipient{
  #type: sum
  #sql: (CASE WHEN ${transfer_queue.ownedbyQueue}="Yes" and ${TABLE}.Transfer_Type ="System Assignment" and ${TABLE}.Transfer_Type ="Accept/Transfer Chat"and ${TABLE}.Transfer_Type ="Assignment"  THEN 1 ELSE 0 END) ;;
  #label:"Case Recipient"
  #drill_fields: [transferdetail*]
  #}


  set: transferdetail {
    fields: [
      of_case.casenumber,
      service_office_hierarchy.country,
      case_owner.officetype,
      of_case.case_owner_name,
      case_transfer_history.transfer_by_name,
      case_transfer_history.transfer_from_name,
      case_transfer_history.transfer_to_name,
      case_transfer_history.transfer_type,
      case_transfer_history.last_transfer_date_time,
      case_transfer_history.transfer_duration_in_minutes,
      case_transfer_history.transfer_reason,
      of_customer.name,
      of_contact.name,
      of_case.contactemail,
      of_case.status,
      of_case.origin,
      of_case.type,
      of_case.reason,
      of_case.sub_category_l2,
      of_case.subordinate_category_l3,
    ]
  }

}

view: of_cgm_target {
  sql_table_name: `ONEFORCE.OF_CGM_TARGET`
    ;;

  dimension: record_id {
    label: "Record Id"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.Record_Id ;;
  }

  dimension: cm_amount {
    label: "CM Amount"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.CM_Amount ;;
  }

  dimension: contract_office_code {
    label: "Contract Office Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Contract_Office_Code ;;
  }

  dimension: contract_office_rhq_code {
    label: "Contract Office RHQ Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Contract_Office_RHQ_Code ;;
  }

  dimension: dom_non_dom_flag {
    label: "Dom-NonDom Flag"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Dom_NonDom_Flag ;;
  }

  dimension: por_country_code {
    label: "POR Country Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POR_Country_Code ;;
  }

  dimension: por_rhq_code {
    label: "POR RHQ Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POR_RHQ_Code ;;
  }

  dimension: revenue_amount {
    label: "Revenue Amount" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.Revenue_Amount ;;
  }

  dimension: revenue_lane {
    label: "Revenue Lane" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Revenue_Lane ;;
  }

  dimension: sales_month {
    hidden: yes
    label: "Sales Month"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.Sales_Month ;;
  }

  dimension: sales_week {
    hidden: yes
    label: "Sale Week"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Sales_Week ;;
  }

  dimension: service_scope_group {
    label: "Service Scope Group"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: teu {
    label: "TEU"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.TEU ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [record_id, count]
  }
}

view: of_chat_transcript {
  sql_table_name: `ONEFORCE.OF_CHAT_TRANSCRIPT`
    ;;

  dimension: abandoned {
    label: "Abandoned After"
    hidden: yes
    type: number
    sql: ${TABLE}.Abandoned ;;
  }

  dimension: Customer_Abandoned_Chat {
    label: "Customer Abandoned Chat (true/fales)"
    description: "Customer chatting BOT and left halfway"
    type: string
    sql: ${TABLE}.Customer_Abandoned_Chat ;;
  }

  dimension: isWithInBusinessHour {
    type: string
    sql: CASE WHEN ${TABLE}.Is_Within_BusinessHour_Chat ='true' THEN 'Yes' ELSE 'No' END ;;
    label: "With In Business Hour"
  }

  dimension: account_id {
    label: "Customer Name"
    hidden: yes
    type: string
    sql: ${TABLE}.AccountId ;;
  }

  dimension: additional_requests {
    label: "Additional Request"
    hidden: yes
    type: string
    sql: ${TABLE}.Additional_Requests ;;
  }

  dimension_group: agent_accepted_first_transfer {
    label: "Agent Accepted First Transfer"
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Agent_Accepted_First_Transfer ;;
  }

  dimension_group: agent_first_accept_date_time {
    label: "Agent Accepted First Transfer"
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Agent_First_Accept_Date_Time ;;
  }

  dimension: Ishandled_by_agent {
    label: "Is Handled By Agent"
    type: string
    sql:  CASE WHEN ${agent_first_accept_date_time_raw} IS NOT NULL OR ${agent_accepted_first_transfer_raw} IS NOT NULL THEN "Yes" ELSE "No" END ;;
  }

  dimension: chat_handle_time {
    label: "Chat_Handle_Time (Mins)"
    hidden: yes
    type: number
    sql: ${TABLE}.Chat_Handle_Time ;;
  }

  dimension: Chat_First_Response_Time_Mins {
    label: "Chat First Response Time (Mins)"
    hidden: yes
    type: number
    sql: ${TABLE}.Chat_First_Response_Time_Mins ;;
  }

  dimension: Chat_First_Response_Time_Mins1 {
    label: "Chat FRT (mins)"
    hidden: yes
    type: number
    sql: ${TABLE}.Chat_First_Response_Time_Mins ;;
  }


  dimension: Chat_First_Response_Time_Mins2 {
    label: "Chat FRT (if null then zero)"
    hidden: yes
    type: number
    sql: coalesce(${TABLE}.Chat_First_Response_Time_Mins,0) ;;
  }

  measure: Chat_First_Response_Time_Mins_avg {
    label: "Avg Chat FRT (mins)"
    hidden: yes
    type: average
    value_format_name: decimal_2
    filters: [Chat_First_Response_Time_Mins1: ">0"]
    sql: ${Chat_First_Response_Time_Mins1} ;;
  }

  measure: average_Chat_First_Response_Time_Mins {
    label: "Chat Average First Response Time (Mins)"
    type: average
    sql: ${Chat_First_Response_Time_Mins};;
    drill_fields: [detail*]
    value_format_name: decimal_1
    link: {
      label: "By chat_first_queue_name"
      url: "{{ CLC_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CLC_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CLC_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CLC_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CLC_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CLC_by_chat_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CLC_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CLC_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CLC_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CLC_by_chat_transcript_owner._link }}"
    }
  }

  measure: Chat_without_Agent_Response {
    label: "Chat without Agent Response"
    type: count_distinct
    sql:  ${oneforce_id} ;;
    filters: [Ishandled_by_agent: "Yes", Chat_First_Response_Time_Mins1: "NULL"]
    drill_fields: [ct_detail*]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ CLC_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CLC_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CLC_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CLC_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CLC_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CLC_by_chat_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CLC_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CLC_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CLC_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CLC_by_chat_transcript_owner._link }}"
    }
  }

  dimension: agent_chatting_time_sec {
    label: "Agent Chatting Time (sec)"
    hidden: yes
    type: number
    sql: ${TABLE}.Agent_Chatting_Time_sec ;;
  }

  dimension: average_response_time_operator {
    label: "Agent Response Time"
    type: number
    sql: ${TABLE}.AverageResponseTimeOperator ;;
    value_format_name: decimal_0
  }

  dimension: response_time_visitor {
    type: number
    label: "Visitor Response Time"
    sql: ${TABLE}.AverageResponseTimeVisitor ;;
    value_format_name: decimal_0
  }

  measure: Average_response_time_visitor {
    type: average
    sql: ${TABLE}.AverageResponseTimeVisitor ;;
    label: "Visitor Average Response Time"
    value_format_name: decimal_1
    drill_fields: [detail*]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ VART_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ VART_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ VART_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ VART_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ VART_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ VART_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ VART_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ VART_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ VART_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ VART_by_chat_transcript_owner._link }}"
    }
  }

  measure: VART_by_chat_first_queue_name {
    type: count
    drill_fields: [chat_first_queue_name,Average_response_time_visitor]
    hidden: yes
  }

  measure: VART_by_contact_name {
    type: count
    drill_fields: [contact_name,Average_response_time_visitor]
    hidden: yes
  }

  measure: VART_by_email {
    type: count
    drill_fields: [email,Average_response_time_visitor]
    hidden: yes
  }

  measure: VART_by_status {
    type: count
    drill_fields: [status,Average_response_time_visitor]
    hidden: yes
  }

  measure: VART_by_chat_duration {
    type: count
    drill_fields: [chat_duration,Average_response_time_visitor]
    hidden: yes
  }

  measure: VART_by_case_rating {
    type: count
    drill_fields: [case_rating,Average_response_time_visitor]
    hidden: yes
  }

  measure: VART_by_case_net_promoter_score {
    type: count
    drill_fields: [case_net_promoter_score,Average_response_time_visitor]
    hidden: yes
  }

  measure: VART_by_intent_l2 {
    type: count
    drill_fields: [intent_l2,Average_response_time_visitor]
    hidden: yes
  }

  measure: VART_by_intent_l3 {
    type: count
    drill_fields: [intent_l3,Average_response_time_visitor]
    hidden: yes
  }

  measure: VART_by_chat_transcript_owner {
    type: count
    drill_fields: [ct_owner.name,Average_response_time_visitor]
    hidden: yes
  }

  measure: response_time_operator {
    type: average
    sql: ${TABLE}.AverageResponseTimeOperator ;;
    label: "Average Agent Response Time"
    value_format_name: decimal_1
    drill_fields: [detail*]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ AART_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ AART_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ AART_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ AART_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ AART_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ AART_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ AART_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ AART_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ AART_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ AART_by_chat_transcript_owner._link }}"
    }
  }

  measure: AART_by_chat_first_queue_name {
    type: count
    drill_fields: [chat_first_queue_name,response_time_operator]
    hidden: yes
  }

  measure: AART_by_contact_name {
    type: count
    drill_fields: [contact_name,response_time_operator]
    hidden: yes
  }

  measure: AART_by_email {
    type: count
    drill_fields: [email,response_time_operator]
    hidden: yes
  }

  measure: AART_by_status {
    type: count
    drill_fields: [status,response_time_operator]
    hidden: yes
  }

  measure: AART_by_chat_duration {
    type: count
    drill_fields: [chat_duration,response_time_operator]
    hidden: yes
  }

  measure: AART_by_case_rating {
    type: count
    drill_fields: [case_rating,response_time_operator]
    hidden: yes
  }

  measure: AART_by_case_net_promoter_score {
    type: count
    drill_fields: [case_net_promoter_score,response_time_operator]
    hidden: yes
  }

  measure: AART_by_intent_l2 {
    type: count
    drill_fields: [intent_l2,response_time_operator]
    hidden: yes
  }

  measure: AART_by_intent_l3 {
    type: count
    drill_fields: [intent_l3,response_time_operator]
    hidden: yes
  }

  measure: AART_by_chat_transcript_owner {
    type: count
    drill_fields: [ct_owner.name,response_time_operator]
    hidden: yes
  }

  dimension: body {
    label: "Body"
    hidden: yes
    type: string
    sql: ${TABLE}.Body ;;
  }

  dimension: bot_chatting_time_sec {
    label: "Bot Chatting Time (sec)"
    hidden: yes
    type: number
    sql: ${TABLE}.Bot_Chatting_Time_sec ;;
  }

  dimension_group: bot_initiated_transfer {
    label: "Bot Initiated Transfer"
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Bot_Initiated_Transfer ;;
  }

  dimension_group: bot_transfer_abandoned {
    label: "Bot Transfer Abandoned"
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.Bot_Transfer_Abandoned ;;
  }

  dimension: browser {
    label: "Browser"
    hidden: yes
    type: string
    sql: ${TABLE}.Browser ;;
  }

  dimension: browser_language {
    label: "Browser Language"
    hidden: yes
    type: string
    sql: ${TABLE}.BrowserLanguage ;;
  }

  dimension: calculated_wait_time_sec {
    label: "Calculated Wait Time (sec)"
    type: number
    sql: ${TABLE}.Calculated_Wait_Time_sec ;;
  }

  dimension: case_id {
    label: "Case"
    #hidden: yes
    type: string
    sql: ${TABLE}.CaseId ;;
  }

  dimension: case_number {
    label: "Case Number"
    type: number
    sql: ${TABLE}.Case_Number ;;
  }

  dimension: chat_case_rating {
    type: string
    sql: CASE WHEN ${TABLE}.Chat_Case_Rating IS NULL THEN 'No Rating' ELSE ${TABLE}.Chat_Case_Rating END ;;
    label: "Chat Case Rating"
  }

  measure: Customer_chat_satisfaction_ratio {
    type: average
    sql: CASE WHEN ${chat_case_rating} = 'Good' THEN 1 ELSE 0 END;;
    drill_fields: [detail*]
    label: "Customer Chat Satisfaction Ratio"
    filters: [chat_case_rating:  "-No Rating"]
    value_format_name: percent_0
  }

  dimension: case_rating {
    label: "Case Rating"
    type: string
    sql: ${TABLE}.Case_Rating ;;
  }

  dimension: chat_duration {
    label: "Chat Duration"
    #hidden: yes
    type: number
    sql: ${TABLE}.ChatDuration ;;
  }

  dimension: chat_first_queue_name {
    label: "Chat First Queue Name"
    type: string
    #hidden: yes
    sql: ${TABLE}.Chat_First_Queue_Name ;;
  }

  dimension: chat_first_queue_name_detail {
    label: "Chat First Queue Name Detail"
    type: string
    sql: ${TABLE}.Chat_First_Queue_Name_Detail ;;
  }


  dimension: chat_key {
    hidden: yes
    type: string
    sql: ${TABLE}.ChatKey ;;
  }

  dimension: chat_log_additional_recipient {
    label: "Chat Log Additional Recipient"
    hidden: yes
    type: string
    sql: ${TABLE}.Chat_Log_Additional_Recipient ;;
  }

  dimension: chat_log_recipient {
    label: "Chat Log Recipient"
    hidden: yes
    type: string
    sql: ${TABLE}.Chat_Log_Recipient ;;
  }

  dimension: chat_preferred_language {
    label: "Chat Preferred Language"
    hidden: yes
    type: string
    sql: ${TABLE}.Chat_Preferred_Language ;;
  }

  dimension: cms_sso_status {
    label: "CMS SSO Status"
    hidden: yes
    type: string
    sql: ${TABLE}.CMS_SSO_Status ;;
  }

  dimension: company_name {
    label: "Company Name"
    hidden: yes
    type: string
    sql: ${TABLE}.Company_Name ;;
  }

  dimension: contact_email {
    label: "Contact_Email"
    hidden: yes
    type: string
    sql: ${TABLE}.Contact_Email ;;
  }

  dimension: contact_id {
    label: "Contact Name"
    hidden: yes
    type: string
    sql: ${TABLE}.ContactId ;;
  }

  dimension: contact_name {
    label: "Contact_Name"
    #hidden: yes
    type: string
    sql: ${TABLE}.Contact_Name ;;
  }

  dimension: corporate_office {
    label: "Corporate Office"
    type: string
    sql: ${TABLE}.Corporate_Office ;;
  }

  dimension: country {
    label: "Country"
    type: string
    #map_layer_name: countries
    sql: ${TABLE}.Country ;;
  }

  dimension: created_by_id {
    label: "Created By"
    hidden: yes
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    datatype: datetime
    timeframes: [year, hour_of_day, month, week, week_of_year, month_num, month_name,quarter, date, raw]
    label: "Created Date"
    sql: ${TABLE}.CreatedDate ;;
  }


# dimension: Date_dynamic {
#   type: string
#   label: "Date Dynamic Chat Transcript"
#   sql:
#    {% if timeframe_picker._parameter_value == 'Day' %} ${created_date}
#    {% elsif timeframe_picker._parameter_value == 'Week' %} ${created_week}
#    {% elsif timeframe_picker._parameter_value == 'Month' %} ${created_month}
#    {% elsif timeframe_picker._parameter_value == 'Quarter' %} ${created_quarter}
#    {% elsif timeframe_picker._parameter_value == 'Year' %} ${created_year}
#    {% else %} null {% endif %} ;;
#   drill_fields: [detail*]
# }

  dimension: Date_dynamic {
    type: date
    datatype: datetime
    label: "Date Dynamic Chat Transcript"
    sql:
     {% if timeframe_picker._parameter_value == 'Day' %}   DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'), DAY)
     {% elsif timeframe_picker._parameter_value == 'Week' %}  DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'), WEEK(MONDAY))
     {% elsif timeframe_picker._parameter_value == 'Month' %}  DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'),MONTH)
     {% elsif timeframe_picker._parameter_value == 'Quarter' %}  DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'),QUARTER)
     {% elsif timeframe_picker._parameter_value == 'Year' %}  DATETIME_TRUNC(DATETIME(TIMESTAMP(${created_raw}),'{{_query._query_timezone}}'),YEAR)
     {% else %} null {% endif %} ;;
    convert_tz: no

    link: {
      label: "Chat Transcript Owner"
      url: "{{ count_by_chat_transcript_owner._link }}"
    }
  }

  parameter: timeframe_picker {
    label: "Date Granularity"
    type: unquoted
    allowed_value: { value: "Day" }
    allowed_value: { value: "Week" }
    allowed_value: { value: "Month" }
    allowed_value: { value: "Quarter" }
    allowed_value: { value: "Year" }
    default_value: "Month"
  }

  dimension: disable_one_quote {
    label: "Disable One Quote"
    hidden: yes
    type: string
    sql: ${TABLE}.Disable_One_Quote ;;
  }

  dimension: e_commerce_user_id {
    label: "eCommerce UserID"
    hidden: yes
    type: string
    sql: ${TABLE}.eCommerce_UserID ;;
  }

  dimension: email {
    label: "Email"
    #hidden: yes
    type: string
    sql: ${TABLE}.Email ;;
  }

  dimension_group: end {
    label: "End Time"
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EndTime ;;
  }

  dimension: ended_by {
    label: "Ended By"
    hidden: yes
    type: string
    sql: ${TABLE}.EndedBy ;;
  }

  dimension: first_name {
    label: "First Name"
    hidden: yes
    type: string
    sql: ${TABLE}.First_Name ;;
  }

  dimension: first_queue_name {
    label: "First Queue Name"
    type: string
    sql: ${TABLE}.First_Queue_Name ;;
  }

  dimension: first_resolved {
    label: "First Resolved"
    hidden: yes
    type: string
    sql: ${TABLE}.First_Resolved ;;
  }

  dimension: has_leave_message {
    label: "Has Leave Message"
    hidden: yes
    type: string
    sql: ${TABLE}.HasLeaveMessage ;;
  }

  dimension: intent {
    label: "intent"
    type: string
    sql: ${TABLE}.intent ;;
  }

  dimension: intent_l1 {
    label: "Intent_L1"
    type: string
    sql: ${TABLE}.Intent_L1 ;;
  }

  dimension: intent_l2 {
    label:"Intent_L2"
    type: string
    sql: ${TABLE}.Intent_L2 ;;
  }

  dimension: intent_l3 {
    label: "Intent_L3"
    type: string
    sql: ${TABLE}.Intent_L3 ;;
  }

  dimension: intent_l4 {
    label: "Intent_L4"
    type: string
    sql: ${TABLE}.Intent_L4 ;;
  }

  dimension: ip_address {
    label: "Visitor IP Address"
    hidden: yes
    type: string
    sql: ${TABLE}.IpAddress ;;
  }

  dimension: is_case_closed {
    label: "Is Case Closed?"
    type: string
    sql: ${TABLE}.Is_Case_Closed ;;
  }

  dimension: is_chatbot_session {
    hidden: yes
    type: string
    sql: ${TABLE}.IsChatbotSession ;;
  }

  dimension: is_deleted {
    hidden: yes
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: is_dummy {
    hidden: yes
    type: string
    sql: ${TABLE}.IsDummy ;;
  }

  dimension: is_mobile {
    label: "Is Mobile"
    hidden: yes
    type: string
    sql: ${TABLE}.Is_Mobile ;;
  }

  dimension: is_need_get_transcript {
    label: "Is Need Get Transcript"
    hidden: yes
    type: string
    sql: ${TABLE}.Is_Need_Get_Transcript ;;
  }

  dimension: is_nurtured {
    label: "Is Nurtured"
    type: string
    sql: ${TABLE}.Is_Nurtured ;;
  }

  dimension: is_queue {
    label: "Is Queue"
    type: string
    sql: ${TABLE}.Is_Queue ;;
  }

  measure: Queued_Abandonment_Ratio {
    label: "Queue Abandonement Ratio"
    type: average
    sql:   CASE WHEN ${is_queue} ='Abandonment' THEN 1 ELSE 0 END  ;;
    filters: [is_queue: "Abandonment,Queue"]
    drill_fields: [ct_detail*]
    value_format_name: percent_1

    link: {
      label: "Show Only {{rendered_value}}"
      url: "{{ Ratio_Drills._link }}&f[of_chat_transcript.is_queue]=Abandonment"
    }

    link: {
      label: "By chat_first_queue_name"
      url: "{{ CLC_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CLC_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CLC_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CLC_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CLC_by_chat_duration._link }}"
    }

    link: {
      label: "By chat case rating"
      url: "{{ CLC_by_chat_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CLC_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CLC_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CLC_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CLC_by_chat_transcript_owner._link }}"
    }
  }

#  measure: Queued_Abandonment_Ratio {
#    label: "Queue Abandonement Ratio"
#    type: number
#    sql:  ${Queued_Abandonment_Chats}/(CASE WHEN coalesce(${Queued_Chats},0) = 0 THEN 1 ELSE ${Queued_Chats} END ) ;;
#    #drill_fields: [ct_detail*]
#    value_format_name: percent_1
#
#    link: {
#      label: "Show {{rendered_value}}"
#      url: "{{ Ratio_Drills._link }}&f[of_chat_transcript.is_queue]=Abandonment,Queue"
#    }
#
#    link: {
#      label: "By chat_first_queue_name"
#      url: "{{ CLC_by_chat_first_queue_name._link }}&f[of_chat_transcript.is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By contact_name"
#      url: "{{ CLC_by_contact_name._link }}&f[of_chat_transcript.is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By email"
#      url: "{{ CLC_by_email._link }}&f[of_chat_transcript.is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By status"
#      url: "{{ CLC_by_status._link }}&f[of_chat_transcript.is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By chat_duration"
#      url: "{{ CLC_by_chat_duration._link }}&f[of_chat_transcript.is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By chat case rating"
#      url: "{{ CLC_by_chat_case_rating._link }}&f[of_chat_transcript.is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By case_net_promoter_score"
#      url: "{{ CLC_by_case_net_promoter_score._link }}&f[of_chat_transcript.is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By intent_l2"
#      url: "{{ CLC_by_intent_l2._link }}&f[of_chat_transcript.is_queue]=Abandonment"
#    }
#
#    link: {
#      label: "By intent_l3"
#      url: "{{ CLC_by_intent_l3._link }}&f[of_chat_transcript.is_queue]=Abandonment"
#    }
#  }

  measure: customer_left_chat {
    label: "Customer left chat"
    description: "Customer queue and left while queuing"
    type: count_distinct
    sql: ${oneforce_id} ;;
    #sql: CASE WHEN ${is_queue} ='Abandonment' THEN 1 ELSE 0 END  ;;
    drill_fields: [ct_detail*]
    filters: [is_queue: "Abandonment"]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ CLC_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CLC_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CLC_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CLC_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CLC_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CLC_by_chat_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CLC_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CLC_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CLC_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CLC_by_chat_transcript_owner._link }}"
    }
  }

  measure: Ratio_Drills {
    type: count
    drill_fields: [ct_detail*]
    hidden: yes
  }

  measure: CLC_by_chat_first_queue_name {
    type: count
    drill_fields: [chat_first_queue_name,customer_left_chat]
    hidden: yes
  }

  measure: CLC_by_contact_name {
    type: count
    drill_fields: [contact_name,customer_left_chat]
    hidden: yes
  }

  measure: CLC_by_email {
    type: count
    drill_fields: [email,customer_left_chat]
    hidden: yes
  }

  measure: CLC_by_status {
    type: count
    drill_fields: [status,customer_left_chat]
    hidden: yes
  }

  measure: CLC_by_chat_duration {
    type: count
    drill_fields: [chat_duration,customer_left_chat]
    hidden: yes
  }

  measure: CLC_by_chat_case_rating {
    type: count
    drill_fields: [chat_case_rating,customer_left_chat]
    hidden: yes
  }

  measure: CLC_by_case_net_promoter_score {
    type: count
    drill_fields: [case_net_promoter_score,customer_left_chat]
    hidden: yes
  }

  measure: CLC_by_intent_l2 {
    type: count
    drill_fields: [intent_l2,customer_left_chat]
    hidden: yes
  }

  measure: CLC_by_intent_l3 {
    type: count
    drill_fields: [intent_l3,customer_left_chat]
    hidden: yes
  }

  measure: CLC_by_chat_transcript_owner {
    type: count
    drill_fields: [ct_owner.name,customer_left_chat]
    hidden: yes
  }

  measure: chat_resolved_self_service {
    label: "Chat Resolved by Self Service Function"
    type: count_distinct
    sql: ${oneforce_id} ;;
    #sql: CASE WHEN ${of_case.Is_Chat_Self_Service} ='true' THEN 1 ELSE 0 END  ;;
    filters: [of_case.Is_Chat_Self_Service: "true"]
    drill_fields: [ct_detail*]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ CRSS_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CRSS_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CRSS_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CRSS_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CRSS_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CRSS_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CRSS_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CRSS_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CRSS_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CRSS_by_chat_transcript_owner._link }}"
    }
  }

  measure: CRSS_by_chat_first_queue_name {
    type: count
    drill_fields: [chat_first_queue_name,chat_resolved_self_service]
    hidden: yes
  }

  measure: CRSS_by_contact_name {
    type: count
    drill_fields: [contact_name,chat_resolved_self_service]
    hidden: yes
  }

  measure: CRSS_by_email {
    type: count
    drill_fields: [email,chat_resolved_self_service]
    hidden: yes
  }

  measure: CRSS_by_status {
    type: count
    drill_fields: [status,chat_resolved_self_service]
    hidden: yes
  }

  measure: CRSS_by_chat_duration {
    type: count
    drill_fields: [chat_duration,chat_resolved_self_service]
    hidden: yes
  }

  measure: CRSS_by_case_rating {
    type: count
    drill_fields: [case_rating,chat_resolved_self_service]
    hidden: yes
  }

  measure: CRSS_by_case_net_promoter_score {
    type: count
    drill_fields: [case_net_promoter_score,chat_resolved_self_service]
    hidden: yes
  }

  measure: CRSS_by_intent_l2 {
    type: count
    drill_fields: [intent_l2,chat_resolved_self_service]
    hidden: yes
  }

  measure: CRSS_by_intent_l3 {
    type: count
    drill_fields: [intent_l3,chat_resolved_self_service]
    hidden: yes
  }

  measure: CRSS_by_chat_transcript_owner {
    type: count
    drill_fields: [ct_owner.name,chat_resolved_self_service]
    hidden: yes
  }

  dimension: janrain_uuid {
    label: "Janrain UUID"
    hidden: yes
    type: string
    sql: ${TABLE}.Janrain_UUID ;;
  }

  dimension: language_del {
    hidden: yes
    type: string
    sql: ${TABLE}.Language_del ;;
  }

  dimension: last_modified_by_id {
    label: "Last Modified By"
    hidden: yes
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    label: "Last Modified Date"
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: last_name {
    label: "Last Name"
    hidden: yes
    type: string
    sql: ${TABLE}.Last_Name ;;
  }

  dimension_group: last_referenced {
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastReferencedDate ;;
  }

  dimension_group: last_viewed {
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastViewedDate ;;
  }

  dimension: lead_id {
    hidden: yes
    label: "Lead"
    type: string
    sql: ${TABLE}.LeadId ;;
  }

  dimension: lfd_used {
    label: "LFD Used"
    type: string
    sql: ${TABLE}.LFD_Used ;;
  }

  dimension: live_chat_button_id {
    label: "Chat Button"
    hidden: yes
    type: string
    sql: ${TABLE}.LiveChatButtonId ;;
  }

  dimension: live_chat_deployment_id {
    label: "Deployment"
    hidden: yes
    type: string
    sql: ${TABLE}.LiveChatDeploymentId ;;
  }

  dimension: live_chat_visitor_id {
    label: "Chat Visitor"
    hidden: yes
    type: string
    sql: ${TABLE}.LiveChatVisitorId ;;
  }

  dimension: location {
    label: "Location"
    hidden: yes
    type: string
    sql: ${TABLE}.Location ;;
  }

  dimension: max_response_time_operator {
    label: "Agent Maximum Response Time"
    hidden: yes
    type: number
    sql: ${TABLE}.MaxResponseTimeOperator ;;
  }

  dimension: max_response_time_visitor {
    label: "Visitor Maximum Response Time"
    hidden: yes
    type: number
    sql: ${TABLE}.MaxResponseTimeVisitor ;;
  }

  dimension: merged_d_d_transferred {
    label: "Merged D&D Transferred"
    type: string
    sql: ${TABLE}.Merged_D_D_Transferred ;;
    hidden: yes
  }

  dimension: merged_d_d_used {
    label: "Merged D&D Used"
    type: string
    sql: ${TABLE}.Merged_D_D_Used ;;
  }

  dimension: name {
    label: "Chat Transcript Name"
    type: string
    sql: ${TABLE}.Name ;;
  }

  measure: name1 {
    label: "Chat Transcript Name"
    type: max
    sql: ${TABLE}.Name ;;
  }

  measure: name_max {
    label: "Chat Transcript Name Max"
    type:string
    sql: max(${TABLE}.Name) ;;
  }

  dimension: office {
    label: "Office"
    type: string
    sql: ${TABLE}.Office ;;
  }

  dimension: oneforce_id {
    label: "OneForce ID"
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
    primary_key: yes
  }

  dimension: operator_message_count {
    label: "Agent Message Count"
    hidden: yes
    type: number
    sql: ${TABLE}.OperatorMessageCount ;;
  }

  dimension: origin {
    label: "Origin"
    type: string
    sql: ${TABLE}.Origin ;;
  }

  dimension: owner_id {
    label: "Owner"
    hidden: no
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension: platform {
    label: "Platform"
    type: string
    sql: ${TABLE}.Platform ;;
  }

  dimension: queue_wait_time {
    label: "Queue Wait Time"
    hidden: yes
    type: number
    sql: ${TABLE}.Queue_Wait_Time ;;
  }

  dimension: reference_number {
    label: "Reference Number"
    hidden: yes
    type: string
    sql: ${TABLE}.Reference_Number ;;
  }

  dimension: reference_number_type {
    label: "Reference Number Type"
    hidden: yes
    type: string
    sql: ${TABLE}.Reference_Number_Type ;;
  }

  dimension: referrer_uri {
    label: "Referring Site"
    hidden: yes
    type: string
    sql: ${TABLE}.ReferrerUri ;;
  }

  dimension_group: request {
    label: "Request Time"
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.RequestTime ;;
  }

  dimension: screen_resolution {
    label: "Screen Resolution"
    hidden: yes
    type: string
    sql: ${TABLE}.ScreenResolution ;;
  }

  dimension: shipment_number {
    label: "Shipment Number"
    hidden: yes
    type: string
    sql: ${TABLE}.Shipment_Number ;;
  }

  dimension: skill_id {
    label: "Primary Skill"
    hidden: yes
    type: string
    sql: ${TABLE}.SkillId ;;
  }

  dimension_group: start {
    label: "Start Time"
    type: time
    datatype: datetime
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.StartTime ;;
  }

  dimension: status {
    label: "Status"
    type: string
    sql: ${TABLE}.Status ;;
  }

  dimension: supervisor_transcript_body {
    label: "Supervisor Transcript Body"
    hidden: yes
    type: string
    sql: ${TABLE}.SupervisorTranscriptBody ;;
  }

  dimension_group: system_modstamp {
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SystemModstamp ;;
  }

  dimension: transfer_type {
    label: "TransferType"
    type: string
    sql: ${TABLE}.TransferType ;;
  }

  dimension: transferred_queues {
    label: "Transferred Queues"
    hidden: yes
    type: string
    sql: ${TABLE}.Transferred_Queues ;;
  }

  dimension: user_agent {
    label: "User Agent"
    hidden: yes
    type: string
    sql: ${TABLE}.UserAgent ;;
  }

  dimension: visitor_message_count {
    label: "Visitor Message Count"
    hidden: yes
    type: number
    sql: ${TABLE}.VisitorMessageCount ;;
  }

  dimension: visitor_network {
    label: "Network"
    hidden: yes
    type: string
    sql: ${TABLE}.VisitorNetwork ;;
  }

  dimension: wait_time {
    label: "Wait Time"
    description: "Wait Time in second"
    type: number
    sql: ${TABLE}.WaitTime ;;
  }

  measure: Average_wait_time {
    type: average
    sql: coalesce(${TABLE}.WaitTime,0)+coalesce(${TABLE}.Queue_Wait_Time,0) ;;
    label: "Customer Waiting Time"
    description: "Customer Waiting Time in second"
    value_format_name: decimal_1
    drill_fields: [detail*]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ CWT_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CWT_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CWT_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CWT_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CWT_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CWT_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CWT_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CWT_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CWT_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CWT_by_chat_transcript_owner._link }}"
    }
  }

  measure: CWT_by_chat_first_queue_name {
    type: count
    drill_fields: [chat_first_queue_name,Average_wait_time]
    hidden: yes
  }

  measure: CWT_by_contact_name {
    type: count
    drill_fields: [contact_name,Average_wait_time]
    hidden: yes
  }

  measure: CWT_by_email {
    type: count
    drill_fields: [email,Average_wait_time]
    hidden: yes
  }

  measure: CWT_by_status {
    type: count
    drill_fields: [status,Average_wait_time]
    hidden: yes
  }

  measure: CWT_by_chat_duration {
    type: count
    drill_fields: [chat_duration,Average_wait_time]
    hidden: yes
  }

  measure: CWT_by_case_rating {
    type: count
    drill_fields: [case_rating,Average_wait_time]
    hidden: yes
  }

  measure: CWT_by_case_net_promoter_score {
    type: count
    drill_fields: [case_net_promoter_score,Average_wait_time]
    hidden: yes
  }

  measure: CWT_by_intent_l2 {
    type: count
    drill_fields: [intent_l2,Average_wait_time]
    hidden: yes
  }

  measure: CWT_by_intent_l3 {
    type: count
    drill_fields: [intent_l3,Average_wait_time]
    hidden: yes
  }

  measure: CWT_by_chat_transcript_owner {
    type: count
    drill_fields: [ct_owner.name,Average_wait_time]
    hidden: yes
  }

  measure: total_chat_handled_by_agents {
    label: "Total Chat Handled by Agents"
    type: sum
    sql: CASE WHEN ${Ishandled_by_agent} = "Yes" THEN 1 ELSE 0 END  ;;
    drill_fields: [detail*]

    link: {
      label: "By chat_first_queue_name"
      url: "{{ count_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ count_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ count_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ count_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ count_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ count_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ count_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ count_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ count_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ count_by_chat_transcript_owner._link }}"
    }
  }


  measure: count {
    type: count
    drill_fields: [detail*]

    link: {
      label: "By chat_first_queue_name"
      url: "{{ count_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ count_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ count_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ count_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ count_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ count_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ count_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ count_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ count_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ count_by_chat_transcript_owner._link }}"
    }
  }

  measure: count_by_chat_first_queue_name {
    type: count
    drill_fields: [chat_first_queue_name,count]
    hidden: yes
  }

  measure: count_by_contact_name {
    type: count
    drill_fields: [contact_name,count]
    hidden: yes
  }

  measure: count_by_email {
    type: count
    drill_fields: [email,count]
    hidden: yes
  }

  measure: count_by_status {
    type: count
    drill_fields: [status,count]
    hidden: yes
  }

  measure: count_by_chat_duration {
    type: count
    drill_fields: [chat_duration,count]
    hidden: yes
  }

  measure: count_by_case_rating {
    type: count
    drill_fields: [case_rating,count]
    hidden: yes
  }

  measure: count_by_case_net_promoter_score {
    type: count
    drill_fields: [case_net_promoter_score,count]
    hidden: yes
  }

  measure: count_by_intent_l2 {
    type: count
    drill_fields: [intent_l2,count]
    hidden: yes
  }

  measure: count_by_intent_l3 {
    type: count
    drill_fields: [intent_l3,count]
    hidden: yes
  }

  measure: count_by_chat_transcript_owner {
    type: count
    drill_fields: [ct_owner.name,count]
    hidden: yes
  }


  dimension: case_net_promoter_score {
    label: "Chat Net Promoter Score"
    type: string
    sql: ${TABLE}.Case_Net_Promoter_Score ;;
  }


  #dimension: chat_handle_time {
  #  label: "Chat Handle Time"
  #  type: string
  #  sql: ${TABLE}.Chat_Handle_Time ;;
  #  value_format_name: decimal_1
  #}

  measure: avg_chat_handle_time {
    label: "Avg Chat Handle Time (Mins)"
    type: average
    sql: ${TABLE}.Chat_Handle_Time ;;
    filters: [of_case.origin : "Chat"]
    drill_fields: [detail*]
    value_format_name: decimal_1
  }

  measure: chat_handle_time1 {
    label: "Avg Chat Handle Time (mins)"
    type: average
    sql: ${TABLE}.Chat_Handle_Time ;;
    filters: [of_case.origin : "Chat"]
    drill_fields: [detail*]
    value_format_name: decimal_1
  }

  measure: chat_handle_time_avg {
    label: "Average Chat Handle Time"
    type: average
    sql: ${TABLE}.Chat_Handle_Time ;;
    filters: [of_case.origin : "Chat"]
    drill_fields: [detail*]
    value_format_name: decimal_1
    filters: [of_case.is_aht_calculated_excluded: "Yes"]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ ACHT_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ ACHT_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ ACHT_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ ACHT_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ ACHT_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ ACHT_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ ACHT_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ ACHT_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ ACHT_by_intent_l3._link }}"
    }
  }

  measure: chat_handle_time_avg2 {
    label: "Average Chat Handle Time (Mins)"
    type: average
    sql: ${chat_handle_time} ;;
    drill_fields: [detail*]
    value_format_name: decimal_1
    filters: [chat_handle_time: ">0"]

    link: {
      label: "By chat_first_queue_name"
      url: "{{ ACHT_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ ACHT_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ ACHT_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ ACHT_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ ACHT_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ ACHT_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ ACHT_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ ACHT_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ ACHT_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ ACHT_by_chat_transcript_owner._link }}"
    }
  }

  measure: ACHT_by_chat_first_queue_name {
    type: count
    drill_fields: [chat_first_queue_name,chat_handle_time_avg]
    hidden: yes
  }

  measure: ACHT_by_contact_name {
    type: count
    drill_fields: [contact_name,chat_handle_time_avg]
    hidden: yes
  }

  measure: ACHT_by_email {
    type: count
    drill_fields: [email,chat_handle_time_avg]
    hidden: yes
  }

  measure: ACHT_by_status {
    type: count
    drill_fields: [status,chat_handle_time_avg]
    hidden: yes
  }

  measure: ACHT_by_chat_duration {
    type: count
    drill_fields: [chat_duration,chat_handle_time_avg]
    hidden: yes
  }

  measure: ACHT_by_case_rating {
    type: count
    drill_fields: [case_rating,chat_handle_time_avg]
    hidden: yes
  }

  measure: ACHT_by_case_net_promoter_score {
    type: count
    drill_fields: [case_net_promoter_score,chat_handle_time_avg]
    hidden: yes
  }

  measure: ACHT_by_intent_l2 {
    type: count
    drill_fields: [intent_l2,chat_handle_time_avg]
    hidden: yes
  }

  measure: ACHT_by_intent_l3 {
    type: count
    drill_fields: [intent_l3,chat_handle_time_avg]
    hidden: yes
  }

  measure: ACHT_by_chat_transcript_owner {
    type: count
    drill_fields: [ct_owner.name,chat_handle_time_avg]
    hidden: yes
  }

  measure: ct_owner {
    type: count_distinct
    sql: ${of_case.ct_owner_name} ;;

  }

  measure: chat_owner {
    type: count_distinct
    sql: ${owner_id} ;;
  }

  measure: chats_per_agent {
    label: "Chats Per Agent"
    type: number
    sql: (${total_chat_handled_by_agents}/${chat_owner}) ;;
    value_format_name: decimal_2
    drill_fields: [detail*]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ CPA_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CPA_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CPA_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CPA_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CPA_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CPA_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CPA_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CPA_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CPA_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CPA_by_chat_transcript_owner._link }}"
    }
  }

  measure: CPA_by_chat_first_queue_name {
    type: count
    drill_fields: [chat_first_queue_name,chats_per_agent]
    hidden: yes
  }

  measure: CPA_by_contact_name {
    type: count
    drill_fields: [contact_name,chats_per_agent]
    hidden: yes
  }

  measure: CPA_by_email {
    type: count
    drill_fields: [email,chats_per_agent]
    hidden: yes
  }

  measure: CPA_by_status {
    type: count
    drill_fields: [status,chats_per_agent]
    hidden: yes
  }

  measure: CPA_by_chat_duration {
    type: count
    drill_fields: [chat_duration,chats_per_agent]
    hidden: yes
  }

  measure: CPA_by_case_rating {
    type: count
    drill_fields: [case_rating,chats_per_agent]
    hidden: yes
  }

  measure: CPA_by_case_net_promoter_score {
    type: count
    drill_fields: [case_net_promoter_score,chats_per_agent]
    hidden: yes
  }

  measure: CPA_by_intent_l2 {
    type: count
    drill_fields: [intent_l2,chats_per_agent]
    hidden: yes
  }

  measure: CPA_by_intent_l3 {
    type: count
    drill_fields: [intent_l3,chats_per_agent]
    hidden: yes
  }

  measure: CPA_by_chat_transcript_owner {
    type: count
    drill_fields: [ct_owner.name,chats_per_agent]
    hidden: yes
  }

  measure: days_of_month {
    type: count_distinct
    sql: (${created_date}) ;;
    label: "Days of Month"
  }

  dimension: Geography_dynamic {
    type: string
    label: "Geography Chat Dynamic"
    drill_fields: [detail*]
    sql: CASE
          WHEN {% parameter DB_Param %} = "RHQ" THEN ${of_case.case_RHQ}
          WHEN {% parameter DB_Param %} = "Status" THEN ${status}
          WHEN {% parameter DB_Param %} = "Country" THEN ${country}
          WHEN {% parameter DB_Param %} = "Office" THEN ${office}
          WHEN {% parameter DB_Param %} = "Segment " THEN ${of_customer_group.key_acct_tp_cd}
          ELSE "Global" END;;
  }

  parameter: DB_Param {
    type: string
    label: "Dashboard Parameter"

    allowed_value: {
      label: "Global"
      value: "Global"
    }

    allowed_value: {
      label: "RHQ"
      value: "RHQ"
    }

    allowed_value: {
      label: "Status"
      value: "Status"
    }
    allowed_value: {
      label: "Country"
      value: "Country"
    }
    allowed_value: {
      label: "Office"
      value: "Office"
    }
    allowed_value: {
      label: "Segment "
      value: "Segment "
    }
  }

  measure: all_rating_chat{
    type: count_distinct
    sql: Case WHEN ${chat_case_rating}='Good' OR ${chat_case_rating}='Bad'  THEN 1 ELSE 0 END ;;
    label:"All Rating Chat"
  }

  measure: good_rating_chat{
    type: count_distinct
    sql: Case WHEN ${chat_case_rating}='Good'  THEN 1 ELSE 0 END ;;
    label:"Good Rating Chat"
  }

  measure: difference_rating_chat{
    type: number
    sql: (${good_rating_chat}/NULLIF(${all_rating_chat}, 0)) ;;
    label:"Difference Rating Chat"
    drill_fields: [detail*]
  }

  dimension: total_chat_transfer {
    label: "No. of Times Chat is Transferred"
    type: number
    sql: ${TABLE}.Total_Chat_Transfer ;;
  }

  dimension: is_abandoned_chat {
    label: "Is Abandoned Chat?"
    description: "Is Queue = Abandonement OR Customer_Abandoned_Chat is True"
    type: yesno
    sql:  ${is_queue} ='Abandonment' OR ${Customer_Abandoned_Chat} = 'true' ;;
  }

  measure: total_abandoned_chat {
    label: "Total Abandoned Chat"
    description: "Customer left while either queuing or chatting BOT"
    type: count_distinct
    sql: ${oneforce_id};;
    filters: [is_abandoned_chat: "yes"]
    drill_fields: [detail*]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ CLC_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CLC_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CLC_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CLC_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CLC_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CLC_by_chat_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CLC_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CLC_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CLC_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CLC_by_chat_transcript_owner._link }}"
    }
  }

  measure: transferred_chat {
    label: "Transferred Chat"
    type: sum
    sql:  CASE WHEN ${total_chat_transfer} >0 THEN 1 ELSE 0 END ;;
    drill_fields: [detail*]
    link: {
      label: "By chat_first_queue_name"
      url: "{{ CLC_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CLC_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CLC_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CLC_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CLC_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CLC_by_chat_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CLC_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CLC_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CLC_by_intent_l3._link }}"
    }
  }

  measure: transferred_chat_ratio {
    label: "Transfer Chat Ratio"
    type: number
    sql: (${transferred_chat}/IFNULL(${count},0)) ;;
    drill_fields: [detail*]
    value_format_name: percent_1
    link: {
      label: "By chat_first_queue_name"
      url: "{{ CLC_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CLC_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CLC_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CLC_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CLC_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CLC_by_chat_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CLC_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CLC_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CLC_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CLC_by_chat_transcript_owner._link }}"
    }
  }



  measure: abandone_chat_b4_agent {
    label: "Abandoned chat before connect agent"
    type: count_distinct
    #sql: CASE WHEN ${Customer_Abandoned_Chat} = 'true' THEN 1 ELSE 0 END ;;
    sql: ${oneforce_id} ;;
    filters: [Customer_Abandoned_Chat: "true"]
  }

  measure: abandone_chat_b4_agent_ratio {
    label: "Abandonement before agent Ratio"
    type: number
    sql: (${abandone_chat_b4_agent}/IFNULL(${Total_Chats},0)) ;;
    drill_fields: [ct_detail*]
    value_format_name: percent_1

    link: {
      label: "Show Only {{rendered_value}}"
      url: "{{ Ratio_Drills._link }}&f[of_chat_transcript.Customer_Abandoned_Chat]=true"
    }

    link: {
      label: "By chat_first_queue_name"
      url: "{{ CLC_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ CLC_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ CLC_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ CLC_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ CLC_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ CLC_by_chat_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ CLC_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ CLC_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ CLC_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ CLC_by_chat_transcript_owner._link }}"
    }
  }

  measure: Queued_Abandonment_Chats  {
    label: "Queued_Abandonment_Chats"
    type: count_distinct
    #sql: CASE WHEN ${is_queue} in ('Abandonment') THEN 1 ELSE 0 END  ;;
    sql: ${oneforce_id} ;;
    filters: [is_queue: "Abandonment"]
  }

  measure: Queued_Chats  {
    label: "Queued_Chats"
    type: count_distinct
    #sql: CASE WHEN ${is_queue} in ('Abandonment','Queue') THEN 1 ELSE 0 END  ;;
    sql: ${oneforce_id} ;;
    filters: [is_queue: "Abandonment,Queue"]
  }


  measure: Total_Chats  {
    label: "Total_Chats"
    type: count_distinct
    sql: ${oneforce_id} ;;
  }

  measure: total_queued_chats {
    label: "Total Queued Chats"
    type: average
    sql: CASE WHEN ${is_queue} in ('Abandonment','Queue') THEN 1 ELSE 0 END ;;
    drill_fields: [ct_detail*]
    filters: [is_queue: "Abandonment,Queue,None"]
    value_format_name: percent_1

    link: {
      label: "Show Only {{rendered_value}}"
      url: "{{ Ratio_Drills._link }}&f[of_chat_transcript.is_queue]=Abandonment,Queue"
    }

    link: {
      label: "By chat_first_queue_name"
      url: "{{ TQC_by_chat_first_queue_name._link }}"
    }

    link: {
      label: "By contact_name"
      url: "{{ TQC_by_contact_name._link }}"
    }

    link: {
      label: "By email"
      url: "{{ TQC_by_email._link }}"
    }

    link: {
      label: "By status"
      url: "{{ TQC_by_status._link }}"
    }

    link: {
      label: "By chat_duration"
      url: "{{ TQC_by_chat_duration._link }}"
    }

    link: {
      label: "By case_rating"
      url: "{{ TQC_by_case_rating._link }}"
    }

    link: {
      label: "By case_net_promoter_score"
      url: "{{ TQC_by_case_net_promoter_score._link }}"
    }

    link: {
      label: "By intent_l2"
      url: "{{ TQC_by_intent_l2._link }}"
    }

    link: {
      label: "By intent_l3"
      url: "{{ TQC_by_intent_l3._link }}"
    }

    link: {
      label: "Chat Transcript Owner"
      url: "{{ TQC_by_chat_transcript_owner._link }}"
    }
  }

  measure: TQC_by_chat_first_queue_name {
    type: count
    drill_fields: [chat_first_queue_name,total_queued_chats]
    hidden: yes
  }

  measure: TQC_by_contact_name {
    type: count
    drill_fields: [contact_name,total_queued_chats]
    hidden: yes
  }

  measure: TQC_by_email {
    type: count
    drill_fields: [email,total_queued_chats]
    hidden: yes
  }

  measure: TQC_by_status {
    type: count
    drill_fields: [status,total_queued_chats]
    hidden: yes
  }

  measure: TQC_by_chat_duration {
    type: count
    drill_fields: [chat_duration,total_queued_chats]
    hidden: yes
  }

  measure: TQC_by_case_rating {
    type: count
    drill_fields: [case_rating,total_queued_chats]
    hidden: yes
  }

  measure: TQC_by_case_net_promoter_score {
    type: count
    drill_fields: [case_net_promoter_score,total_queued_chats]
    hidden: yes
  }

  measure: TQC_by_intent_l2 {
    type: count
    drill_fields: [intent_l2,total_queued_chats]
    hidden: yes
  }

  measure: TQC_by_intent_l3 {
    type: count
    drill_fields: [intent_l3,total_queued_chats]
    hidden: yes
  }

  measure: TQC_by_chat_transcript_owner {
    type: count
    drill_fields: [ct_owner.name,total_queued_chats]
    hidden: yes
  }

  dimension:chat_nps_group {
    type: string
    sql: (CASE
          WHEN ${TABLE}.Chat_Case_Net_Promoter_Score<7 THEN 'Detractors'
          WHEN ${TABLE}.Chat_Case_Net_Promoter_Score>=7 and ${TABLE}.Chat_Case_Net_Promoter_Score<9 THEN 'Passives'
          WHEN ${TABLE}.Chat_Case_Net_Promoter_Score>=9 THEN 'Promoters'
          ELSE 'No Rating' END);;
    label:"Chat NPS Segment"

  }

  dimension: chat_case_net_promoter_score{
    type: string
    sql: ${TABLE}.Chat_Case_Net_Promoter_Score;;
    label: "Chat Net Promotor Score"
  }

  measure: detractor_percentage{
    type: average
    sql: Case WHEN ${chat_nps_group}='Detractors' THEN 1 ELSE 0 END ;;
    label:"Detractor Percentage"
    filters: [chat_nps_group: "-No Rating"]
    value_format_name: percent_0
    #hidden: yes
  }

  measure: promoter_percentage{
    type: average
    sql: Case WHEN ${chat_nps_group}='Promoters' THEN 1 ELSE 0 END ;;
    label:"Promoters Percentage"
    value_format_name: percent_0
    filters: [chat_nps_group: "-No Rating"]
    #hidden: yes
  }


  measure: chat_global_nps{
    type: number
    sql: (${promoter_percentage} - ${detractor_percentage}) *100 ;;
    label:"Chat Global NPS"
    value_format_name: decimal_0
    drill_fields: [detail*]
  }

  dimension: business_scenarios {
    label: "Business Scenarios - Filter"
    type: string
    sql: CASE WHEN (${status} = 'Missed' AND ${case_owner.name} = 'Platform Integration User' AND ${of_case.status} = 'Closed' AND ${of_case.resolution_reason} = 'Customer Abandoned Chat') THEN 'Pre-Chat Form'
              WHEN (${isWithInBusinessHour} = 'No' AND ${status} = 'Completed' AND ${case_owner.name} = 'Platform Integration User' AND ${of_case.status} = 'Closed' AND ${of_case.resolution_reason} = 'Customer Abandoned Chat') THEN 'No Agent available (non-business hour)'
              WHEN (${status} = 'Completed' AND ${case_owner.name} = 'Platform Integration User' AND ${of_case.status} = 'Closed' AND ${of_case.resolution_reason} = 'Customer Abandoned Chat') THEN 'Final Intent Menu/Connecting with Agent'
              WHEN (${status} = 'Completed' AND ${of_case.Case_Owned_by_System_Filter} = 'No' AND ${of_case.status} = 'In Progress' AND ${of_case.resolution_reason} = 'None') THEN 'Before Chat ended by Agent'
              ELSE NULL END;;
  }

  #DCN-1151: Display business scenarios even no data
  dimension: business_scenarios_fill {
    label: "Business Scenarios"
    case: {
      when: {
        sql: ${status} = 'Missed'
            AND ${case_owner.name} = 'Platform Integration User'
            AND ${of_case.status} = 'Closed'
            AND ${of_case.resolution_reason} = 'Customer Abandoned Chat' ;;
        label: "Pre-Chat Form"
      }
      when: {
        sql:  ${isWithInBusinessHour} = 'No'
            AND ${status} = 'Completed'
            AND ${case_owner.name} = 'Platform Integration User'
            AND ${of_case.status} = 'Closed'
            AND ${of_case.resolution_reason} = 'Customer Abandoned Chat';;
        label: "No Agent available (non-business hour)"
      }
      when: {
        sql: ${status} = 'Completed'
            AND ${case_owner.name} = 'Platform Integration User'
            AND ${of_case.status} = 'Closed'
            AND ${of_case.resolution_reason} = 'Customer Abandoned Chat' ;;
        label: "Final Intent Menu/Connecting with Agent"
      }
      when: {
        sql: ${status} = 'Completed'
            AND ${of_case.Case_Owned_by_System_Filter} = 'No'
            AND ${of_case.status} = 'In Progress'
            AND ${of_case.resolution_reason} = 'None' ;;
        label: "Before Chat ended by Agent"
      }
      else: "Others"
    }
    allow_fill: yes
  }

  dimension: segment {
    type: string
    sql: CASE WHEN ${Customer_Abandoned_Chat} = 'true' THEN 'Ongoing Chat with Agent/Menu Page'
      ELSE NULL END;;
  }

  # ----- Sets of fields for drilling ------
  set: detail {
    fields: [
      name,
      of_case.casenumber,
      of_case.ct_owner_name,
      of_user.name,
      chat_first_queue_name,
      intent_l2,
      intent_l3,
      ct_customer.name,
      contact_name,
      email,
      status,
      chat_duration,
      start_time,
      end_time,
      chat_handle_time,
      Chat_First_Response_Time_Mins,
      average_response_time_operator,
      response_time_visitor,
      chat_case_rating,
      case_net_promoter_score,
    ]
  }

  # ----- Sets of fields for drilling ------
  set: ct_detail {
    fields: [
      name,
      of_case.casenumber,
      of_case.ct_owner_name,
      name,
      of_user.name,
      chat_first_queue_name,
      intent_l2,
      intent_l3,
      ct_customer.name,
      contact_name,
      email,
      status,
      chat_duration,
      start_time,
      end_time,
      chat_handle_time,
      Chat_First_Response_Time_Mins,
      average_response_time_operator,
      response_time_visitor,
      chat_case_rating,
      case_net_promoter_score,
      is_queue,
      Customer_Abandoned_Chat
    ]
  }


}

view: of_chat_transcript_max {
  derived_table:{
    sql: SELECT
          of_case.CaseNumber AS case_number_a,
          of_chat_transcript.Case_Number AS case_number_n,
          of_chat_transcript.CaseID AS case_id,
          max(of_chat_transcript.Name)  AS transcript_name_max
      FROM `ONEFORCE.OF_CASE`AS of_case
      LEFT JOIN `ONEFORCE.OF_CHAT_TRANSCRIPT` AS of_chat_transcript ON of_chat_transcript.CaseId = of_case.ONEForce_Id
      WHERE 'MAX' = {% if ct_scope._parameter_value == 'MAX' %} 'MAX' {% else %} 'ALL' {% endif %}
      GROUP BY 1,2,3
      UNION ALL
      SELECT 'Dummy' AS case_number_a,
              Case_Number AS case_number_n,
              CaseID AS case_id,
              name AS Name
      FROM `ONEFORCE.OF_CHAT_TRANSCRIPT`
      where caseid is not null
      and 'ALL' = {% if ct_scope._parameter_value == 'MAX' %} 'MAX' {% else %} 'ALL' {% endif %}
        ;;
  }

  dimension:case_id  {
    type:string
    sql: ${TABLE}.case_id ;;
  }

  dimension:case_number_a  {
    type:string
    sql: ${TABLE}.case_number_a ;;
  }

  dimension:case_number_n  {
    type:string
    sql: ${TABLE}.case_number_n ;;
  }

  dimension:transcript_name_max  {
    type:string
    sql: ${TABLE}.transcript_name_max ;;
  }

  parameter: ct_scope {
    type: unquoted
    label: "Chat Transcript Scope"
    description: "Specify chat transcript to be returned"
    allowed_value: {
      label: "Last Created"
      value: "MAX" }
    allowed_value: {
      label: "All time"
      value: "ALL" }
    default_value: "ALL"
  }


}

view: of_cif_fob {
  sql_table_name: `ONEFORCE.OF_CIF_FOB`
    ;;

  dimension: cif_fob_div_desc {
    type: string
    sql: ${TABLE}.CIF_FOB_DIV_DESC ;;
  }

  dimension: dmnt_flg {
    type: string
    sql: ${TABLE}.DMNT_FLG ;;
  }

  dimension: modi_svc_grp_cd {
    type: string
    sql: ${TABLE}.MODI_SVC_GRP_CD ;;
  }

  dimension: ofc_cd {
    type: string
    sql: ${TABLE}.OFC_CD ;;
  }

  dimension: primary_key {
    type: string
    sql: ${TABLE}.PRIMARY_KEY ;;
  }

  measure: count {
    type: count
    drill_fields: []
  }
}

view: of_ckam_skam_2 {
  derived_table: {
    sql: select distinct RIGHT(Regional_Head_Office,5) rhq_code, left(f.location_code,2) country,  lastName, firstname
          , 'SKAM' role, b.oneforce_id, a.customer, v.cust_grp_id
            from OF_SALES_TEAM_MEMBER a, OF_USER b, OF_OFFICE f, V_CUSTOMER_OPUS_N_PROSPECT v
            where a.sales_person = b.oneforce_id
            and a.team_role like '%S-KAM%'
            and f.office_code = RIGHT(b.office_code,5)
            and a.customer = v.oneforce_id
            union all
            select distinct RIGHT(Regional_Head_Office,5) rhq_code, left(f.location_code,2) country, lastName, firstname
            , 'CKAM' role, b.oneforce_id,a.customer, v.cust_grp_id
            from OF_SALES_TEAM_MEMBER a, OF_USER b, OF_OFFICE f, V_CUSTOMER_OPUS_N_PROSPECT v
            where a.sales_person = b.oneforce_id
            and a.team_role like '%C-KAM%'
            and f.office_code = RIGHT(b.office_code,5)
            and a.customer = v.oneforce_id
            union all
            select distinct RIGHT(Regional_Head_Office,5) rhq_code, left(f.location_code,2) country, lastName, firstname
            , 'CKAS' role, b.oneforce_id,a.customer, v.cust_grp_id
            from OF_SALES_TEAM_MEMBER a, OF_USER b, OF_OFFICE f, V_CUSTOMER_OPUS_N_PROSPECT v
            where a.sales_person = b.oneforce_id
            and a.team_role like '%C-KAS%'
            and f.office_code = RIGHT(b.office_code,5)
            and a.customer = v.oneforce_id
            union all
            select distinct RIGHT(Regional_Head_Office,5) rhq_code, left(f.location_code,2) country, lastName, firstname
            , 'SKAS' role, b.oneforce_id,a.customer, v.cust_grp_id
            from OF_SALES_TEAM_MEMBER a, OF_USER b, OF_OFFICE f, V_CUSTOMER_OPUS_N_PROSPECT v
            where a.sales_person = b.oneforce_id
            and a.team_role like '%S-KAS%'
            and f.office_code = RIGHT(b.office_code,5)
            and a.customer = v.oneforce_id
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  measure: salesperson_count {
    type:  count_distinct
    sql: ${oneforce_id};;
  }

  dimension: NotNull_ctry {
    type:  yesno
    sql:  ${country} is not null ;;

  }

  measure: dist_ctry_count {
    type:  count_distinct
    sql: ${country};;
    filters: [NotNull_ctry: "yes"]
    drill_fields: [country]
  }

  dimension: match_cust_grp_id {
    type: string
    sql: case when ${TABLE}.country is not null then CONCAT(${ka_actuals.cust_grp_id},${ka_actuals.ctry_cd}) end ;;
  }

  dimension: unmatch_cust_grp_id {
    type: string
    sql: case when ${TABLE}.country is null then CONCAT(${ka_actuals.cust_grp_id},${ka_actuals.ctry_cd}) end ;;
  }

  dimension: unmatch_CKAM_cust_grp {
    type: string
    sql: case when ${TABLE}.country is null and ${ka_actuals.role_reqd} = "CKAM" then CONCAT(${ka_actuals.cust_grp_id},${ka_actuals.ctry_cd}) end ;;
  }

  dimension: unmatch_SKAM_cust_grp {
    type: string
    sql: case when ${TABLE}.country is null and ${ka_actuals.role_reqd} = "SKAM" then CONCAT(${ka_actuals.cust_grp_id},${ka_actuals.ctry_cd}) end ;;
  }

  dimension: unmatch_CKAS_cust_grp {
    type: string
    sql: case when ${TABLE}.country is null and ${ka_actuals.role_reqd} = "CKAS" then CONCAT(${ka_actuals.cust_grp_id},${ka_actuals.ctry_cd}) end ;;
  }

  dimension: unmatch_SKAS_cust_grp {
    type: string
    sql: case when ${TABLE}.country is null and ${ka_actuals.role_reqd} = "SKAS" then CONCAT(${ka_actuals.cust_grp_id},${ka_actuals.ctry_cd}) end ;;
  }


  dimension: CKAM_salesperson {
    type: string
    sql: case when ${TABLE}.role = 'CKAM' then ${oneforce_id} end ;;
  }

  dimension: SKAM_salesperson {
    type: string
    sql: case when ${TABLE}.role = 'SKAM' then ${oneforce_id} end ;;
  }

  dimension: SKAS_salesperson {
    type: string
    sql: case when ${TABLE}.role = 'SKAS' then ${oneforce_id} end ;;
  }

  dimension: CKAS_salesperson {
    type: string
    sql: case when ${TABLE}.role = 'CKAS' then ${oneforce_id} end ;;
  }

  dimension: cust_grp_id {
    type: string
    sql:  ${TABLE}.cust_grp_id ;;
  }

  dimension: rhq_code {
    type: string
    sql: ${TABLE}.rhq_code ;;
  }

  dimension: country {
    type: string
    sql: ${TABLE}.country ;;
  }

  dimension: last_name {
    type: string
    sql: ${TABLE}.lastName ;;
  }

  dimension: firstname {
    type: string
    sql: ${TABLE}.firstname ;;
  }

  dimension: role {
    type: string
    sql: ${TABLE}.role ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
  }

  dimension: customer {
    type: string
    sql: ${TABLE}.customer ;;
  }

  dimension: primary_key {
    primary_key: yes
    sql: CONCAT(${country},${oneforce_id},${role}) ;;
  }

  set: detail {
    fields: [
      rhq_code,
      country,
      last_name,
      firstname,
      role,
      oneforce_id,
      customer
    ]
  }
}

view: of_ckam_skam_4 {
  derived_table: {
    sql: select b.ONEFORCE_ID, b.CreatedByID, b. CreatedDate, b.LastModifiedById, b.LastModifiedDate, b.SVC_RFA_Number, 'SKAM' role,
      b.Commodity, b.Container_Type, b.Team_Role, b.Service_Scope_Group, b.Service_Scope, b.Customer, b.Customer_Group, b.status, b.exception, a as Country_Code
      --null as contract_country, a as service_country
      from ${of_sales_team_member.SQL_TABLE_NAME} b,
      unnest(split(service_country,";")) a
      where service_country is not null and b.Team_Role like '%S-KAM%' and b.inactive = 'false'
      and coalesce(b.status, 'Empty') = (case when b.exception = 'true' then 'Approved' else 'Empty' end)
      union all
      select b.ONEFORCE_ID, b.CreatedByID, b. CreatedDate, b.LastModifiedById, b.LastModifiedDate, b.SVC_RFA_Number, 'SKAS' role,
      b.Commodity, b.Container_Type, b.Team_Role, b.Service_Scope_Group, b.Service_Scope, b.Customer, b.Customer_Group, b.status, b.exception, a as Country_Code
      --null as contract_country, a as service_country
      from ${of_sales_team_member.SQL_TABLE_NAME} b,
      unnest(split(service_country,";")) a
      where service_country is not null and b.Team_Role like '%S-KAS%' and b.inactive = 'false'
      and coalesce(b.status, 'Empty') = (case when b.exception = 'true' then 'Approved' else 'Empty' end)
      union all
      select b.ONEFORCE_ID, b.CreatedByID, b. CreatedDate, b.LastModifiedById, b.LastModifiedDate, b.SVC_RFA_Number, 'CKAM' role,
      b.Commodity, b.Container_Type, b.Team_Role, b.Service_Scope_Group, b.Service_Scope, b.Customer, b.Customer_Group, b.status, b.exception, a as Country_Code
      --a as contract_country, null as service_country
      from ${of_sales_team_member.SQL_TABLE_NAME} b,
      unnest(split(contract_country,";")) a
      where  contract_country is not null and b.Team_Role like '%C-KAM%' and b.inactive = 'false'
      and coalesce(b.status, 'Empty') = (case when b.exception = 'true' then 'Approved' else 'Empty' end)
      union all
      select b.ONEFORCE_ID, b.CreatedByID, b. CreatedDate, b.LastModifiedById, b.LastModifiedDate, b.SVC_RFA_Number, 'GAM' role,
      b.Commodity, b.Container_Type, b.Team_Role, b.Service_Scope_Group, b.Service_Scope, b.Customer, b.Customer_Group, b.status, b.exception, left(f.location_code,2) as Country_Code
      from ${of_sales_team_member.SQL_TABLE_NAME} b
      inner join ${of_user.SQL_TABLE_NAME} u on b.sales_person = u.ONEFORCE_ID
      inner join ${of_office.SQL_TABLE_NAME} f on f.office_code = u.office_code_number
      where b.Team_Role like '%(GAM)%' and b.inactive = 'false'
      and coalesce(b.status, 'Empty') = (case when b.exception = 'true' then 'Approved' else 'Empty' end)

      ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEFORCE_ID ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedByID ;;
  }

  dimension_group: created_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: svc_rfa_number {
    type: string
    sql: ${TABLE}.SVC_RFA_Number ;;
  }

  dimension: role {
    type: string
    sql: ${TABLE}.role ;;
  }

  dimension: commodity {
    type: string
    sql: ${TABLE}.Commodity ;;
  }

  dimension: container_type {
    type: string
    sql: ${TABLE}.Container_Type ;;
  }

  dimension: team_role {
    type: string
    sql: ${TABLE}.Team_Role ;;
  }

  dimension: service_scope_group {
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: service_scope {
    type: string
    sql: ${TABLE}.Service_Scope ;;
  }

  dimension: customer {
    type: string
    sql: ${TABLE}.Customer ;;
  }

  dimension: customer_group {
    type: string
    sql: ${TABLE}.Customer_Group ;;
  }

  dimension: country_code {
    type: string
    sql: ${TABLE}.Country_Code ;;
  }

  dimension: status {
    type: string
    sql:  ${TABLE}.Status ;;
  }

  dimension: exception {
    type: string
    description: "[yes]  customer group has approved exception for that country.;
    [no] customer group does not have any approved exceptions."
    sql:  CASE
          when ${TABLE}.Exception = 'true' then 'yes'
          else 'no' end ;;
  }


  set: detail {
    fields: [
      oneforce_id,
      created_by_id,
      created_date_time,
      last_modified_by_id,
      last_modified_date_time,
      svc_rfa_number,
      role,
      commodity,
      container_type,
      team_role,
      service_scope_group,
      service_scope,
      customer,
      customer_group,
      country_code,
      status,
      exception
    ]
  }
}

view: of_clear_ots {
  sql_table_name: `ONEFORCE.OF_CLEAR_OTS`
    ;;
  drill_fields: [id]

  dimension: id {
    primary_key: yes
    type: string
    sql: ${TABLE}.ID ;;
  }

  dimension: ap_ar_offst_no {
    type: string
    sql: ${TABLE}.AP_AR_OFFST_NO ;;
  }

  dimension: ar_clt_dspt_no {
    type: string
    sql: ${TABLE}.AR_CLT_DSPT_NO ;;
  }

  dimension: ar_clt_re_no {
    type: string
    sql: ${TABLE}.AR_CLT_RE_NO ;;
  }

  dimension: bil_to_cust_cnt_cd {
    type: string
    sql: ${TABLE}.BIL_TO_CUST_CNT_CD ;;
  }

  dimension: bil_to_cust_seq {
    type: number
    sql: ${TABLE}.BIL_TO_CUST_SEQ ;;
  }

  dimension: bkg_io_bnd_cd {
    type: string
    sql: ${TABLE}.BKG_IO_BND_CD ;;
  }

  dimension: bkg_no {
    type: string
    sql: ${TABLE}.BKG_NO ;;
    label: "Booking"
    link: {
      label: "View Booking"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_0079_Q.do%3FmainPage%3Dtrue%26pid%3DESM_BKG_M020%26MENU%3DY%26pgmNo%3DESM_BKG_0079_Q%26parentPgmNo%3DESM_BKG_M001%26mainMenuLinkFlag%3Dtrue%26menuflag%3Dtrue%26mainPage%3Dtrue%26bkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    }
    link: {
      label: "B/L Preview"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_0927_POP.do%3Fbkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    }
    link: {
      label: "Standby Booking Detail"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_2020.do%3Fbkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    }
  }


  dimension: bkg_no_split {
    type: string
    sql: ${TABLE}.BKG_NO_SPLIT ;;
  }

  dimension: bkg_ref_no {
    type: string
    sql: ${TABLE}.BKG_REF_NO ;;
  }

  dimension: bl_no {
    label: "Bill Of Lading"
    type: string
    sql: ${TABLE}.BL_NO ;;
    link: {
      label: "Outstanding Inquiry by B/L"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FSTM_SAR_1001.do%3Fbl_no%3D{{value}}%26sel_ofc_cd%3D{{clt_ofc_cd._value}}%26inv_no%3D{{inv_no._value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    }
    link: {
      label: "B/L Preview"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_0927_POP.do%3Fbkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    }
  }

  dimension: clt_ofc_cd {
    type: string
    label: "Office"
    sql: ${TABLE}.CLT_OFC_CD ;;
  }

  dimension: cr_mk_flg {
    label: "Credit"
    type: string
    sql: ${TABLE}.CR_MK_FLG ;;
  }

  dimension_group: cre_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CRE_DT ;;
  }

  dimension: cre_usr_id {
    type: string
    sql: ${TABLE}.CRE_USR_ID ;;
  }

  dimension: cust_code {
    type: string
    sql: ${TABLE}.CUST_CODE ;;
  }

  dimension: cust_srep_cd {
    type: string
    sql: ${TABLE}.CUST_SREP_CD ;;
  }

  dimension: del_cd {
    type: string
    sql: ${TABLE}.DEL_CD ;;
  }

  dimension: dir_cd {
    type: string
    sql: ${TABLE}.DIR_CD ;;
  }

  dimension: due_dt {
    label: "Due Date"
    type: date_time
    datatype: date
    sql:PARSE_DATE("%Y%m%d", ${TABLE}.DUE_DT);;
    html: {{ rendered_value | date: "%Y-%m-%d" }} ;;

  }

  dimension_group: edw_upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EDW_UPD_DT ;;
  }

  dimension: grp_inv_no {
    type: string
    sql: ${TABLE}.GRP_INV_NO ;;
  }

  dimension_group: if_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.IF_DT ;;
  }

  dimension: inv_curr_cd {
    label: "Invoice Currency"
    type: string
    sql: ${TABLE}.INV_CURR_CD ;;
  }

  dimension: inv_dt {
    label: "Invoice Date"
    type: date_time
    datatype: date
    sql:PARSE_DATE("%Y%m%d", ${TABLE}.INV_DT);;
    html: {{ rendered_value | date: "%Y-%m-%d" }} ;;
    #sql: ${TABLE}.INV_DT ;;
  }

  dimension: inv_locl_xch_rt {
    type: number
    sql: ${TABLE}.INV_LOCL_XCH_RT ;;
  }

  dimension: inv_no {
    label: "Invoice No."
    type: string
    sql: ${TABLE}.INV_NO ;;
  }

  dimension: inv_split_cd {
    type: string
    sql: ${TABLE}.INV_SPLIT_CD ;;
  }

  dimension: inv_usd_xch_rt {
    type: number
    sql: ${TABLE}.INV_USD_XCH_RT ;;
  }

  dimension: lane_cd {
    type: string
    sql: ${TABLE}.LANE_CD ;;
  }

  dimension: lst_inv_no {
    type: string
    sql: ${TABLE}.LST_INV_NO ;;
  }

  dimension: max_ar_if_no {
    type: string
    sql: ${TABLE}.MAX_AR_IF_NO ;;
  }

  dimension: obl_iss_ofc_cd {
    type: string
    sql: ${TABLE}.OBL_ISS_OFC_CD ;;
  }

  dimension: ofc_curr_cd {
    label: "Currency"
    type: string
    sql: ${TABLE}.OFC_CURR_CD ;;
  }

  dimension: org_inv_no {
    type: string
    sql: ${TABLE}.ORG_INV_NO ;;
  }

  dimension: ots_flg {
    type: string
    sql: ${TABLE}.OTS_FLG ;;
  }

  dimension: ots_grp_tp_cd {
    type: string
    sql: ${TABLE}.OTS_GRP_TP_CD ;;
  }

  dimension: ots_ofc_cd {
    type: string
    sql: ${TABLE}.OTS_OFC_CD ;;
  }

  dimension: ots_pay_cd {
    type: string
    sql: ${TABLE}.OTS_PAY_CD ;;
  }

  dimension: ots_rmk {
    label: "Remarks"
    type: string
    sql: ${TABLE}.OTS_RMK ;;
  }

  dimension: ots_rt_flg {
    type: string
    sql: ${TABLE}.OTS_RT_FLG ;;
  }

  dimension: ots_src_cd {
    type: string
    sql: ${TABLE}.OTS_SRC_CD ;;
  }

  dimension: ots_tp_cd {
    type: string
    sql: ${TABLE}.OTS_TP_CD ;;
  }

  dimension: pod_cd {
    type: string
    sql: ${TABLE}.POD_CD ;;
  }

  dimension: pol_cd {
    type: string
    sql: ${TABLE}.POL_CD ;;
  }

  dimension: por_cd {
    type: string
    sql: ${TABLE}.POR_CD ;;
  }

  dimension: rev_tp_src_cd {
    type: string
    sql: ${TABLE}.REV_TP_SRC_CD ;;
  }

  dimension: rhq_cd {
    type: string
    sql: ${TABLE}.RHQ_CD ;;
  }

  dimension: sail_arr_dt {
    label: "Arrival"
    type: date_time
    datatype: date
    sql:PARSE_DATE("%Y%m%d", ${TABLE}.SAIL_ARR_DT);;
    html: {{ rendered_value | date: "%Y-%m-%d" }} ;;
    #sql: ${TABLE}.SAIL_ARR_DT ;;
  }

  dimension: sail_dt {
    label: "Departure"
    type: date_time
    datatype: date
    sql:PARSE_DATE("%Y%m%d", ${TABLE}.SAIL_DT);;
    html: {{ rendered_value | date: "%Y-%m-%d" }} ;;
    #sql: ${TABLE}.SAIL_DT ;;
  }

  dimension: sc_no {
    sql: ${TABLE}.SC_NO ;;
    type: string
  }

  dimension: shp_to_cust_cnt_cd {
    type: string
    sql: ${TABLE}.SHP_TO_CUST_CNT_CD ;;
  }

  dimension: shp_to_cust_seq {
    type: number
    sql: ${TABLE}.SHP_TO_CUST_SEQ ;;
  }

  dimension: skd_voy_no {
    type: string
    sql: ${TABLE}.SKD_VOY_NO ;;
  }

  dimension: stl_flg {
    type: string
    sql: ${TABLE}.STL_FLG ;;
  }

  dimension: svc_scp_cd {
    type: string
    sql: ${TABLE}.SVC_SCP_CD ;;
  }

  dimension: trnk_vvd_cd {
    type: string
    sql: ${TABLE}.TRNK_VVD_CD ;;
  }

  dimension_group: upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.UPD_DT ;;
  }

  dimension: upd_usr_id {
    type: string
    sql: ${TABLE}.UPD_USR_ID ;;
  }

  dimension: vsl_cd {
    type: string
    sql: ${TABLE}.VSL_CD ;;
  }

  dimension: xch_rt_dt {
    type: string
    sql: ${TABLE}.XCH_RT_DT ;;
  }

  dimension: xch_rt_n3_rd_tp_cd {
    type: string
    sql: ${TABLE}.XCH_RT_N3RD_TP_CD ;;
  }

  dimension: xch_rt_tp_cd {
    type: string
    sql: ${TABLE}.XCH_RT_TP_CD ;;
  }

  dimension: over_due_days {
    type: number
    sql: DATE_DIFF(current_date(),DATE ${due_dt}, DAY) ;;
  }


}

view: of_clear_ots_dtl {
  sql_table_name: `ONEFORCE.OF_CLEAR_OTS_DTL`;;

  dimension: adj_amt {
    type: number
    sql: ${TABLE}.ADJ_AMT ;;
  }

  dimension: ar_eml_seq {
    type: number
    sql: ${TABLE}.AR_EML_SEQ ;;
  }

  dimension: bal_amt {
    type: number
    sql: ${TABLE}.BAL_AMT ;;
  }

  dimension: bal_locl_amt {
    type: number
    sql: ${TABLE}.BAL_LOCL_AMT ;;
  }


  dimension: bal_usd_amt {
    type: number
    sql: ${TABLE}.BAL_USD_AMT ;;
  }

  dimension: bl_curr_cd {
    type: string
    sql: ${TABLE}.BL_CURR_CD ;;
  }


  dimension: bl_no {
    type: string
    sql: ${TABLE}.BL_NO ;;
  }

  dimension: chg_tp_cd {
    type: string
    sql: ${TABLE}.CHG_TP_CD ;;
  }

  dimension: clr_locl_xch_rt {
    type: number
    sql: ${TABLE}.CLR_LOCL_XCH_RT ;;
  }

  dimension: clr_usd_xch_rt {
    type: number
    sql: ${TABLE}.CLR_USD_XCH_RT ;;
  }

  dimension_group: cre_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CRE_DT ;;
  }

  dimension: cre_usr_id {
    type: string
    sql: ${TABLE}.CRE_USR_ID ;;
  }

  dimension_group: edw_upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EDW_UPD_DT ;;
  }

  dimension: inv_amt {
    type: number
    sql: ${TABLE}.INV_AMT ;;
  }

  dimension: inv_no {
    type: string
    sql: ${TABLE}.INV_NO ;;
  }


  dimension: locl_xch_rt {
    type: number
    sql: ${TABLE}.LOCL_XCH_RT ;;
  }

  dimension: ots_ofc_cd {
    type: string
    sql: ${TABLE}.OTS_OFC_CD ;;
  }

  dimension: ph_br_decl_tax_no {
    type: string
    sql: ${TABLE}.PH_BR_DECL_TAX_NO ;;
  }

  dimension: rct_amt {
    type: number
    sql: ${TABLE}.RCT_AMT ;;
  }



  dimension: rhq_cd {
    type: string
    sql: ${TABLE}.RHQ_CD ;;
  }

  dimension_group: upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.UPD_DT ;;
  }

  dimension: upd_usr_id {
    type: string
    sql: ${TABLE}.UPD_USR_ID ;;
  }

  dimension: usd_xch_rt {
    type: number
    sql: ${TABLE}.USD_XCH_RT ;;
  }

  dimension: uuid {
    type: string
    primary_key: yes
    sql: ${TABLE}.UUID ;;
  }

  dimension: wrtf_amt {
    type: number
    sql: ${TABLE}.WRTF_AMT ;;
  }

  dimension_group: wrtf_upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.WRTF_UPD_DT ;;
  }

  measure: count {
    type: count
    drill_fields: []
  }

  measure: invoice_amount_lcl{
    label: "Invoice (LCL)"
    type: sum
    sql: ${inv_amt} * ${locl_xch_rt} ;;
    value_format: "#.00;($#.00)"

  }
  measure: receipt_amount_lcl{
    label: "Receipt (LCL)"
    type: sum
    sql: ${rct_amt} * ${locl_xch_rt} ;;
    value_format: "#.00;($#.00)"
  }
  measure: adjustment_amount_lcl{
    label: "Adjustment (LCL)"
    type: sum
    sql: ${adj_amt} * ${locl_xch_rt} ;;
    value_format: "#.00;($#.00)"
  }

  measure: balance_amount_lcl{
    label: "Balance (LCL)"
    type: sum
    sql: ${bal_locl_amt}  * ${locl_xch_rt} ;;
    value_format: "#.00;($#.00)"
  }

  measure: invoice_amount_usd{
    label: "Invoice (USD)"
    type: sum
    sql: ${inv_amt} * ${usd_xch_rt} ;;
    value_format: "$#.00;($#.00)"

  }
  measure: receipt_amount{
    label: "Receipt (USD)"
    type: sum
    sql: ${rct_amt} * ${usd_xch_rt} ;;
    value_format: "$#.00;($#.00)"
  }
  measure: adjustment_amount{
    label: "Adjustment (USD)"
    type: sum
    sql: ${adj_amt} * ${usd_xch_rt} ;;
    value_format: "$#.00;($#.00)"
  }

  measure: balance_amount_usd{
    label: "Balance (USD)"
    type: sum
    sql: ${bal_locl_amt} * ${usd_xch_rt} ;;
    value_format: "$#.00;($#.00)"
  }
  measure: USD_balance_amount{
    label: "USD"
    type: sum
    sql: ${bal_amt} ;;
    value_format: "$#.00;($#.00)"
  }

  measure: BL_Curreny{
    label: "BL Currency"
    type: list
    list_field: bl_curr_cd
  }

  dimension: inv_upd_dt {
    type: date_time
    datatype: date
    sql: ${TABLE}.INV_UPD_DT;;
  }
  dimension: rct_upd_dt {
    type: date_time
    datatype: date
    sql: ${TABLE}.RCT_UPD_DT;;

  }
  dimension: adj_upd_dt {
    type: date_time
    datatype: date
    sql:${TABLE}.ADJ_UPD_DT;;

  }
  dimension: bal_upd_dt {
    type: date_time
    datatype: date
    sql: ${TABLE}.BAL_UPD_DT;;

  }

  measure: last_inv_upd_dt {
    type: date_time
    label: "Inv. Updated [SGT]"
    sql: Max(${TABLE}.INV_UPD_DT) ;;
  }
  measure: last_rct_upd_dt {
    type: date_time
    label: "Receipt Updated [SGT]"
    sql:  Max(${TABLE}.RCT_UPD_DT) ;;
  }
  measure: last_adj_upd_dt {
    type: date_time
    label: "Adjustment Updated [SGT]"
    sql:  Max(${TABLE}.ADJ_UPD_DT) ;;
  }
  measure: last_bal_upd_dt  {
    type: date_time
    label: "Balance Updated [SGT]"
    sql:  Max(${TABLE}.BAL_UPD_DT) ;;

  }

}

view: of_cntr_tpsz {
  sql_table_name: `ONEFORCE.OF_CNTR_TPSZ`
    ;;
  #jack's comment for testing, may 26

  dimension: type_size_code {
    primary_key: yes
    view_label: "B/L Information"
    label: "Container Type Size Code"
    type: string
    sql: ${TABLE}.Type_Size_Code ;;
    #hidden: yes
  }

  dimension: inactive {
    view_label: "B/L Information"
    label: "Container Inactive"
    type: string
    sql: ${TABLE}.Inactive ;;
    hidden: yes
  }

  dimension: type_size_name {
    view_label: "B/L Information"
    label: "Container Type Size Name"
    type: string
    sql: ${TABLE}.Type_Size_Name ;;
  }

  dimension: type_size_code_and_name {
    view_label: "B/L Information"
    label: "Container Type Size Code & Name"
    type: string
    sql: concat(${type_size_code}, " - ", ${type_size_name}) ;;
    #hidden: yes  -- comment out by Helen on 21-AUG-2021 for CGM dashboard use
  }

  measure: count {
    view_label: "B/L Information"
    label: "Container Count"
    type: count
    drill_fields: [type_size_name]
    hidden: yes
  }

  set: primary_key {
    fields: [type_size_code, count]
  }
}

view: of_commodity {
  sql_table_name: @{table_commodity}
    ;;

  dimension: commodity_code {
    primary_key: yes
    type: number
    sql: ${TABLE}.Commodity_Code ;;
    hidden: yes
  }

  dimension: commodity_full_name {
    type: string
    sql: ${TABLE}.Commodity_Full_Name ;;
  }

  dimension: commodity_truncated_name {
    type: string
    sql:
    CASE WHEN length(${commodity_full_name}) > 50
        Then CONCAT( SUBSTR(${commodity_full_name}, 1, 50) , '...' )
    ELSE
        ${commodity_full_name}
    END ;;
  }

  dimension: commodity_name {
    type: string
    sql: ${TABLE}.Commodity_Name ;;
  }

  dimension: eu_xpt_flag {
    label: "EU Xpt Flag"
    type: string
    sql: ${TABLE}.EU_Xpt_Flag ;;
  }

  dimension: fmc_exp_flag {
    label: "FMC Exp Flag"
    type: string
    sql: ${TABLE}.FMC_Exp_Flag ;;
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
    hidden: yes
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
    hidden: yes
  }

  dimension: parent_commodity_code {
    type: number
    sql: ${TABLE}.Parent_Commodity_Code ;;
  }

  dimension: rep_imdg_level_code {
    label: "Rep IMDG Level Code"
    type: string
    sql: ${TABLE}.Rep_IMDG_Level_Code ;;
  }

  measure: count {
    type: count
    drill_fields: [commodity_full_name, commodity_name]
    hidden: yes
  }

  set: primary_key {
    fields: [commodity_code, count]
  }
}

view: of_consolidated_1 {
  derived_table: {

    sql: SELECT 'Booking' as record_type

                  ---------- Basic details ---------------
                  , of_booking.bkg_no
                  , cntr_tpsz as consolidated_cntr_tpsz
                  , bkg_sts_cd
                  , de_term_cd
                  , rcv_term_cd
                  , cif_fob_split_cd
                  , frt_term_cd
                  ---------- pickup and return SCC and Yard ---------------
                  , act_mty_pkup_scc_cd
                  , mty_pkup_scc_cd
                  , mty_rtn_scc_cd
                  , bkg_mty_rtn_scc_cd
                  , act_mty_pkup_yd_cd
                  , mty_rtn_yd_cd
                  ---------- TEU, CM and Weight ---------------of
                  , bkg_teu as teu
                  --, CASE WHEN of_svc_scp.Service_Scope_Group_Code = 'TP' THEN cast(cm_amt2 as numeric) ELSE cast(cm_amt1 as numeric) END as cm_amt  -- derived -- dcn504, 2022-Jan
                  , CAST( (CASE WHEN of_svc_scp.Service_Scope_Group_Code = 'TP'
                                THEN cm_amt2 - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz,1,1)='Q' then 0 else bkg_teu end) )
                                ELSE cm_amt1 - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz,1,1)='Q' then 0 else bkg_teu end) )
                                END ) as numeric) as cm_amt -- dcn504, 2022-Jan
                  , cast(cm_amt1 as numeric) as cm_amt_eppa -- dcn504, 2022-Jan
                  , cast(cm_amt2 as numeric) as cm_amt_eppb -- dcn504, 2022-Jan
                  , bkg_cgo_wgt
                  ---------- cargo and commdity ---------------
                  , cmdt_cd
                  , cmdt_nm
                  , cgo_ntr_cd
                  , cgo_ntr_nm
                  , dcgo_flg
                  , rd_cgo_flg
                  , (CASE WHEN of_booking.cntr_tpsz LIKE 'R%' AND of_booking.rd_cgo_flg = 'N' THEN 'Reefer' ELSE 'Dry' END) as cargo_type -- NA dashboard
                  ---------- contract customer, shipper, consinee, forwarder, and sales person ---------------
                  -- change by Helen on 2021.12.28 for DCN-491
                  --, coalesce(ctrt_cust_cd, '<blank>') as consolidated_cnt_cust_cd
                  , coalesce(of_svc_contract.cust_cd, ctrt_cust_cd, '<blank>') as consolidated_cnt_cust_cd
                  -- end 2021.12.28 for DCN-491
                  , v_customer_opus_n_prospect.cust_grp_id as consolidated_cnt_cust_grp_cd
                  , (CASE WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' and (actual_cust_cd is not null or actual_cust_nm is not null ) THEN 'NAC'
                          WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' THEN 'FAK'
                          ELSE NULL END) as cust_nvo_fak_nac
                  , (CASE WHEN ctrt_cust_cd IS NULL THEN 'Tariff/Dummy'
                          WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' and (actual_cust_cd is not null or actual_cust_nm is not null ) THEN 'NAC'
                          WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' THEN 'FAK'
                          ELSE 'BCO' END) as cust_bco_fak_nac
                  , actual_cust_cd
                  , actual_cust_nm
                  , cnee_cust_cd
                  , cnee_cust_nm
                  , frwd_cust_cd
                  , frwd_cust_nm
                  , shpr_cust_cd
                  , shpr_cust_nm
                  , ctrt_scp_srep_eml
                  , ctrt_scp_srep_nm
                  --, of_user.ONEForce_Id as na_dashboard_sls_person  -- DCN-741 NA dashboard sales person
                  --, of_user.Sub_Region  as na_dashboard_usr_sub_rgn -- DCN-741 NA dashboard sales person
                  , of_user_scrfa_dtl.ONEForce_Id as na_dashboard_sls_person  -- DCN-854 Svc Scp level sales person
                  , of_user_scrfa_dtl.Sub_Region  as na_dashboard_usr_sub_rgn -- DCN-854 Svc Scp level sales person
                  ---------- locations  ---------------
                  , por_cd
                  , por_nm
                  , ori_cnt
                  , del_cd
                  , del_cnt
                  , del_nm
                  , n1st_pod_cd
                  , n1st_pol_cd
                  , final_pod_cd
                  , cast(ete_dys as NUMERIC) as ete_dys
                  ---------- about service contract ---------------
                  , svc_cont_no
                  , sc_rfa_ctrt_tp_nm
                  , cont_effective_dt
                  , cont_expiry_dt
                  -- Jack , 2021 Sep 5, use contract period type instead of from of_svc_contract
                  , of_svc_contract.ctrt_dur_tp_cd as cont_period_typ_cd
                  --, cont_period_typ_cd
                  , ctrt_prop_ofc_cd
                  , ctrt_prop_ofc_nm
                  , ctrt_scp_srep_ofc_cd
                  , ctrt_scp_srep_ofc_nm
                  , (CASE WHEN ctrt_cust_cd is NULL AND svc_cont_no like 'DUM%' then '(Uncategorized)'
                        WHEN ctrt_cust_cd is NULL AND svc_cont_no not like 'DUM%' then '(Tariff)'
                        WHEN ctrt_cust_cd is NOT NULL AND substr(svc_cont_no,6,1) = 'T' then '(Tariff)' -- add for DCN-456
                        WHEN ctrt_cust_cd is NOT NULL AND svc_cont_no IS null then '(Uncategorized)'
            -- Jack, 2021 Sep 5, use contract period type instead of from of_svc_contract'Long
            --          WHEN ctrt_cust_cd is NOT NULL AND svc_cont_no IS NOT null AND cont_period_typ_cd = 'L' then '
            --          WHEN ctrt_cust_cd is NOT NULL AND svc_cont_no IS NOT null AND cont_period_typ_cd = 'M' then 'Medium'
            --          WHEN ctrt_cust_cd is NOT NULL AND svc_cont_no IS NOT NULL AND cont_period_typ_cd = 'S' then 'Short'
                        WHEN ctrt_cust_cd is NOT NULL AND svc_cont_no IS NOT null AND of_svc_contract.ctrt_dur_tp_cd = 'L' then 'Long'
                        WHEN ctrt_cust_cd is NOT NULL AND svc_cont_no IS NOT null AND of_svc_contract.ctrt_dur_tp_cd = 'M' then 'Medium'
                        WHEN ctrt_cust_cd is NOT NULL AND svc_cont_no IS NOT NULL AND of_svc_contract.ctrt_dur_tp_cd = 'S' then 'Short'
                        ELSE '(Uncategorized)' END ) as cont_period_typ -- Jack, Jul 28, 2021
                  ---------- office -----------
                  , ob_sls_ofc_cd
                  , bkg_ofc_cd
                  , bkg_ofc_cnt_cd
                  , bkg_ofc_cnt_nm
                  ---------- about service scope, service lane  ---------------
                  , of_booking.svc_scp_cd
                  -- change on 2021.11.12 for SYM CIF/FOB & DCN-391 by Helen
                  -- , of_svc_scp.dominant_flag as dominant_flg
                  , CASE
                      WHEN of_booking.svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N-DOM'
                      WHEN of_booking.svc_scp_cd = 'LEA' THEN 'DOM'
                      WHEN of_booking.svc_scp_cd = 'IAA' AND right(t_vvd_cd,1) IN ('S','W') THEN 'DOM'
                      WHEN of_booking.svc_scp_cd = 'IAA' THEN 'N-DOM'
                      ELSE of_svc_scp.dominant_flag
                      END as dominant_flg
                  -- end change 2021.11.12 for SYM CIF/FOB & DCN-391 by Helen
                  -- , dir_cd
                  -- change on 2021.11.12 for SYM CIF/FOB by Helen
                  --, substr(rlane_cd, 1, 3) as slane_cd -- derived
                    , CASE
                      WHEN sub_trd_cd = 'IP' and of_svc_scp.service_scope_group_code IN ('WA','EA') THEN 'TRUNK'
                      WHEN substr(rlane_cd,1,3) = 'IBC' THEN 'IET'
                      WHEN substr(rlane_cd,1,3) = 'NBS' THEN 'IET'
                      WHEN substr(rlane_cd,1,3) = 'BAX' THEN 'IET'
                      WHEN substr(rlane_cd,1,3) = 'REX' THEN 'IET'
                      WHEN substr(rlane_cd,1,3) = 'SDX' THEN 'IET'
                      WHEN substr(rlane_cd,1,3) = 'NPX' THEN 'IET'
                      WHEN substr(rlane_cd,1,3) = 'GTE' THEN 'IET'
                      WHEN substr(rlane_cd,1,3) = 'ADX' THEN 'IET'
                      WHEN substr(rlane_cd,1,3) = 'LEX' THEN 'IET'
                      ELSE substr(rlane_cd,1,3)
                      END as slane_cd
                -- end change on 2021.11.12 for SYM CIF/FOB by Helen
            -- end change on 20210726 by Helen
                  , of_svc_scp.service_scope_group_code as svc_scp_grp_cd
                  , line_code1
                  , trd_cd
                  , sub_trd_cd
                  , of_svc_scp.bound_code as bound --NA dashboard
                  --NA dashboard
                  , CASE WHEN of_booking.svc_scp_cd IN ('LAS','LWS') THEN 'Latin'
                         WHEN of_svc_scp.service_scope_group_code ||'|'||of_svc_scp.Dominant_Flag = 'TP|DOM'   THEN 'TP Domi.'
                         WHEN of_svc_scp.service_scope_group_code ||'|'||of_svc_scp.Dominant_Flag = 'TP|N-DOM' THEN 'TP Non Domi.'
                         WHEN of_svc_scp.service_scope_group_code ||'|'||of_svc_scp.Dominant_Flag = 'TA|N-DOM' THEN 'TA Non Domi.'
                         ELSE NULL END as na_trade_type
                  ----------- sales week ---------------
                  , week as week  -- derived
                  -------------- others --------------------
                  , cast(bkg_oft_rev as NUMERIC) as bkg_oft_rev
                  , cast(cntr as NUMERIC) as cntr
                  , cast(cntr_qty as NUMERIC) as cntr_qty
                  , crm_if_flg
                  , ctrt_prop_srep_eml
                  , ctrt_prop_srep_nm
                  , dest_trns_svc_mod_cd
                  , cast(fi as NUMERIC) as fi
                  , cast(ib_mty_pa_amt AS NUMERIC) as ib_mty_pa_amt
                  , cast(ib_mty_pa_amt2 AS NUMERIC) as ib_mty_pa_amt2
                  , ioc_cd
                  , cast(ld as NUMERIC) as ld
                  , lst_vvd_cd
                  , month
                  , ntlt_grp_nm
                  , cast(ob_mty_pa_amt AS NUMERIC) as ob_mty_pa_amt
                  , cast(ob_mty_pa_amt2 AS NUMERIC) as ob_mty_pa_amt2
                  , ob_ofc_nm
                  , ob_srep_cd
                  , ob_srep_eml
                  , ob_srep_nm
                  , org_trns_svc_mod_cd
                  , pod_loc_cd
                  , pod_loc_nm
                  , pol_loc_cd
                  , pol_loc_nm
                  , quarter
                  , t_vvd_cd as rev_vvd
                  , sc_rfa_sls_rep_ofc_cnt_cd
                  , sc_rfa_sls_rep_ofc_cnt_nm
                  , year
                  , ram
                  , null as account_plan_sc_rfa_customer_group_code
                  , of_booking.rc_flg           -- dcn504, 2022-Jan
                  , of_booking.rev_period_yrqtr -- dcn504, 2022-Jan
                  , concat(bkg_no, cntr_tpsz) as primary_key
                  , CASE WHEN of_booking.xter_bkg_rqst_cd = 'WEQ' THEN 'Yes' ELSE 'No' END as is_one_quotation
                 -- , of_booking_ap.plan_bkg as planned_bkg
                  FROM ${of_booking.SQL_TABLE_NAME} AS of_booking
                  -- change for DCN-491 to solve fan-out
                   LEFT JOIN  (select distinct service_scope_code, service_scope_name, service_scope_group_code, dominant_flag, bound_code
                    from ${of_svc_scp.SQL_TABLE_NAME} ) as of_svc_scp ON of_booking.svc_scp_cd = of_svc_scp.service_scope_code
                  -- end for fan-out
                  -- start change for CVA data pattern update
                  LEFT JOIN (
                    SELECT v_customer_opus_n_prospect_of_cust_grp_cd
                    , service_scope_group
                    , direction
                    , sales_week
                    , sales_person as ram
                    , row_number() over (partition by v_customer_opus_n_prospect_of_cust_grp_cd, service_scope_group, direction, sales_week ) as rn
                    FROM ${of_customer_target_and_target_dtl_weekly.SQL_TABLE_NAME}
                  ) as of_customer_target_and_target_dtl_weekly ON (rn = 1 AND
                                                                    of_booking.ctrt_cust_grp_id = of_customer_target_and_target_dtl_weekly.v_customer_opus_n_prospect_of_cust_grp_cd  AND
                                                                    of_svc_scp.service_scope_group_code = of_customer_target_and_target_dtl_weekly.service_scope_group AND
                                                                    CASE
                                                                    WHEN of_booking.svc_scp_cd = 'LEA' AND of_booking.n1st_pol_cd LIKE 'MX%' THEN 'N-DOM'
                                                                    WHEN of_booking.svc_scp_cd = 'LEA' THEN 'DOM'
                                                                    WHEN of_booking.svc_scp_cd = 'IAA' and right(of_booking.t_vvd_cd,1) IN ('S','W') THEN ' DOM'
                                                                    WHEN of_booking.svc_scp_cd = 'IAA' THEN 'N-DOM'
                                                                    ELSE of_svc_scp.dominant_flag
                                                                  END = of_customer_target_and_target_dtl_weekly.direction AND
                                                                    week = cast(of_customer_target_and_target_dtl_weekly.sales_week as int64)
                                                                   )
                   -- by Jack on 2021 Sep 5
                  LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON of_booking.svc_cont_no = of_svc_contract.sc_rfa_no
                  -- NA dashboard DCN-741
                  LEFT JOIN ${of_user.SQL_TABLE_NAME} as of_user ON trim(lower(of_svc_contract.srep_eml)) = trim(lower( CASE WHEN of_user.TPA_user = 'true' THEN of_user.Email_2 ELSE of_user.Email END ))
                  -- DCN-854 Service Scope level contract sales rep for bookings in NA landing page
                  LEFT JOIN ${of_svc_contract_dtl.SQL_TABLE_NAME} as of_svc_contract_dtl
                       ON ( of_svc_contract.sc_rfa_no = of_svc_contract_dtl.sc_rfa_no AND of_booking.svc_scp_cd = of_svc_contract_dtl.svc_scp_cd )
                  LEFT JOIN ${of_user.SQL_TABLE_NAME} as of_user_scrfa_dtl ON trim(lower(of_svc_contract_dtl.srep_eml)) = trim(lower( CASE WHEN of_user_scrfa_dtl.TPA_user = 'true' THEN of_user_scrfa_dtl.Email_2 ELSE of_user_scrfa_dtl.Email END ))
                 -- LEFT JOIN ${of_booking_ap.SQL_TABLE_NAME} as of_booking_ap ON of_booking_ap.plan_bkg = of_booking.bkg_no
                  LEFT JOIN (
                    SELECT vv.cust_cd, vv.cust_grp_id, g.global_customer_type as cntr_cust_tp_cd
                    FROM ${v_customer_opus_n_prospect.SQL_TABLE_NAME} vv
                    INNER JOIN ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = vv.cust_grp_id
                  ) as v_customer_opus_n_prospect
                  -- change by Helen on 2021.12.28 for DCN-491
                  -- ON of_booking.ctrt_cust_cd = v_customer_opus_n_prospect.cust_cd AND of_booking.ctrt_cust_cd IS NOT NULL
                   ON coalesce(of_svc_contract.cust_cd, of_booking.ctrt_cust_cd) = v_customer_opus_n_prospect.cust_cd AND coalesce(of_svc_contract.cust_cd, of_booking.ctrt_cust_cd) IS NOT NULL
                  -- end change on 2021.12.28 for DCN-491
                  LEFT JOIN ${upload_other_cost.SQL_TABLE_NAME} as othercost --dcn504, 2022-Jan
                    ON ( othercost.rc_flg           = of_booking.rc_flg           AND
                         othercost.REV_PERIOD_YRQTR = of_booking.rev_period_yrqtr AND
                         othercost.CUST_GRP_ID      = v_customer_opus_n_prospect.cust_grp_id AND
                         othercost.SVC_GRP_CD       = of_svc_scp.service_scope_group_code AND
                         othercost.DMNT_FLG         = (CASE WHEN of_booking.svc_scp_cd = 'LEA' AND of_booking.n1st_pol_cd LIKE 'MX%' THEN 'N'
                                                       WHEN of_booking.svc_scp_cd = 'LEA' THEN 'Y'
                                                       WHEN of_booking.svc_scp_cd = 'IAA' AND right(of_booking.t_vvd_cd,1) IN ('S','W') THEN 'Y'
                                                       WHEN of_booking.svc_scp_cd = 'IAA' THEN 'N'
                                                       WHEN of_svc_scp.dominant_flag = 'DOM' THEN 'Y'
                                                       ELSE 'N' END)
                       )
                  WHERE of_booking.bkg_sts_cd  != 'X'

      UNION ALL

      SELECT
      'Actual' as record_type
      ---------- Basic details ---------------
      , of_actuals.bkg_no
      , cntr_tpsz_cd as consolidated_cntr_tpsz
      , bkg_sts_cd
      , de_term_cd
      , rcv_term_cd
      , cif_fob_split_cd
      , frt_term_cd

      ---------- pickup and return SCC and Yard ---------------
      , act_mty_pkup_scc_cd
      , mty_pkup_scc_cd
      , mty_rtn_scc_cd
      , bkg_mty_rtn_scc_cd
      , act_mty_pkup_yd_cd
      , mty_rtn_yd_cd
      ---------- TEU , CM and Weight ---------------
      , bkg_teu as teu
      --, CASE WHEN of_svc_scp.Service_Scope_Group_Code = 'TP' THEN cast(cm_amt2 as numeric) ELSE cast(pa_cm_amt as numeric) END as cm_amt  -- -- dcn504, 2022-Jan
      , CAST( (CASE WHEN of_svc_scp.Service_Scope_Group_Code = 'TP'  -- -- dcn504, 2022-Jan
      THEN cm_amt2   - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz_cd,1,1)='Q' then 0 else bkg_teu end) )
      ELSE pa_cm_amt - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz_cd,1,1)='Q' then 0 else bkg_teu end) )
      END ) as numeric) as cm_amt
      , cast(pa_cm_amt as numeric) as cm_amt_eppa -- dcn504, 2022-Jan
      , cast(cm_amt2 as numeric) as cm_amt_eppb -- dcn504, 2022-Jan
      , bkg_cgo_wgt
      ---------- cargo and commdity ---------------
      , cmdt_cd
      , cmdt_nm
      , cgo_ntr_cd
      , cgo_ntr_nm
      , dcgo_flg
      , rd_cgo_flg
      , null as cargo_type -- NA dashboard
      ---------- contract customer, shipper, consinee, forwarder, and sales person ---------------
      -- change by Helen on 2021.12.28 for DCN-491
      --, coalesce(cnt_cust_cd, '<blank>') as consolidated_cnt_cust_cd
      , coalesce(of_svc_contract.cust_cd, cnt_cust_cd, '<blank>') as consolidated_cnt_cust_cd
      -- end 2021.12.28 for DCN-491
      , v_customer_opus_n_prospect.cust_grp_id as consolidated_cnt_cust_grp_cd
      , (CASE WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' and (actual_cust_cd is not null or actual_cust_nm is not null ) THEN 'NAC'
      WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' THEN 'FAK' ELSE NULL END) as cust_nvo_fak_nac
      , (CASE WHEN cnt_cust_cd IS NULL THEN 'Tariff/Dummy'
      WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' and (actual_cust_cd is not null or actual_cust_nm is not null ) THEN 'NAC'
      WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' THEN 'FAK'
      ELSE 'BCO' END) as cust_bco_fak_nac
      , actual_cust_cd
      , actual_cust_nm
      , cnee_cust_cd
      , cnee_cust_nm
      , frwd_cust_cd
      , frwd_cust_nm
      , shpr_cust_cd
      , shpr_cust_nm
      , ctrt_scp_srep_eml
      , ctrt_scp_srep_nm
      , null as na_dashboard_sls_person  -- DCN-741 NA dashboard sales person
      , null as na_dashboard_usr_sub_rgn -- DCN-741 NA dashboard sales person
      ---------- locations  ---------------
      , por_cd
      , por_nm
      , ori_cnt
      , del_cd
      , del_cnt
      , del_nm
      , n1st_pod_cd
      , n1st_pol_cd
      , final_pod_cd
      , cast(ete_dys AS NUMERIC) as ete_dys
      ---------- about service contract ---------------
      , svc_cont_no
      , sc_rfa_ctrt_tp_nm
      , cont_effective_dt
      , cont_expiry_dt
      -- Jack , 2021 Sep 5, use contract period type instead of from of_svc_contract
      , of_svc_contract.ctrt_dur_tp_cd as cont_period_typ_cd
      --, cont_period_typ_cd
      , ctrt_prop_ofc_cd
      , ctrt_prop_ofc_nm
      , ctrt_scp_srep_ofc_cd
      , ctrt_scp_srep_ofc_nm
      , (CASE WHEN cnt_cust_cd is NULL AND svc_cont_no like 'DUM%' then '(Uncategorized)'
      WHEN cnt_cust_cd is NULL AND svc_cont_no not like 'DUM%' then '(Tariff)'
      WHEN cnt_cust_cd is NOT NULL AND substr(svc_cont_no,6,1) = 'T' then '(Tariff)' -- add for DCN-456
      WHEN cnt_cust_cd is NOT NULL AND svc_cont_no IS null then '(Uncategorized)'
      -- Jack, 2021 Sep 5, use contract period type instead of from of_svc_contract
      --          WHEN cnt_cust_cd is NOT NULL AND svc_cont_no IS NOT null AND cont_period_typ_cd = 'L' then 'Long'
      --          WHEN cnt_cust_cd is NOT NULL AND svc_cont_no IS NOT null AND cont_period_typ_cd = 'M' then 'Medium'
      --          WHEN cnt_cust_cd is NOT NULL AND svc_cont_no IS NOT NULL AND cont_period_typ_cd = 'S' then 'Short'
      WHEN cnt_cust_cd is NOT NULL AND svc_cont_no IS NOT null AND of_svc_contract.ctrt_dur_tp_cd = 'L' then 'Long'
      WHEN cnt_cust_cd is NOT NULL AND svc_cont_no IS NOT null AND of_svc_contract.ctrt_dur_tp_cd = 'M' then 'Medium'
      WHEN cnt_cust_cd is NOT NULL AND svc_cont_no IS NOT NULL AND of_svc_contract.ctrt_dur_tp_cd = 'S' then 'Short'


      ELSE '(Uncategorized)' END ) as cont_period_typ -- Jack, Jul 28, 2021
      ---------- office -----------
      , ob_sls_ofc_cd
      , bkg_ofc_cd
      , bkg_ofc_cnt_cd
      , bkg_ofc_cnt_nm
      ---------- about service scope, service lane  ---------------
      , svc_scp_cd
      -- change on 2021.11.12 for SYM CIF/FOB & DCN-391 by Helen
      --, of_svc_scp.dominant_flag as dominant_flg
      , CASE
      WHEN svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N-DOM'
      WHEN svc_scp_cd = 'LEA' THEN 'DOM'
      WHEN svc_scp_cd = 'IAA' AND right(vvd,1) IN ('S','W') THEN 'DOM'
      WHEN svc_scp_cd = 'IAA' THEN 'N-DOM'
      ELSE of_svc_scp.dominant_flag
      END as dominant_flg
      -- end change 2021.11.12 for SYM CIF/FOB & DCN-391 by Helen
      -- , dir_cd
      -- change on 2021.11.12 for SYM CIF/FOB by Helen
      --, substr(rlane_cd,1,3) as slane_cd
      , CASE
      WHEN sub_trd_cd = 'IP' and of_svc_scp.service_scope_group_code IN ('WA','EA') THEN 'TRUNK'
      WHEN substr(rlane_cd,1,3) = 'IBC' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'NBS' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'BAX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'REX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'SDX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'NPX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'GTE' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'ADX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'LEX' THEN 'IET'
      ELSE substr(rlane_cd,1,3)
      END as slane_cd
      -- end change on 2021.11.12 for SYM CIF/FOB by Helen
      , of_svc_scp.service_scope_group_code as svc_scp_grp_cd
      , line_code1
      , trd_cd
      , sub_trd_cd
      , CAST (NULL as string) as bound --NA dashboard
      , CAST (NULL as string) as na_trade_type --NA dashboard
      ----------- sales week ---------------
      , week
      -------------- others --------------------
      , bkg_oft_rev
      , cast(cntr as NUMERIC) as cntr
      , cntr_qty
      , crm_if_flg
      , ctrt_prop_srep_eml
      , ctrt_prop_srep_nm
      , dest_trns_svc_mod_cd
      , cast(fi AS NUMERIC) as fi
      , cast(ib_mty_pa_amt as NUMERIC) as ib_mty_pa_amt
      , cast(ib_mty_pa_amt2 as NUMERIC) as ib_mty_pa_amt2
      , ioc_cd
      , cast(ld as NUMERIC) as ld
      , lst_vvd_cd
      , month
      , ntlt_grp_nm
      , cast(ob_mty_pa_amt as NUMERIC) as ob_mty_pa_amt
      , cast(ob_mty_pa_amt2 as NUMERIC) as ob_mty_pa_amt2
      , ob_ofc_nm
      , ob_srep_cd
      , ob_srep_eml
      , ob_srep_nm
      , org_trns_svc_mod_cd
      , pod_loc_cd
      , pod_loc_nm
      , pol_loc_cd
      , pol_loc_nm
      , quarter
      , vvd as rev_vvd
      , sc_rfa_sls_rep_ofc_cnt_cd
      , sc_rfa_sls_rep_ofc_cnt_nm
      , year
      , ram
      , null as account_plan_sc_rfa_customer_group_code
      , of_actuals.rc_flg           -- dcn504, 2022-Jan
      , of_actuals.rev_period_yrqtr -- dcn504, 2022-Jan
      , concat(bkg_no, cntr_tpsz_cd) as primary_key
      --   , of_booking_ap.plan_bkg as planned_bkg
      , cast(null as string) as is_one_quotation
      FROM ${of_actuals.SQL_TABLE_NAME} as of_actuals
      -- change for DCN-491 to solve fan-out
      LEFT JOIN
      (select distinct service_scope_code, service_scope_name, service_scope_group_code, dominant_flag
      from ${of_svc_scp.SQL_TABLE_NAME} ) as of_svc_scp ON of_actuals.svc_scp_cd = of_svc_scp.service_scope_code
      -- end change for Fan-out
      --      LEFT JOIN (
      --        SELECT service_scope_group
      --        , service_scope
      --        , sales_week
      --        , sales_person as ram
      --        , row_number() over (partition by service_scope_group, sales_week, service_scope) as rn
      --        FROM ${of_customer_target_and_target_dtl_weekly.SQL_TABLE_NAME}
      --      ) as of_customer_target_and_target_dtl_weekly ON rn = 1 AND
      --                                                       of_actuals.svc_scp_cd = of_customer_target_and_target_dtl_weekly.service_scope AND
      --                                                       of_actuals.week = cast(of_customer_target_and_target_dtl_weekly.sales_week as int64) AND
      --                                                       of_svc_scp.service_scope_group_code = of_customer_target_and_target_dtl_weekly.service_scope_group
      LEFT JOIN (
      SELECT v_customer_opus_n_prospect_of_cust_grp_cd
      , service_scope_group
      , direction
      , sales_week
      , sales_person as ram
      , row_number() over (partition by v_customer_opus_n_prospect_of_cust_grp_cd, service_scope_group, direction, sales_week ) as rn
      FROM ${of_customer_target_and_target_dtl_weekly.SQL_TABLE_NAME}
      ) as of_customer_target_and_target_dtl_weekly ON (rn = 1 AND
      of_actuals.cust_grp_cd = of_customer_target_and_target_dtl_weekly.v_customer_opus_n_prospect_of_cust_grp_cd  AND
      of_svc_scp.service_scope_group_code = of_customer_target_and_target_dtl_weekly.service_scope_group AND
      CASE
      WHEN svc_scp_cd = 'LEA' AND of_actuals.n1st_pol_cd LIKE 'MX%' THEN 'N-DOM'
      WHEN svc_scp_cd = 'LEA' THEN 'DOM'
      WHEN svc_scp_cd = 'IAA' and right(vvd,1) in ('S','W') THEN 'DOM'
      WHEN svc_scp_cd = 'IAA' THEN 'N-DOM'
      ELSE of_svc_scp.dominant_flag
      END  = of_customer_target_and_target_dtl_weekly.direction AND
      week = cast(of_customer_target_and_target_dtl_weekly.sales_week as int64)
      )
      -- by Jack on 2021 Sep 5
      LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON of_actuals.svc_cont_no = of_svc_contract.sc_rfa_no
      -- LEFT JOIN ${of_booking_ap.SQL_TABLE_NAME} as of_booking_ap ON of_booking_ap.plan_bkg = of_actuals.bkg_no
      LEFT JOIN (
      SELECT vv.cust_cd, vv.cust_grp_id, g.global_customer_type as cntr_cust_tp_cd
      FROM ${v_customer_opus_n_prospect.SQL_TABLE_NAME} vv
      INNER JOIN ${of_customer_group.SQL_TABLE_NAME} g on vv.cust_grp_id = g.cust_grp_id
      ) as v_customer_opus_n_prospect ON
      -- change by Helen on 2021.12.28 for DCN-491
      -- of_actuals.cnt_cust_cd = v_customer_opus_n_prospect.cust_cd AND of_actuals.cnt_cust_cd IS NOT NULL
      coalesce(of_svc_contract.cust_cd, of_actuals.cnt_cust_cd) = v_customer_opus_n_prospect.cust_cd AND  coalesce (of_svc_contract.cust_cd,of_actuals.cnt_cust_cd) IS NOT NULL
      -- end 2021.12.28 fro DCN-491
      LEFT JOIN ${upload_other_cost.SQL_TABLE_NAME} as othercost --dcn504, 2022-Jan
      ON ( othercost.rc_flg           = of_actuals.rc_flg                      AND
      othercost.REV_PERIOD_YRQTR = of_actuals.rev_period_yrqtr            AND
      othercost.CUST_GRP_ID      = v_customer_opus_n_prospect.cust_grp_id AND
      othercost.SVC_GRP_CD       = of_svc_scp.service_scope_group_code    AND
      othercost.DMNT_FLG         = (CASE WHEN svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N'
      WHEN svc_scp_cd = 'LEA' THEN 'Y'
      WHEN svc_scp_cd = 'IAA' AND right(vvd,1) IN ('S','W') THEN 'Y'
      WHEN svc_scp_cd = 'IAA' THEN 'N'
      WHEN of_svc_scp.dominant_flag = 'DOM' THEN 'Y'
      ELSE 'N' END)
      )

      UNION ALL

      SELECT 'Plan' as record_type
      ---------- Basic details ---------------
      , null as bkg_no
      , null as consolidated_cntr_tpsz
      , null as bkg_sts_cd
      , null as de_term_cd
      , null as rcv_term_cd
      , of_ap.cif_fob as cif_fob_split_cd
      , null as frt_term_cd
      ---------- pickup and return SCC and Yard ---------------
      , null as act_mty_pkup_scc_cd
      , null as mty_pkup_scc_cd
      , null as mty_rtn_scc_cd
      , null as bkg_mty_rtn_scc_cd
      , null as act_mty_pkup_yd_cd
      , null as mty_rtn_yd_cd
      ---------- TEU , CM and Weight ---------------
      , of_ap.ap_teu as teu
      , null as cmt
      , null as cm_amt_eppa -- dcn504, 2022-Jan
      , null as cm_amt_eppb -- dcn504, 2022-Jan
      , null as bkg_cgo_wgt
      ---------- cargo and commdity ---------------
      , null as cmdt_cd
      , null as cmdt_nm
      , null as cgo_ntr_cd
      , null as cgo_ntr_nm
      , null as dcgo_flg
      , null as rd_cgo_flg
      , null as cargo_type -- NA dashboard
      ---------- contract customer, shipper, consinee, forwarder, and sales person ---------------
      --, '<blank>' as consolidated_cnt_cust_cd
      , of_svc_contract.cust_cd           as consolidated_cnt_cust_cd -- NA dashboard
      , of_ap.sc_rfa_customer_group_code  as consolidated_cnt_cust_grp_cd
      , null as cust_nvo_fak_nac
      , NULL as cust_bco_fak_nac
      , null as actual_cust_cd
      , null as actual_cust_nm
      , null as cnee_cust_cd
      , null as cnee_cust_nm
      , null as frwd_cust_cd
      , null as frwd_cust_nm
      , null as shpr_cust_cd
      , null as shpr_cust_nm
      , null as ctrt_scp_srep_eml
      , null as ctrt_scp_srep_nm
      , of_user.ONEForce_Id as na_dashboard_sls_person  -- DCN-741 NA dashboard sales person
      , of_user.Sub_Region  as na_dashboard_usr_sub_rgn -- DCN-741 NA dashboard sales person
      ---------- locations  ---------------
      , null as por_cd
      , null as por_nm
      , null as ori_cnt
      , null as del_cd
      , null as del_cnt
      , null as del_nm
      , null as n1st_pod_cd
      , null as n1st_pol_cd
      , null as final_pod_cd
      , null as ete_dys
      ---------- about service contract ---------------
      , of_ap.sc_rfa_number as svc_cont_no
      , null as sc_rfa_ctrt_tp_nm
      , null as cont_effective_dt
      , null as cont_expiry_dt
      , of_ap.sc_rfa_contract_type as cont_period_typ_cd
      , of_ap.contract_office_code as ctrt_prop_ofc_cd
      , null as ctrt_prop_ofc_nm
      , of_ap.ap_submission_office as ctrt_scp_srep_ofc_cd
      , null as ctrt_scp_srep_ofc_nm
      , NULL as cont_period_typ -- Jack, Jul 28, 2021
      ---------- office -----------
      , of_ap.loading_sales_rep_office_code as ob_sls_ofc_cd
      , null as bkg_ofc_cd
      , null as bkg_ofc_cnt_cd
      , null as bkg_ofc_cnt_nm
      ---------- about service scope, service lane  ---------------
      -- revert null svc_scp_cd to avoid fan out >>
      , null as svc_scp_cd
      -- , of_svc_scp.service_scope_code as svc_scp_cd
      --end revert
      , CASE
      WHEN of_ap.Dominant_Leg_Flag = 'Y' THEN 'DOM'
      WHEN of_ap.Dominant_Leg_Flag = 'N' THEN 'N-DOM'
      ELSE NULL
      END as dominant_flg
      -- , null as dir_cd
      , substr(of_ap.trunk_vvd_service_lane_code,1,3) as slane_cd -- not sure id this is always 3 characters, if so can avoid substr()
      , of_ap.trade_code as svc_scp_grp_cd
      , null as line_code1
      , null as trd_cd
      , null as sub_trd_cd
      , trunk_vvd_direction_code as bound --NA dashboard
      -- NA Trade Type
      , CASE WHEN of_ap.trade_code ||'|'||trunk_vvd_direction_code ||'|'||of_ap.Dominant_Leg_Flag = 'LN|S|N'  THEN 'Latin'
      WHEN of_ap.trade_code ||'|'||trunk_vvd_direction_code ||'|'||of_ap.Dominant_Leg_Flag = 'LW|S|N'  THEN 'Latin'
      WHEN of_ap.trade_code ||'|'||trunk_vvd_direction_code = 'TP|E'  THEN 'TP Domi.'
      WHEN of_ap.trade_code ||'|'||trunk_vvd_direction_code = 'TP|W'  THEN 'TP Non Domi.'
      WHEN of_ap.trade_code ||'|'||trunk_vvd_direction_code = 'TA|E'  THEN 'TA Non Domi.'
      ELSE NULL END as na_trade_type
      ----------- sales week ---------------
      , cast(regexp_replace(of_ap.sales_week, '[/W]', '') as int64)  as week  -- derived
      -------------- others --------------------
      , null as bkg_oft_rev
      , null as cntr
      , null as cntr_qty
      , null as crm_if_flg
      , null as ctrt_prop_srep_eml
      , null as ctrt_prop_srep_nm
      , null as dest_trns_svc_mod_cd
      , null as fi
      , null as ib_mty_pa_amt
      , null as ib_mty_pa_amt2
      , null as ioc_cd
      , null as ld
      , null as lst_vvd_cd
      , null as month
      , null as ntlt_grp_nm
      , null as ob_mty_pa_amt
      , null as ob_mty_pa_amt2
      , null as ob_ofc_nm
      , null as ob_srep_cd
      , null as ob_srep_eml
      , null as ob_srep_nm
      , null as org_trns_svc_mod_cd
      , null as pod_loc_cd
      , null as pod_loc_nm
      , null as pol_loc_cd
      , null as pol_loc_nm
      , null as quarter
      , of_ap.trunk_vvd_code as rev_vvd
      , null as sc_rfa_sls_rep_ofc_cnt_cd
      , null as sc_rfa_sls_rep_ofc_cnt_nm
      , null as year
      , null as ram
      , of_ap.sc_rfa_customer_group_code as account_plan_sc_rfa_customer_group_code
      , null as rc_flg           -- dcn504, 2022-Jan
      , null as rev_period_yrqtr -- dcn504, 2022-Jan
      , of_ap.record_id as primary_key
      -- , 'XXX999999' as planned_bkg
      , cast(null as string) as is_one_quotation
      FROM ${of_account_plan.SQL_TABLE_NAME} as of_ap
      -- NA dashboard
      LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON of_ap.sc_rfa_number = of_svc_contract.sc_rfa_no
      -- NA dashboard
      LEFT JOIN ${of_user.SQL_TABLE_NAME} as of_user ON trim(lower(of_svc_contract.srep_eml)) = trim(lower( CASE WHEN of_user.TPA_user = 'true' THEN of_user.Email_2 ELSE of_user.Email END ))

      UNION ALL

      SELECT 'Target' as record_type
      ---------- Basic details ---------------
      , null as bkg_no
      , null as consolidated_cntr_tpsz
      , null as bkg_sts_cd
      , null as de_term_cd
      , null as rcv_term_cd
      , null as cif_fob_split_cd
      , null as frt_term_cd
      ---------- pickup and return SCC and Yard ---------------
      , null as act_mty_pkup_scc_cd
      , null as mty_pkup_scc_cd
      , null as mty_rtn_scc_cd
      , null as bkg_mty_rtn_scc_cd
      , null as act_mty_pkup_yd_cd
      , null as mty_rtn_yd_cd
      ---------- TEU , CM and Weight ---------------
      , weekly_average as teu
      , null as cm_amt
      , null as cm_amt_eppa -- dcn504, 2022-Jan
      , null as cm_amt_eppb -- dcn504, 2022-Jan
      , null as bkg_cgo_wgt
      ---------- cargo and commdity ---------------
      , null as cmdt_cd
      , null as cmdt_nm
      , null as cgo_ntr_cd
      , null as cgo_ntr_nm
      , null as dcgo_flg
      , null as rd_cgo_flg
      , null as cargo_type
      ---------- contract customer, shipper, consinee, forwarder, and sales person ---------------
      , coalesce(v_customer_opus_n_prospect_cust_cd, '<blank>') as consolidated_cnt_cust_cd  -- derived
      , v_customer_opus_n_prospect_of_cust_grp_cd as consolidated_cnt_cust_grp_cd
      , null as cust_nvo_fak_nac
      , NULL as cust_bco_fak_nac
      , null as actual_cust_cd
      , null as actual_cust_nm
      , null as cnee_cust_cd
      , null as cnee_cust_nm
      , null as frwd_cust_cd
      , null as frwd_cust_nm
      , null as shpr_cust_cd
      , null as shpr_cust_nm
      , null as ctrt_scp_srep_eml
      , sales_person as ctrt_scp_srep_nm
      , na_dashboard_sls_person  -- DCN-741 NA dashboard sales person
      , na_dashboard_usr_sub_rgn -- DCN-741 NA dashboard sales person
      ---------- locations  ---------------
      , of_location_origin_location_code as por_cd  -- derived
      , of_por_loc.location_name as por_nm
      , LEFT(of_location_origin_location_code,2) as ori_cnt -- dcn618 change from null to cva origin ctry
      , of_location_destination_location_code as del_cd  -- derived
      , LEFT(of_location_destination_location_code,2) as del_cnt  -- dcn618 change from null to cva origin ctry
      , of_del_loc.location_name as del_nm
      , null as n1st_pod_cd
      , null as n1st_pol_cd
      , null as final_pod_cd
      , null as ete_dys
      ---------- about service contract ---------------
      , of_svc_contract_sc_rfa_no as svc_cont_no  -- derived
      , null as sc_rfa_ctrt_tp_nm
      , null as cont_effective_dt
      , null as cont_expiry_dt
      , of_svc_contract_cont_period_typ_cd as cont_period_typ_cd
      , null as ctrt_prop_ofc_cd
      , null as ctrt_prop_ofc_nm
      , null as ctrt_scp_srep_ofc_cd
      , null as ctrt_scp_srep_ofc_nm
      , NULL as cont_period_typ -- Jack, Jul 28, 2021
      ---------- office -----------
      , null as ob_sls_ofc_cd
      , null as bkg_ofc_cd
      , null as bkg_ofc_cnt_cd
      , null as bkg_ofc_cnt_nm
      ---------- about service scope, service lane  ---------------
      , service_scope as svc_scp_cd
      , coalesce( ( CASE WHEN of_customer_target_and_target_dtl_weekly.dominant_flag = 'Y' THEN 'DOM'
      WHEN of_customer_target_and_target_dtl_weekly.dominant_flag = 'N' THEN 'N-DOM'
      ELSE NULL END ) , of_svc_scp.dominant_flag ) as dominant_flg
      -- , null as dir_cd
      , of_vsl_svc_lane_service_lane_code as slane_cd  -- derived
      , service_scope_group as svc_scp_grp_cd
      , null as line_code1
      , null as trd_cd
      , null as sub_trd_cd
      , of_svc_scp.bound_code as bound -- NA dashboard
      -- NA Trade Type
      , CASE WHEN of_customer_target_and_target_dtl_weekly.service_scope_group is not null AND of_customer_target_and_target_dtl_weekly.dominant_flag is not null THEN
      CASE
      WHEN of_customer_target_and_target_dtl_weekly.service_scope_group||'|'||of_customer_target_and_target_dtl_weekly.dominant_flag = 'TP|Y' THEN 'TP Domi.'
      WHEN of_customer_target_and_target_dtl_weekly.service_scope_group||'|'||of_customer_target_and_target_dtl_weekly.dominant_flag = 'TP|N' THEN 'TP Non Domi.'
      WHEN of_customer_target_and_target_dtl_weekly.service_scope_group||'|'||of_customer_target_and_target_dtl_weekly.dominant_flag = 'TA|N' THEN 'TA Non Domi.'
      ELSE NULL
      END
      WHEN service_scope IN ('LAS','LWS') THEN 'Latin'
      WHEN of_svc_scp.service_scope_group_code ||'|'||of_svc_scp.Dominant_Flag = 'TP|DOM'   THEN 'TP Domi.'
      WHEN of_svc_scp.service_scope_group_code ||'|'||of_svc_scp.Dominant_Flag = 'TP|N-DOM' THEN 'TP Non Domi.'
      WHEN of_svc_scp.service_scope_group_code ||'|'||of_svc_scp.Dominant_Flag = 'TA|N-DOM' THEN 'TA Non Domi.'
      ELSE NULL END as na_trade_type
      ----------- sales week ---------------
      , cast(sales_week as int64) as week
      --, cast(of_customer_target_and_target_dtl_weekly.sales_week as int64) as week
      -------------- others --------------------
      , null as bkg_oft_rev
      , null as cntr
      , null as cntr_qty
      , null as crm_if_flg
      , null as ctrt_prop_srep_eml
      , of_user_fullname as ctrt_prop_srep_nm
      , null as dest_trns_svc_mod_cd
      , null as fi
      , null as ib_mty_pa_amt
      , null as ib_mty_pa_amt2
      , null as ioc_cd
      , null as ld
      , null as lst_vvd_cd
      , null as month
      , null as ntlt_grp_nm
      , null as ob_mty_pa_amt
      , null as ob_mty_pa_amt2
      , null as ob_ofc_nm
      , null as ob_srep_cd
      , null as ob_srep_eml
      , null as ob_srep_nm
      , null as org_trns_svc_mod_cd
      , null as pod_loc_cd
      , null as pod_loc_nm
      , null as pol_loc_cd
      , null as pol_loc_nm
      , null as quarter
      , null as rev_vvd
      , null as sc_rfa_sls_rep_ofc_cnt_cd
      , null as sc_rfa_sls_rep_ofc_cnt_nm
      , null as year
      , sales_person as ram
      , null as account_plan_sc_rfa_customer_group_code
      , null as rc_flg           -- dcn504, 2022-Jan
      , null as rev_period_yrqtr -- dcn504, 2022-Jan
      , concat(of_customer_target_and_target_dtl_weekly.oneforce_id, "-", of_customer_target_and_target_dtl_weekly.sales_week) as primary_key
      --, of_ap_tgt.sales_week as planned_bkg
      , cast(null as string) as is_one_quotation
      FROM ${of_customer_target_and_target_dtl_weekly.SQL_TABLE_NAME} as of_customer_target_and_target_dtl_weekly
      -- change for DCN-491 to solve fan-out
      LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract on of_svc_contract.sc_rfa_no = of_customer_target_and_target_dtl_weekly.of_svc_contract_sc_rfa_no
      LEFT JOIN (select distinct service_scope_code, service_scope_name, service_scope_group_code, dominant_flag, bound_code
      from ${of_svc_scp.SQL_TABLE_NAME} ) as of_svc_scp ON of_customer_target_and_target_dtl_weekly.service_scope = of_svc_scp.service_scope_code
      LEFT JOIN ${of_location.SQL_TABLE_NAME} as of_por_loc ON of_por_loc.location_code = of_customer_target_and_target_dtl_weekly.of_location_origin_location_code
      LEFT JOIN ${of_location.SQL_TABLE_NAME} as of_del_loc ON of_del_loc.location_code = of_customer_target_and_target_dtl_weekly.of_location_destination_location_code
      UNION ALL

      SELECT 'Budget' as record_type
      ---------- Basic details ---------------
      , CAST(null as string) as bkg_no
      , CAST(null as string) as consolidated_cntr_tpsz
      , CAST(null as string) as bkg_sts_cd
      , CAST(null as string) as de_term_cd
      , CAST(null as string) as rcv_term_cd
      , CAST(null as string) as cif_fob_split_cd
      , CAST(null as string) as frt_term_cd
      ---------- pickup and return SCC and Yard ---------------
      , CAST(null as string) as act_mty_pkup_scc_cd
      , CAST(null as string) as mty_pkup_scc_cd
      , CAST(null as string) as mty_rtn_scc_cd
      , CAST(null as string) as bkg_mty_rtn_scc_cd
      , CAST(null as string) as act_mty_pkup_yd_cd
      , CAST(null as string) as mty_rtn_yd_cd
      ---------- TEU , CM and Weight ---------------
      , of_budget_dtl.monthly_target / ( count(distinct of_sales_week.Sales_Week) over (partition by of_sales_week.Sales_Month)) as teu
      , of_budget_dtl.Monthly_Target_CM_USD / ( count(distinct of_sales_week.Sales_Week) over (partition by of_sales_week.Sales_Month)) as cm_amt
      , null as cm_amt_eppa
      , null as cm_amt_eppb
      , null as bkg_cgo_wgt
      ---------- cargo and commdity ---------------
      , CAST(null as string) as cmdt_cd
      , CAST(null as string) as cmdt_nm
      , CAST(null as string) as cgo_ntr_cd
      , CAST(null as string) as cgo_ntr_nm
      , CAST(null as string) as dcgo_flg
      , CAST(null as string) as rd_cgo_flg
      , (CASE of_budget.Type_ WHEN 'RFR' THEN 'Reefer' ELSE 'Dry' END)  as cargo_type -- NA dashboard
      ---------- contract customer, shipper, consinee, forwarder, and sales person ---------------
      , cust.cust_cd      as consolidated_cnt_cust_cd
      , cust.cust_grp_id  as consolidated_cnt_cust_grp_cd
      , CAST(null as string) as cust_nvo_fak_nac
      , CAST(null as string) as cust_bco_fak_nac
      , CAST(null as string) as actual_cust_cd
      , CAST(null as string) as actual_cust_nm
      , CAST(null as string) as cnee_cust_cd
      , CAST(null as string) as cnee_cust_nm
      , CAST(null as string) as frwd_cust_cd
      , CAST(null as string) as frwd_cust_nm
      , CAST(null as string) as shpr_cust_cd
      , CAST(null as string) as shpr_cust_nm
      , CAST(null as string) as ctrt_scp_srep_eml
      , CAST(null as string) as ctrt_scp_srep_nm
      , of_user.ONEForce_ID as na_dashboard_sls_person   -- DCN-741 NA dashboard sales person
      , of_user.Sub_Region  as na_dashboard_usr_sub_rgn  -- DCN-741 NA dashboard sales person
      ---------- locations  ---------------
      , CAST(null as string) as por_cd
      , CAST(null as string) as por_nm
      , CAST(null as string) as ori_cnt
      , CAST(null as string) as del_cd
      , CAST(null as string) as del_cnt
      , CAST(null as string) as del_nm
      , CAST(null as string) as n1st_pod_cd
      , CAST(null as string) as n1st_pol_cd
      , CAST(null as string) as final_pod_cd
      , null as ete_dys
      ---------- about service contract ---------------
      , CAST(null as string) as svc_cont_no  -- derived
      , CAST(null as string) as sc_rfa_ctrt_tp_nm
      , CAST(null as datetime) as cont_effective_dt
      , CAST(null as datetime) as cont_expiry_dt
      , CAST(null as string) as cont_period_typ_cd
      , CAST(null as string) as ctrt_prop_ofc_cd
      , CAST(null as string) as ctrt_prop_ofc_nm
      , CAST(null as string) as ctrt_scp_srep_ofc_cd
      , CAST(null as string) as ctrt_scp_srep_ofc_nm
      , CAST(null as string) as cont_period_typ -- Jack, Jul 28, 2021
      ---------- office -----------
      , CAST(null as string) as ob_sls_ofc_cd
      , CAST(null as string) as bkg_ofc_cd
      , CAST(null as string) as bkg_ofc_cnt_cd
      , CAST(null as string) as bkg_ofc_cnt_nm
      ---------- about service scope, service lane  ---------------
      , CAST(null as string) as svc_scp_cd
      , of_budget.dom_non_dom as dominant_flg
      -- , null as dir_cd
      , CAST(null as string) as slane_cd
      , of_budget.Service_Scope_Group as svc_scp_grp_cd
      , CAST(null as string) as line_code1
      , CAST(null as string) as trd_cd
      , CAST(null as string) as sub_trd_cd
      , of_budget.bound as bound
      -- NA Trade Type
      , CASE of_budget.Service_Scope_Group||'|'||of_budget.bound||'|'||of_budget.dom_non_dom
      WHEN 'LN|S|N-DOM' THEN 'Latin'
      WHEN 'TP|E|DOM'   THEN 'TP Domi.'
      WHEN 'TP|W|N-DOM' THEN 'TP Non Domi.'
      WHEN 'TA|E|N-DOM' THEN 'TA Non Domi.'
      ELSE NULL END as na_trade_type
      ----------- sales week ---------------
      , cast(of_sales_week.Sales_Week as int64) as week
      -------------- others --------------------
      , null as bkg_oft_rev
      , null as cntr
      , null as cntr_qty
      , CAST(null as string) as crm_if_flg
      , CAST(null as string) as ctrt_prop_srep_eml
      , CAST(null as string) as ctrt_prop_srep_nm
      , CAST(null as string) as dest_trns_svc_mod_cd
      , null as fi
      , null as ib_mty_pa_amt
      , null as ib_mty_pa_amt2
      , CAST(null as string) as ioc_cd
      , null as ld
      , CAST(null as string) as lst_vvd_cd
      , null as month
      , CAST(null as string) as ntlt_grp_nm
      , null as ob_mty_pa_amt
      , null as ob_mty_pa_amt2
      , CAST(null as string) as ob_ofc_nm
      , CAST(null as string) as ob_srep_cd
      , CAST(null as string) as ob_srep_eml
      , CAST(null as string) as ob_srep_nm
      , CAST(null as string) as org_trns_svc_mod_cd
      , CAST(null as string) as pod_loc_cd
      , CAST(null as string) as pod_loc_nm
      , CAST(null as string) as pol_loc_cd
      , CAST(null as string) as pol_loc_nm
      , null as quarter
      , CAST(null as string) as rev_vvd
      , CAST(null as string) as sc_rfa_sls_rep_ofc_cnt_cd
      , CAST(null as string) as sc_rfa_sls_rep_ofc_cnt_nm
      , null as year
      , CAST(null as string) as ram
      , CAST(null as string) as account_plan_sc_rfa_customer_group_code
      , CAST(null as string) as rc_flg
      , CAST(null as string) as rev_period_yrqtr
      , of_budget_dtl.oneforce_id || '-' || of_sales_week.sales_week as primary_key
      --, of_ap_tgt.sales_week as planned_bkg
      , cast(null as string) as is_one_quotation
      FROM ${of_sales_budget_capture.SQL_TABLE_NAME} of_budget
      INNER JOIN ${of_sales_budget_capture_dtl.SQL_TABLE_NAME} of_budget_dtl
      ON (of_budget.ONEForce_ID = of_budget_dtl.Sales_Budget_Capture)
      INNER JOIN  ${of_sales_week_master.SQL_TABLE_NAME} of_sales_week
      ON (of_sales_week.Sales_Month = CAST( EXTRACT(YEAR FROM of_budget_dtl.Month_Year)*100 + EXTRACT(MONTH FROM of_budget_dtl.Month_Year) AS STRING) )
      INNER JOIN  ${of_user.SQL_TABLE_NAME} of_user
      ON (of_user.ONEForce_ID = of_budget.Salesperson)
      LEFT JOIN   ${v_customer_opus_n_prospect.SQL_TABLE_NAME} cust
      ON (of_budget.Customer_Code = cust.cust_cd)


      -- end for fan-out
      --LEFT JOIN ${of_ap_distinct.SQL_TABLE_NAME} AS of_ap_tgt ON of_customer_target_and_target_dtl_weekly.sales_week  = of_ap_tgt.sales_week
      --          AND of_customer_target_and_target_dtl_weekly.of_svc_contract_sc_rfa_no = of_ap_tgt.sc_rfa_number
      --          AND of_customer_target_and_target_dtl_weekly.v_customer_opus_n_prospect_of_cust_grp_cd = of_ap_tgt.sc_rfa_customer_group_code
      --          AND of_customer_target_and_target_dtl_weekly.service_scope_group = of_ap_tgt.trade_code
      --          AND of_svc_scp.dominant_flag = case when of_ap_tgt.dominant_leg_flag = 'Y' then 'DOM' else 'N-DOM' end
      --          AND  of_customer_target_and_target_dtl_weekly.of_vsl_svc_lane_service_lane_code = of_ap_tgt.trunk_vvd_service_lane_code

      ;;

    sql_trigger_value: SELECT  CASE WHEN
            CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
            TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
            AS INT64)  < 150 THEN 150
            WHEN
            CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
            TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
            AS INT64)  < 510 THEN 510
            WHEN
            CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
            TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
            AS INT64) < 870 THEN 870
            WHEN
            CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
            TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
            AS INT64) < 1230 THEN 1230
            ELSE 150 END ;;
  }

  # NA landing page: disable view level drill_fields. It does not make any sense to have it here
  # drill_fields: [basic_details*]

  parameter: na_target_type {
    type:  string
    allowed_value: { value:"BUGGET_TEU"  label:"Budget (TEU)" }
    allowed_value: { value:"BUGGET_CM"   label:"Budget (CM)"  }
    allowed_value: { value:"CVA_TEU"     label:"CVA (TEU)"    }
    allowed_value: { value:"PLAN_TEU"    label:"Plan (TEU)"   }
    default_value: "BUGGET_TEU"
  }

  parameter: na_measure_type {
    type:  string
    allowed_value: { value:"CM"  label:"CM" }
    allowed_value: { value:"TEU" label:"TEU" }
    default_value: "TEU"
  }

  parameter: show_or_hide_cm {
    label: "Show / hide CM"
    type: string
    allowed_value: { value: "Show" }
    allowed_value: { value: "Hide" }
    default_value: "Show"
    suggest_persist_for: "24 hour"
  }

  parameter: show_or_hide_target {
    label: "Show / Hide Target"
    type: string
    allowed_value: { value: "Show" }
    allowed_value: { value: "Hide" }
    default_value: "Show"
    suggest_persist_for: "24 hour"
  }

  # dimension: is_tpa_user {
  #   label: "Is TPA user"
  #   type: string
  #   sql: case when (select count(*) FROM ONEFORCE.OF_USER WHERE REPLACE(Email, '.invalid', '') = REPLACE('{{ _user_attributes["email"] }}', '.invalid', '') AND IsActive = 'true' and (profile_name = 'Third Party Agent' or profile_name = 'TPA (Service Cloud) CCS' OR Profile_Name = 'TPA (Service Cloud) CCA')  > 0 then "Yes" else "No" end;;
  # }


  # Jack include bkg_sts_cd:w
  parameter: include_waitlisted_bkg {
    label: "Include Waitlisted Bkg"
    type: string
    allowed_value: { value: "Yes" }
    allowed_value: { value: "No" }
    default_value: "Yes"
  }

  #DCN-949
  dimension: is_one_quotation {
    label: "One Quote"
    type: string
    sql: COALESCE( ${TABLE}.is_one_quotation, 'No')  ;;
  }

  dimension: primary_key {
    primary_key: yes
    #hidden: yes
    type: string
    sql: CONCAT(${TABLE}.primary_key, ${record_type}) ;;
  }

  dimension: account_plan_sc_rfa_customer_group_code {
    hidden: yes
    type: string
    sql: ${TABLE}.account_plan_sc_rfa_customer_group_code ;;
    suggest_persist_for: "4 hour"
  }

  dimension: act_mty_pkup_scc_cd {
    type: string
    sql: ${TABLE}.act_mty_pkup_scc_cd ;;
  }

  dimension: act_mty_pkup_yd_cd {
    type: string
    sql: ${TABLE}.act_mty_pkup_yd_cd ;;
  }

  dimension: cust_nvo_fak_nac {
    type:  string
    label: "NVO: FAK/NAC"
    sql:  ${TABLE}.cust_nvo_fak_nac ;;
    suggest_persist_for: "24 hour"
  }

  dimension: cust_bco_fak_nac {
    type:  string
    label: "BCO/FAK/NAC"
    sql:  ${TABLE}.cust_bco_fak_nac ;;
    suggest_persist_for: "24 hour"
  }

  dimension: actual_cust_cd {
    type: string
    sql: ${TABLE}.actual_cust_cd ;;
  }

  dimension: actual_cust_nm {
    type: string
    sql: ${TABLE}.actual_cust_nm ;;
  }

  dimension: bkg_cgo_wgt {
    type: number
    sql: ${TABLE}.bkg_cgo_wgt ;;
  }

  dimension: bkg_mty_rtn_scc_cd {
    type: string
    sql: ${TABLE}.bkg_mty_rtn_scc_cd ;;
  }

  dimension: bkg_no {
    type: string
    sql: ${TABLE}.bkg_no ;;
  }

  dimension: bkg_ofc_cd {
    view_label: "Office Information"
    label: "bkg_office: Code"
    type: string
    sql: ${TABLE}.bkg_ofc_cd ;;
  }

  dimension: bkg_ofc_cnt_cd {
    view_label: "Office Information"
    label: "bkg_office: Country Code"
    type: string
    sql: ${TABLE}.bkg_ofc_cnt_cd ;;
  }

  dimension: bkg_ofc_cnt_nm {
    view_label: "Office Information"
    label: "bkg_office: Country Name"
    type: string
    sql: ${TABLE}.bkg_ofc_cnt_nm ;;
    hidden: yes
  }

  dimension: bkg_oft_rev {
    type: number
    sql: ${TABLE}.bkg_oft_rev ;;
  }

  dimension: bkg_sts_cd {
    view_label: "B/L Information"
    label: "Bkg Status Code"
    type: string
    sql: ${TABLE}.bkg_sts_cd ;;
  }

  parameter: target_selector {
    type: number
    allowed_value: {
      label: "100%"
      value: "1"
    }
    allowed_value: {
      label: "95%"
      value: "0.95"
    }
    allowed_value: {
      label: "90%"
      value: "0.9"
    }
    allowed_value: {
      label: "85%"
      value: "0.85"
    }
    allowed_value: {
      label: "80%"
      value: "0.8"
    }
    default_value: "1"
    suggest_persist_for: "24 hour"
  }

  dimension: teu {
    type: number
    sql:
      CASE WHEN ${record_type} = 'Target' THEN ${TABLE}.teu * {% parameter of_consolidated.target_selector %}
      ELSE ${TABLE}.teu
      END;;
    suggest_persist_for: "24 hour"
  }

  dimension: cgo_ntr_cd {
    type: string
    sql: ${TABLE}.cgo_ntr_cd ;;
  }

  dimension: cgo_ntr_nm {
    type: string
    sql: ${TABLE}.cgo_ntr_nm ;;
  }

  dimension: cif_fob_split_cd {
    label: "CIF/FOB"
    type: string
    sql: ${TABLE}.cif_fob_split_cd ;;
  }

  dimension: gsym_cif_fob {
    description: "CIF/FOB (G-SYM)"
    type: string
    sql:  CASE
          WHEN ${svc_scp_grp_cd} = 'EA' THEN
            CASE
            WHEN ${contract_office_country.country_code} = ${first_POL_country.country_code} THEN 'CIF'
            WHEN ${contract_office_country.country_code} = ${final_POL_country.country_code} THEN 'FOB'
            ELSE 'Others'
            END
          ELSE
            CASE
            WHEN ${of_cif_fob.cif_fob_div_desc} IS NULL THEN 'FOB'
            ELSE ${of_cif_fob.cif_fob_div_desc}
            END
          END ;;
    suggest_persist_for: "24 hour"

  }

  dimension: cm_amt2 {
    type: number
    sql:
      CASE
        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${TABLE}.cm_amt2
        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
        ELSE NULL
      END ;;
    suggest_persist_for: "24 hour"
  }

  dimension: cm_amt {
    type: number
    #NA dashboard to simplify the SQL
    sql: {% if    show_or_hide_cm._parameter_value == "'Show'"  %} ${TABLE}.cm_amt
           {% elsif show_or_hide_cm._parameter_value == "'Hide'"  %} NULL
           {% else  %} NULL
           {% endif %} ;;
      #sql:
      #CASE
      #  WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${TABLE}.cm_amt
      #  WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
      #  ELSE NULL
      #END ;;
      suggest_persist_for: "24 hour"
    }

    dimension: cm_amt_eppa {
      type: number
      sql: ${TABLE}.cm_amt_eppa;;
      suggest_persist_for: "15 minutes"
    }

    dimension: cm_amt_eppb {
      type: number
      sql: ${TABLE}.cm_amt_eppb;;
      suggest_persist_for: "15 minutes"
    }

    dimension: cmdt_cd {
      type: string
      sql: ${TABLE}.cmdt_cd ;;
    }

    dimension: cmdt_nm {
      type: string
      sql: ${TABLE}.cmdt_nm ;;
    }

    dimension: cnee_cust_cd {
      type: string
      sql: ${TABLE}.cnee_cust_cd ;;
    }

    dimension: cnee_cust_nm {
      type: string
      sql: ${TABLE}.cnee_cust_nm ;;
    }

    dimension: cntr {
      type: number
      sql: ${TABLE}.cntr ;;
    }

    dimension: cntr_qty {
      type: number
      sql: ${TABLE}.cntr_qty ;;
    }

    dimension: consolidated_cntr_tpsz {
      hidden: yes
      type: string
      sql: ${TABLE}.consolidated_cntr_tpsz ;;
    }

    dimension: consolidated_cnt_cust_cd {
      label: "Customer Code"
      # hidden: yes
      type: string
      sql: ${TABLE}.consolidated_cnt_cust_cd ;;
    }

    dimension: consolidated_cnt_cust_grp_cd {
      label: "Customer Group Code"
      # hidden: yes
      type: string
      sql: ${TABLE}.consolidated_cnt_cust_grp_cd ;;
    }

    dimension_group: cont_effective_dt {
      timeframes: [date]
      type: time
      datatype: datetime
      sql: ${TABLE}.cont_effective_dt ;;
    }

    dimension_group: cont_expiry_dt {
      timeframes: [date, raw]
      type: time
      datatype: datetime
      sql: ${TABLE}.cont_expiry_dt ;;
    }

    dimension_group: to_expire {
      type: duration
      sql_start: CURRENT_DATE() ;;
      sql_end: ${cont_expiry_dt_raw} ;;
    }

    dimension: expiry_indicator {
      type: string
      sql:
      CASE WHEN ${days_to_expire} is null then null
      WHEN ${days_to_expire} < 0 THEN 'Expired'
      WHEN ${days_to_expire} < 7 THEN '7 Days before expiration'
      WHEN ${days_to_expire} < 14 THEN '14 Days before expiration'
      WHEN ${days_to_expire} < 21 THEN '21 Days before expiration'
      ELSE 'Active'
      END
  ;;
    }

    dimension: cont_period_typ_cd {
      type: string
      sql: ${TABLE}.cont_period_typ_cd ;;
    }

    dimension: cont_period_typ_cd2 {
      label: "Contract Period Type Code"
      type: string
      sql: CASE ${cont_period_typ_cd}
         WHEN 'Long'   THEN 'L'
         WHEN 'Medium' THEN 'M'
         WHEN 'Short'  THEN 'S'
         ELSE ${cont_period_typ_cd} END
        ;;
    }

    dimension: cont_period_typ {
      type: string
      label: "Contract Period Type"
      sql: ${TABLE}.cont_period_typ ;;
      suggest_persist_for: "24 hour"
      suggestions: ["(Tariff)", "(Uncategorized)" , "Long" , "Medium" ,"Short"]
    }

    dimension: crm_if_flg {
      type: string
      sql: ${TABLE}.crm_if_flg ;;
    }

    dimension: ctrt_prop_ofc_cd {
      view_label: "Office Information"
      label: "Contract Office Code"
      type: string
      sql: ${TABLE}.ctrt_prop_ofc_cd ;;
      suggest_persist_for: "24 hour"
    }

    dimension: ctrt_prop_ofc_nm {
      view_label: "Office Information"
      label: "Contract Office Name"
      type: string
      sql: ${TABLE}.ctrt_prop_ofc_nm ;;
      hidden: yes
    }

    dimension: ctrt_prop_srep_eml {
      type: string
      sql: ${TABLE}.ctrt_prop_srep_eml ;;
    }

    dimension: ctrt_prop_srep_nm {
      type: string
      sql: Initcap(${TABLE}.ctrt_prop_srep_nm) ;;
    }

    dimension: ctrt_scp_srep_eml {
      type: string
      sql: ${TABLE}.ctrt_scp_srep_eml ;;
    }

    dimension: ctrt_scp_srep_nm {
      type: string
      sql: ${TABLE}.ctrt_scp_srep_nm ;;
    }

    # DCN-741 NA dashboard
    dimension: na_dashboard_sls_person {
      type: string
      sql: ${TABLE}.na_dashboard_sls_person ;;
    }

    dimension: ctrt_scp_srep_ofc_cd {
      view_label: "Office Information"
      type: string
      sql: ${TABLE}.ctrt_scp_srep_ofc_cd ;;
      suggest_persist_for: "24 hour"
    }

    dimension: ctrt_scp_srep_ofc_nm {
      view_label: "Office Information"
      type: string
      sql: ${TABLE}.ctrt_scp_srep_ofc_nm ;;
      suggest_persist_for: "24 hour"
    }

    dimension: dcgo_flg {
      type: string
      sql: ${TABLE}.dcgo_flg ;;
    }

    dimension: de_term_cd {
      type: string
      sql: ${TABLE}.de_term_cd ;;
    }

    dimension: del_cd {
      label: "DEL Code"
      type: string
      sql: ${TABLE}.del_cd ;;
    }

    dimension: del_cnt {
      type: string
      sql: ${TABLE}.del_cnt ;;
    }

    dimension: del_nm {
      type: string
      sql: ${TABLE}.del_nm ;;
    }

    dimension: dest_trns_svc_mod_cd {
      type: string
      sql: ${TABLE}.dest_trns_svc_mod_cd ;;
    }

    dimension: dominant_flg {
      label: "Dominant Flag"
      type: string
      sql: ${TABLE}.dominant_flg ;;
      suggest_persist_for: "24 hour"
      suggestions: ["DOM", "N-DOM"]
    }

    # dimension: dir_cd {
    #   type: string
    #   sql: ${TABLE}.dir_cd ;;
    # }

    dimension: ete_dys {
      type: number
      sql: ${TABLE}.ete_dys ;;
    }

    dimension: equipment_type {
      label: "Dry / Reefer"
      type: string
      sql:
      CASE
        WHEN ${consolidated_cntr_tpsz} LIKE 'R%' AND ${rd_cgo_flg} = 'N' THEN 'Live Reefer'
        WHEN ${consolidated_cntr_tpsz} LIKE 'R%' AND ${rd_cgo_flg} = 'Y' THEN 'Reefer as Dry'
        ELSE 'Dry'
      END ;;
    }

    dimension: cargo_type {
      label: "Cargo Type"
      type: string
      # NA landing dashboard: pushed the
      # sql:
      #   CASE WHEN ${record_type} = 'Booking' THEN
      #     CASE
      #       WHEN ${consolidated_cntr_tpsz} LIKE 'R%' AND ${rd_cgo_flg} = 'N' THEN 'Reefer'
      #       ELSE 'Dry'
      #     END
      #   ELSE NULL END ;;
      sql: ${TABLE}.cargo_type ;;
    }

    dimension: fi {
      type: number
      sql: ${TABLE}.fi ;;
    }

    dimension: final_pod_cd {
      type: string
      sql: ${TABLE}.final_pod_cd ;;
    }

    dimension: frt_term_cd {
      type: string
      sql: ${TABLE}.frt_term_cd ;;
    }

    dimension: frwd_cust_cd {
      type: string
      sql: ${TABLE}.frwd_cust_cd ;;
    }

    dimension: frwd_cust_nm {
      type: string
      sql: ${TABLE}.frwd_cust_nm ;;
    }

    dimension: ib_mty_pa_amt {
      type: number
      sql: ${TABLE}.ib_mty_pa_amt ;;
    }

    dimension: ib_mty_pa_amt2 {
      type: number
      sql: ${TABLE}.ib_mty_pa_amt2 ;;
    }

    dimension: ioc_cd {
      type: string
      sql: ${TABLE}.ioc_cd ;;
    }

    dimension: ld {
      type: number
      sql: ${TABLE}.ld ;;
    }

    dimension: line_code1 {
      label: "First Lane"
      type: string
      sql: ${TABLE}.line_code1 ;;
    }

    dimension: lst_vvd_cd {
      type: string
      sql: ${TABLE}.lst_vvd_cd ;;
    }

    dimension: month {
      type: number
      sql: ${TABLE}.month ;;
      suggest_persist_for: "24 hour"
    }

    dimension: mty_pkup_scc_cd {
      type: string
      sql: ${TABLE}.mty_pkup_scc_cd ;;
    }

    dimension: mty_rtn_scc_cd {
      type: string
      sql: ${TABLE}.mty_rtn_scc_cd ;;
    }

    dimension: mty_rtn_yd_cd {
      type: string
      sql: ${TABLE}.mty_rtn_yd_cd ;;
    }

    dimension: n1st_pod_cd {
      type: string
      sql: ${TABLE}.n1st_pod_cd ;;
    }

    dimension: n1st_pol_cd {
      type: string
      sql: ${TABLE}.n1st_pol_cd ;;
    }

    dimension: ntlt_grp_nm {
      type: string
      sql: ${TABLE}.ntlt_grp_nm ;;
    }

    dimension: ob_mty_pa_amt {
      type: number
      sql: ${TABLE}.ob_mty_pa_amt ;;
    }

    dimension: ob_mty_pa_amt2 {
      type: number
      sql: ${TABLE}.ob_mty_pa_amt2 ;;
    }

    dimension: ob_ofc_nm {
      view_label: "Office Information"
      label: "loading_sales_rep_office: Code"
      type: string
      sql: ${TABLE}.ob_ofc_nm ;;
      hidden: yes
    }

    dimension: ob_sls_ofc_cd {
      view_label: "Office Information"
      label: "loading_sales_rep_office: Code"
      type: string
      sql: ${TABLE}.ob_sls_ofc_cd ;;
    }

    dimension: ob_srep_cd {
      type: string
      sql: ${TABLE}.ob_srep_cd ;;
    }

    dimension: ob_srep_eml {
      type: string
      sql: ${TABLE}.ob_srep_eml ;;
    }

    dimension: ob_srep_nm {
      type: string
      sql: ${TABLE}.ob_srep_nm ;;
    }

    dimension: org_trns_svc_mod_cd {
      type: string
      sql: ${TABLE}.org_trns_svc_mod_cd ;;
    }

    dimension: ori_cnt {
      type: string
      sql: ${TABLE}.ori_cnt ;;
    }

    dimension: pod_loc_cd {
      type: string
      sql: ${TABLE}.pod_loc_cd ;;
    }

    dimension: pod_loc_nm {
      type: string
      sql: ${TABLE}.pod_loc_nm ;;
    }

    dimension: pol_loc_cd {
      type: string
      sql: ${TABLE}.pol_loc_cd ;;
    }

    dimension: pol_loc_nm {
      type: string
      sql: ${TABLE}.pol_loc_nm ;;
    }

    dimension: por_cd {
      label: "POR Code"
      type: string
      sql: ${TABLE}.por_cd ;;
    }

    dimension: por_nm {
      type: string
      sql: ${TABLE}.por_nm ;;
    }

    dimension: port_pair {
      type: string
      sql: concat(${n1st_pol_cd}, ' > ', ${n1st_pod_cd})  ;;
    }

    # dimension: quarter {
    #  type: number
    #  sql: ${TABLE}.quarter ;;
    # }

    dimension: ram {
      type: string
      sql: ${TABLE}.ram ;;
    }

    dimension: rev_vvd {
      type: string
      sql: ${TABLE}.rev_vvd ;;
    }

    dimension: rcv_term_cd {
      type: string
      sql: ${TABLE}.rcv_term_cd ;;
    }

    dimension: rd_cgo_flg {
      type: string
      sql: ${TABLE}.rd_cgo_flg ;;
    }

    dimension: record_type {
      type: string
      sql: ${TABLE}.record_type ;;
    }

    dimension: sc_rfa_ctrt_tp_nm {
      type: string
      sql: ${TABLE}.sc_rfa_ctrt_tp_nm ;;
    }

    dimension: sc_rfa_sls_rep_ofc_cnt_cd {
      view_label: "Office Information"
      label: "sc_rfa_customer_sales_rep_office: Country Code"
      type: string
      sql: ${TABLE}.sc_rfa_sls_rep_ofc_cnt_cd ;;
    }

    dimension: sc_rfa_sls_rep_ofc_cnt_nm {
      view_label: "Office Information"
      label: "sc_rfa_customer_sales_rep_office: Country Name"
      type: string
      sql: ${TABLE}.sc_rfa_sls_rep_ofc_cnt_nm ;;
      hidden: yes
    }

    dimension: shpr_cust_cd {
      type: string
      sql: ${TABLE}.shpr_cust_cd ;;
    }

    dimension: shpr_cust_nm {
      type: string
      sql: ${TABLE}.shpr_cust_nm ;;
    }

    dimension: shpr_cust_cd_and_nm {
      type: string
      sql: concat(${shpr_cust_cd}, " - ", ${shpr_cust_nm}) ;;
    }

    dimension: slane_cd {
      label: "Service Lane (Rev)"
      type: string
      sql: ${TABLE}.slane_cd ;;
      suggest_persist_for: "24 hour"
    }

    dimension: sub_trd_cd {
      type: string
      sql: ${TABLE}.sub_trd_cd ;;
    }

    dimension: svc_cont_no {
      label: "Svc/RFA No"
      type: string
      sql: ${TABLE}.svc_cont_no ;;
      suggest_persist_for: "24 hour"
    }

    dimension: svc_scp_cd {
      type: string
      sql: ${TABLE}.svc_scp_cd ;;
      drill_fields:[svc_scp_grp_cd, port_pair]  #Add by Wallace (20210721)
      suggest_persist_for: "24 hour"
    }

    dimension: svc_scp_grp_cd {
      label : "Service Group Code"
      type: string
      sql: ${TABLE}.svc_scp_grp_cd ;;
      drill_fields:[svc_scp_cd, port_pair]  #Add by Wallace (20210721)
      suggest_persist_for: "24 hour"
    }

    dimension: trd_cd {
      type: string
      sql: ${TABLE}.trd_cd ;;
    }

    dimension: trade_group {
      type: string
      sql:
      CASE
        WHEN ${svc_scp_grp_cd} = 'EA' THEN 'AS/OC'
        WHEN ${svc_scp_grp_cd} = 'OC' THEN 'AS/OC'
        WHEN ${svc_scp_grp_cd} = 'WA' THEN 'AS/OC'
        WHEN ${svc_scp_grp_cd} = 'ME' THEN 'Asia / MED'
        WHEN ${svc_scp_grp_cd} = 'NE' THEN 'Asia / NE'
        WHEN ${svc_scp_grp_cd} = 'LN' THEN 'LA/AF'
        WHEN ${svc_scp_grp_cd} = 'FW' THEN 'LA/AF'
        WHEN ${svc_scp_grp_cd} = 'EF' THEN 'LA/AF'
        WHEN ${svc_scp_grp_cd} = 'FE' THEN 'LA/AF'
        WHEN ${svc_scp_grp_cd} = 'LW' THEN 'LA/AF'
        WHEN ${svc_scp_grp_cd} = 'LE' THEN 'LA/AF'
        WHEN ${svc_scp_grp_cd} = 'OT' THEN 'OT'
        WHEN ${svc_scp_grp_cd} = 'TA' THEN 'TAS'
        WHEN ${svc_scp_grp_cd} = 'TP' THEN 'TP'
      END
    ;;
    }

    dimension: trade_group_and_dom_flag {
      type: string
      sql: concat(${trade_group}, " - ", ${dominant_flg}) ;;
    }

    dimension: week {
      type: number
      sql: ${TABLE}.week ;;
      suggest_persist_for: "24 hour"
    }

    #NA dashbound <start>
    dimension: bound {
      type: string
      sql: ${TABLE}.bound ;;
    }

    dimension: na_trade_type_order {
      type: number
      sql: CASE ${TABLE}.na_trade_type
           WHEN 'Latin'         THEN 4
           WHEN 'TA Non Domi.'  THEN 3
           WHEN 'TP Domi.'      THEN 1
           WHEN 'TP Non Domi.'  THEN 2
           ELSE 5 END;;
    }

    dimension: na_trade_type {
      label: "Service Scope Group"
      order_by_field: na_trade_type_order
      type: string
      sql: ${TABLE}.na_trade_type ;;
    }

    measure: total_booking_teu_fmt {
      label: "Total Booking TEU (Formatted)"
      type: number
      sql:  ${total_booking_teu};;
      value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\" "
    }

    measure: total_target_teu_fmt {
      label: "Total Target TEU (Formatted)"
      type: number
      sql:  ${total_target_teu};;
      value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\" "
      link: {
        label: "Drill into targets and achivement details"
        url: "{{ total_target_teu_drill_into_raw_data._link }}"
      }
      drill_fields: []
    }

    measure: total_target_teu_drill_into_raw_data {
      type: number
      sql: ${total_target_teu} ;;
      value_format_name: decimal_0
    }

    measure: total_plan_teu_fmt {
      label: "Total Plan TEU (Formatted)"
      type: number
      sql:  ${total_plan_teu};;
      value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\" "
    }


    # dimension: year {
    #  type: number
    #  sql: ${TABLE}.year ;;
    # }

    #dimension: planned_bkg {
    #  type:  string
    #  sql:  ${TABLE}.planned_bkg;;
    #}


    #dimension: is_planned_bkg2 {
    #  type:  string
    #  sql: case
    #       when ${record_type} not in ('Booking','Actual', 'Target') then  'Yes'
    #       else case
    #            when {% parameter planbkg_pref %} = 'Yes' and ${planned_bkg} is not null then 'Yes'
    #            when {% parameter planbkg_pref %} = 'No' and ${planned_bkg} is null then 'Yes'
    #            else 'No'
    #            end
    #       end;;
    #  }

    #dimension: is_planned_bkg {
    #  type: yesno
    #  sql: ${TABLE}.planned_bkg is not null ;;
    #}

    #parameter: planbkg_pref {
    #  type: string
    #  allowed_value: {
    #    label: "AP Plan"
    #    value: "Yes"
    #  }
    #  allowed_value: {
    #    label: "Non-Plan"
    #    value: "No"
    #  }
    #}

    #measure: showhide_per_bkgpref {
    #  type: max
    #  sql: case when {% parameter planbkg_pref %} = "No" then "Show"
    #            when {% parameter planbkg_pref %} = "Yes" and ${record_type} = "Plan" and ${teu} <= 0 then "Hide"
    #            when ${record_type} <> "Plan" then "Hide"
    #            else "Show"
    #            end ;;

    #}

    measure: count {
      type: count
    }

    measure: average_teu {
      type: average
      sql: ${teu} ;;
      value_format_name: decimal_2
      drill_fields: [basic_details*, average_teu]
    }

    measure: average_cm_amt {
      type: average
      sql:
      CASE
        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
        ELSE NULL
      END ;;
      value_format_name: decimal_2
      drill_fields: [basic_details*, total_cm_amt]
    }

    ## Add on 21-Jul to create 4 more dimensions for SR0139777 4b >>

    measure: cm_per_teu_dom_raw {
      label: "CM per TEU (DOM)"
      type: number
      sql:  ${total_cm_amt_dom} / NULLIF(${total_teu_dom}, 0) ;;
      hidden: yes
    }

    measure: cm_per_teu_dom_raw_b {
      label: "CM per TEU Booking (DOM)"
      type: number
      sql:  ${total_cm_amt_dom_b} / NULLIF(${total_teu_dom_b}, 0) ;;
      hidden: yes
    }

    measure: cm_per_teu_dom {
      type: number
      sql:
      CASE
        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_teu_dom_raw}
        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
        ELSE NULL
      END ;;
      value_format_name: usd_0
      drill_fields: [basic_details*, total_cm_amt_dom, total_teu_dom, cm_per_teu_dom]
    }

    measure: cm_per_teu_dom_b {
      type: number
      sql:
      CASE
        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_teu_dom_raw_b}
        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
        ELSE NULL
      END ;;
      value_format_name: usd_0
      drill_fields: [basic_details*, total_cm_amt_dom_b, total_teu_dom_b, cm_per_teu_dom_b]
    }

    measure: cm_per_teu_Ndom_raw {
      label: "CM per TEU (N-DOM)"
      type: number
      sql:  ${total_cm_amt_Ndom} / NULLIF(${total_teu_Ndom}, 0) ;;
      hidden: yes
    }

    measure: cm_per_teu_Ndom_raw_b {
      label: "CM per TEU Booking (N-DOM)"
      type: number
      sql:  ${total_cm_amt_Ndom_b} / NULLIF(${total_teu_Ndom_b}, 0) ;;
      hidden: yes
    }


    measure: cm_per_teu_Ndom {
      type: number
      sql:
      CASE
        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_teu_Ndom_raw}
        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
        ELSE NULL
      END ;;
      value_format_name: usd_0
      drill_fields: [basic_details*, total_cm_amt_Ndom, total_teu_Ndom, cm_per_teu_Ndom]
    }

    measure: cm_per_teu_Ndom_b {
      type: number
      sql:
      CASE
        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_teu_Ndom_raw_b}
        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
        ELSE NULL
      END ;;
      value_format_name: usd_0
      drill_fields: [basic_details*, total_cm_amt_Ndom_b, total_teu_Ndom_b, cm_per_teu_Ndom_b]
    }


    measure: total_teu_dom {
      type: sum
      sql: ${teu} ;;
      filters: [dominant_flg: "DOM", record_type: "Actual"]
      value_format_name: decimal_0
      drill_fields: [basic_details*, total_teu_dom]
    }

    measure: total_teu_dom_b {
      type: sum

      #waitlisted_yesno|jack-2022-4-10|before<<
      #sql: ${teu} ;;
      #waitlisted_yesno|jack-2022-4-10|before>>

      #waitlisted_yesno|jack-2022-4-10|after<<
      sql:
            {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
              ${teu}
            {% else %}
              CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
            {% endif %};;
    #waitlisted_yesno|jack-2022-4-10|after>>

        filters: [dominant_flg: "DOM", record_type: "Booking"]
        value_format_name: decimal_0
        drill_fields: [basic_details*, total_teu_dom]
      }


      measure: total_teu_Ndom {
        type: sum
        sql: ${teu} ;;
        filters: [dominant_flg: "N-DOM", record_type: "Actual"]
        value_format_name: decimal_0
        drill_fields: [basic_details*, total_teu_Ndom]
      }

      measure: total_teu_Ndom_b {
        type: sum

        #waitlisted_yesno|jack-2022-4-10|before<<
        #sql: ${teu} ;;
        #waitlisted_yesno|jack-2022-4-10|before>>

        #waitlisted_yesno|jack-2022-4-10|after<<
        sql:
            {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
              ${teu}
            {% else %}
              CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
            {% endif %};;
    #waitlisted_yesno|jack-2022-4-10|after>>

          filters: [dominant_flg: "N-DOM", record_type: "Booking"]
          value_format_name: decimal_0
          drill_fields: [basic_details*, total_teu_Ndom]
        }

        measure: total_cm_amt_dom_raw {
          label: "Total CM Amount (DOM)"
          type: sum
          sql:
                CASE
                  WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
                  WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                  ELSE NULL
                END ;;
          filters: [dominant_flg: "DOM" , record_type: "Actual"]
          hidden: yes
        }

        measure: total_cm_amt_dom_raw_b {
          label: "Total CM Amount Booking (DOM)"
          type: sum

          #waitlisted_yesno|jack-2022-4-10|before<<
          #sql:
          #  CASE
          #    WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
          #    WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
          #    ELSE NULL
          #  END ;;
          #waitlisted_yesno|jack-2022-4-10|before>>

          #waitlisted_yesno|jack-2022-4-10|after<<
          sql:
                CASE
                  WHEN {% parameter show_or_hide_cm %} = 'Show' THEN
                       {% if include_waitlisted_bkg._parameter_value == "'Yes'" %} ${cm_amt}
                       {% else %} CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                       {% endif %}
                  WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                  ELSE NULL
                END ;;
              #waitlisted_yesno|jack-2022-4-10|after>>

            filters: [dominant_flg: "DOM" , record_type: "Booking"]
            hidden: yes
          }

          measure: total_cm_amt_Ndom_raw {
            label: "Total CM Amount (N-DOM)"
            type: sum
            sql:
                  CASE
                    WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
                    WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                    ELSE NULL
                  END ;;
            filters: [dominant_flg: "N-DOM", record_type: "Actual"]
            hidden: yes
          }

          measure: total_cm_amt_Ndom_raw_b {
            label: "Total CM Amount Booking (N-DOM)"
            type: sum
            #waitlisted_yesno|jack-2022-4-10|before<<
            #sql:
            #  CASE
            #    WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
            #    WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
            #    ELSE NULL
            #  END ;;
            #waitlisted_yesno|jack-2022-4-10|before>>

            #waitlisted_yesno|jack-2022-4-10|after<<
            sql:
                  CASE
                    WHEN {% parameter show_or_hide_cm %} = 'Show' THEN
                        {% if include_waitlisted_bkg._parameter_value == "'Yes'" %} ${cm_amt}
                        {% else %} CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                        {% endif %}
                    WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                  ELSE NULL
                  END ;;
                #waitlisted_yesno|jack-2022-4-10|after>>

              filters: [dominant_flg: "N-DOM", record_type: "Booking"]
              hidden: yes
            }


            measure: total_cm_amt_dom {
              type: number
              sql:
                    CASE
                      WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_cm_amt_dom_raw}
                      WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                      ELSE NULL
                    END ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_cm_amt_dom_raw]
            }

            measure: total_cm_amt_dom_b {
              type: number
              sql:
                    CASE
                      WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_cm_amt_dom_raw_b}
                      WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                      ELSE NULL
                    END ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_cm_amt_dom_raw_b]
            }


            measure: total_cm_amt_Ndom {
              type: number
              sql:
                    CASE
                      WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_cm_amt_Ndom_raw}
                      WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                      ELSE NULL
                    END ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_cm_amt_Ndom_raw]
            }

            measure: total_cm_amt_Ndom_b {
              type: number
              sql:
                    CASE
                      WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_cm_amt_Ndom_raw_b}
                      WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                      ELSE NULL
                    END ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_cm_amt_Ndom_raw_b]
            }

            ## << end add on 21-Jul to create 4 more dimensions for SR0139777 4b

            measure: cm_per_metric_ton_raw {
              label: "CM per Metric Ton"
              type: number
              sql:  ${total_actual_cm_amt} / NULLIF((${total_actual_cgo_wgt} / 1000), 0) ;;
              hidden: yes
            }

            measure: cm_per_metric_ton_raw_b {
              label: "CM per Metric Ton Booking"
              type: number
              sql:  ${total_actual_cm_amt_b} / NULLIF((${total_actual_cgo_wgt_b} / 1000), 0) ;;
              hidden: yes
            }

            measure: cm_per_metric_ton {
              type: number
              sql:
                    CASE
                      WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_metric_ton_raw}
                      WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                      ELSE NULL
                    END ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_weight, cm_per_metric_ton]
            }

            measure: cm_per_metric_ton_b {
              type: number
              sql:
                    CASE
                      WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_metric_ton_raw_b}
                      WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                      ELSE NULL
                    END ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt_b, total_weight, cm_per_metric_ton_b]
            }


            measure: cm_per_teu_raw {
              label: "Actual CM per TEU"
              type: number
              sql:  ${total_actual_cm_amt} / NULLIF(${total_actual_teu}, 0) ;;
              ## hidden: Yes
              value_format: "$#;($#)"
            }

            measure: cm_per_teu_raw_b {
              label: "Booking CM per TEU"
              type: number

              #waitlisted_yesno|jack-2022-4-10|before<<
              #sql:  ${total_actual_cm_amt} / NULLIF(${total_booking_teu}, 0) ;;
              #waitlisted_yesno|jack-2022-4-10|before>>

              #waitlisted_yesno|jack-2022-4-10|after<<
              sql:  ${total_actual_cm_amt_b} / NULLIF(${total_booking_teu}, 0) ;;
              #waitlisted_yesno|jack-2022-4-10|after>>

              ## hidden: Yes
              value_format: "$#,##0;($#,##0)"
            }

            measure: cm_per_teu {
              type: number
              # fix-for-error-about-numeric-1-29
              #sql:
              #CASE
              #  WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_teu_raw}
              #  WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
              #  ELSE NULL
              #END ;;
              # fix-for-error-about-numeric-1-29
              sql:
                    {% if show_or_hide_cm._parameter_value == "'Show'" %}
                      ${cm_per_teu_raw}
                    {% else %}
                      NULL
                    {% endif %};;

              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_actual_teu, cm_per_teu]
            }

            measure: cm_per_teu_b {
              type: number
              sql:
                    CASE
                      WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_teu_raw_b}
                      WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                      ELSE NULL
                    END ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt_b, total_booking_teu, cm_per_teu_b]
            }

            #20210721 - add by Wallace - begin

            measure: target_cm_per_teu_raw {
              label: "target CM per TEU"
              type: number
              sql:  ${total_target_cm_amt} / NULLIF(${total_target_teu}, 0) ;;
              hidden: yes
            }

            measure: target_cm_per_teu {
              type: number
              sql:
                    CASE
                      WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${target_cm_per_teu_raw}
                      WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                      ELSE NULL
                    END ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_target_cm_amt, total_target_teu, target_cm_per_teu]
            }
            #20210721 - add by Wallace - end

            measure: cm_per_teu_nac {
              type: number
              sql:  ${total_actual_cm_amt_nac} / NULLIF(${total_actual_teu_nac},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_actual_teu, cm_per_teu]
            }

            measure: cm_per_teu_nac_b {
              type: number
              sql:  ${total_actual_cm_amt_nac_b} / NULLIF(${total_actual_teu_nac_b},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt_b, total_booking_teu, cm_per_teu_b]
            }

            measure: cm_per_teu_fak {
              type: number
              sql:  ${total_actual_cm_amt_fak} / NULLIF(${total_actual_teu_fak},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_actual_teu, cm_per_teu]
            }

            measure: cm_per_teu_fak_b {
              type: number
              sql:  ${total_actual_cm_amt_fak_b} / NULLIF(${total_actual_teu_fak_b},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt_b, total_booking_teu, cm_per_teu_b]
            }

            measure: cm_per_teu_long {
              type: number
              sql:  ${total_actual_cm_amt_long} / NULLIF(${total_actual_teu_long},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_actual_teu, cm_per_teu]
            }

            measure: cm_per_teu_long_b {
              type: number
              sql:  ${total_actual_cm_amt_long_b} / NULLIF(${total_actual_teu_long_b},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_booking_teu, cm_per_teu_b]
            }

            measure: cm_per_teu_medium {
              type: number
              sql:  ${total_actual_cm_amt_medium} / NULLIF(${total_actual_teu_medium},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_actual_teu, cm_per_teu]
            }

            measure: cm_per_teu_medium_b {
              type: number
              sql:  ${total_actual_cm_amt_medium_b} / NULLIF(${total_actual_teu_medium_b},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt_b, total_booking_teu, cm_per_teu_b]
            }

            measure: cm_per_teu_short {
              type: number
              sql:  ${total_actual_cm_amt_short} / NULLIF(${total_actual_teu_short},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_actual_teu, cm_per_teu]
            }

            measure: cm_per_teu_short_b {
              type: number
              sql:  ${total_actual_cm_amt_short_b} / NULLIF(${total_actual_teu_short_b},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt_b, total_booking_teu, cm_per_teu_b]
            }

            measure: cm_per_teu_tariff {
              type: number
              sql:  ${total_actual_cm_amt_tariff} / NULLIF(${total_actual_teu_tariff},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_actual_teu, cm_per_teu]
            }

            measure: cm_per_teu_tariff_b {
              type: number
              sql:  ${total_actual_cm_amt_tariff_b} / NULLIF(${total_actual_teu_tariff_b},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt_b, total_booking_teu, cm_per_teu_b]
            }

            measure: cm_per_teu_uncategorized {
              type: number
              sql:  ${total_actual_cm_amt_uncategoried} / NULLIF(${total_actual_teu_uncategorized},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt, total_actual_teu, cm_per_teu]
            }

            measure: cm_per_teu_uncategorized_b {
              type: number
              sql:  ${total_actual_cm_amt_uncategoried_b} / NULLIF(${total_actual_teu_uncategorized_b},0) ;;
              value_format_name: usd_0
              drill_fields: [basic_details*, total_actual_cm_amt_b, total_booking_teu, cm_per_teu_b]
            }

            measure: deviation {
              type: number
              sql: ${total_booking_teu} - ${total_plan_teu} ;;
              value_format_name: decimal_0
              drill_fields: [basic_details*, total_booking_teu, total_plan_teu, deviation]
            }


            measure: percent_of_plan {
              view_label: "Plan %"
              type: number
              sql: ${total_booking_teu} / NULLIF(${total_plan_teu}, 0) ;;
              # sql: case when {% parameter planbkg_pref %} = 'No' then  0 else  ${total_booking_teu} / NULLIF(${total_plan_teu}, 0) end ;;

              #sql:CASE WHEN ${total_plan_teu} <= ${total_booking_teu}
              #   THEN ${total_booking_teu} / NULLIF(${total_plan_teu}, 0)
              #   ELSE (${total_booking_teu}/NULLIF(${total_plan_teu}, 0))
              #   END ;;
              value_format_name: percent_0
              drill_fields: [basic_details*, total_booking_teu, total_plan_teu, percent_of_plan]
            }

            measure: total_booking_teu {
              label: "Total Booking TEU"
              type: sum
              #waitlisted_yesno|jack-2022-4-10|before<<
              #sql: ${teu} ;;
              #waitlisted_yesno|jack-2022-4-10|before>>
              #waitlisted_yesno|jack-2022-4-10|after<<
              sql:
                          {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                            ${teu}
                          {% else %}
                            CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                          {% endif %};;
                    #waitlisted_yesno|jack-2022-4-10|after>>
                filters: [record_type: "Booking"]
                value_format_name: decimal_0
                drill_fields: [basic_details*, total_booking_teu]
              }

              #Jack DCN-484 : start

              measure: total_booking_teu_till_last_complete_mth {
                label: "Total Booking TEU - till last complete mth"
                type: sum

                #waitlisted_yesno|jack-2022-4-10|before<<
                #sql: ${teu} ;;
                #waitlisted_yesno|jack-2022-4-10|before>>

                #waitlisted_yesno|jack-2022-4-10|after<<
                sql:
                        {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                          ${teu}
                        {% else %}
                          CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                        {% endif %};;
                    #waitlisted_yesno|jack-2022-4-10|after>>

                  filters: [record_type: "Booking", of_sales_week_master.is_til_last_completed_month_one_sided: "yes"]
                  value_format_name: decimal_0
                  drill_fields: [basic_details*, total_booking_teu]
                }

                measure: total_actual_cm_amt_raw_b_till_last_complete_mth {
                  type: sum

                  sql:
                        CASE
                          WHEN {% parameter show_or_hide_cm %} = 'Show' THEN
                               {% if include_waitlisted_bkg._parameter_value == "'Yes'" %} ${cm_amt}
                               {% else %} CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                               {% endif %}
                          WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                          ELSE NULL
                        END ;;

                  filters: [record_type: "Booking", of_sales_week_master.is_til_last_completed_month_one_sided: "yes"]
                  hidden: yes
                }

                measure: total_actual_cm_amt_b_till_last_complete_mth {
                  type: number
                  sql:
                        CASE
                          WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_actual_cm_amt_raw_b_till_last_complete_mth}
                          WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                          ELSE NULL
                        END ;;
                  value_format_name: usd_0
                  drill_fields: [basic_details*, total_actual_cm_amt_b_till_last_complete_mth]
                }

                measure: total_actual_cgo_wgt_b_till_last_complete_mth {
                  type: sum
                  sql:
                          {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                              ${bkg_cgo_wgt}
                          {% else %}
                              CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${bkg_cgo_wgt} END
                          {% endif %};;

                  value_format_name: decimal_0
                  filters: [record_type: "Booking", of_sales_week_master.is_til_last_completed_month_one_sided: "yes"]
                  drill_fields: [basic_details*, total_actual_cgo_wgt_b_till_last_complete_mth]
                }

                measure: cm_per_metric_ton_raw_b_till_last_complete_mth {
                  label: "CM per Metric Ton Booking - till last complete mth"
                  type: number
                  sql:  ${total_actual_cm_amt_b_till_last_complete_mth} / NULLIF((${total_actual_cgo_wgt_b_till_last_complete_mth} / 1000), 0) ;;
                  hidden: yes
                }

                measure: cm_per_metric_ton_b_till_last_complete_mth {
                  type: number
                  sql:
                        CASE
                          WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_metric_ton_raw_b_till_last_complete_mth}
                          WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                          ELSE NULL
                        END ;;
                  value_format_name: usd_0
                  drill_fields: [basic_details*, total_actual_cm_amt_b_till_last_complete_mth, total_weight, cm_per_metric_ton_b_till_last_complete_mth]
                }

                measure: cm_per_teu_raw_b_till_last_complete_mth {
                  label: "Booking CM per TEU - till last complete mth"
                  type: number
                  sql:  ${total_actual_cm_amt_b_till_last_complete_mth} / NULLIF(${total_booking_teu_till_last_complete_mth}, 0) ;;
                  value_format: "$#;($#)"
                }

                measure: cm_per_teu_b_till_last_complete_mth {
                  type: number
                  sql:
                        CASE
                          WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_per_teu_raw_b_till_last_complete_mth}
                          WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                          ELSE NULL
                        END ;;
                  value_format_name: usd_0
                  drill_fields: [basic_details*, total_actual_cm_amt_b_till_last_complete_mth, total_booking_teu_till_last_complete_mth, cm_per_teu_b_till_last_complete_mth]
                }

                measure: total_target_teu_till_last_complete_mth {
                  type: sum
                  label: "Total Target TEU - till last complete mth"
                  #sql: ${teu} ;;
                  sql:
                        CASE
                          WHEN {% parameter show_or_hide_target %} = 'Show' THEN ${teu}
                          WHEN {% parameter show_or_hide_target %} = 'Hide' THEN NULL
                          ELSE  ${teu}
                        END ;;
                  filters: [record_type: "Target", of_sales_week_master.is_til_last_completed_month_one_sided: "yes"]
                  value_format_name: decimal_0
                  drill_fields: [basic_details*, total_target_teu]
                }

                measure: teu_achievement_till_last_complete_mth {
                  type: number
                  sql: ${total_booking_teu_till_last_complete_mth} / NULLIF(${total_target_teu_till_last_complete_mth},0) ;;
                  value_format_name: percent_0
                  drill_fields: [basic_details*, total_actual_teu, total_target_teu, teu_achievement]
                }

                #Jack DCN-484 : end


                measure: teu_achievement {
                  type: number
                  sql: ${total_actual_teu} / NULLIF(${total_target_teu},0) ;;
                  value_format_name: percent_0
                  drill_fields: [basic_details*, total_actual_teu, total_target_teu, teu_achievement]
                }

                measure: teu_achievement_b {
                  label: "Achievement (TEU)"
                  type: number
                  sql: ${total_booking_teu} / NULLIF(${total_target_teu},0) ;;
                  value_format_name: percent_0
                  drill_fields: [basic_details*, total_booking_teu, total_target_teu, teu_achievement_b]
                }

                measure: total_cm_amt_eppa_raw {
                  type: sum
                  sql:${cm_amt_eppa} ;;
                }

                measure: total_cm_amt_eppb_raw {
                  type: sum
                  sql:${cm_amt_eppb} ;;
                }

                measure: total_actual_cm_amt_nac {
                  type: sum
                  sql:${cm_amt} ;;
                  filters: [record_type: "Actual", cust_nvo_fak_nac: "NAC"]
                  hidden: yes
                }

                measure: total_actual_cm_amt_nac_b {
                  type: sum

                  #waitlisted_yesno|jack-2022-4-10|before<<
                  #sql: ${cm_amt} ;;
                  #waitlisted_yesno|jack-2022-4-10|before>>

                  #waitlisted_yesno|jack-2022-4-10|after<<
                  sql:
                        {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                          ${cm_amt}
                        {% else %}
                          CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                        {% endif %};;
                      #waitlisted_yesno|jack-2022-4-10|after>>

                    filters: [record_type: "Booking", cust_nvo_fak_nac: "NAC"]
                    hidden: yes
                  }

                  measure: total_actual_cm_amt_fak {
                    type: sum
                    sql:${cm_amt} ;;
                    filters: [record_type: "Actual", cust_nvo_fak_nac: "FAK"]
                    hidden: yes
                  }

                  measure: total_actual_cm_amt_fak_b {
                    type: sum

                    #waitlisted_yesno|jack-2022-4-10|before<<
                    #sql: ${cm_amt} ;;
                    #waitlisted_yesno|jack-2022-4-10|before>>

                    #waitlisted_yesno|jack-2022-4-10|after<<
                    sql:
                          {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                            ${cm_amt}
                          {% else %}
                            CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                          {% endif %};;
                        #waitlisted_yesno|jack-2022-4-10|after>>

                      filters: [record_type: "Booking", cust_nvo_fak_nac: "FAK"]
                      hidden: yes
                    }

                    measure: total_actual_cm_amt_long {
                      label: "Total Actual CM Amt - Long"
                      type: sum
                      sql:${cm_amt} ;;
                      filters: [record_type: "Actual", cont_period_typ: "Long"]
                      value_format_name: usd_0
                      #hidden: yes
                    }

                    measure: total_actual_cm_amt_long_b {
                      label: "Total Actual CM Amt Booking - Long"
                      type: sum

                      #waitlisted_yesno|jack-2022-4-10|before<<
                      #sql: ${cm_amt} ;;
                      #waitlisted_yesno|jack-2022-4-10|before>>

                      #waitlisted_yesno|jack-2022-4-10|after<<
                      sql:
                            {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                              ${cm_amt}
                            {% else %}
                              CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                            {% endif %};;
                          #waitlisted_yesno|jack-2022-4-10|after>>

                        filters: [record_type: "Booking", cont_period_typ: "Long"]
                        value_format_name: usd_0
                        #hidden: yes
                      }

                      measure: total_actual_cm_amt_medium {
                        label: "Total Actual CM Amt - Medium"
                        type: sum
                        sql:${cm_amt} ;;
                        filters: [record_type: "Actual", cont_period_typ: "Medium"]
                        value_format_name: usd_0
                        #hidden: yes
                      }

                      measure: total_actual_cm_amt_medium_b {
                        label: "Total Actual CM Amt Booking - Medium"
                        type: sum

                        #waitlisted_yesno|jack-2022-4-10|before<<
                        #sql: ${cm_amt} ;;
                        #waitlisted_yesno|jack-2022-4-10|before>>

                        #waitlisted_yesno|jack-2022-4-10|after<<
                        sql:
                              {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                ${cm_amt}
                              {% else %}
                                CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                              {% endif %};;
                            #waitlisted_yesno|jack-2022-4-10|after>>

                          filters: [record_type: "Booking", cont_period_typ: "Medium"]
                          value_format_name: usd_0
                          #hidden: yes
                        }

                        measure: total_actual_cm_amt_short {
                          label: "Total Actual CM Amt - Short"
                          type: sum
                          sql:${cm_amt} ;;
                          filters: [record_type: "Actual", cont_period_typ: "Short"]
                          value_format_name: usd_0
                          #hidden: yes
                        }

                        measure: total_actual_cm_amt_short_b {
                          label: "Total Actual CM Amt Booking - Short"
                          type: sum

                          #waitlisted_yesno|jack-2022-4-10|before<<
                          #sql: ${cm_amt} ;;
                          #waitlisted_yesno|jack-2022-4-10|before>>

                          #waitlisted_yesno|jack-2022-4-10|after<<
                          sql:
                                {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                  ${cm_amt}
                                {% else %}
                                  CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                                {% endif %};;
                              #waitlisted_yesno|jack-2022-4-10|after>>

                            filters: [record_type: "Booking", cont_period_typ: "Short"]
                            value_format_name: usd_0
                            #hidden: yes
                          }

                          # add for dcn-651 to fix sorting issue in CM dashboard
                          measure : total_actual_cm_amt_with_contract_type {
                            label: "Total Actual CM Amt Booking - Long/Medium/Short"
                            type: number
                            sql: ${total_actual_cm_amt_long_b} + ${total_actual_cm_amt_medium_b} + ${total_actual_cm_amt_short_b} ;;
                            value_format_name: usd_0
                          }

                          measure: total_actual_cm_amt_tariff {
                            label: "Total Actual CM Amt - (Tariff)"
                            type: sum
                            sql:${cm_amt} ;;
                            filters: [record_type: "Actual", cont_period_typ: "(Tariff)"]
                            value_format_name: usd_0
                            hidden: yes
                          }

                          measure: total_actual_cm_amt_tariff_b {
                            label: "Total Actual CM Amt Booking - (Tariff)"
                            type: sum

                            #waitlisted_yesno|jack-2022-4-10|before<<
                            #sql: ${cm_amt} ;;
                            #waitlisted_yesno|jack-2022-4-10|before>>

                            #waitlisted_yesno|jack-2022-4-10|after<<
                            sql:
                                  {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                    ${cm_amt}
                                  {% else %}
                                    CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                                  {% endif %};;
                                #waitlisted_yesno|jack-2022-4-10|after>>

                              filters: [record_type: "Booking", cont_period_typ: "(Tariff)"]
                              value_format_name: usd_0
                              hidden: yes
                            }

                            measure: total_actual_cm_amt_uncategoried {
                              label: "Total Actual CM Amt - (Uncategorized)"
                              type: sum
                              sql:${cm_amt} ;;
                              filters: [record_type: "Actual", cont_period_typ: "(Uncategorized)"]
                              value_format_name: usd_0
                              hidden: yes
                            }

                            measure: total_actual_cm_amt_uncategoried_b {
                              label: "Total Actual CM Amt Booking - (Uncategorized)"
                              type: sum

                              #waitlisted_yesno|jack-2022-4-10|before<<
                              #sql: ${cm_amt} ;;
                              #waitlisted_yesno|jack-2022-4-10|before>>

                              #waitlisted_yesno|jack-2022-4-10|after<<
                              sql:
                                    {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                      ${cm_amt}
                                    {% else %}
                                      CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                                    {% endif %};;
                                  #waitlisted_yesno|jack-2022-4-10|after>>

                                filters: [record_type: "Booking", cont_period_typ: "(Uncategorized)"]
                                value_format_name: usd_0
                                hidden: yes
                              }

                              measure: total_actual_cm_amt_raw {
                                type: sum
                                sql:
                                      CASE
                                        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
                                        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                        ELSE NULL
                                      END ;;
                                filters: [record_type: "Actual"]
                                hidden: yes
                              }

                              measure: total_actual_cm_amt_raw_b {
                                type: sum

                                #waitlisted_yesno|jack-2022-4-10|before<<
                                #sql:
                                #  CASE
                                #    WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
                                #    WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                #    ELSE NULL
                                #  END ;;
                                #waitlisted_yesno|jack-2022-4-10|before>>

                                #waitlisted_yesno|jack-2022-4-10|after<<
                                # NA dashboard simplifcation to eliminate CASE WHEN THEN END
                                #sql:
                                #  CASE
                                #    WHEN {% parameter show_or_hide_cm %} = 'Show' THEN
                                #         {% if include_waitlisted_bkg._parameter_value == "'Yes'" %} ${cm_amt}
                                #         {% else %} CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                                #         {% endif %}
                                #    WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                #    ELSE NULL
                                #  END ;;

                                sql:  {% if    show_or_hide_cm._parameter_value == "'Show'" and include_waitlisted_bkg._parameter_value == "'Yes'" %} ${cm_amt}
                                            {% elsif show_or_hide_cm._parameter_value == "'Show'" %} CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                                            {% else  %} NULL
                                            {% endif %} ;;

                                #waitlisted_yesno|jack-2022-4-10|after>>



                                filters: [record_type: "Booking"]
                                hidden: yes
                              }

                              measure: total_actual_cm_amt {
                                type: number
                                sql:
                                      CASE
                                        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_actual_cm_amt_raw}
                                        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                        ELSE NULL
                                      END ;;
                                value_format_name: usd_0
                                drill_fields: [basic_details*, total_actual_cm_amt]
                              }

                              measure: total_actual_cm_amt_b {
                                type: number
                                # NA dashboard: simplification
                                # sql:
                                #   CASE
                                #     WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_actual_cm_amt_raw_b}
                                #     WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                #     ELSE NULL
                                #   END ;;
                                sql:  {% if show_or_hide_cm._parameter_value == "'Show'" %} ${total_actual_cm_amt_raw_b}
                                            {% else  %} NULL
                                            {% endif %};;
                                value_format_name: usd_0
                                drill_fields: [basic_details*, total_actual_cm_amt_b]
                              }

# add by Wallace (20210721) - BEGIN
                              measure: total_target_cm_amt_raw {
                                type: sum
                                sql:
                                      CASE
                                        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
                                        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                        ELSE NULL
                                      END ;;
                                filters: [record_type: "Target"]
                                hidden: yes
                              }

                              measure: total_target_cm_amt {
                                type: number
                                sql:
                                      CASE
                                        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_target_cm_amt_raw}
                                        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                        ELSE NULL
                                      END ;;
                                value_format_name: usd_0
                                drill_fields: [basic_details*, total_target_cm_amt]
                              }
# add by Wallace (20210721) - END


                              measure: total_actual_cgo_wgt {
                                type: sum
                                sql: ${bkg_cgo_wgt} ;;
                                value_format_name: decimal_0
                                filters: [record_type: "Actual"]
                                drill_fields: [basic_details*, total_actual_cgo_wgt]
                              }

                              measure: total_actual_cgo_wgt_b {
                                type: sum

                                #waitlisted_yesno|jack-2022-4-10|before<<
                                #sql: ${bkg_cgo_wgt} ;;
                                #waitlisted_yesno|jack-2022-4-10|before>>

                                #waitlisted_yesno|jack-2022-4-10|after<<
                                sql:
                                        {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                            ${bkg_cgo_wgt}
                                        {% else %}
                                            CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${bkg_cgo_wgt} END
                                        {% endif %};;
                                    #waitlisted_yesno|jack-2022-4-10|after>>

                                  value_format_name: decimal_0
                                  filters: [record_type: "Booking"]
                                  drill_fields: [basic_details*, total_actual_cgo_wgt_b]
                                }


                                measure: total_actual_teu {
                                  label: "Total Actual TEU"
                                  type: sum
                                  sql: ${teu} ;;
                                  filters: [record_type: "Actual"]
                                  value_format_name: decimal_0
                                  drill_fields: [basic_details*, total_actual_teu]
                                }

                                measure: total_actual_teu_fak {
                                  type: sum
                                  sql: ${teu} ;;
                                  filters: [record_type: "Actual", cust_nvo_fak_nac: "FAK"]
                                  hidden: yes
                                }

                                measure: total_actual_teu_fak_b {
                                  type: sum

                                  #waitlisted_yesno|jack-2022-4-10|before<<
                                  #sql: ${teu} ;;
                                  #waitlisted_yesno|jack-2022-4-10|before>>

                                  #waitlisted_yesno|jack-2022-4-10|after<<
                                  sql:
                                        {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                          ${teu}
                                        {% else %}
                                          CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                        {% endif %};;
                                      #waitlisted_yesno|jack-2022-4-10|after>>

                                    filters: [record_type: "Booking", cust_nvo_fak_nac: "FAK"]
                                    hidden: yes
                                  }

                                  measure: total_actual_teu_nac {
                                    type: sum
                                    sql: ${teu} ;;
                                    filters: [record_type: "Actual", cust_nvo_fak_nac: "NAC"]
                                    hidden: yes
                                  }

                                  measure: total_actual_teu_nac_b {
                                    type: sum

                                    #waitlisted_yesno|jack-2022-4-10|before<<
                                    #sql: ${teu} ;;
                                    #waitlisted_yesno|jack-2022-4-10|before>>

                                    #waitlisted_yesno|jack-2022-4-10|after<<
                                    sql:
                                          {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                            ${teu}
                                          {% else %}
                                            CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                          {% endif %};;
                                        #waitlisted_yesno|jack-2022-4-10|after>>

                                      filters: [record_type: "Booking", cust_nvo_fak_nac: "NAC"]
                                      hidden: yes
                                    }

                                    measure: total_actual_teu_short {
                                      type: sum
                                      sql: ${teu} ;;
                                      filters: [record_type: "Actual", cont_period_typ: "Short"]
                                      ##hidden: Yes     24 Oct by Zoe Cheung
                                    }

                                    measure: total_actual_teu_short_b {
                                      type: sum

                                      #waitlisted_yesno|jack-2022-4-10|before<<
                                      #sql: ${teu} ;;
                                      #waitlisted_yesno|jack-2022-4-10|before>>

                                      #waitlisted_yesno|jack-2022-4-10|after<<
                                      sql:
                                            {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                              ${teu}
                                            {% else %}
                                              CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                            {% endif %};;
                                          #waitlisted_yesno|jack-2022-4-10|after>>

                                        filters: [record_type: "Booking", cont_period_typ: "Short"]
                                        ##hidden: Yes     24 Oct by Zoe Cheung
                                      }

                                      measure: total_actual_teu_long {
                                        type: sum
                                        sql: ${teu} ;;
                                        filters: [record_type: "Actual", cont_period_typ: "Long"]
                                        hidden: yes
                                      }

                                      measure: total_actual_teu_long_b {
                                        type: sum

                                        #waitlisted_yesno|jack-2022-4-10|before<<
                                        #sql: ${teu} ;;
                                        #waitlisted_yesno|jack-2022-4-10|before>>

                                        #waitlisted_yesno|jack-2022-4-10|after<<
                                        sql:
                                              {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                                ${teu}
                                              {% else %}
                                                CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                              {% endif %};;
                                            #waitlisted_yesno|jack-2022-4-10|after>>

                                          filters: [record_type: "Booking", cont_period_typ: "Long"]
                                          hidden: yes
                                        }

                                        measure: total_actual_teu_medium {
                                          type: sum
                                          sql: ${teu} ;;
                                          filters: [record_type: "Actual", cont_period_typ: "Medium"]
                                          hidden: yes
                                        }

                                        measure: total_actual_teu_medium_b {
                                          type: sum

                                          #waitlisted_yesno|jack-2022-4-10|before<<
                                          #sql: ${teu} ;;
                                          #waitlisted_yesno|jack-2022-4-10|before>>

                                          #waitlisted_yesno|jack-2022-4-10|after<<
                                          sql:
                                                {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                                  ${teu}
                                                {% else %}
                                                  CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                                {% endif %};;
                                              #waitlisted_yesno|jack-2022-4-10|after>>

                                            filters: [record_type: "Booking", cont_period_typ: "Medium"]
                                            hidden: yes
                                          }


                                          measure: total_actual_teu_tariff {
                                            type: sum
                                            sql: ${teu} ;;
                                            filters: [record_type: "Actual", cont_period_typ: "(Tariff)"]
                                            hidden: yes
                                          }

                                          measure: total_actual_teu_tariff_b {
                                            type: sum

                                            #waitlisted_yesno|jack-2022-4-10|before<<
                                            #sql: ${teu} ;;
                                            #waitlisted_yesno|jack-2022-4-10|before>>

                                            #waitlisted_yesno|jack-2022-4-10|after<<
                                            sql:
                                                  {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                                    ${teu}
                                                  {% else %}
                                                    CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                                  {% endif %};;
                                                #waitlisted_yesno|jack-2022-4-10|after>>

                                              filters: [record_type: "Booking", cont_period_typ: "(Tariff)"]
                                              hidden: yes
                                            }

                                            measure: total_actual_teu_uncategorized {
                                              type: sum
                                              sql: ${teu} ;;
                                              filters: [record_type: "Actual", cont_period_typ: "(Uncategorized)"]
                                              hidden: yes
                                            }

                                            measure: total_actual_teu_uncategorized_b {
                                              type: sum

                                              #waitlisted_yesno|jack-2022-4-10|before<<
                                              #sql: ${teu} ;;
                                              #waitlisted_yesno|jack-2022-4-10|before>>

                                              #waitlisted_yesno|jack-2022-4-10|after<<
                                              sql:
                                                    {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                                      ${teu}
                                                    {% else %}
                                                      CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                                    {% endif %};;
                                                  #waitlisted_yesno|jack-2022-4-10|after>>

                                                filters: [record_type: "Booking", cont_period_typ: "(Uncategorized)"]
                                                hidden: yes
                                              }


                                              #measure: total_cm_amt_eppa_raw {
                                              #  type: sum
                                              #  sql: ${TABLE}.cm_amt_eppa;;
                                              #  #hidden: yes
                                              #}

                                              measure: total_cm_amt_raw {
                                                label: "Total CM Amount"
                                                type: sum
                                                sql:
                                                      CASE
                                                        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
                                                        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                                        ELSE NULL
                                                      END ;;
                                                hidden: yes
                                              }

                                              measure: total_cm_amt_raw_b {
                                                label: "Total CM Amount"
                                                type: sum

                                                #waitlisted_yesno|jack-2022-4-10|before<<
                                                #sql:
                                                #  CASE
                                                #    WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${cm_amt}
                                                #    WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                                #    ELSE NULL
                                                #  END ;;
                                                #waitlisted_yesno|jack-2022-4-10|before>>

                                                #waitlisted_yesno|jack-2022-4-10|after<<
                                                sql:
                                                      CASE
                                                        WHEN {% parameter show_or_hide_cm %} = 'Show' THEN
                                                             {% if include_waitlisted_bkg._parameter_value == "'Yes'" %} ${cm_amt}
                                                             {% else %} CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                                                             {% endif %}
                                                        WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                                        ELSE NULL
                                                      END ;;
                                                    #waitlisted_yesno|jack-2022-4-10|after>>

                                                  filters: [record_type: "Booking"]
                                                  value_format_name: usd_0
                                                  hidden: yes
                                                }

                                                measure: total_cm_amt {
                                                  type: number
                                                  sql:
                                                        CASE
                                                          WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_cm_amt_raw}
                                                          WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                                          ELSE NULL
                                                        END ;;
                                                  value_format_name: usd_0
                                                  drill_fields: [basic_details*, total_cm_amt]
                                                }

                                                measure: total_cm_amt_b {
                                                  type: number
                                                  sql:
                                                        CASE
                                                          WHEN {% parameter show_or_hide_cm %} = 'Show' THEN ${total_cm_amt_raw_b}
                                                          WHEN {% parameter show_or_hide_cm %} = 'Hide' THEN NULL
                                                          ELSE NULL
                                                        END ;;
                                                  value_format_name: usd_0
                                                  drill_fields: [basic_details*, total_cm_amt_b]
                                                }

                                                measure: total_plan_teu {
                                                  label: "Total Plan TEU"
                                                  type: sum
                                                  sql: ${teu} ;;
                                                  filters: [record_type: "Plan"]
                                                  value_format_name: decimal_0
                                                  drill_fields: [basic_details*, total_plan_teu]
                                                }

                                                measure: total_target_teu {
                                                  type: sum
                                                  label: "Total Target TEU"
                                                  #sql: ${teu} ;;
                                                  sql:
                                                        CASE
                                                          WHEN {% parameter show_or_hide_target %} = 'Show' THEN ${teu}
                                                          WHEN {% parameter show_or_hide_target %} = 'Hide' THEN NULL
                                                          ELSE  ${teu}
                                                        END ;;
                                                  filters: [record_type: "Target"]
                                                  value_format_name: decimal_0
                                                  drill_fields: [basic_details*, total_target_teu]

                                                }

                                                measure: teu_variance {
                                                  type: number
                                                  sql: ${total_actual_teu} - ${total_target_teu} ;;
                                                  value_format_name: decimal_0
                                                  drill_fields: [basic_details*, total_actual_teu, total_target_teu, teu_variance]
                                                }

                                                measure: teu_variance_b {
                                                  type: number
                                                  sql: ${total_booking_teu} - ${total_target_teu} ;;
                                                  value_format_name: decimal_0
                                                  drill_fields: [basic_details*, total_booking_teu, total_target_teu, teu_variance_b]
                                                }

                                                measure: total_teu {
                                                  type: sum
                                                  sql: ${teu} ;;
                                                  value_format_name: decimal_0
                                                  drill_fields: [basic_details*, total_teu]
                                                }

                                                measure: total_weight {
                                                  label: "Total Weight (Metric Ton)"
                                                  type: sum
                                                  sql: ${bkg_cgo_wgt} ;;
                                                  value_format_name: decimal_2
                                                  drill_fields: [basic_details*, total_weight]
                                                }

                                                #Arul added for AP 11-5-2021 *To identify the plan Utilization*
                                                measure: plan_utilization {
                                                  view_label: "Plan Utilization"
                                                  type: number
                                                  sql:
                                                         CASE WHEN ${total_plan_teu} > ${total_booking_teu}
                                                         THEN  ${total_plan_teu} - ${total_booking_teu}
                                                         ELSE  0
                                                         END ;;
                                                  value_format_name: decimal_0
                                                  drill_fields: [basic_details*, plan_utilization, total_plan_teu, total_booking_teu]
                                                }

                                                measure: plan_deviation_percent {
                                                  view_label: "Plan Deviation"
                                                  type: number
                                                  sql:CASE WHEN ${total_plan_teu} <= ${total_booking_teu}
                                                                   THEN (${total_booking_teu} / NULLIF(${total_plan_teu}, 0))/100
                                                                   ELSE -(${total_plan_teu}/(NULLIF(${total_booking_teu}, 0))/100)
                                                                   END ;;
                                                  value_format_name: decimal_2
                                                  drill_fields: [basic_details*, plan_utilization, total_plan_teu, total_booking_teu]
                                                }

                                                measure: count_svc_cont_no {
                                                  label: "Count SVC/RFA Number"
                                                  description: "Count of Distinct SVC/RFA Numbers"
                                                  type: count_distinct
                                                  sql_distinct_key: ${svc_cont_no} ;;
                                                  value_format_name: decimal_0
                                                }

                                                measure: number_of_Svc_Cont_No {
                                                  type: count_distinct
                                                  sql: ${svc_cont_no} ;;
                                                }

                                                measure: row_count {
                                                  type: count
                                                }

                                                set: primary_key {
                                                  fields: [primary_key, bkg_no, week, record_type, consolidated_cntr_tpsz, count]
                                                }

                                                set: basic_details {
                                                  fields: [
                                                    bkg_no
                                                    , consolidated_cntr_tpsz
                                                    , bkg_sts_cd
                                                    , consolidated_cnt_cust_cd
                                                    , consolidated_cnt_cust_grp_cd
                                                    , ctrt_scp_srep_eml
                                                    , ctrt_scp_srep_nm
                                                    , por_cd
                                                    , del_cd
                                                    , svc_cont_no
                                                  ]
                                                }

                                                #New set and measure for NA dashboard
                                                measure: na_total_target {
                                                  type: sum
                                                  #label: "{% if    na_measure_type._parameter_value ==  \"'CM'\"  %}Target (CM){%
                                                  #           elsif na_measure_type._parameter_value ==  \"'TEU'\" %}Target (TEU){%
                                                  #           else  %}Target (TEU){% endif %}"
                                                  #sql:  {% if    na_measure_type._parameter_value == "'CM'"  %} ${cm_amt}
                                                  #      {% elsif na_measure_type._parameter_value == "'TEU'" %} ${teu}
                                                  #      {% else  %} ${teu}
                                                  #      {% endif %} ;;
                                                  #filters: [record_type: "Target, Plan, Budget"]

                                                  label: "{% if    na_target_type._parameter_value ==  \"'BUGGET_TEU'\"  %}Budget (TEU){%
                                                  elsif na_target_type._parameter_value ==  \"'BUGGET_CM'\"   %}Budget (CM){%
                                                  elsif na_target_type._parameter_value ==  \"'CVA_TEU'\"     %}CVA (TEU){%
                                                  elsif na_target_type._parameter_value ==  \"'PLAN_TEU'\"    %}Plan (TEU){%
                                                  else  %}Error{% endif %}"
                                                  sql:  {% if    na_target_type._parameter_value == "'BUGGET_TEU'"  %} CASE WHEN ${record_type} = 'Budget' THEN ${teu}    ELSE NULL END
                                                              {% elsif na_target_type._parameter_value == "'BUGGET_CM'"   %} CASE WHEN ${record_type} = 'Budget' THEN ${cm_amt} ELSE NULL END
                                                              {% elsif na_target_type._parameter_value == "'CVA_TEU'"     %} CASE WHEN ${record_type} = 'Target' THEN ${teu}    ELSE NULL END
                                                              {% elsif na_target_type._parameter_value == "'PLAN_TEU'"    %} CASE WHEN ${record_type} = 'Plan'   THEN ${teu}    ELSE NULL END
                                                              {% else  %} NULL
                                                              {% endif %} ;;
                                                  value_format: "[>=1000000]#,##0.0,,\"M\" ; [>=1000]#,##0.0,\"K\" ; #,##0"

                                                  link: {
                                                    label: "{% if    na_target_type._parameter_value ==  \"'BUGGET_TEU'\"  %}Show details: Budget vs Actual (TEU){%
                                                    elsif na_target_type._parameter_value ==  \"'BUGGET_CM'\"   %}Show details: Budget vs Actual (CM){%
                                                    elsif na_target_type._parameter_value ==  \"'CVA_TEU'\"     %}Show details: CVA vs Actual (TEU){%
                                                    elsif na_target_type._parameter_value ==  \"'PLAN_TEU'\"    %}Show details: Plan vs Actual (TEU){%
                                                    else  %}Error{% endif %}"
                                                    url:   "{% if    na_target_type._parameter_value ==  \"'BUGGET_TEU'\"  %}{{ na_target_actual_drill_fields_by_sales_budget._link }}{%
                                                    elsif na_target_type._parameter_value ==  \"'BUGGET_CM'\"   %}{{ na_target_actual_drill_fields_by_sales_budget._link }}{%
                                                    elsif na_target_type._parameter_value ==  \"'CVA_TEU'\"     %}{{ na_target_actual_drill_fields_by_cva._link }}{%
                                                    elsif na_target_type._parameter_value ==  \"'PLAN_TEU'\"    %}{{ na_target_actual_drill_fields_by_plan._link }}{%
                                                    else  %}{{ na_target_actual_drill_fields_by_sales_budget._link }}{% endif %}"
                                                  }
                                                }

                                                measure: na_total_actual {
                                                  type: sum
                                                  #label: "{% if    na_measure_type._parameter_value ==  \"'CM'\"  %}Actual (CM){%
                                                  #           elsif na_measure_type._parameter_value ==  \"'TEU'\" %}Actual (TEU){%
                                                  #           else  %}Actual (TEU){% endif %}"
                                                  #sql:  {% if    na_measure_type._parameter_value == "'CM'"  and include_waitlisted_bkg._parameter_value == "'Yes'" %} ${cm_amt}
                                                  #      {% elsif na_measure_type._parameter_value == "'TEU'" and include_waitlisted_bkg._parameter_value == "'Yes'" %} ${teu}
                                                  #      {% elsif na_measure_type._parameter_value == "'CM'"  %} CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                                                  #      {% elsif na_measure_type._parameter_value == "'TEU'" %} CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                                  #      {% else  %} ${teu}
                                                  #      {% endif %} ;;
                                                  #filters: [record_type: "Booking"]

                                                  label: "{% if    na_target_type._parameter_value ==  \"'BUGGET_CM'\"  %}Actual (CM){%
                                                  else  %}Actual (TEU){% endif %}"
                                                  sql:  {% if    na_target_type._parameter_value == "'BUGGET_TEU'"  %} CASE WHEN ${record_type} = 'Booking' THEN ${teu}    ELSE NULL END
                                                              {% elsif na_target_type._parameter_value == "'BUGGET_CM'"   %} CASE WHEN ${record_type} = 'Booking' THEN ${cm_amt} ELSE NULL END
                                                              {% elsif na_target_type._parameter_value == "'CVA_TEU'"     %} CASE WHEN ${record_type} = 'Booking' THEN ${teu}    ELSE NULL END
                                                              {% elsif na_target_type._parameter_value == "'PLAN_TEU'"    %} CASE WHEN ${record_type} = 'Booking' THEN ${teu}    ELSE NULL END
                                                              {% else  %} NULL
                                                              {% endif %} ;;

                                                  value_format: "[>=1000000]#,##0.0,,\"M\" ; [>=1000]#,##0.0,\"K\" ; #,##0"

                                                  link: {
                                                    label: "{% if    na_target_type._parameter_value       ==  \"'BUGGET_TEU'\"  %}Show details: Budget vs Actual (TEU){%
                                                    elsif na_target_type._parameter_value ==  \"'BUGGET_CM'\"   %}Show details: Budget vs Actual (CM){%
                                                    elsif na_target_type._parameter_value ==  \"'CVA_TEU'\"     %}Show details: CVA vs Actual (TEU){%
                                                    elsif na_target_type._parameter_value ==  \"'PLAN_TEU'\"    %}Show details: Plan vs Actual (TEU){%
                                                    else  %}Error{% endif %}"
                                                    url:   "{% if    na_target_type._parameter_value       ==  \"'BUGGET_TEU'\"  %}{{ na_target_actual_drill_fields_by_sales_budget._link }}{%
                                                    elsif na_target_type._parameter_value ==  \"'BUGGET_CM'\"   %}{{ na_target_actual_drill_fields_by_sales_budget._link }}{%
                                                    elsif na_target_type._parameter_value ==  \"'CVA_TEU'\"     %}{{ na_target_actual_drill_fields_by_cva._link }}{%
                                                    elsif na_target_type._parameter_value ==  \"'PLAN_TEU'\"    %}{{ na_target_actual_drill_fields_by_plan._link }}{%
                                                    else  %}{{ na_target_actual_drill_fields_by_sales_budget._link }}{% endif %}"
                                                  }
                                                  link: {
                                                    label: "Show details: Booking data"
                                                    url: "{{na_target_actual_drill_fields_by_actual._link}}"
                                                  }
                                                }

                                                measure: na_target_actual_drill_fields_by_actual {
                                                  type: count_distinct
                                                  sql: 1 ;;
                                                  drill_fields: [
                                                    bkg_no,
                                                    bkg_sts_cd,
                                                    por_cd,
                                                    del_cd,
                                                    slane_cd,
                                                    of_customer_group.key_acct_tp_cd,
                                                    of_customer_group.global_customer_type,
                                                    consolidated_cnt_cust_grp_cd,
                                                    of_customer_group.cust_grp_nm,
                                                    consolidated_cnt_cust_cd,
                                                    v_customer_opus_n_prospect.name,
                                                    svc_cont_no,
                                                    na_user_scrfa_main_sls_rep.full_name,
                                                    na_user_scrfa_dtl_sls_rep.full_name,
                                                    cont_period_typ_cd2,
                                                    na_trade_type,
                                                    svc_scp_grp_cd,
                                                    dominant_flg,
                                                    of_sales_week_master.sales_month_new_fmt,
                                                    of_sales_week_master.sales_week_new_fmt,
                                                    total_booking_teu,
                                                    total_cm_amt_raw_b,
                                                  ]
                                                  filters: [record_type: "Booking"]
                                                  hidden: yes
                                                }

                                                measure: na_target_actual_drill_fields_by_cva {
                                                  type: count_distinct
                                                  sql: 1 ;;
                                                  drill_fields: [
                                                    consolidated_cnt_cust_grp_cd,
                                                    of_customer_group.cust_grp_nm,
                                                    consolidated_cnt_cust_cd,
                                                    v_customer_opus_n_prospect.name,
                                                    svc_cont_no,
                                                    cont_period_typ_cd2,
                                                    of_customer_group.key_acct_tp_cd,
                                                    of_customer_group.global_customer_type,
                                                    na_trade_type,
                                                    svc_scp_grp_cd,
                                                    dominant_flg,
                                                    of_sales_week_master.sales_month_new_fmt,
                                                    of_sales_week_master.sales_week_new_fmt,
                                                    na_total_target,
                                                    na_total_actual,
                                                  ]
                                                  filters: [record_type: "Target,Booking"]
                                                  hidden: yes
                                                }

                                                measure: na_target_actual_drill_fields_by_plan {
                                                  type: count_distinct
                                                  sql: 1 ;;
                                                  drill_fields: [
                                                    consolidated_cnt_cust_grp_cd,
                                                    of_customer_group.cust_grp_nm,
                                                    consolidated_cnt_cust_cd,
                                                    v_customer_opus_n_prospect.name,
                                                    svc_cont_no,
                                                    cont_period_typ_cd2,
                                                    ctrt_prop_ofc_cd,
                                                    na_user_sales_rep_in_contract_n_budget.full_name,
                                                    na_user_sales_rep_in_contract_n_budget.sub_region,
                                                    na_trade_type,
                                                    svc_scp_grp_cd,
                                                    dominant_flg,
                                                    cif_fob_split_cd,
                                                    slane_cd,
                                                    bound,
                                                    of_sales_week_master.sales_month_new_fmt,
                                                    of_sales_week_master.sales_week_new_fmt,
                                                    na_total_target,
                                                    na_total_actual,
                                                  ]
                                                  filters: [record_type: "Plan,Booking"]
                                                  hidden: yes
                                                }

                                                measure: na_target_actual_drill_fields_by_sales_budget {
                                                  type: count_distinct
                                                  sql: 1 ;;
                                                  drill_fields: [
                                                    na_user_sales_rep_in_contract_n_budget.full_name,
                                                    na_user_sales_rep_in_contract_n_budget.sub_region,
                                                    na_trade_type,
                                                    dominant_flg,
                                                    cargo_type,
                                                    of_sales_week_master.sales_month_new_fmt,
                                                    of_sales_week_master.sales_week_new_fmt,
                                                    na_total_target,
                                                    na_total_actual
                                                  ]
                                                  filters: [record_type: "Budget,Booking"]
                                                  hidden: yes
                                                }




##  ## Add by Zoe Cheung on 23 Sep ##
##  ## Add by Matthew Ding on 24 Aug ##
                                                dimension: Key_Account_Tab_links {
                                                  type: string
                                                  sql:  CONCAT(1,2);;
                                                  html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
                                                            <nav style="font-size: 18px;">
                                                            <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed; " href="https://oneline.cloud.looker.com/embed/dashboards-next/7?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank" > Overview </a>
                                                            <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/223?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank" > Internal </a>
                                                            <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/224?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > External with VMS </a>
                                                            <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/222?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > External </a>
                                                            <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/225?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > Raw Data </a>
                                                            <a style="color: #FFE2B7; padding: 5px 15px; float: right; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/220?" target="_blank" > Customer Group List </a>
                                                            </nav>
                                                           </div>
                                                      ;;
                                                }



                                                dimension: Key_Account_Tab_links2 {
                                                  type: string
                                                  sql:  CONCAT(1,2);;
                                                  html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
                                                              <nav style="font-size: 18px;">
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/7?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank" > Overview </a>
                                                              <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed ;"href="https://oneline.cloud.looker.com/embed/dashboards-next/223?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank" > Internal </a>
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/224?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > External with VMS </a>
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/222??Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > External </a>
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/225?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > Raw Data </a>
                                                              <a style="color: #FFE2B7; padding: 5px 15px; float: right; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/220?" target="_blank" > Customer Group List </a>
                                                             </nav>
                                                             </div>
                                                        ;;
                                                }

                                                dimension: Key_Account_Tab_links3 {
                                                  type: string
                                                  sql:  CONCAT(1,2);;
                                                  html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
                                                              <nav style="font-size: 18px;">
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/7?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank" > Overview </a>
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/223?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank" > Internal </a>
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/224?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > External with VMS </a>
                                                              <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed " href="https://oneline.cloud.looker.com/embed/dashboards-next/222?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > External </a>
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/225?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > Raw Data </a>
                                                              <a style="color: #FFE2B7; padding: 5px 15px; float: right; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/220?" target="_blank" > Customer Group List </a>
                                                              </nav>
                                                             </div>
                                                        ;;
                                                }

                                                dimension: Key_Account_Tab_links4 {
                                                  type: string
                                                  sql:  CONCAT(1,2);;
                                                  html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
                                                              <nav style="font-size: 18px;">
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/7?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank" > Overview </a>
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/223?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank" > Internal </a>
                                                              <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed" href="https://oneline.cloud.looker.com/embed/dashboards-next/224?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > External with VMS </a>
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/222?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > External </a>
                                                              <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/225?Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Service%20Scope={{ _filters['of_svc_scp.service_scope_code_and_name'] | url_encode }}&Service%20Scope%20Group={{ _filters['of_svc_scp_grp.service_scope_group_code_and_name'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd']| url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Key%20Account%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Key%20Account%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Equipment%20Type%20Size={{ _filters['of_cntr_tpsz.type_size_name'] | url_encode }}&Origin={{ _filters['of_consolidated.por_cd'] | url_encode }}&Destinations={{ _filters['of_consolidated.del_cd'] | url_encode }}&Load%20Port={{ _filters['of_consolidated.pol_loc_cd'] | url_encode }}&Final%20Discharge%20Port={{ _filters['of_consolidated.final_pod_cd'] | url_encode }}&Customer%20Type={{ _filters['of_customer_group.global_customer_type'] | url_encode }}&DOM%2FN-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Actual%20Customer%20Name%20(NAC)= {{ _filters['of_consolidated.actual_cust_nm'] | url_encode }}&Contract%20Period%20Type={{ _filters['of_consolidated.cont_period_typ'] | url_encode }}&RAM%20(Sales%20Person)= {{ _filters['ram.full_name'] | url_encode }}&GAM%20(Sales%20Person)= {{ _filters['gam.full_name'] | url_encode }}&Commodity={{ _filters['of_commodity.commodity_full_name'] | url_encode }}&GAM%27s%20Manager={{ _filters['gam_manager.full_name'] | url_encode }}&GAM%27s%20Team={{ _filters['of_one_team.name'] | url_encode }}&GAM+Office={{ _filters['gam.office_code_new'] | url_encode }}&GAM%20RHQ%2FHO={{ _filters['gam.regional_head_office'] | url_encode }}&Target%20Selector={{ _filters['of_consolidated.target_selector'] | url_encode }}&Origin%20Country%20(POR%20Country)= {{ _filters['POR_country.country_name'] | url_encode }}&Destination%20Country%20(DEL%20Country)= {{ _filters['DEL_country.country_name'] | url_encode }}&Date%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&Show%20%2F%20hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Target%28with+VMS+adjustment%29={{ _filters['of_dep_sched_smry.show_or_hide_vms_target'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}" target="_blank"  > Raw Data </a>
                                                              <a style="color: #FFE2B7; padding: 5px 15px; float: right; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/220?" target="_blank" > Customer Group List </a>
                                                              </nav>
                                                             </div>
                                                        ;;
                                                }


##  ## Add by Zoe Cheung on 21 Oct ##
                                                dimension: Account_Plan_Tab_link {
                                                  type: string
                                                  sql:  CONCAT(1,2);;
                                                  html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
                                                            <nav style="font-size: 18px;">
                                                            <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed; " href="https://oneline.cloud.looker.com/embed/dashboards-next/3?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&YTD%20(Fiscal%20Yr)={{ _filters['of_sales_week_master.is_fiscal_ytd'] | url_encode }}}" target="_blank" > Overview </a>
                                                            <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/252?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&YTD%20(Fiscal%20Yr)={{ _filters['of_sales_week_master.is_fiscal_ytd'] | url_encode }}" target="_blank" > External </a>
                                                            <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/202?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&YTD%20(Fiscal%20Yr)={{ _filters['of_sales_week_master.is_fiscal_ytd'] | url_encode }}" target="_blank" > Raw Data </a>
                                                             </nav>
                                                           </div>
                                                      ;;
                                                }

                                                dimension: Account_Plan_Tab_link2 {
                                                  type: string
                                                  sql:  CONCAT(1,2);;
                                                  html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
                                                            <nav style="font-size: 18px;">
                                                            <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px; " href="https://oneline.cloud.looker.com/embed/dashboards-next/3?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&YTD%20(Fiscal%20Yr)={{ _filters['of_sales_week_master.is_fiscal_ytd'] | url_encode }} " target="_blank" > Overview </a>
                                                            <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed;" href="https://oneline.cloud.looker.com/embed/dashboards-next/252?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&YTD%20(Fiscal%20Yr)={{ _filters['of_sales_week_master.is_fiscal_ytd'] | url_encode }} " target="_blank" > External </a>
                                                            <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px; " href="https://oneline.cloud.looker.com/embed/dashboards-next/202?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&YTD%20(Fiscal%20Yr)={{ _filters['of_sales_week_master.is_fiscal_ytd'] | url_encode }} " target="_blank" > Raw Data </a>
                                                             </nav>
                                                           </div>
                                                      ;;
                                                }

                                                dimension: Account_Plan_Tab_link3 {
                                                  type: string
                                                  sql:  CONCAT(1,2);;
                                                  html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
                                                            <nav style="font-size: 18px;">
                                                            <a style="olor: #efefef; padding: 5px 15px; float: left; line-height: 40px; " href="https://oneline.cloud.looker.com/embed/dashboards-next/3?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&YTD%20(Fiscal%20Yr)={{ _filters['of_sales_week_master.is_fiscal_ytd'] | url_encode }} " target="_blank" > Overview </a>
                                                            <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/252?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&YTD%20(Fiscal%20Yr)={{ _filters['of_sales_week_master.is_fiscal_ytd'] | url_encode }} " target="_blank" > External </a>
                                                            <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed;" href="https://oneline.cloud.looker.com/embed/dashboards-next/202?Trade={{ _filters['of_consolidated.svc_scp_grp_cd'] | url_encode }}&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Customer%20Group={{ _filters['of_customer_group.cust_grp_and_name'] | url_encode }}&CIF%2FFOB={{ _filters['of_consolidated.gsym_cif_fob'] | url_encode }}&Revenue%20VVD={{ _filters['of_consolidated.rev_vvd'] | url_encode }}&Service%20Lane%20(Rev)= {{ _filters['of_consolidated.slane_cd'] | url_encode }}&Svc%2FRFA%20No={{ _filters['of_consolidated.svc_cont_no'] | url_encode }}&Contract%20Length={{ _filters['of_svc_contract.ctrt_dur_tp_cd'] | url_encode }}&AP%20Submission%20Office={{ _filters['of_consolidated.ctrt_scp_srep_ofc_cd'] | url_encode }}&AP%20Submission%20Country={{ _filters['ap_submission_country.country_name'] | url_encode }}&Contract%20(Header)= {{ _filters['of_consolidated.ctrt_prop_ofc_cd'] | url_encode }}&DOM%20%2FNon-DOM={{ _filters['of_consolidated.dominant_flg'] | url_encode }}&Loading%20Country={{ _filters['loading_country.country_name'] | url_encode }}&Loading%20Office={{ _filters['of_consolidated.ob_sls_ofc_cd'] | url_encode }}&Customer%20Segmentation={{ _filters['of_customer_group.key_acct_tp_cd'] | url_encode }}&Group%20Customer%20Region={{ _filters['of_customer_group.key_acct_rgn_cd'] | url_encode }}&Group%20Customer%20Country={{ _filters['of_customer_group.key_acct_cnt_name'] | url_encode }}&Show%20%2F%20Hide%20CM={{ _filters['of_consolidated.show_or_hide_cm'] | url_encode }}&Timeline%20Granularity={{ _filters['of_sales_week_master.timeframe_picker'] | url_encode }}&Show%20%2F%20Hide%20Target={{ _filters['of_consolidated.show_or_hide_target'] | url_encode }}&Calendar%20Year={{ _filters['of_sales_week_master.calendar_year'] | url_encode }}&SVC%2FRFA%20Owner%27s%20Office={{ _filters['of_customer_owner.office_code'] | url_encode }}&SVC%2FRFA%20Owner%27s%20RHQ={{ _filters['of_customer_owner.regional_head_office'] | url_encode }}&Svc%2FRFA%20Owner={{ _filters['of_user.full_name'] | url_encode }}&Via%20ONE%20Quote={{ _filters['of_consolidated.is_one_quotation'] | url_encode }}&YTD%20(Fiscal%20Yr)={{ _filters['of_sales_week_master.is_fiscal_ytd'] | url_encode }} " target="_blank" > Raw Data </a>
                                                             </nav>
                                                           </div>
                                                      ;;
                                                }

                                                measure: Short_Percentage {
                                                  type: number
                                                  label: "Short term contract %"
                                                  sql: ${total_actual_teu_short}/NULLIF(${total_actual_teu}, 0) ;;
                                                  value_format: "0%"
                                                }

                                                measure: Short_Percentage_b {
                                                  type: number
                                                  label: "Short term contract %_b"
                                                  sql: ${total_actual_teu_short_b}/NULLIF(${total_booking_teu}, 0) ;;
                                                  value_format: "0%"
                                                }

## 3 Jan 2022 - added by Zoe Cheung ##

## dimension: AP_sub_record_type {
##   type: string
##   sql:
##     CASE
##     WHEN ${record_type} = 'Booking' THEN 'AP_Dev_Booking'
##     WHEN ${record_type} = 'Actual' THEN 'AP_Dev_Lifting'
##     ELSE NULL
##     END;;
## }

##    parameter: AP_Dev_by_Booking_orAP_Dev_by_Lifting {
##      label: "AP Deviation Picker"
##      type: string
##      allowed_value: {
##        label: "By Booking"
##        value: "AP_Dev_Booking"
##      }
##      allowed_value: {
##        label: "By Lifting"
##        value: "AP_Dev_Lifting"
##      }
##      default_value: "AP_Dev_Lifting"
##    }
##
##    measure: AP_Dev_Dynamic {
##      type: number
##      value_format_name:decimal_0
##      sql:
##      CASE
##        WHEN {% parameter AP_Dev_by_Booking_orAP_Dev_by_Lifting %} = 'AP_Dev_Lifting' THEN ${total_actual_teu} - ${total_plan_teu}
##                ELSE ${total_booking_teu} - ${total_plan_teu}
##      END ;;
##    }
##
##    measure: AP_Dev_Perc_Dynamic {
##      type: number
##      value_format_name:percent_0
##      sql:
##      CASE
##        WHEN {% parameter AP_Dev_by_Booking_orAP_Dev_by_Lifting %} = 'AP_Dev_Lifting' THEN ${total_actual_teu} / NULLIF(${total_plan_teu},0)
##                ELSE ${total_booking_teu} / NULLIF(${total_plan_teu},0)
##      END ;;
##    }


## Added by Zoe Cheung 30 Dec 2021 - CMR ##

                                                filter: Svc_Scp_Gp_filter{
                                                  type: string
                                                  suggest_dimension: svc_scp_grp_cd
                                                  ##suggest_explore: account_plan
                                                }

                                                filter: Dom_Flag_filter{
                                                  type: string
                                                  suggest_dimension: dominant_flg
                                                  ##suggest_explore:account_plan
                                                }

                                                filter: Svc_Loop_filter{
                                                  type: string
                                                  suggest_dimension: slane_cd
                                                  ##suggest_explore: account_plan
                                                }

                                                filter: Group_Customer_filter{
                                                  type: string
                                                  suggest_dimension:  of_customer_group.cust_grp_and_name
                                                  ##suggest_explore: account_plan
                                                }

                                                dimension: Group_Customer_filter_YesNo {
                                                  type:  yesno
                                                  hidden:  yes
                                                  sql: {% condition Svc_Scp_Gp_filter %} ${svc_scp_grp_cd}  {% endcondition %} AND
                                                                 {% condition Dom_Flag_filter %} ${dominant_flg}  {% endcondition %} AND
                                                                 {% condition Svc_Loop_filter %} ${slane_cd}  {% endcondition %} AND
                                                                 {% condition Group_Customer_filter %} ${of_customer_group.cust_grp_and_name}  {% endcondition %} ;;
                                                }
# measure: Customer_performance_on_loop {
#   type: sum
#   sql:  ${cm_amt} / NULLIF(${teu}, 0) ;;
#   filters: [record_type: "Actual" , Group_Customer_filter_YesNo: "yes"]
#   value_format_name: decimal_0
# }
                                                measure: Sum_of_CM_CMR_Customer{
                                                  type: sum

                                                  #waitlisted_yesno|jack-2022-4-10|before<<
                                                  #sql: ${cm_amt} ;;
                                                  #waitlisted_yesno|jack-2022-4-10|before>>

                                                  #waitlisted_yesno|jack-2022-4-10|after<<
                                                  sql:
                                                          {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                                            ${cm_amt}
                                                          {% else %}
                                                            CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                                                          {% endif %};;
                                                        #waitlisted_yesno|jack-2022-4-10|after>>

                                                    filters: [record_type: "Booking" , Group_Customer_filter_YesNo: "yes"]
                                                  }
                                                  measure: Sum_of_TEU_CMR_Customer{
                                                    type: sum

                                                    #waitlisted_yesno|jack-2022-4-10|before<<
                                                    #sql: ${teu} ;;
                                                    #waitlisted_yesno|jack-2022-4-10|before>>

                                                    #waitlisted_yesno|jack-2022-4-10|after<<
                                                    sql:
                                                                {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                                                  ${teu}
                                                                {% else %}
                                                                  CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                                                {% endif %};;
                                                          #waitlisted_yesno|jack-2022-4-10|after>>

                                                      filters: [record_type: "Booking" , Group_Customer_filter_YesNo: "yes"]
                                                    }

                                                    measure: Customer_performance_on_loop {
                                                      type: number
                                                      sql: ${Sum_of_CM_CMR_Customer} / nullif(${Sum_of_TEU_CMR_Customer} ,0)  ;;
                                                      value_format_name: usd_0
                                                    }
                                                    dimension: Trade_filter_YesNo {
                                                      type:  yesno
                                                      hidden:  yes
                                                      sql: {% condition Svc_Scp_Gp_filter %} ${svc_scp_grp_cd}  {% endcondition %} AND
                                                                     {% condition Dom_Flag_filter %} ${dominant_flg}  {% endcondition %} AND
                                                                     {% condition Svc_Loop_filter %} ${slane_cd}  {% endcondition %} ;;
                                                    }
                                                    measure: Sum_of_CM_CMR_Trade{
                                                      type: sum

                                                      #waitlisted_yesno|jack-2022-4-10|before<<
                                                      #sql: ${cm_amt} ;;
                                                      #waitlisted_yesno|jack-2022-4-10|before>>

                                                      #waitlisted_yesno|jack-2022-4-10|after<<
                                                      sql:
                                                              {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                                                ${cm_amt}
                                                              {% else %}
                                                                CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${cm_amt} END
                                                              {% endif %};;
                                                            #waitlisted_yesno|jack-2022-4-10|after>>

                                                        filters: [record_type: "Booking" , Trade_filter_YesNo: "yes"]
                                                      }
                                                      measure: Sum_of_TEU_CMR_Trade{
                                                        type: sum

                                                        #waitlisted_yesno|jack-2022-4-10|before<<
                                                        #waitlisted_yesno|jack-2022-4-10|before<<
                                                        #sql: ${teu} ;;
                                                        #waitlisted_yesno|jack-2022-4-10|before>>

                                                        #waitlisted_yesno|jack-2022-4-10|after<<
                                                        sql:
                                                                    {% if include_waitlisted_bkg._parameter_value == "'Yes'" %}
                                                                      ${teu}
                                                                    {% else %}
                                                                      CASE ${bkg_sts_cd} WHEN 'W' THEN NULL ELSE ${teu} END
                                                                    {% endif %};;
                                                              #waitlisted_yesno|jack-2022-4-10|after>>

                                                          filters: [record_type: "Booking" , Trade_filter_YesNo: "yes"]
                                                        }

## measure: Trade_avg_performance_on_loop{
##   type: sum
##   sql:  ${cm_amt} / NULLIF(${teu}, 0) ;;
##   filters: [record_type: "Actual" , Trade_filter_YesNo: "yes"]
##   value_format_name: decimal_0
##  }

                                                        measure: Trade_avg_performance_on_loop{
                                                          type: number
                                                          sql: ${Sum_of_CM_CMR_Trade} / nullif(${Sum_of_TEU_CMR_Trade},0);;
                                                          value_format_name: usd_0
                                                        }

                                                      }

view: of_consolidated2 {
  derived_table: {
    #WH DCN-1110 - add cmdt_nm in SQL
    sql: SELECT 'Booking' as record_type

                        ---------- Basic details ---------------
                        , of_booking.bkg_no
                        , cntr_tpsz as consolidated_cntr_tpsz
                        , CASE when substr(of_booking.cntr_tpsz,1,1) || IFNULL(of_booking.rc_flg,'N') = 'RN'
                          THEN substr(of_booking.cntr_tpsz,1,1)|| 'D'|| substr(of_booking.cntr_tpsz,2)
                          ELSE of_booking.cntr_tpsz END as consolidated_cntr_tpsz_with_rd
                        , bkg_sts_cd
                        , bkg_cre_dt
                        , 'BKG:'||bkg_sts_cd as rec_typ_n_bkg_sts_cd
                        , de_term_cd
                        , rcv_term_cd
                        , cif_fob_split_cd
                        , frt_term_cd
                        ---------- pickup and return SCC and Yard ---------------
                        , act_mty_pkup_scc_cd
                        , mty_pkup_scc_cd
                        , mty_rtn_scc_cd
                        , bkg_mty_rtn_scc_cd
                        --- empty return ---------------------
                        , bkg_mty_pkup_yd_cd
                        , bkg_mty_rtn_yd_cd
                        , act_mty_pkup_yd_cd
                        , act_mty_rtn_yd_cd
                        , coalesce(act_mty_pkup_yd_cd, bkg_mty_pkup_yd_cd) mty_pkup_yd_cd
                        , coalesce(act_mty_rtn_yd_cd,  bkg_mty_rtn_yd_cd ) mty_rtn_yd_cd
                        --, of_mty_pkup_lcn.Eq_Ctrl_Ofc_Code   as mty_pkup_ecc
                        --, of_mty_rtn_lcn.Eq_Ctrl_Ofc_Code    as mty_rtn_ecc
                        ---------- TEU, CM and Weight ---------------of
                        , bkg_teu as teu
                        --WH DCN-909 (202305) add DRY only for TP condition:, CAST( (CASE WHEN of_svc_scp.Service_Scope_Group_Code = 'TP'
                        , CAST( (CASE WHEN of_svc_scp.Service_Scope_Group_Code = 'TP' and substr(of_booking.cntr_tpsz,1,1) = 'D'
                                      THEN cm_amt2 - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz,1,1)='Q' then 0 else bkg_teu end) )
                                      ELSE cm_amt1 - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz,1,1)='Q' then 0 else bkg_teu end) )
                                      END ) as numeric) as cm_amt -- dcn504, 2022-Jan
                        , cast(cm_amt1 as numeric) as cm_amt_eppa -- dcn504, 2022-Jan
                        , cast(cm_amt2 as numeric) as cm_amt_eppb -- dcn504, 2022-Jan
                        , bkg_cgo_wgt
                        , grs_wgt
                        ---------- cargo and commdity ---------------
                        , cmdt_cd
                        , cmdt_nm
                        , cgo_ntr_cd
                        , cgo_ntr_nm
                        , dcgo_flg
                        , rd_cgo_flg
                        , CASE
                          WHEN substr(of_booking.cntr_tpsz,1,1) || IFNULL(of_booking.rc_flg,'N') = 'RY' THEN 'Reefer'
                          WHEN substr(of_booking.cntr_tpsz,1,1) || IFNULL(of_booking.rc_flg,'N') = 'RN' THEN 'RAD'
                          WHEN substr(of_booking.cntr_tpsz,1,1) = 'D'  THEN 'Dry'
                          WHEN substr(of_booking.cntr_tpsz,1,1) IN ('F','O','Q','B' )  THEN 'Special'
                          ELSE 'Others' END as container_cat  -- dashboard merging exercise
                        ---------- contract customer, shipper, consinee, forwarder, and sales person ---------------
                        , coalesce(of_svc_contract.cust_cd, ctrt_cust_cd, '<blank>') as consolidated_cnt_cust_cd
                        , v_customer_opus_n_prospect.cust_grp_id as consolidated_cnt_cust_grp_cd
                        , (CASE WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' and (actual_cust_cd is not null or actual_cust_nm is not null ) THEN 'NAC'
                                WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' THEN 'FAK'
                                ELSE NULL END) as cust_nvo_fak_nac
                        , (CASE WHEN ctrt_cust_cd IS NULL THEN 'Tariff/Dummy'
                                WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' and (actual_cust_cd is not null or actual_cust_nm is not null ) THEN 'NAC'
                                WHEN v_customer_opus_n_prospect.cntr_cust_tp_cd = 'N' THEN 'FAK'
                                ELSE 'BCO' END) as cust_bco_fak_nac
                        , actual_cust_cd
                        , actual_cust_nm
                        ---------- locations  ---------------
                        , por_cd
                        , ori_cnt
                        , NULL as cn_sub_reg --DCN-1120
                        , del_cd
                        , del_cnt
                        , n1st_pod_cd
                        , n1st_pol_cd
                        , final_pod_cd
                        , pod_loc_cd
                        , pol_loc_cd
                        , trnk_pol_cd
                        , trnk_pod_cd
                        , case
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '11' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '12' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '13' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '14' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '15' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '21' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '22' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '23' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '61' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '62' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '63' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '64' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '65' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '37' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '41' then 'North China' --'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '31' then 'Central China' --'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '32' then 'Central China' --'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '33' then 'Central China' --'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '34' then 'Central China' --'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '36' then 'Central China' --'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '42' then 'Central China' --'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '43' then 'Central China' --'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '50' then 'Central China' --'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '51' then 'Central China' --'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '35' then 'South China' --'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '44' then 'South China' --'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '45' then 'South China' --'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '46' then 'South China' --'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '52' then 'South China' --'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '53' then 'South China' --'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '54' then 'South China' --'SCN'
      when of_lcn_por.Country_Code in ('HK','MO')                          then 'South China' --'SCN'
      else of_ctry_por.Country_Name end  as cgm_por_country_name
                        , case
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '11' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '12' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '13' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '14' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '15' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '21' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '22' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '23' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '61' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '62' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '63' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '64' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '65' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '37' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '41' then 'NCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '31' then 'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '32' then 'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '33' then 'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '34' then 'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '36' then 'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '42' then 'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '43' then 'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '50' then 'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '51' then 'CCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '35' then 'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '44' then 'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '45' then 'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '46' then 'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '52' then 'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '53' then 'SCN'
      when of_lcn_por.Country_Code = 'CN' and of_lcn_por.State_Code = '54' then 'SCN'
      when of_lcn_por.Country_Code in ('HK','MO')                          then 'SCN'
      else of_lcn_por.Country_Code end  as cgm_por_country_code
                        ---------- about service contract ---------------
                        , svc_cont_no
                        , (CASE WHEN svc_cont_no like 'DUM%' THEN 'yes' ELSE 'no' END) as is_svc_cont_dummy
                        , sc_rfa_ctrt_tp_nm
                        , cont_effective_dt
                        , cont_expiry_dt
                        , of_svc_contract.ctrt_dur_tp_cd as cont_period_typ_cd
                        --, (CASE of_svc_contract.ctrt_dur_tp_cd WHEN 'L' THEN 'Long' WHEN 'M' THEN 'Medium'  WHEN 'S' THEN 'Short' END) as cont_period_typ
                        -- Dashboard merging exercise: group 'uncat' and 'tariff' into into Short
                        , (CASE WHEN ctrt_cust_cd is NULL then 'Short' -- most of thse are 'TRF' and 'DUM'
                                WHEN ctrt_cust_cd is NOT NULL AND of_svc_contract.sc_rfa_no IS NULL      then 'Short' -- most of such bookings are dummy contracts
                                WHEN ctrt_cust_cd is NOT NULL AND of_svc_contract.sc_rfa_typ = 'T'       then 'Short' -- tariff
                                WHEN ctrt_cust_cd is NOT NULL AND of_svc_contract.ctrt_dur_tp_cd IS NULL then 'Short' -- we group unknown durable type as short
                                -- the follow three case having both of_svc_contract.sc_rfa_no and of_svc_contract.ctrt_dur_tp_cd available
                                WHEN ctrt_cust_cd is NOT NULL AND of_svc_contract.ctrt_dur_tp_cd = 'L' then 'Long'
                                WHEN ctrt_cust_cd is NOT NULL AND of_svc_contract.ctrt_dur_tp_cd = 'M' then 'Medium'
                                WHEN ctrt_cust_cd is NOT NULL AND of_svc_contract.ctrt_dur_tp_cd = 'S' then 'Short'
                                -- remaining possibiliy: of_svc_contract.sc_rfa_no in (S,R) but ctrt_dur_tp_cd not in (L,M,S)
                                ELSE 'Short' END ) as cont_period_typ -- Dashboard merging exerciese : no longer use cont_period_typ_bkg
                        , ctrt_scp_srep_ofc_cd
                        , ctrt_scp_srep_eml
                        , ctrt_scp_srep_nm
                        , of_svc_contract.ofc_cd    as ctrt_prop_ofc_cd
                        , ctrt_prop_srep_eml
                        , ctrt_prop_srep_nm
                        , CASE of_ctrt_reg.reg_cust_cnt_cd WHEN 'BR' THEN 'SAOHQ' WHEN 'US' THEN 'RICHQ' WHEN 'HK' THEN 'HKGHQ' WHEN 'SG' THEN 'SINHQ' WHEN 'GB' THEN 'LONHQ' END   as ctrt_prop_rhq_code
                        , of_ctrt_lcn.country_code as ctrt_prop_ctry_code
                        ---------- about service scope, service lane  ---------------
                        , of_booking.svc_scp_cd
                        , CASE
                            WHEN of_booking.svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N-DOM'
                            WHEN of_booking.svc_scp_cd = 'LEA' THEN 'DOM'
                            WHEN of_booking.svc_scp_cd = 'IAA' AND right(t_vvd_cd,1) IN ('S','W') THEN 'DOM'
                            WHEN of_booking.svc_scp_cd = 'IAA' THEN 'N-DOM'
                            ELSE of_svc_scp.dominant_flag
                            END as dominant_flg
                        , NULL as slane_cd -- DCN-689: John Jabaraj (JJ) adivsed the logic to take 1st three chars from rlane is incorrect.
                        , of_booking.rlane_cd
                        --  , CASE
                        --    WHEN sub_trd_cd = 'IP' and of_svc_scp.service_scope_group_code IN ('WA','EA') THEN 'TRUNK'
                        --    WHEN substr(rlane_cd,1,3) = 'IBC' THEN 'IET'
                        --    WHEN substr(rlane_cd,1,3) = 'NBS' THEN 'IET'
                        --    WHEN substr(rlane_cd,1,3) = 'BAX' THEN 'IET'
                        --    WHEN substr(rlane_cd,1,3) = 'REX' THEN 'IET'
                        --    WHEN substr(rlane_cd,1,3) = 'SDX' THEN 'IET'
                        --    WHEN substr(rlane_cd,1,3) = 'NPX' THEN 'IET'
                        --    WHEN substr(rlane_cd,1,3) = 'GTE' THEN 'IET'
                        --    WHEN substr(rlane_cd,1,3) = 'ADX' THEN 'IET'
                        --    WHEN substr(rlane_cd,1,3) = 'LEX' THEN 'IET'
                        --    ELSE substr(rlane_cd,1,3)
                        --    END as slane_cd
                        , of_svc_scp.service_scope_group_code as svc_scp_grp_cd
                        , trd_cd
                        , sub_trd_cd
                        ----------- sales week ---------------
                        , cast(week as string) as week
                        ---- dashboard mering exercise -----
                        , of_booking.bkg_cxl_rsn_cd
                        , of_booking.bkg_cxl_sub_rsn_cd
                        , CASE
                          WHEN of_booking.bkg_cxl_rsn_cd     IN ('B') THEN 'Booking Combine'
                          WHEN of_booking.bkg_cxl_rsn_cd     IN ('M','D','C','N','A','Q','P','R','Y') AND of_booking.bkg_cxl_sub_rsn_cd IS NULL    THEN 'Customer\'s Request'
                          WHEN of_booking.bkg_cxl_rsn_cd     IN ('S','G','L','E','I','X','V','U','Z') AND of_booking.bkg_cxl_sub_rsn_cd IS NULL    THEN 'Carrier\'s Request'
                          WHEN of_booking.bkg_cxl_rsn_cd     IN ('O')                                 AND of_booking.bkg_cxl_sub_rsn_cd IS NULL    THEN 'Others'
                          WHEN of_booking.bkg_cxl_sub_rsn_cd IN ('L2','C1','C2','C3','N1','D1','M1','M2','K1','K2','K3','W1','E1','S1')            THEN 'Customer\'s Request'
                          WHEN of_booking.bkg_cxl_sub_rsn_cd IN ('L1','K4','W2','E2','S2','U1','U2','O1','O2','O3','O4','O5','Z1','Z2')            THEN 'Carrier\'s Request'
                          ELSE 'Others' END as bkg_cncl_party
                        , of_bkg_cxl_rsn.cancel_reason as bkg_cxl_rsn_desc
                        , of_bkg_cxl_sub_rsn.bkg_cxl_sub_rsn_desc
                        -------------- others --------------------
                        ,  CASE
                           WHEN  xter_bkg_rqst_cd IN ('COM','OFF') THEN 'Manual'
                           -- WH DCN-948 (202305) revise SEQ to SEA : WHEN  xter_bkg_rqst_cd IN ('GTN','INT','DAK','CSM','SEQ') THEN 'Portal'
                           WHEN  xter_bkg_rqst_cd IN ('GTN','INT','DAK','CSM','SEA') THEN 'Portal'
                           WHEN  xter_bkg_rqst_cd IN ('EDI') THEN 'EDI'
                           WHEN  xter_bkg_rqst_cd IN ('WEB') THEN 'eCom'
                           WHEN  xter_bkg_rqst_cd IN ('WEQ') THEN 'QUOTE'
                           ELSE NULL END as bkg_channel -- dashboard merging : booking channel
                        , xter_bkg_rqst_cd as bkg_channel_code --WH DCN-948 (202305)
                        ------------- add Channel descroption WH DCN-948 (202305) ------------
                        ,  CASE
                           WHEN  xter_bkg_rqst_cd IN ('COM') THEN 'Copy Of Master - (COM)'
                           WHEN  xter_bkg_rqst_cd IN ('OFF') THEN 'MANUAL - (OFF)'
                           WHEN  xter_bkg_rqst_cd IN ('GTN') THEN 'G T NEXUS - (GTN)'
                           WHEN  xter_bkg_rqst_cd IN ('INT') THEN 'INTTRA - (INT)'
                           WHEN  xter_bkg_rqst_cd IN ('DAK') THEN 'DAKOSY AG (EU) - (DAK)'
                           WHEN  xter_bkg_rqst_cd IN ('CSM') THEN 'CARGOSMART - (CSM)'
                           WHEN  xter_bkg_rqst_cd IN ('SEA') THEN 'SeaNACCS (JP) - (SEA)'
                           WHEN  xter_bkg_rqst_cd IN ('EDI') THEN 'EDI'
                           WHEN  xter_bkg_rqst_cd IN ('WEB') THEN 'e-Com - (WEB)'
                           WHEN  xter_bkg_rqst_cd IN ('WEQ') THEN 'ONE QUOTE - (WEQ)'
                           ELSE NULL END as bkg_channel_desc
                        , CASE WHEN xter_bkg_rqst_cd = 'WEQ' THEN 'Yes' ELSE 'No' END as is_one_quotation
                        , t_vvd_cd as rev_vvd
                        , sc_rfa_sls_rep_ofc_cnt_cd
                        , sc_rfa_sls_rep_ofc_cnt_nm
                        , null as account_plan_sc_rfa_customer_group_code
                        , of_booking.rc_flg           -- dcn504, 2022-Jan
                        , of_booking.rev_period_yrqtr -- dcn504, 2022-Jan
                        , of_booking.tot_g_rev        -- dashboard merging exercise
                        , bkg_ofc_cd
                        , of_booking.cgo_rcv_dt  --dcn848
                        , of_booking.lodg_due_dt --dcn848
                        , of_booking.T_SLAN_CD   --WH DCN-909 (202305)
                        , CASE WHEN ckam_map_ofc.ckam_sales_person IS NOT NULL THEN ckam_map_ofc.ckam_sales_person ELSE ckam_map_ctry.ckam_sales_person END as ckam_sales_person
         --               , of_svc_contract_dtl.scp_ofc_cd   -- CGM db Kai
         --               , of_svc_contract.sc_rfa_typ
                        , 'Booking-'||bkg_no ||'-'|| cntr_tpsz as primary_key
                        FROM `ONEFORCE.OF_BOOKING` AS of_booking
                        LEFT JOIN  (
                          SELECT distinct service_scope_code, service_scope_name, service_scope_group_code, dominant_flag
                          FROM   ${of_svc_scp.SQL_TABLE_NAME}
                        ) as of_svc_scp ON of_booking.svc_scp_cd = of_svc_scp.service_scope_code
                        LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON of_booking.svc_cont_no    = of_svc_contract.sc_rfa_no
                        LEFT JOIN  ${of_svc_contract_dtl.SQL_TABLE_NAME} of_svc_contract_dtl  ON of_svc_contract_dtl.sc_rfa_no    = of_svc_contract.sc_rfa_no AND of_booking.svc_scp_cd = of_svc_contract_dtl.svc_scp_cd
                        LEFT JOIN ${of_office.SQL_TABLE_NAME}       as of_ctrt_ofc     ON of_svc_contract.ofc_cd    = of_ctrt_ofc.office_code
                        LEFT JOIN ${of_office.SQL_TABLE_NAME} as of_ctrt_dtl_ofc ON of_svc_contract_dtl.scp_ofc_cd = of_ctrt_dtl_ofc.office_code
                        LEFT JOIN ${of_location.SQL_TABLE_NAME} as of_ctrt_dtl_lcn ON of_ctrt_dtl_ofc.location_code = of_ctrt_dtl_lcn.location_code
                        LEFT JOIN ${of_location.SQL_TABLE_NAME}     as of_ctrt_lcn     ON of_ctrt_ofc.location_code = of_ctrt_lcn.location_code
                        LEFT JOIN ${of_reg_ref.SQL_TABLE_NAME}      as of_ctrt_reg     ON of_ctrt_lcn.country_code  = of_ctrt_reg.cust_cnt_cd
                        --LEFT JOIN ${of_location.SQL_TABLE_NAME}     as of_mty_pkup_lcn ON of_mty_pkup_lcn.location_code = coalesce(act_mty_pkup_scc_cd, mty_pkup_scc_cd)
                        --LEFT JOIN ${of_location.SQL_TABLE_NAME}     as of_mty_rtn_lcn  ON of_mty_rtn_lcn.location_code  = coalesce(mty_rtn_scc_cd,      bkg_mty_rtn_scc_cd )
                        LEFT JOIN (
                          SELECT vv.cust_cd, vv.cust_grp_id, g.global_customer_type as cntr_cust_tp_cd
                          FROM ${v_customer_opus_n_prospect.SQL_TABLE_NAME} vv
                          INNER JOIN ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = vv.cust_grp_id
                        ) as v_customer_opus_n_prospect
                          ON coalesce(of_svc_contract.cust_cd, of_booking.ctrt_cust_cd) = v_customer_opus_n_prospect.cust_cd AND coalesce(of_svc_contract.cust_cd, of_booking.ctrt_cust_cd) IS NOT NULL
                        LEFT JOIN ${upload_other_cost.SQL_TABLE_NAME} as othercost --dcn504, 2022-Jan
                          ON ( othercost.rc_flg           = of_booking.rc_flg           AND
                               othercost.REV_PERIOD_YRQTR = of_booking.rev_period_yrqtr AND
                               othercost.CUST_GRP_ID      = v_customer_opus_n_prospect.cust_grp_id AND
                               othercost.SVC_GRP_CD       = of_svc_scp.service_scope_group_code AND
                               othercost.DMNT_FLG         = (CASE WHEN of_booking.svc_scp_cd = 'LEA' AND of_booking.n1st_pol_cd LIKE 'MX%' THEN 'N'
                                                             WHEN of_booking.svc_scp_cd = 'LEA' THEN 'Y'
                                                             WHEN of_booking.svc_scp_cd = 'IAA' AND right(of_booking.t_vvd_cd,1) IN ('S','W') THEN 'Y'
                                                             WHEN of_booking.svc_scp_cd = 'IAA' THEN 'N'
                                                             WHEN of_svc_scp.dominant_flag = 'DOM' THEN 'Y'
                                                             ELSE 'N' END)
                             )
                        LEFT JOIN ${bkg_cncl_reason.SQL_TABLE_NAME} as of_bkg_cxl_rsn     on of_booking.bkg_cxl_rsn_cd     = of_bkg_cxl_rsn.code
                        LEFT JOIN ${bkg_cxl_sub_rsn.SQL_TABLE_NAME} as of_bkg_cxl_sub_rsn on of_booking.bkg_cxl_sub_rsn_cd = of_bkg_cxl_sub_rsn.bkg_cxl_sub_rsn_cd
                        -- NCN|SCN|CCN logic
                        LEFT JOIN ${of_location.SQL_TABLE_NAME}     as of_lcn_por         on of_booking.por_cd             = of_lcn_por.location_code
                        LEFT JOIN ${of_country.SQL_TABLE_NAME}      as of_ctry_por        on of_lcn_por.Country_Code       = of_ctry_por.country_code
                        -- DCN-1050
                        LEFT JOIN   ${ckam_mapping_one_per_country.SQL_TABLE_NAME} ckam_map_ctry ON (v_customer_opus_n_prospect.cust_grp_id = ckam_map_ctry.customer_grp_id and
                                                                                        of_ctrt_dtl_lcn.country_code = ckam_map_ctry.contract_country_code)
                        LEFT JOIN   ${ckam_mapping_one_per_office.SQL_TABLE_NAME} ckam_map_ofc ON (v_customer_opus_n_prospect.cust_grp_id = ckam_map_ofc.customer_grp_id and
                                                                                        of_ctrt_dtl_lcn.country_code = ckam_map_ofc.contract_country_code and
                                                                                        of_svc_contract_dtl.scp_ofc_cd = ckam_map_ofc.contract_office_code)
      -- temporary filter for development
      --where of_booking.week in (202214, 202252) and v_customer_opus_n_prospect.cust_grp_id in ('G-DE104898', 'G-JP101854' )


      UNION ALL

      SELECT 'Plan' as record_type
      ---------- Basic details ---------------
      , null as bkg_no
      , null as consolidated_cntr_tpsz
      , null as consolidated_cntr_tpsz_with_rd
      , null as bkg_sts_cd
      , cast(null as datetime) as bkg_cre_dt
      , 'PLN' as rec_typ_n_bkg_sts_cd
      , null as de_term_cd
      , null as rcv_term_cd
      , of_ap.cif_fob as cif_fob_split_cd
      , null as frt_term_cd
      ---------- pickup and return SCC and Yard ---------------
      , null as act_mty_pkup_scc_cd
      , null as mty_pkup_scc_cd
      , null as mty_rtn_scc_cd
      , null as bkg_mty_rtn_scc_cd
      --- empty return ---------------------
      , null as bkg_mty_pkup_yd_cd
      , null as bkg_mty_rtn_yd_cd
      , null as act_mty_pkup_yd_cd
      , null as act_mty_rtn_yd_cd
      , null as mty_pkup_yd_cd
      , null as mty_rtn_yd_cd
      --, null as mty_pkup_ecc
      --, null as mty_rtn_ecc
      ---------- TEU , CM and Weight ---------------
      , of_ap.ap_teu as teu
      , null as cmt
      , null as cm_amt_eppa -- dcn504, 2022-Jan
      , null as cm_amt_eppb -- dcn504, 2022-Jan
      , null as bkg_cgo_wgt
      , null as grs_wgt
      ---------- cargo and commdity ---------------
      , null as cmdt_cd
      , null as cmdt_nm
      , null as cgo_ntr_cd
      , null as cgo_ntr_nm
      , null as dcgo_flg
      , null as rd_cgo_flg
      , null as container_cat
      ---------- contract customer, shipper, consinee, forwarder, and sales person ---------------
      , '<blank>' as consolidated_cnt_cust_cd
      , of_ap.sc_rfa_customer_group_code as consolidated_cnt_cust_grp_cd
      , null as cust_nvo_fak_nac
      , NULL as cust_bco_fak_nac
      , null as actual_cust_cd
      , null as actual_cust_nm
      ---------- locations  ---------------
      , null as por_cd
      , null as ori_cnt
      , NULL as cn_sub_reg --DCN-1120
      , null as del_cd
      , null as del_cnt
      , null as n1st_pod_cd
      , null as n1st_pol_cd
      , null as final_pod_cd
      , null as pod_loc_cd
      , null as pol_loc_cd
      , NULL as trnk_pol_cd
      , NULL as trnk_pod_cd
      , NULL as cgm_por_country_name
      , NULL as cgm_por_country_code
      ---------- about service contract ---------------
      , of_ap.sc_rfa_number as svc_cont_no
      , (CASE WHEN of_ap.sc_rfa_number like 'DUM%' THEN 'yes' ELSE 'no' END) as is_svc_cont_dummy
      , null as sc_rfa_ctrt_tp_nm
      , null as cont_effective_dt
      , null as cont_expiry_dt
      --, of_ap.sc_rfa_contract_type as cont_period_typ_cd -- Jack 2022.11.11 use of_svc_contract.ctrt_dur_tp_cd instead, for consistency
      , of_svc_contract.ctrt_dur_tp_cd as cont_period_typ_cd
      , (CASE
      WHEN of_svc_contract.sc_rfa_typ     = 'T' THEN 'Short'
      WHEN of_svc_contract.ctrt_dur_tp_cd = 'L' THEN 'Long'
      WHEN of_svc_contract.ctrt_dur_tp_cd = 'M' THEN 'Medium'
      WHEN of_svc_contract.ctrt_dur_tp_cd = 'S' THEN 'Short' END) as cont_period_typ
      --, NULL as cont_period_typ_bkg -- Jack, 2022.12.10 No longer use cont_period_typ_bkg
      , of_ap.ap_submission_office as ctrt_scp_srep_ofc_cd
      , null                       as ctrt_scp_srep_eml
      , null                       as ctrt_scp_srep_nm
      , of_ap.contract_office_code as ctrt_prop_ofc_cd
      , null                       as ctrt_prop_srep_eml
      , null                       as ctrt_prop_srep_nm
      , CASE of_ctrt_reg.reg_cust_cnt_cd  WHEN 'BR' THEN 'SAOHQ' WHEN 'US' THEN 'RICHQ' WHEN 'HK' THEN 'HKGHQ' WHEN 'SG' THEN 'SINHQ' WHEN 'GB' THEN 'LONHQ' END   as ctrt_prop_rhq_code
      , of_ctrt_lcn.country_code   as ctrt_prop_ctry_code
      ---------- about service scope, service lane  ---------------
      , null as svc_scp_cd
      , CASE
      WHEN of_ap.Dominant_Leg_Flag = 'Y' THEN 'DOM'
      WHEN of_ap.Dominant_Leg_Flag = 'N' THEN 'N-DOM'
      ELSE NULL
      END as dominant_flg
      -- , null as dir_cd
      , substr(of_ap.trunk_vvd_service_lane_code,1,3) as slane_cd -- not sure id this is always 3 characters, if so can avoid substr()
      , null as rlane_cd
      , of_ap.trade_code as svc_scp_grp_cd
      , null as trd_cd
      , null as sub_trd_cd
      ----------- sales week ---------------
      , regexp_replace(of_ap.sales_week, '[/W]', '') as week  -- derived
      ---- dashboard mering exercise -----
      , NULL as bkg_cxl_rsn_cd
      , NULL as bkg_cxl_sub_rsn_cd
      , NULL as bkg_cncl_party
      , null as bkg_cxl_rsn_desc
      , null as bkg_cxl_sub_rsn_desc
      -------------- others --------------------
      , null as bkg_channel -- dashboard merging : booking channel
      , null as bkg_channel_code -- WH DCN-948 (202305)
      , null as bkg_channel_desc -- WH DCN-948 (202305)
      , null as is_one_quotation
      , of_ap.trunk_vvd_code as rev_vvd
      , null as sc_rfa_sls_rep_ofc_cnt_cd
      , null as sc_rfa_sls_rep_ofc_cnt_nm
      , of_ap.sc_rfa_customer_group_code as account_plan_sc_rfa_customer_group_code
      , null as rc_flg           -- dcn504, 2022-Jan
      , null as rev_period_yrqtr -- dcn504, 2022-Jan
      , NULL as tot_g_rev        -- dashboard merging exercise
      , NULL as bkg_ofc_cd
      , NULL as cgo_rcv_dt
      , NULL as lodg_due_dt
      , NULL as T_SLAN_CD        --WH DCN-909 (202305)
      , CASE WHEN ckam_map_ofc.ckam_sales_person IS NOT NULL THEN ckam_map_ofc.ckam_sales_person ELSE ckam_map_ctry.ckam_sales_person END as ckam_sales_person
      --     , NULL as scp_ofc_cd
      --     , of_svc_contract.sc_rfa_typ
      , 'Plan-'||of_ap.record_id as primary_key
      FROM ${of_account_plan.SQL_TABLE_NAME}  as of_ap
      LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON of_ap.sc_rfa_number    = of_svc_contract.sc_rfa_no
      INNER JOIN  ${of_svc_contract_dtl.SQL_TABLE_NAME} of_svc_contract_dtl  ON of_svc_contract_dtl.sc_rfa_no    = of_svc_contract.sc_rfa_no
      LEFT JOIN ${of_office.SQL_TABLE_NAME}       as of_ctrt_ofc ON of_ap.contract_office_code = of_ctrt_ofc.office_code
      -- DCN-1050
      LEFT JOIN ${of_customer.SQL_TABLE_NAME}     as of_cust ON of_svc_contract.cust_cd        = of_cust.cust_cd
      LEFT JOIN ${of_location.SQL_TABLE_NAME}     as of_ctrt_lcn ON of_ctrt_ofc.location_code  = of_ctrt_lcn.location_code
      LEFT JOIN ${of_reg_ref.SQL_TABLE_NAME}      as of_ctrt_reg ON of_ctrt_lcn.country_code   = of_ctrt_reg.cust_cnt_cd
      -- DCN-1050
      LEFT JOIN   ${ckam_mapping_one_per_country.SQL_TABLE_NAME} ckam_map_ctry ON (of_ap.sc_rfa_customer_group_code = ckam_map_ctry.customer_grp_id and
      of_ctrt_lcn.country_code = ckam_map_ctry.contract_country_code)
      LEFT JOIN   ${ckam_mapping_one_per_office.SQL_TABLE_NAME} ckam_map_ofc ON (of_ap.sc_rfa_customer_group_code = ckam_map_ofc.customer_grp_id and
      of_ctrt_lcn.country_code = ckam_map_ofc.contract_country_code and
      of_ap.contract_office_code = ckam_map_ofc.contract_office_code)
      -- temporary filter for development
      --WHERE 1=2



      UNION ALL

      SELECT 'Target' as record_type
      ---------- Basic details ---------------
      , null  as bkg_no
      , null  as consolidated_cntr_tpsz
      , null  as consolidated_cntr_tpsz_with_rd
      , null  as bkg_sts_cd
      , cast(null as datetime) as bkg_cre_dt
      , 'TGT' as rec_typ_n_bkg_sts_cd
      , null  as de_term_cd
      , null  as rcv_term_cd
      , null  as cif_fob_split_cd
      , null  as frt_term_cd
      ---------- pickup and return SCC and Yard ---------------
      , null as act_mty_pkup_scc_cd
      , null as mty_pkup_scc_cd
      , null as mty_rtn_scc_cd
      , null as bkg_mty_rtn_scc_cd
      --- empty return ---------------------
      , null as bkg_mty_pkup_yd_cd
      , null as bkg_mty_rtn_yd_cd
      , null as act_mty_pkup_yd_cd
      , null as act_mty_rtn_yd_cd
      , null as mty_pkup_yd_cd
      , null as mty_rtn_yd_cd
      --, null as mty_pkup_ecc
      --, null as mty_rtn_ecc
      ---------- TEU , CM and Weight ---------------
      , weekly_average as teu
      , null as cm_amt
      , null as cm_amt_eppa -- dcn504, 2022-Jan
      , null as cm_amt_eppb -- dcn504, 2022-Jan
      , null as bkg_cgo_wgt
      , null as grs_wgt
      ---------- cargo and commdity ---------------
      , null as cmdt_cd
      , null as cmdt_nm
      , null as cgo_ntr_cd
      , null as cgo_ntr_nm
      , null as dcgo_flg
      , null as rd_cgo_flg
      , CASE Live_Reefer_Flag WHEN "Y" THEN "Reefer" WHEN "N" THEN "Others" ELSE NULL END as container_cat  -- DCN-1120
      ---------- contract customer, shipper, consinee, forwarder, and sales person ---------------
      , coalesce(v_customer_opus_n_prospect_cust_cd, '<blank>') as consolidated_cust_cd  -- derived
      , v_customer_opus_n_prospect_of_cust_grp_cd as consolidated_cnt_cust_grp_cd
      , null as cust_nvo_fak_nac
      , NULL as cust_bco_fak_nac
      , null as actual_cust_cd
      , null as actual_cust_nm
      ---------- locations  ---------------
      , of_location_origin_location_code as por_cd  -- derived
      , CASE WHEN of_location_origin_location_code IS NOT NULL THEN LEFT(of_location_origin_location_code,2)
      ELSE of_customer_target_and_target_dtl_weekly.Origin_Country END as ori_cnt -- DCN 1009
      , CN_Sub_Region as cn_sub_reg --DCN-1120
      , of_location_destination_location_code as del_cd  -- derived
      , LEFT(of_location_destination_location_code,2) as del_cnt  -- dcn618 change from null to cva origin ctry
      , null as n1st_pod_cd
      , null as n1st_pol_cd
      , null as final_pod_cd
      , null as pod_loc_cd
      , null as pol_loc_cd
      , null as trnk_pol_cd
      , null as trnk_pod_cd
      , NULL as cgm_por_country_name
      , NULL as cgm_por_country_code
      ---------- about service contract ---------------
      , of_svc_contract_sc_rfa_no as svc_cont_no  -- derived
      , (CASE WHEN of_svc_contract_sc_rfa_no like 'DUM%' THEN 'yes' ELSE 'no' END) as is_svc_cont_dummy
      , null as sc_rfa_ctrt_tp_nm
      , null as cont_effective_dt
      , null as cont_expiry_dt
      , of_svc_contract_cont_period_typ_cd as cont_period_typ_cd
      , of_svc_contract_cont_period_typ    as cont_period_typ
      --, NULL                     as cont_period_typ_bkg -- Jack, Jul 28, 2021
      , null                     as ctrt_scp_srep_ofc_cd
      , null                     as ctrt_scp_srep_eml
      , null                     as ctrt_scp_srep_nm
      , of_svc_contract_ofc_cd   as ctrt_prop_ofc_cd
      , null                     as ctrt_prop_srep_eml
      , of_user_fullname         as ctrt_prop_srep_nm
      , CASE WHEN of_svc_contract_sc_rfa_no IS NOT NULL
      THEN (CASE of_ctrt_reg.reg_cust_cnt_cd    WHEN 'BR' THEN 'SAOHQ' WHEN 'US' THEN 'RICHQ' WHEN 'HK' THEN 'HKGHQ' WHEN 'SG' THEN 'SINHQ' WHEN 'GB' THEN 'LONHQ' END)
      ELSE (CASE of_sls_psn_reg.reg_cust_cnt_cd WHEN 'BR' THEN 'SAOHQ' WHEN 'US' THEN 'RICHQ' WHEN 'HK' THEN 'HKGHQ' WHEN 'SG' THEN 'SINHQ' WHEN 'GB' THEN 'LONHQ' END)
      END as ctrt_prop_rhq_code
      , CASE WHEN of_svc_contract_sc_rfa_no IS NOT NULL
      THEN of_ctrt_lcn.country_code ELSE of_sls_psn_lcn.country_code END as ctrt_prop_ctry_code
      ---------- about service scope, service lane  ---------------
      , service_scope as svc_scp_cd
      , coalesce((case when of_customer_target_and_target_dtl_weekly.dominant_flag = 'N' then 'N-DOM'
      when of_customer_target_and_target_dtl_weekly.dominant_flag = 'Y' then 'DOM'
      ELSE NULL END) ,of_svc_scp.dominant_flag) as dominant_flg
      , of_vsl_svc_lane_service_lane_code as slane_cd  -- derived
      , Revenue_Lane_Code as rlane_cd
      , service_scope_group as svc_scp_grp_cd
      , null as trd_cd
      , null as sub_trd_cd
      ----------- sales week ---------------
      , sales_week as week
      ---- dashboard mering exercise -----
      , NULL as bkg_cxl_rsn_cd
      , NULL as bkg_cxl_sub_rsn_cd
      , NULL as bkg_cncl_party
      , null as bkg_cxl_rsn_desc
      , null as bkg_cxl_sub_rsn_desc
      -------------- others --------------------
      , null as bkg_channel -- dashboard merging : booking channel
      , null as bkg_channel_code -- WH DCN-948 (202305)
      , null as bkg_channel_desc -- WH DCN-948 (202305)
      , null as is_one_quotation
      , null as rev_vvd
      , null as sc_rfa_sls_rep_ofc_cnt_cd
      , null as sc_rfa_sls_rep_ofc_cnt_nm
      , null as account_plan_sc_rfa_customer_group_code
      , null as rc_flg           -- dcn504, 2022-Jan
      , null as rev_period_yrqtr -- dcn504, 2022-Jan
      , NULL as tot_g_rev        -- dashboard merging exercise
      , NULL as bkg_ofc_cd
      , NULL as cgo_rcv_dt -- dcn848
      , NULL as lodg_due_dt  -- dcn848
      , NULL as T_SLAN_CD    --WH DCN-909 (202305)
      , CASE WHEN ckam_map_ofc.ckam_sales_person IS NOT NULL THEN ckam_map_ofc.ckam_sales_person ELSE ckam_map_ctry.ckam_sales_person END as ckam_sales_person
      --     , of_customer_target_and_target_dtl_weekly.scp_ofc_cd
      --     , NULL as sc_rfa_typ
      , 'Target-'||of_customer_target_and_target_dtl_weekly.oneforce_id ||'-'|| of_customer_target_and_target_dtl_weekly.sales_week as primary_key
      --, of_ap_tgt.sales_week as planned_bkg
      FROM ${of_customer_target_and_target_dtl_weekly.SQL_TABLE_NAME} as of_customer_target_and_target_dtl_weekly
      LEFT JOIN (SELECT distinct service_scope_code, service_scope_name, service_scope_group_code, dominant_flag
      FROM   ${of_svc_scp.SQL_TABLE_NAME}
      ) as of_svc_scp ON of_customer_target_and_target_dtl_weekly.service_scope = of_svc_scp.service_scope_code
      -- contract office, country and region
      LEFT JOIN ${of_office.SQL_TABLE_NAME}   as of_ctrt_ofc ON of_customer_target_and_target_dtl_weekly.of_svc_contract_ofc_cd = of_ctrt_ofc.office_code
      LEFT JOIN ${of_location.SQL_TABLE_NAME} as of_ctrt_lcn ON of_ctrt_ofc.location_code  = of_ctrt_lcn.location_code
      LEFT JOIN ${of_reg_ref.SQL_TABLE_NAME}  as of_ctrt_reg ON of_ctrt_lcn.country_code   = of_ctrt_reg.cust_cnt_cd
      -- sales peson  office, country and region
      LEFT JOIN ${of_office.SQL_TABLE_NAME}   as of_sls_psn_ofc ON of_customer_target_and_target_dtl_weekly.of_user_ofc_code = of_sls_psn_ofc.office_code
      LEFT JOIN ${of_location.SQL_TABLE_NAME} as of_sls_psn_lcn ON of_sls_psn_ofc.location_code  = of_sls_psn_lcn.location_code
      LEFT JOIN ${of_reg_ref.SQL_TABLE_NAME}  as of_sls_psn_reg ON of_sls_psn_lcn.country_code   = of_sls_psn_reg.cust_cnt_cd
      -- DCN-1050
      LEFT JOIN   ${ckam_mapping_one_per_country.SQL_TABLE_NAME} ckam_map_ctry ON (v_customer_opus_n_prospect_of_cust_grp_cd = ckam_map_ctry.customer_grp_id and
      of_ctrt_lcn.country_code = ckam_map_ctry.contract_country_code)
      LEFT JOIN   ${ckam_mapping_one_per_office.SQL_TABLE_NAME} ckam_map_ofc ON (v_customer_opus_n_prospect_of_cust_grp_cd = ckam_map_ofc.customer_grp_id and
      of_ctrt_lcn.country_code = ckam_map_ofc.contract_country_code and
      of_svc_contract_ofc_cd = ckam_map_ofc.contract_office_code)

      -- temporary filer for development
      --where sales_week  in ('202214', '202252' ) and v_customer_opus_n_prospect_cust_cd in ( 'DE104898'  , 'JP101854' )
      ;;

    #persist_for: "24 hours"
    sql_trigger_value: SELECT  CASE WHEN
          CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
          TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
          AS INT64)  < 150 THEN 150
          WHEN
          CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
          TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
          AS INT64)  < 510 THEN 510
          WHEN
          CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
          TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
          AS INT64) < 870 THEN 870
          WHEN
          CAST(TIME_DIFF(EXTRACT(TIME FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore"),
          TIME(EXTRACT(DATE FROM CURRENT_TIMESTAMP() AT TIME ZONE "Asia/Singapore")),MINUTE)
          AS INT64) < 1230 THEN 1230
          ELSE 150 END ;;
  }

  ##For TPA download restriction for Booking data
  dimension: TPA_user_country {
    label: "TPA User Country"
    type: string
    sql: SELECT  upper(substring(Office_Code, 1, instr(Office_Code, '-') - 2)) AS Country_Name FROM ONEFORCE.OF_USER WHERE REPLACE(Email, '.invalid', '') = REPLACE('{{ _user_attributes["email"] }}', '.invalid', '') AND IsActive = 'true' AND  (Profile_Name = 'TPA (Service Cloud) CCA'
      OR Profile_Name = 'TPA (Service Cloud) CCS' OR Profile_Name = 'Third Party Agent') LIMIT 1;;
  }

  dimension: bkg_sts_cd_dscr {
    label: "Booking Status"
    type: string
    sql: CASE ${TABLE}.bkg_sts_cd
           WHEN 'F' THEN 'Firm'
           WHEN 'S' THEN 'Split'
           WHEN 'W' THEN 'Waitlisted'
           WHEN 'X' THEN 'Cancelled'
           END  ;;
  }

  dimension: bkg_firm_n_wait_dscr {
    label: "Booking Firm and Wait Status"
    type: string
    sql: CASE ${TABLE}.bkg_sts_cd
           WHEN 'F' THEN 'Firm'
           WHEN 'S' THEN 'Firm'
           WHEN 'W' THEN 'Waitlisted'
           WHEN 'X' THEN 'Cancelled'
           END  ;;
  }
  # filter for DCN-1120
  filter: cont_cat {
    label: "Container Category Filter"
    type: string
    suggestions: ["Reefer","Dry","RAD","Special","Others"]
    sql: ((${record_type} = 'Booking' AND {% condition cont_cat %} ${container_cat} {% endcondition %})
          OR (${record_type} = 'Target' AND {% condition cont_cat %} 'Reefer' {% endcondition %} AND ${container_cat} = 'Reefer')
          OR (${record_type} = 'Target' AND NOT {% condition cont_cat %} 'Reefer' {% endcondition %} AND ${container_cat} = 'Others')) ;;
  }

  filter: bkg_sts_cd_filter {
    type: string
    #suggestions: ["F","X","S","W"]
    suggestions: ["Firm","Split","Waitlisted","Cancelled"]
    default_value: "Firm"
    sql: ( ${record_type} != 'Booking' OR ({% condition bkg_sts_cd_filter %} ${bkg_sts_cd_dscr} {% endcondition %}) );;
  }

  filter: bkg_firm_n_wait_filter {
    type: string
    #suggestions: ["F","X","S","W"]
    suggestions: ["Firm","Waitlisted"]
    default_value: "Firm,Waitlisted"
    sql: ( ${record_type} != 'Booking' OR ({% condition bkg_firm_n_wait_filter %} ${bkg_firm_n_wait_dscr} {% endcondition %}) );;
  }

  filter: cncl_bkg_filter {
    type: string
    #suggestions: ["Included","Excluded"]
    suggestions: ["Excluded"]
    default_value: "Excluded"
    sql: ( ${record_type} != 'Booking'
           OR
           ({% condition cncl_bkg_filter %} 'Excluded' {% endcondition %}
            and ${bkg_sts_cd} <> 'X' )
           OR
           ({% condition cncl_bkg_filter %} 'Included' {% endcondition %} )
         );;
  }

  filter: mgr_full_name_filter   {
    label: "Manager Filter"
    suggest_dimension: cust_owner.mgr_full_name
    required_fields: [cust_owner.dummy]
    sql:  {% condition mgr_full_name_filter %} cust_owner.full_name {% endcondition %} OR {% condition mgr_full_name_filter %} cust_owner.mgr_full_name {% endcondition %} ;;
  }

  filter: por_or_del_country_filter {
    label: "POR or DEL Country"
    suggest_dimension: POR_country.country_name
    required_fields: [POR_country.dummy,DEL_country.dummy]
    sql:  {% condition por_or_del_country_filter %} POR_country.country_name {% endcondition %} OR {% condition por_or_del_country_filter %} DEL_country.country_name {% endcondition %}
      ;;
  }

  filter: por_or_del_rhq_filter {
    label: "POR or DEL RHQ"
    suggest_dimension: POR_reg_ref.reg_rhq_code
    required_fields: [POR_reg_ref.dummy,DEL_reg_ref.dummy]
    sql:  ( {% condition por_or_del_rhq_filter %} 'SAOHQ' {% endcondition %} and POR_reg_ref.reg_cust_cnt_cd = 'BR' ) OR
          ( {% condition por_or_del_rhq_filter %} 'RICHQ' {% endcondition %} and POR_reg_ref.reg_cust_cnt_cd = 'US' ) OR
          ( {% condition por_or_del_rhq_filter %} 'HKGHQ' {% endcondition %} and POR_reg_ref.reg_cust_cnt_cd = 'HK' ) OR
          ( {% condition por_or_del_rhq_filter %} 'SINHQ' {% endcondition %} and POR_reg_ref.reg_cust_cnt_cd = 'SG' ) OR
          ( {% condition por_or_del_rhq_filter %} 'LONHQ' {% endcondition %} and POR_reg_ref.reg_cust_cnt_cd = 'GB' ) OR
          ( {% condition por_or_del_rhq_filter %} 'SAOHQ' {% endcondition %} and DEL_reg_ref.reg_cust_cnt_cd = 'BR' ) OR
          ( {% condition por_or_del_rhq_filter %} 'RICHQ' {% endcondition %} and DEL_reg_ref.reg_cust_cnt_cd = 'US' ) OR
          ( {% condition por_or_del_rhq_filter %} 'HKGHQ' {% endcondition %} and DEL_reg_ref.reg_cust_cnt_cd = 'HK' ) OR
          ( {% condition por_or_del_rhq_filter %} 'SINHQ' {% endcondition %} and DEL_reg_ref.reg_cust_cnt_cd = 'SG' ) OR
          ( {% condition por_or_del_rhq_filter %} 'LONHQ' {% endcondition %} and DEL_reg_ref.reg_cust_cnt_cd = 'GB' )
      ;;
  }

  filter: filter_measure {
    type: string
    suggestions: ["DUMMY"]
    default_value: "DUMMY"
    sql: {% if    top_n_ranking_dimension_param._parameter_value == "'CGRPBCO'"  %} ${top_n_ranking_dimension} is not null
         {% elsif top_n_ranking_dimension_param._parameter_value == "'CGRPNVO'"  %} ${top_n_ranking_dimension} is not null
         {% else  %} 1=1
         {% endif %} ;;
  }

  filter: filter_measure2 {
    type: string
    suggestions: ["DUMMY"]
    default_value: "DUMMY"
    sql: {% if    top_n_ranking_dimension_param2._parameter_value == "'CGRPBCO'"  %} ${top_n_ranking_dimension2} is not null
         {% elsif top_n_ranking_dimension_param2._parameter_value == "'CGRPNVO'"  %} ${top_n_ranking_dimension2} is not null
         {% else  %} 1=1
         {% endif %} ;;
  }

  filter: filter_measure3 {
    type: string
    suggestions: ["DUMMY"]
    default_value: "DUMMY"
    sql: {% if    top_n_ranking_dimension_param3._parameter_value == "'CGRPBCO'"  %} ${top_n_ranking_dimension3} is not null
         {% elsif top_n_ranking_dimension_param3._parameter_value == "'CGRPNVO'"  %} ${top_n_ranking_dimension3} is not null
         {% else  %} 1=1
         {% endif %} ;;
  }

  filter: filter_measure4 {
    type: string
    suggestions: ["DUMMY"]
    default_value: "DUMMY"
    sql: {% if    top_n_ranking_dimension_param4._parameter_value == "'CGRPBCO'"  %} ${top_n_ranking_dimension4} is not null
         {% elsif top_n_ranking_dimension_param4._parameter_value == "'CGRPNVO'"  %} ${top_n_ranking_dimension4} is not null
         {% else  %} 1=1
         {% endif %} ;;
  }

  parameter: percent_of_ttl_func_typ {
    type: string
    allowed_value: { value: "ALL_DATA" }
    allowed_value: { value: "TIMELINE" }
    default_value: "ALL_DATA"
    suggest_persist_for: "24 hour"
  }

  parameter: internal_vs_external {
    label: "Internal vs External"
    type: string
    allowed_value: { label: "Internal" value: "INT" }
    allowed_value: { label: "External" value: "EXT" }
    default_value: "INT"
    suggest_persist_for: "24 hour"
  }

  parameter: apply_vms_adjustment_to_target {
    label: "Target Selection"
    type: string
    allowed_value: {label: "Target"      value: "No"  }
    allowed_value: {label: "Adj. Target" value: "Yes" }
    default_value: "No"
  }

  parameter: mode_of_achv_percentage {
    label: "Achivement % Selection"
    type: string
    allowed_value: {label: "Standard"     value: "NORMAL" }
    allowed_value: {label: "Running"      value: "TILL_LAST_CMPL_WK"  }
    default_value: "NORMAL"
  }

  parameter: cm_per_unit_tooltip_param{
    type: string
    allowed_value: { value: "CVA"  }
    allowed_value: { value: "NON_CVA" }
    default_value: "CVA"
  }

  parameter: cm_per_unit_param{
    label: "CM per Unit Parameter"
    type: string
    allowed_value: { label: "TEU"        value: "TEU"  }
    allowed_value: { label: "TEU  %"     value: "TRAT" }
    allowed_value: { label: "CM  %"      value: "CRAT" }
    allowed_value: { label: "Gross CM"   value: "GRCM" }
    allowed_value: { label: "CM/TEU"     value: "CMPT" }
    allowed_value: { label: "CM/MT"      value: "CMPM" }
    allowed_value: { label: "Gross Rev"  value: "GRRV" }
    allowed_value: { label: "Rev/TEU"    value: "RVPT" }
    allowed_value: { label: "Rev/MT"     value: "RVPM" }
    allowed_value: { label: "MT/TEU"     value: "MTPT" }
    allowed_value: { label: "Weekly TEU" value: "TUPW" }
    allowed_value: { label: "Count of Group Customers"    value: "NOCG" }
    allowed_value: { label: "Count of Contracts"     value: "NOSC" }
    default_value: "CMPT"
  }

  measure: cm_per_unit {
    label_from_parameter: cm_per_unit_param
    type: number
    sql:
    {% if    cm_per_unit_param._parameter_value == "'TEU'"  %} ${total_booking_teu}
    {% elsif cm_per_unit_param._parameter_value == "'TRAT'" and percent_of_ttl_func_typ._parameter_value == "'TIMELINE'" %} ${total_booking_teu_per_of_ttl_window_func_by_timeline}
    {% elsif cm_per_unit_param._parameter_value == "'TRAT'" %} ${total_booking_teu_per_of_ttl_window_func}
    {% elsif cm_per_unit_param._parameter_value == "'CRAT'" and percent_of_ttl_func_typ._parameter_value == "'TIMELINE'" %} ${total_cm_amt_per_of_ttl_window_func_by_timeline}
    {% elsif cm_per_unit_param._parameter_value == "'CRAT'" %} ${total_cm_amt_per_of_ttl_window_func}
    {% elsif cm_per_unit_param._parameter_value == "'GRCM'" %} ${total_booking_cm_amt}
    {% elsif cm_per_unit_param._parameter_value == "'CMPT'" %} ${cm_per_teu}
    {% elsif cm_per_unit_param._parameter_value == "'CMPM'" %} ${cm_per_mt}
    {% elsif cm_per_unit_param._parameter_value == "'GRRV'" %} ${total_booking_rev}
    {% elsif cm_per_unit_param._parameter_value == "'RVPT'" %} ${rev_per_teu}
    {% elsif cm_per_unit_param._parameter_value == "'RVPM'" %} ${rev_per_metric_ton}
    {% elsif cm_per_unit_param._parameter_value == "'MTPT'" %} ${mt_per_teu}
    {% elsif cm_per_unit_param._parameter_value == "'TUPW'" %} ${total_booking_teu_per_sales_week}
    {% elsif cm_per_unit_param._parameter_value == "'NOCG'" %} ${count_cust_grp}
    {% elsif cm_per_unit_param._parameter_value == "'NOSC'" %} ${count_svc_cont_no}
    {% else  %} ${cm_per_teu}
    {% endif %}
    ;;
    html:
            {% if percent_of_ttl_func_typ._parameter_value == "'TIMELINE'" %}
                TEU % (in this period):  {{total_booking_teu_per_of_ttl_window_func_by_timeline._rendered_value}} <br>
            {% else  %}
                TEU %:  {{total_booking_teu_per_of_ttl_window_func._rendered_value}} <br>
            {% endif %}

      {% if internal_vs_external._parameter_value == "'INT'" %}
      {% if percent_of_ttl_func_typ._parameter_value == "'TIMELINE'" %}
      CM % (in this period):   {{total_cm_amt_per_of_ttl_window_func_by_timeline._rendered_value}} <br>
      {% else  %}
      CM %:   {{total_cm_amt_per_of_ttl_window_func._rendered_value}} <br>
      {% endif %}
      {% endif %}

      Actual Weekly (TEU):      {{total_booking_teu_per_sales_week._rendered_value}} <br>
      <br>

      {% if cm_per_unit_tooltip_param._parameter_value == "'NON_CVA'" %}
      Actual (TEU):             {{total_booking_teu._rendered_value}} <br>
      {% else %}
      Target (TEU):             {{total_target_teu._rendered_value}} <br>
      Actual (TEU):             {{total_booking_teu._rendered_value}} <br>
      Variance (TEU):           {{teu_variance._rendered_value}} <br>
      Achievement (%):          {{achievement_teu._rendered_value}} <br>
      <br>
      Running Target (TEU):     {{target_progression_value._rendered_value}} <br>
      Running Actual (TEU):     {{total_booking_teu_till_last_compl_wk._rendered_value}} <br>
      Running Target (%):       {{target_progression._rendered_value}} <br>
      Running Achievement (%):  {{achievement_teu_till_last_cmpl_wk._rendered_value}} <br>
      Running Variance (TEU):   {{teu_variance_till_last_cmpl_wk._rendered_value}} <br>

      {% if internal_vs_external._parameter_value == "'INT'" %}
      <br>
      Adjusted Target (TEU):            {{total_target_teu_with_vms._rendered_value}} <br>
      Actual (TEU):                     {{total_booking_teu._rendered_value}} <br>
      Adjusted Variance (TEU):          {{teu_variance_with_vms._rendered_value}} <br>
      Adjusted Achievement (%):         {{achievement_teu_with_vms._rendered_value}} <br>
      <br>
      Adjusted Running Target (TEU):    {{target_progression_with_vms_value._rendered_value}} <br>
      Running Actual (TEU):             {{total_booking_teu_till_last_compl_wk._rendered_value}} <br>
      Adjusted Running Target (%):      {{target_progression_with_vms._rendered_value}} <br>
      Adjusted Running Achievement (%): {{achievement_teu_with_vms_till_last_cmpl_wk._rendered_value}} <br>
      Adjusted Running Variance (TEU):  {{teu_variance_with_vms_till_last_cmpl_wk._rendered_value}} <br>
      VOID Sailing Impact (%):          {{of_dep_sched_smry2.vms_wk_perc._rendered_value}} <br>
      {% endif %}

      {% endif %}
      <br>

      Gross Revenue:   {{total_booking_rev._rendered_value}} <br>
      Revenue/TEU:     {{rev_per_teu._rendered_value}} <br>
      Revenue/MT:      {{rev_per_metric_ton._rendered_value}} <br>
      <br>

      {% if internal_vs_external._parameter_value == "'INT'" %}
      Gross CM:        {{total_booking_cm_amt._rendered_value}} <br>
      CM/TEU:          {{cm_per_teu._rendered_value}} <br>
      CM/MT:           {{cm_per_mt._rendered_value}} <br>
      <br>
      {% endif %}

      Gross Weight (MT)/TEU:       {{mt_per_teu._rendered_value}} <br>
      Count of Group Customers:    {{count_cust_grp._rendered_value}} <br>
      Count of Contracts (S/C):    {{count_svc_cont_no_sc._rendered_value}} <br>
      Count of Contracts (RFA):    {{count_svc_cont_no_rfa._rendered_value}} <br>
      Count of Contracts (Tariff): {{count_svc_cont_no_trf._rendered_value}} <br>
      ;;
    value_format: "[>=10000000]#,##0,,\"M\" ; [>=1]#,##0 ; 0%"
  }

  parameter: cm_per_unit2_param{
    label: "Dynamic Measure (Actual) Parameter"
    type: string
    allowed_value: { label: "TEU"        value: "TEU"  }
    allowed_value: { label: "TEU  %"     value: "TRAT" }
    allowed_value: { label: "CM  %"      value: "CRAT" }
    allowed_value: { label: "Gross CM"   value: "GRCM" }
    allowed_value: { label: "CM/TEU"     value: "CMPT" }
    allowed_value: { label: "CM/MT"      value: "CMPM" }
    allowed_value: { label: "Gross Rev"  value: "GRRV" }
    allowed_value: { label: "Rev/TEU"    value: "RVPT" }
    allowed_value: { label: "Rev/MT"     value: "RVPM" }
    allowed_value: { label: "MT/TEU"     value: "MTPT" }
    allowed_value: { label: "Weekly TEU" value: "TUPW" }
    allowed_value: { label: "Count of Group Customers"    value: "NOCG" }
    allowed_value: { label: "Count of Contracts"          value: "NOSC" }
    default_value: "CMPT"
  }

  measure: cm_per_unit2 {
    label_from_parameter: cm_per_unit2_param
    type: number
    sql:
    {% if    cm_per_unit2_param._parameter_value == "'TEU'"  %} ${total_booking_teu}
    {% elsif cm_per_unit2_param._parameter_value == "'TRAT'" and percent_of_ttl_func_typ._parameter_value == "'TIMELINE'" %} ${total_booking_teu_per_of_ttl_window_func_by_timeline}
    {% elsif cm_per_unit2_param._parameter_value == "'TRAT'" %} ${total_booking_teu_per_of_ttl_window_func}
    {% elsif cm_per_unit2_param._parameter_value == "'CRAT'" and percent_of_ttl_func_typ._parameter_value == "'TIMELINE'" %} ${total_cm_amt_per_of_ttl_window_func_by_timeline}
    {% elsif cm_per_unit2_param._parameter_value == "'CRAT'" %} ${total_cm_amt_per_of_ttl_window_func}
    {% elsif cm_per_unit2_param._parameter_value == "'GRCM'" %} ${total_booking_cm_amt}
    {% elsif cm_per_unit2_param._parameter_value == "'CMPT'" %} ${cm_per_teu}
    {% elsif cm_per_unit2_param._parameter_value == "'CMPM'" %} ${cm_per_mt}
    {% elsif cm_per_unit2_param._parameter_value == "'GRRV'" %} ${total_booking_rev}
    {% elsif cm_per_unit2_param._parameter_value == "'RVPT'" %} ${rev_per_teu}
    {% elsif cm_per_unit2_param._parameter_value == "'RVPM'" %} ${rev_per_metric_ton}
    {% elsif cm_per_unit2_param._parameter_value == "'MTPT'" %} ${mt_per_teu}
    {% elsif cm_per_unit2_param._parameter_value == "'TUPW'" %} ${total_booking_teu_per_sales_week}
    {% elsif cm_per_unit2_param._parameter_value == "'NOCG'" %} ${count_cust_grp}
    {% elsif cm_per_unit2_param._parameter_value == "'NOSC'" %} ${count_svc_cont_no}
    {% else  %} ${cm_per_teu}
    {% endif %}
    ;;
    html:
            {% if percent_of_ttl_func_typ._parameter_value == "'TIMELINE'" %}
                TEU % (in this period):  {{total_booking_teu_per_of_ttl_window_func_by_timeline._rendered_value}} <br>
            {% else  %}
                TEU %:  {{total_booking_teu_per_of_ttl_window_func._rendered_value}} <br>
            {% endif %}

      {% if internal_vs_external._parameter_value == "'INT'" %}
      {% if percent_of_ttl_func_typ._parameter_value == "'TIMELINE'" %}
      CM % (in this period):   {{total_cm_amt_per_of_ttl_window_func_by_timeline._rendered_value}} <br>
      {% else  %}
      CM %:   {{total_cm_amt_per_of_ttl_window_func._rendered_value}} <br>
      {% endif %}
      {% endif %}

      Actual Weekly (TEU):      {{total_booking_teu_per_sales_week._rendered_value}} <br>
      <br>

      {% if cm_per_unit_tooltip_param._parameter_value == "'NON_CVA'" %}
      Actual (TEU):             {{total_booking_teu._rendered_value}} <br>
      {% else %}
      Target (TEU):             {{total_target_teu._rendered_value}} <br>
      Actual (TEU):             {{total_booking_teu._rendered_value}} <br>
      Variance (TEU):           {{teu_variance._rendered_value}} <br>
      Achievement (%):          {{achievement_teu._rendered_value}} <br>
      <br>
      Running Target (%):       {{target_progression._rendered_value}} <br>
      Running Achievement (%):  {{achievement_teu_till_last_cmpl_wk._rendered_value}} <br>
      Running Variance (TEU):   {{teu_variance_till_last_cmpl_wk._rendered_value}} <br>
      {% if internal_vs_external._parameter_value == "'INT'" %}
      <br>
      Adjusted Target (TEU):    {{total_target_teu_with_vms._rendered_value}} <br>
      Actual (TEU):             {{total_booking_teu._rendered_value}} <br>
      Adjusted Variance (TEU):  {{teu_variance_with_vms._rendered_value}} <br>
      Adjusted Achievement (%): {{achievement_teu_with_vms._rendered_value}} <br>
      <br>
      Adjusted Running Target (%):      {{target_progression_with_vms._rendered_value}} <br>
      Adjusted Running Achievement (%): {{achievement_teu_with_vms_till_last_cmpl_wk._rendered_value}} <br>
      Adjusted Running Variance (TEU):  {{teu_variance_with_vms_till_last_cmpl_wk._rendered_value}} <br>
      VOID Sailing Impact (%):  {{of_dep_sched_smry2.vms_wk_perc._rendered_value}} <br>
      {% endif %}
      {% endif %}
      <br>

      Gross Revenue:   {{total_booking_rev._rendered_value}} <br>
      Revenue/TEU:     {{rev_per_teu._rendered_value}} <br>
      Revenue/MT:      {{rev_per_metric_ton._rendered_value}} <br>
      <br>

      {% if internal_vs_external._parameter_value == "'INT'" %}
      Gross CM:        {{total_booking_cm_amt._rendered_value}} <br>
      CM/TEU:          {{cm_per_teu._rendered_value}} <br>
      CM/MT:           {{cm_per_mt._rendered_value}} <br>
      <br>
      {% endif %}

      Gross Weight (MT)/TEU:       {{mt_per_teu._rendered_value}} <br>
      Count of Group Customers:    {{count_cust_grp._rendered_value}} <br>
      Count of Contracts (S/C):    {{count_svc_cont_no_sc._rendered_value}} <br>
      Count of Contracts (RFA):    {{count_svc_cont_no_rfa._rendered_value}} <br>
      Count of Contracts (Tariff): {{count_svc_cont_no_trf._rendered_value}} <br>
      ;;
    value_format: "[>=10000000]#,##0,,\"M\" ; [>=1]#,##0 ; 0%"
  }

  parameter: top_n_criterion {
    label: "Top N Non-CVA Measure"
    type: string
    allowed_value: { label: "TEU"            value: "TEU"  }
    #allowed_value: { label: "Target"         value: "TGT"  }
    #allowed_value: { label: "Achievement %"  value: "ACHV" }
    allowed_value: { label: "Gross CM"       value: "GRCM" }
    allowed_value: { label: "CM/TEU"         value: "CMPT" }
    allowed_value: { label: "CM/MT"          value: "CMPM" }
    allowed_value: { label: "Gross Rev"      value: "GRRV" }
    allowed_value: { label: "Rev/TEU"        value: "RVPT" }
    allowed_value: { label: "Rev/MT"         value: "RVPM" }

    allowed_value: { label: "MT/TEU"              value: "MTPT" }
    allowed_value: { label: "Weekly TEU"          value: "TUPW" }
    allowed_value: { label: "Count of Group Customers"    value: "NOCG" }
    allowed_value: { label: "Count of Contracts"     value: "NOSC" }

    default_value: "TEU"
  }

  measure: top_n_ranking_measure {
    label_from_parameter: top_n_criterion
    type: number
    sql:
    {% if     top_n_criterion._parameter_value == "'TEU'"  %} ${total_booking_teu}
    {% elsif  top_n_criterion._parameter_value == "'TGT'"  %} ${total_target_teu_with_param}
    {% elsif  top_n_criterion._parameter_value == "'ACHV'" %} ${achievement_teu_with_param}
    {% elsif  top_n_criterion._parameter_value == "'CMPM'" %} ${cm_per_mt}
    {% elsif  top_n_criterion._parameter_value == "'CMPT'" %} ${cm_per_teu}
    {% elsif  top_n_criterion._parameter_value == "'GRCM'" %} ${total_booking_cm_amt}
    {% elsif  top_n_criterion._parameter_value == "'GRRV'" %} ${total_booking_rev}
    {% elsif  top_n_criterion._parameter_value == "'RVPT'" %} ${rev_per_teu}
    {% elsif  top_n_criterion._parameter_value == "'RVPM'" %} ${rev_per_metric_ton}

      {% elsif  top_n_criterion._parameter_value == "'MTPT'" %} ${mt_per_teu}
      {% elsif  top_n_criterion._parameter_value == "'TUPW'" %} ${total_booking_teu_per_sales_week}
      {% elsif  top_n_criterion._parameter_value == "'NOCG'" %} ${count_cust_grp}
      {% elsif  top_n_criterion._parameter_value == "'NOSC'" %} ${count_svc_cont_no}

      {% else  %} ${total_booking_teu}
      {% endif %} ;;

    value_format: "[>=10000000]#,##0,,\"M\" ; [>=1]#,##0 ; 0%"
  }

  parameter: top_n_ranking_dimension_param {
    label: "Top N Ranking Dims, Non-CVA related (1:Param 1A)"
    type: string

    allowed_value: { label: "By Customer Group"   value: "CGRP"  }
    allowed_value: { label: "By BCO"              value: "CGRPBCO"  }
    allowed_value: { label: "By NVO"              value: "CGRPNVO"  }
    allowed_value: { label: "By Customer Code"    value: "CUST_CD"  }
    allowed_value: { label: "By Contract No."     value: "SVC_NO"  }

    allowed_value: { label: "By GAM"              value: "GAM"  }
    allowed_value: { label: "By RAM"              value: "RAM"      }
    allowed_value: { label: "By CKAM"             value: "CKAM"     }

    allowed_value: { label: "By Sales Manager"    value: "SLS_MGR"      }
    allowed_value: { label: "By Sales Person"     value: "SLS_PSN"  }

    allowed_value: { label: "By Booking Office"   value: "BKG_OFC"      }
    allowed_value: { label: "By Contract RHQ"     value: "CTRT_OFC_RHQ"     }
    allowed_value: { label: "By Contract Country" value: "CTRT_CTRY"         }
    allowed_value: { label: "By Contract Office"  value: "CTRT_OFC"     }
    allowed_value: { label: "By Contract Type"    value: "CTRT_SC_RFA_TRF"  }
    allowed_value: { label: "By Contract Length"  value: "CTRT_PERIOD_TYPE" }

    allowed_value: { label: "By Empty Pickup ECC" value: "MTY_PKUP_ECC" }
    allowed_value: { label: "By POR Country"      value: "PORCTRY"  }
    allowed_value: { label: "By POR"              value: "POR"      }
    allowed_value: { label: "By First POL"        value: "POL"      }
    allowed_value: { label: "By Trunk POL"        value: "TRUNKPOL" } #-- Jack 2023.1.16 fixed, Jack 2022.11.11 need to check again. Seems raw data 1st POL is just same as Trunk POL
    allowed_value: { label: "By Trunk POD"        value: "TRUNKPOD" } #-- Jack 2023.1.16 fixed, Jack 2022.11.11 need to check again. Seems raw data final POD is just same as final POD
    allowed_value: { label: "By Last POD"         value: "POD"      }
    allowed_value: { label: "By DEL"              value: "DEL"      }
    allowed_value: { label: "By DEL Country"      value: "DELCTRY"  }
    allowed_value: { label: "By Port Pair"        value: "PORTPAIR" }
    allowed_value: { label: "By Empty Return ECC" value: "MTY_RTN_ECC"  }

    allowed_value: { label: "By Sub Trade"        value: "SUB_TRD"      }
    allowed_value: { label: "By Revenue Lane "    value: "RLANE"        }

    allowed_value: { label: "By Booking Channel Group"  value: "BKG_CHNL"      }    #WH DCN-948 (202305) - add
    allowed_value: { label: "By Booking Channel Code"   value: "BKG_CHNL_CD"   }    #WH DCN-948 (202305) - add
    allowed_value: { label: "By Booking Channel"        value: "BKG_CHNL_DESC" }    #WH DCN-948 (202305) - add

    allowed_value: { label: "By POR RHQ"                value: "POR_RHQ"       }    #WH DCN-1021 (2023-06)
    allowed_value: { label: "By DEL RHQ"                value: "DEL_RHQ"       }    #WH DCN-1021 (2023-06)
    allowed_value: { label: "By CIF FOB"                value: "CIF_FOB"       }    #WH DCN-1021 (2023-06)
    allowed_value: { label: "By Service Scope Code"   value: "SVC_SCP_CD"      }    #WH DCN-1021 (2023-06)

    default_value: "POR"
  }


  #WH DCN-948 - add option "Booking Channel Group" and "Booking Channel Code"
  #WH DCN-1021 (2023-06) - add: ${POR_reg_ref.reg_rhq_code}, ${DEL_reg_ref.reg_rhq_code}, ${gsym_cif_fob}, ${svc_scp_cd}
  dimension: top_n_ranking_dimension {
    label_from_parameter: top_n_ranking_dimension_param
    type: string
    sql:
         {% if     top_n_ranking_dimension_param._parameter_value == "'CGRP'"     %} ${of_customer_group.cust_grp_nm}
         {% elsif  top_n_ranking_dimension_param._parameter_value == "'CGRPBCO'"  %} CASE WHEN ${of_customer_group.global_customer_type} = 'BCO' THEN ${of_customer_group.cust_grp_nm} ELSE NULL END
         {% elsif  top_n_ranking_dimension_param._parameter_value == "'CGRPNVO'"  %} CASE WHEN ${of_customer_group.global_customer_type} = 'NVO' THEN ${of_customer_group.cust_grp_nm} ELSE NULL END
         {% elsif  top_n_ranking_dimension_param._parameter_value == "'CUST_CD'"  %} ${consolidated_cnt_cust_cd}
         {% elsif  top_n_ranking_dimension_param._parameter_value == "'SVC_NO'"   %} ${svc_cont_no}

      {% elsif  top_n_ranking_dimension_param._parameter_value == "'GAM'"      %} ${gam.full_name}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'RAM'"      %} ${ram_usr.full_name}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'CKAM'"     %} ${ckam_usr.full_name}

      {% elsif  top_n_ranking_dimension_param._parameter_value == "'SLS_MGR'"      %} ${cust_owner.mgr_full_name}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'SLS_PSN'"  %} ${cust_owner.full_name}

      {% elsif  top_n_ranking_dimension_param._parameter_value == "'BKG_OFC'"      %} ${bkg_ofc_cd}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'CTRT_OFC_RHQ'"     %} ${contract_office_region.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'CTRT_CTRY'"        %} ${contract_office_country.country_name}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'CTRT_OFC'"     %} ${ctrt_prop_ofc_cd}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'CTRT_SC_RFA_TRF'"  %} ${of_svc_contract.sc_rfa_typ}
      {% elsif top_n_ranking_dimension_param._parameter_value == "'CTRT_PERIOD_TYPE'" %} ${cont_period_typ}

      {% elsif  top_n_ranking_dimension_param._parameter_value == "'MTY_PKUP_ECC'" %} ${of_lcn_mty_pkup.ECC_Code}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'PORCTRY'"  %} ${POR_country.country_name}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'POR'"      %} ${por_cd}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'POL'"      %} ${n1st_pol_cd}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'TRUNKPOL'" %} ${trnk_pol_cd}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'TRUNKPOD'" %} ${trnk_pod_cd}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'POD'"      %} ${final_pod_cd}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'DEL'"      %} ${del_cd}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'DELCTRY'"  %} ${DEL_country.country_name}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'PORTPAIR'" %} ${port_pair}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'MTY_RTN_ECC'"  %} ${of_lcn_mty_rtn.ECC_Code}

      {% elsif  top_n_ranking_dimension_param._parameter_value == "'SUB_TRD'"      %} ${sub_trd_cd}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'RLANE'"        %} ${rlane_cd}

      {% elsif  top_n_ranking_dimension_param._parameter_value == "'BKG_CHNL'"         %} ${bkg_channel}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'BKG_CHNL_CD'"      %} ${bkg_channel_code}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'BKG_CHNL_DESC'"      %} ${bkg_channel_desc}

      {% elsif  top_n_ranking_dimension_param._parameter_value == "'POR_RHQ'"          %} ${POR_reg_ref.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'DEL_RHQ'"          %} ${DEL_reg_ref.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'CIF_FOB'"          %} ${gsym_cif_fob}
      {% elsif  top_n_ranking_dimension_param._parameter_value == "'SVC_SCP_CD'"       %} ${svc_scp_cd}

      {% else  %} ${por_cd}
      {% endif %} ;;
  }

  parameter: top_n_ranking_dimension_param2 {
    label: "Top N Ranking Dims, Non-CVA related (2:Param 1B)"
    type: string
    allowed_value: { label: "By Customer Group"   value: "CGRP"  }
    allowed_value: { label: "By BCO"              value: "CGRPBCO"  }
    allowed_value: { label: "By NVO"              value: "CGRPNVO"  }
    allowed_value: { label: "By Customer Code"    value: "CUST_CD"  }
    allowed_value: { label: "By Contract No."     value: "SVC_NO"  }

    allowed_value: { label: "By GAM"              value: "GAM"  }
    allowed_value: { label: "By RAM"              value: "RAM"      }
    allowed_value: { label: "By CKAM"             value: "CKAM"     }

    allowed_value: { label: "By Sales Manager"    value: "SLS_MGR"      }
    allowed_value: { label: "By Sales Person"     value: "SLS_PSN"  }

    allowed_value: { label: "By Booking Office"   value: "BKG_OFC"      }
    allowed_value: { label: "By Contract RHQ"     value: "CTRT_OFC_RHQ"     }
    allowed_value: { label: "By Contract Country" value: "CTRT_CTRY"         }
    allowed_value: { label: "By Contract Office"  value: "CTRT_OFC"     }
    allowed_value: { label: "By Contract Type"    value: "CTRT_SC_RFA_TRF"  }
    allowed_value: { label: "By Contract Length"  value: "CTRT_PERIOD_TYPE" }

    allowed_value: { label: "By Empty Pickup ECC" value: "MTY_PKUP_ECC" }
    allowed_value: { label: "By POR Country"      value: "PORCTRY"  }
    allowed_value: { label: "By POR"              value: "POR"      }
    allowed_value: { label: "By First POL"        value: "POL"      }
    allowed_value: { label: "By Trunk POL"        value: "TRUNKPOL" } #Jack 2023.1.16 fixed |  Jack 2022.11.11 need to check again. Seems raw data 1st POL is just same as Trunk POL
    allowed_value: { label: "By Trunk POD"        value: "TRUNKPOD" } #Jack 2023.1.16 fixed |  Jack 2022.11.11 need to check again. Seems raw data final POD is just same as final POD
    allowed_value: { label: "By Last POD"         value: "POD"      }
    allowed_value: { label: "By DEL"              value: "DEL"      }
    allowed_value: { label: "By DEL Country"      value: "DELCTRY"  }
    allowed_value: { label: "By Port Pair"        value: "PORTPAIR" }
    allowed_value: { label: "By Empty Return ECC" value: "MTY_RTN_ECC"  }

    allowed_value: { label: "By Sub Trade"        value: "SUB_TRD"      }
    allowed_value: { label: "By Revenue Lane "    value: "RLANE"        }

    allowed_value: { label: "By Booking Channel Group"  value: "BKG_CHNL"      }    #WH DCN-948 (202305) - add
    allowed_value: { label: "By Booking Channel Code"   value: "BKG_CHNL_CD"   }    #WH DCN-948 (202305) - add
    allowed_value: { label: "By Booking Channel"        value: "BKG_CHNL_DESC" }    #WH DCN-948 (202305) - add

    allowed_value: { label: "By POR RHQ"                value: "POR_RHQ"       }    #WH DCN-1021 (2023-06)
    allowed_value: { label: "By DEL RHQ"                value: "DEL_RHQ"       }    #WH DCN-1021 (2023-06)
    allowed_value: { label: "By CIF FOB"                value: "CIF_FOB"       }    #WH DCN-1021 (2023-06)
    allowed_value: { label: "By Service Scope Code"   value: "SVC_SCP_CD"      }    #WH DCN-1021 (2023-06)

    default_value: "POR"
  }

  #WH DCN-948 - add option "Booking Channel Group" and "Booking Channel Code"
  #WH DCN-1021 (2023-06) - add: ${POR_reg_ref.reg_rhq_code}, ${DEL_reg_ref.reg_rhq_code}, ${gsym_cif_fob}, ${svc_scp_cd}
  dimension: top_n_ranking_dimension2 {
    label_from_parameter: top_n_ranking_dimension_param2
    type: string
    sql:
         {% if     top_n_ranking_dimension_param2._parameter_value == "'CGRP'"     %} ${of_customer_group.cust_grp_nm}
         {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CGRPBCO'"  %} CASE WHEN ${of_customer_group.global_customer_type} = 'BCO' THEN ${of_customer_group.cust_grp_nm} ELSE NULL END
         {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CGRPNVO'"  %} CASE WHEN ${of_customer_group.global_customer_type} = 'NVO' THEN ${of_customer_group.cust_grp_nm} ELSE NULL END
         {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CUST_CD'"  %} ${consolidated_cnt_cust_cd}
         {% elsif  top_n_ranking_dimension_param2._parameter_value == "'SVC_NO'"   %} ${svc_cont_no}

      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'GAM'"      %} ${gam.full_name}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'RAM'"      %} ${ram_usr.full_name}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CKAM'"     %} ${ckam_usr.full_name}

      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'SLS_MGR'"      %} ${cust_owner.mgr_full_name}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'SLS_PSN'"  %} ${cust_owner.full_name}

      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'BKG_OFC'"      %} ${bkg_ofc_cd}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CTRT_OFC_RHQ'"     %} ${contract_office_region.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CTRT_CTRY'"        %} ${contract_office_country.country_name}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CTRT_OFC'"     %} ${ctrt_prop_ofc_cd}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CTRT_SC_RFA_TRF'"  %} ${of_svc_contract.sc_rfa_typ}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CTRT_PERIOD_TYPE'" %} ${cont_period_typ}


      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'MTY_PKUP_ECC'" %} ${of_lcn_mty_pkup.ECC_Code}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'PORCTRY'"  %} ${POR_country.country_name}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'POR'"      %} ${por_cd}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'POL'"      %} ${n1st_pol_cd}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'TRUNKPOL'" %} ${trnk_pol_cd}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'TRUNKPOD'" %} ${trnk_pod_cd}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'POD'"      %} ${final_pod_cd}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'DEL'"      %} ${del_cd}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'DELCTRY'"  %} ${DEL_country.country_name}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'PORTPAIR'" %} ${port_pair}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'MTY_RTN_ECC'"  %} ${of_lcn_mty_rtn.ECC_Code}

      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'SUB_TRD'"      %} ${sub_trd_cd}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'RLANE'"        %} ${rlane_cd}

      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'BKG_CHNL'"         %} ${bkg_channel}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'BKG_CHNL_CD'"      %} ${bkg_channel_code}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'BKG_CHNL_DESC'"    %} ${bkg_channel_desc}

      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'POR_RHQ'"          %} ${POR_reg_ref.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'DEL_RHQ'"          %} ${DEL_reg_ref.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'CIF_FOB'"          %} ${gsym_cif_fob}
      {% elsif  top_n_ranking_dimension_param2._parameter_value == "'SVC_SCP_CD'"       %} ${svc_scp_cd}

      {% else  %} ${por_cd}
      {% endif %} ;;
  }

  parameter: top_n_ranking_dimension_param3 {
    label: "Top N Ranking Dims, CVA related (3:Param 2A)"
    type: string
    allowed_value: { label: "By Customer Group"   value: "CGRP"  }
    allowed_value: { label: "By BCO"              value: "CGRPBCO"  }
    allowed_value: { label: "By NVO"              value: "CGRPNVO"  }
    allowed_value: { label: "By GAM"              value: "GAM"  }
    allowed_value: { label: "By RAM"              value: "RAM"  }
    allowed_value: { label: "By CKAM"             value: "CKAM"  }

    allowed_value: { label: "By Customer Code"    value: "CUST_CD"  }
    allowed_value: { label: "By Sales Manager"    value: "SLS_MGR"  }
    allowed_value: { label: "By Sales Person"     value: "SLS_PSN"  }
    allowed_value: { label: "By Contract Type"    value: "CTRT_SC_RFA_TRF"  }
    allowed_value: { label: "By Contract Length"  value: "CTRT_PERIOD_TYPE" }
    allowed_value: { label: "By Contract RHQ"     value: "CTRT_OFC_RHQ"     }
    allowed_value: { label: "By Contract Office"  value: "CTRT_OFC"     }
    allowed_value: { label: "By Contract Country" value: "CTRT_CTRY"        }

    # #WH DCN-1021 (2023-06)
    allowed_value: { label: "By POR Country"      value: "PORCTRY"  }
    allowed_value: { label: "By POR RHQ"          value: "POR_RHQ"  }
    allowed_value: { label: "By CIF FOB"          value: "CIF_FOB"  }
    allowed_value: { label: "By Service Scope Code"   value: "SVC_SCP_CD" }
    allowed_value: { label: "By Contract No."     value: "SVC_NO"   }

    default_value: "CGRP"
  }

  #WH DCN-1021 (2023-06) - add  ${POR_country.country_name, ${POR_reg_ref.reg_rhq_code},${DEL_reg_ref.reg_rhq_code},${gsym_cif_fob} & ${svc_cont_no}
  dimension: top_n_ranking_dimension3 {
    label_from_parameter: top_n_ranking_dimension_param3
    type: string
    sql: {% if     top_n_ranking_dimension_param3._parameter_value == "'CGRP'"     %} ${of_customer_group.cust_grp_nm}
         {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CGRPBCO'"  %} CASE WHEN ${of_customer_group.global_customer_type} = 'BCO' THEN ${of_customer_group.cust_grp_nm} ELSE NULL END
         {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CGRPNVO'"  %} CASE WHEN ${of_customer_group.global_customer_type} = 'NVO' THEN ${of_customer_group.cust_grp_nm} ELSE NULL END
         {% elsif  top_n_ranking_dimension_param3._parameter_value == "'GAM'"      %} ${gam.full_name}
         {% elsif  top_n_ranking_dimension_param3._parameter_value == "'RAM'"      %} ${ram_usr.full_name}
         {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CKAM'"     %} ${ckam_usr.full_name}

      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CUST_CD'"  %} ${consolidated_cnt_cust_cd}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'SLS_MGR'"  %} ${cust_owner.mgr_full_name}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'SLS_PSN'"  %} ${cust_owner.full_name}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CTRT_SC_RFA_TRF'"  %} ${of_svc_contract.sc_rfa_typ}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CTRT_PERIOD_TYPE'" %} ${cont_period_typ}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CTRT_OFC_RHQ'"     %} ${contract_office_region.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CTRT_OFC'"     %} ${ctrt_prop_ofc_cd}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CTRT_CTRY'"        %} ${contract_office_country.country_name}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'PORCTRY'"          %} ${POR_country.country_name}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'POR_RHQ'"          %} ${POR_reg_ref.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'CIF_FOB'"          %} ${gsym_cif_fob}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'SVC_SCP_CD'"       %} ${svc_scp_cd}
      {% elsif  top_n_ranking_dimension_param3._parameter_value == "'SVC_NO'"           %} ${svc_cont_no}
      {% else  %} ${of_customer_group.cust_grp_nm}
      {% endif %} ;;
  }

  parameter: top_n_ranking_dimension_param4 {
    label: "Top N Ranking Dims, CVA related (4:Param 2B)"
    type: string
    allowed_value: { label: "By Customer Group"   value: "CGRP"  }
    allowed_value: { label: "By BCO"              value: "CGRPBCO"  }
    allowed_value: { label: "By NVO"              value: "CGRPNVO"  }
    allowed_value: { label: "By GAM"              value: "GAM"  }
    allowed_value: { label: "By RAM"              value: "RAM"  }
    allowed_value: { label: "By CKAM"             value: "CKAM"  }

    allowed_value: { label: "By Customer Code"    value: "CUST_CD"  }
    allowed_value: { label: "By Sales Manager"    value: "SLS_MGR"  }
    allowed_value: { label: "By Sales Person"     value: "SLS_PSN"  }
    allowed_value: { label: "By Contract Type"    value: "CTRT_SC_RFA_TRF"  }
    allowed_value: { label: "By Contract Length"  value: "CTRT_PERIOD_TYPE" }
    allowed_value: { label: "By Contract RHQ"     value: "CTRT_OFC_RHQ"     }
    allowed_value: { label: "By Contract Office"  value: "CTRT_OFC"     }
    allowed_value: { label: "By Contract Country" value: "CTRT_CTRY"        }

    # #WH DCN-1021 (2023-06)
    allowed_value: { label: "By POR Country"      value: "PORCTRY"  }
    allowed_value: { label: "By POR RHQ"          value: "POR_RHQ"  }
    allowed_value: { label: "By CIF FOB"          value: "CIF_FOB"  }
    allowed_value: { label: "By Service Scope Code"   value: "SVC_SCP_CD" }
    allowed_value: { label: "By Contract No."     value: "SVC_NO"   }

    default_value: "CGRP"
  }

  #WH DCN-1021 (2023-06) - add  ${POR_country.country_name},  ${POR_reg_ref.reg_rhq_code}, ${gsym_cif_fob} & ${svc_cont_no}
  dimension: top_n_ranking_dimension4 {
    label_from_parameter: top_n_ranking_dimension_param4
    type: string
    sql: {% if     top_n_ranking_dimension_param4._parameter_value == "'CGRP'"     %} ${of_customer_group.cust_grp_nm}
         {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CGRPBCO'"  %} CASE WHEN ${of_customer_group.global_customer_type} = 'BCO' THEN ${of_customer_group.cust_grp_nm} ELSE NULL END
         {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CGRPNVO'"  %} CASE WHEN ${of_customer_group.global_customer_type} = 'NVO' THEN ${of_customer_group.cust_grp_nm} ELSE NULL END
         {% elsif  top_n_ranking_dimension_param4._parameter_value == "'GAM'"      %} ${gam.full_name}
         {% elsif  top_n_ranking_dimension_param4._parameter_value == "'RAM'"      %} ${ram_usr.full_name}
         {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CKAM'"     %} ${ckam_usr.full_name}

      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CUST_CD'"  %} ${consolidated_cnt_cust_cd}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'SLS_MGR'"  %} ${cust_owner.mgr_full_name}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'SLS_PSN'"  %} ${cust_owner.full_name}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CTRT_SC_RFA_TRF'"  %} ${of_svc_contract.sc_rfa_typ}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CTRT_PERIOD_TYPE'" %} ${cont_period_typ}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CTRT_OFC_RHQ'"     %} ${contract_office_region.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CTRT_OFC'"     %} ${ctrt_prop_ofc_cd}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CTRT_CTRY'"        %} ${contract_office_country.country_name}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'PORCTRY'"           %} ${POR_country.country_name}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'POR_RHQ'"          %} ${POR_reg_ref.reg_rhq_code}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'CIF_FOB'"          %} ${gsym_cif_fob}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'SVC_SCP_CD'"       %} ${svc_scp_cd}
      {% elsif  top_n_ranking_dimension_param4._parameter_value == "'SVC_NO'"            %} ${svc_cont_no}
      {% else  %} ${of_customer_group.cust_grp_nm}
      {% endif %} ;;
  }

  parameter: dynamic_dim_param {
    label: "Dynamic Dims, non-CVA related (Param A)"
    type: string
    allowed_value: { label: "By Key Account"          value: "KA_TYP"           }
    allowed_value: { label: "By Trade Group"          value: "SVC_GRP_CAT"      }
    allowed_value: { label: "By Service Scope Group"  value: "SVC_GRP_CD"       }
    allowed_value: { label: "By Service Scope Code"   value: "SVC_SCP_CD"       }
    allowed_value: { label: "By Customer Type"        value: "CUST_TYP"         }
    allowed_value: { label: "By Container Category"   value: "CNTR_CAT"         }
    allowed_value: { label: "By Contract Length"      value: "CTRT_PERIOD_TYPE" }
    allowed_value: { label: "By Contract Type"        value: "CTRT_SC_RFA_TRF"  }
    allowed_value: { label: "By Contract Country"     value: "CTRT_CTRY"        }
    allowed_value: { label: "By POR Country"          value: "POR_CTRY"         }
    allowed_value: { label: "By DEL Country"          value: "DEL_CTRY"         }
    allowed_value: { label: "By Contract RHQ"         value: "CTRT_OFC_RHQ"     }
    allowed_value: { label: "By POR RHQ"              value: "POR_RHQ"          }
    allowed_value: { label: "By DEL RHQ"              value: "DEL_RHQ"          }
    allowed_value: { label: "By Receiving Term"       value: "RCV_TERM"         }
    allowed_value: { label: "By Delivery Term"        value: "DE_TERM"          }
    allowed_value: { label: "By CIF FOB"              value: "CIF_FOB"          }
    #allowed_value: { label: "By Booking Channel"      value: "BKG_CHNL"        }
    allowed_value: { label: "By Booking Channel Group" value: "BKG_CHNL"        }   #WH DCN-948 (202305) chg "Booking Channel" to "Booking Channel Group"
    allowed_value: { label: "By Booking Channel Code"  value: "BKG_CHNL_CD"     }   #WH DCN-948 (202305) chg "Booking Channel" to "Booking Channel Code"
    allowed_value: { label: "By Booking Channel"       value: "BKG_CHNL_DESC"   }   #WH DCN-948 (202305) chg "Booking Channel" to "Booking Channel Code"
    default_value: "KA_TYP"
    suggest_persist_for: "24 hour"
  }

  #WH DCN-948 (202305) add Booking Change code (bkg_channel_code) and booking channel description (bkg_channel_desc
  dimension: dynamic_dim_ord {
    type: string
    sql: {% if     dynamic_dim_param._parameter_value == "'KA_TYP'"           %} ${of_customer_group.key_acct_tp_cd_ord}
         {% elsif  dynamic_dim_param._parameter_value == "'SVC_GRP_CAT'"      %} ${of_svc_scp_grp_cat.group_cat}
         {% elsif  dynamic_dim_param._parameter_value == "'SVC_GRP_CD'"       %} ${svc_scp_grp_cd}
         {% elsif  dynamic_dim_param._parameter_value == "'SVC_SCP_CD'"       %} ${svc_scp_cd}
         {% elsif  dynamic_dim_param._parameter_value == "'CUST_TYP'"         %} ${of_customer_group.global_customer_type_ord}
         {% elsif  dynamic_dim_param._parameter_value == "'CTRT_PERIOD_TYPE'" %} ${cont_period_typ}
         {% elsif  dynamic_dim_param._parameter_value == "'CTRT_SC_RFA_TRF'"  %} ${of_svc_contract.sc_rfa_typ}
         {% elsif  dynamic_dim_param._parameter_value == "'CNTR_CAT'"         %} ${container_cat}
         {% elsif  dynamic_dim_param._parameter_value == "'CTRT_CTRY'"        %} ${contract_office_country.country_name}
         {% elsif  dynamic_dim_param._parameter_value == "'POR_CTRY'"         %} ${POR_country.country_name}
         {% elsif  dynamic_dim_param._parameter_value == "'DEL_CTRY'"         %} ${DEL_country.country_name}
         {% elsif  dynamic_dim_param._parameter_value == "'CTRT_OFC_RHQ'"     %} ${contract_office_region.reg_rhq_code}
         {% elsif  dynamic_dim_param._parameter_value == "'POR_RHQ'"          %} ${POR_reg_ref.reg_rhq_code}
         {% elsif  dynamic_dim_param._parameter_value == "'DEL_RHQ'"          %} ${DEL_reg_ref.reg_rhq_code}
         {% elsif  dynamic_dim_param._parameter_value == "'RCV_TERM'"         %} ${rcv_term_dscr}
         {% elsif  dynamic_dim_param._parameter_value == "'DE_TERM'"          %} ${de_term_dscr}
         {% elsif  dynamic_dim_param._parameter_value == "'CIF_FOB'"          %} ${gsym_cif_fob}
         {% elsif  dynamic_dim_param._parameter_value == "'BKG_CHNL'"         %} ${bkg_channel}
         {% elsif  dynamic_dim_param._parameter_value == "'BKG_CHNL_CD'"      %} ${bkg_channel_code}
         {% elsif  dynamic_dim_param._parameter_value == "'BKG_CHNL_DESC'"      %} ${bkg_channel_desc}
         {% endif %} ;;
  }

  #WH DCN-948 (202305) add Booking Change code (bkg_channel_code) and  Booking Change desc (bkg_channel_desc)
  dimension: dynamic_dim {
    label_from_parameter: dynamic_dim_param
    order_by_field: dynamic_dim_ord
    type: string
    sql: {% if     dynamic_dim_param._parameter_value == "'KA_TYP'"           %} ${of_customer_group.key_acct_tp_cd}
         {% elsif  dynamic_dim_param._parameter_value == "'SVC_GRP_CAT'"      %} ${of_svc_scp_grp_cat.group_cat}
         {% elsif  dynamic_dim_param._parameter_value == "'SVC_GRP_CD'"       %} ${svc_scp_grp_cd}
         {% elsif  dynamic_dim_param._parameter_value == "'SVC_SCP_CD'"       %} ${svc_scp_cd}
         {% elsif  dynamic_dim_param._parameter_value == "'CUST_TYP'"         %} ${of_customer_group.global_customer_type}
         {% elsif  dynamic_dim_param._parameter_value == "'CTRT_PERIOD_TYPE'" %} ${cont_period_typ}
         {% elsif  dynamic_dim_param._parameter_value == "'CTRT_SC_RFA_TRF'"  %} ${of_svc_contract.sc_rfa_typ}
         {% elsif  dynamic_dim_param._parameter_value == "'CNTR_CAT'"         %} ${container_cat}
         {% elsif  dynamic_dim_param._parameter_value == "'CTRT_CTRY'"        %} ${contract_office_country.country_name}
         {% elsif  dynamic_dim_param._parameter_value == "'POR_CTRY'"         %} ${POR_country.country_name}
         {% elsif  dynamic_dim_param._parameter_value == "'DEL_CTRY'"         %} ${DEL_country.country_name}
         {% elsif  dynamic_dim_param._parameter_value == "'CTRT_OFC_RHQ'"     %} ${contract_office_region.reg_rhq_code}
         {% elsif  dynamic_dim_param._parameter_value == "'POR_RHQ'"          %} ${POR_reg_ref.reg_rhq_code}
         {% elsif  dynamic_dim_param._parameter_value == "'DEL_RHQ'"          %} ${DEL_reg_ref.reg_rhq_code}
         {% elsif  dynamic_dim_param._parameter_value == "'RCV_TERM'"         %} ${rcv_term_dscr}
         {% elsif  dynamic_dim_param._parameter_value == "'DE_TERM'"          %} ${de_term_dscr}
         {% elsif  dynamic_dim_param._parameter_value == "'CIF_FOB'"          %} ${gsym_cif_fob}
         {% elsif  dynamic_dim_param._parameter_value == "'BKG_CHNL'"         %} ${bkg_channel}
         {% elsif  dynamic_dim_param._parameter_value == "'BKG_CHNL_CD'"      %} ${bkg_channel_code}
         {% elsif  dynamic_dim_param._parameter_value == "'BKG_CHNL_DESC'"      %} ${bkg_channel_desc}
         {% endif %} ;;
  }

  parameter: dynamic_dim_param_b {
    label: "Dynamic Dims, CVA related (Param B)"
    type: string
    allowed_value: { label: "Key Account Type"      value: "KA_TYP"      }
    allowed_value: { label: "Customer Type"         value: "CUST_TYP"    }
    allowed_value: { label: "Contract Type (SC/RFA/Tariff)" value: "CTRT_SC_RFA_TRF"}
    allowed_value: { label: "By Contract Length"      value: "CTRT_PERIOD_TYPE" }
    allowed_value: { label: "By Contract RHQ"         value: "CTRT_OFC_RHQ"     }

    allowed_value: { label: "By CIF FOB"              value: "CIF_FOB"          }   #WH DCN-1021 (2023-06)
    allowed_value: { label: "By Service Scope Code"   value: "SVC_SCP_CD"       }   #WH DCN-1021 (2023-06)

    default_value: "CUST_TYP"
    suggest_persist_for: "24 hour"
  }

#WH DCN-1021 (2023-06) - add ${gsym_cif_fob}, ${svc_scp_cd}
  dimension: dynamic_dim_b_ord {
    type: string
    sql:  {% if     dynamic_dim_param_b._parameter_value == "'KA_TYP'"       %} ${of_customer_group.key_acct_tp_cd_ord}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CUST_TYP'"     %} ${of_customer_group.global_customer_type_ord}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CTRT_SC_RFA_TRF'"    %} ${of_svc_contract.sc_rfa_typ}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CTRT_PERIOD_TYPE'" %} ${cont_period_typ}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CTRT_OFC_RHQ'"     %} ${contract_office_region.reg_rhq_code}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CIF_FOB'"          %} ${gsym_cif_fob}
          {% elsif  dynamic_dim_param_b._parameter_value == "'SVC_SCP_CD'"      %} ${svc_scp_cd}
          {% endif %} ;;
  }

#WH DCN-1021 (2023-06) - add ${gsym_cif_fob}, ${svc_scp_cd}
  dimension: dynamic_dim_b {
    order_by_field: dynamic_dim_b_ord
    label_from_parameter: dynamic_dim_param_b
    type: string
    sql:  {% if     dynamic_dim_param_b._parameter_value == "'KA_TYP'"       %} ${of_customer_group.key_acct_tp_cd}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CUST_TYP'"     %} ${of_customer_group.global_customer_type}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CTRT_SC_RFA_TRF'"    %} ${of_svc_contract.sc_rfa_typ}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CTRT_PERIOD_TYPE'" %} ${cont_period_typ}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CTRT_OFC_RHQ'"     %} ${contract_office_region.reg_rhq_code}
          {% elsif  dynamic_dim_param_b._parameter_value == "'CIF_FOB'"          %} ${gsym_cif_fob}
          {% elsif  dynamic_dim_param_b._parameter_value == "'SVC_SCP_CD'"       %} ${svc_scp_cd}
          {% endif %} ;;
  }

  ### Measures for per unit measures ###

  measure: rev_per_teu {
    label: "Revenue/TEU"
    type:  number
    sql: ${total_booking_rev} / NULLIF(${total_booking_teu}, 0) ;;
    value_format_name: usd_0
  }

  measure: rev_per_metric_ton {
    label: "Revenue/MT"
    type:  number
    sql: ${total_booking_rev} / NULLIF(${total_grs_wgt} / 1000, 0)   ;;
    value_format_name: usd_0
  }

  measure: cm_per_mt {
    label: "CM/MT"
    type: number
    sql:  ${total_booking_cm_amt} / NULLIF(${total_grs_wgt} / 1000, 0) ;;
    value_format_name: usd_0
  }

  measure: cm_per_teu {
    label: "CM/TEU"
    type: number
    sql:  ${total_booking_cm_amt} / NULLIF(${total_booking_teu}, 0) ;;
    value_format_name: usd_0
  }

  measure: mt_per_teu {
    label: "MT/TEU"
    type: number
    sql:  ( ${total_grs_wgt} / 1000 ) / NULLIF(${total_booking_teu}, 0) ;;
    value_format_name: decimal_2
  }

  ### Measure for Booking TEU ###

  measure: total_booking_teu {
    label: "Actual (TEU)"
    type: sum
    sql:  ${teu};;
    filters: [record_type: "Booking"]
    value_format_name: decimal_0
  }

  measure: total_booking_teu_firm {
    label: "Actual (TEU, Firm)"
    type: sum
    sql: ${teu} ;;
    filters: [record_type: "Booking", bkg_sts_cd: "F,S,W"]
    value_format_name: decimal_0
  }

  measure: total_booking_teu_cncl {
    label: "Actual (TEU, Cancelled)"
    type: sum
    sql: ${teu} ;;
    filters: [record_type: "Booking", bkg_sts_cd: "X"]
    value_format_name: decimal_0
  }

  measure: total_booking_teu_formatted {
    label: "Act"
    type: number
    sql: ${total_booking_teu};;
    value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\""
    html: {{total_booking_teu._rendered_value}}  ;;
  }

  measure: total_booking_teu_till_last_compl_wk {
    type: sum
    sql:  ${teu};;
    filters: [record_type: "Booking", of_sales_week_master.is_till_last_cmpl_wk: "yes"]
    value_format_name: decimal_0
  }

  measure: num_of_sales_week {
    type: count_distinct
    sql:  ${of_sales_week_master.sales_week};;
  }

  measure: total_booking_teu_per_sales_week {
    type: number
    sql:  ${total_booking_teu} / NULLIF( ${num_of_sales_week} , 0 );;
    value_format_name: decimal_0
  }

  measure: total_booking_teu_weekly {
    label: "Actual Weekly (TEU)"
    type: number
    sql: ${total_booking_teu} / NULLIF( ${of_sales_week_master.sales_week_count} , 0 );;
    value_format_name: decimal_0
  }

  measure: total_booking_teu_per_of_ttl_window_func {
    label: "TEU %"
    type: number
    sql:  SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END ) /
          NULLIF( SUM(SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END )) OVER (PARTITION BY 1) , 0)
          ;;
    html: TEU: {{total_booking_teu._rendered_value}}  <br>
          Weekly TEU: {{total_booking_teu_weekly._rendered_value}}
    ;;
    drill_fields: [bkg_status_details*]
    value_format_name: percent_0
  }

  measure: total_booking_teu_per_of_ttl_window_func_by_timeline {
    label: "TEU % (for associated period)"
    type: number
    sql:  SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END ) /
          NULLIF( SUM(SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END )) OVER (PARTITION BY ${of_sales_week_master.Timeline_New_Fmt} ), 0 )
          ;;
    html: TEU: {{total_booking_teu._rendered_value}}    <br>
          Weekly TEU: {{total_booking_teu_weekly._rendered_value}}
    ;;
    value_format_name: percent_0
  }

  measure: total_booking_teu_per_of_ttl_by_cust_cd {
    label: "TEU % (Reset by Cust Code)"
    type: number
    sql:  SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END ) /
          NULLIF( SUM(SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END )) OVER (PARTITION BY ${consolidated_cnt_cust_cd} ), 0 )
          ;;
    value_format_name: percent_2
  }

  measure: total_booking_teu_per_of_ttl_by_cust_cd_n_ssg_dom {
    label: "TEU % (Reset by Cust Code, Svc Scp Grp & Domi Flg)"
    type: number
    sql:  SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END ) /
          NULLIF( SUM(SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END )) OVER (PARTITION BY ${consolidated_cnt_cust_cd}, ${svc_scp_grp_cd}, ${dominant_flg} ), 0 )
          ;;
    value_format_name: percent_2
  }

  measure: total_booking_teu_per_of_ttl_by_cust_grp {
    label: "TEU % (Reset by Cust Group)"
    type: number
    sql:  SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END ) /
          NULLIF( SUM(SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END )) OVER (PARTITION BY ${v_customer_opus_n_prospect.cust_grp_id} ), 0 )
          ;;
    value_format_name: percent_2
  }

  measure: total_booking_teu_per_of_ttl_by_cust_grp_n_ssg_dom {
    label: "TEU % (Reset by Cust Group, Svc Scp Grp & Domi Flg)"
    type: number
    sql:  SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END ) /
          NULLIF( SUM(SUM( CASE WHEN ${record_type} = 'Booking' THEN ${teu} ELSE NULL END )) OVER (PARTITION BY ${v_customer_opus_n_prospect.cust_grp_id}, ${svc_scp_grp_cd}, ${dominant_flg} ), 0 )
          ;;
    value_format_name: percent_2
  }



  ### Measure for CM Amt, Revenue and Cargo Weight ###

  measure: total_booking_cm_amt {
    label: "Gross CM"
    type: sum
    sql:  ${cm_amt} ;;
    filters: [record_type: "Booking"]
    value_format_name: usd_0
  }

  measure: total_cm_amt_per_of_ttl_window_func {
    label: "CM % of Total"
    type: number
    sql:  SUM( CASE WHEN ${record_type} = 'Booking' THEN ${cm_amt} ELSE NULL END ) /
          NULLIF( SUM(SUM( CASE WHEN ${record_type} = 'Booking' THEN ${cm_amt} ELSE NULL END )) OVER (PARTITION BY 1) , 0 )
          ;;
    html: CM: {{total_booking_cm_amt._rendered_value}}  ;;
    value_format_name: percent_0
  }

  measure: total_cm_amt_per_of_ttl_window_func_by_timeline {
    label: "CM % of Timeline Total"
    type: number
    sql:  SUM( CASE WHEN ${record_type} = 'Booking' THEN ${cm_amt} ELSE NULL END ) /
          NULLIF( SUM(SUM( CASE WHEN ${record_type} = 'Booking' THEN ${cm_amt} ELSE NULL END )) OVER (PARTITION BY ${of_sales_week_master.Timeline_New_Fmt} ) , 0 )
          ;;
    html: CM: {{total_booking_cm_amt._rendered_value}}  ;;
    value_format_name: percent_0
  }

  measure: total_booking_cgo_wgt {
    type: sum
    sql: ${bkg_cgo_wgt};;
    value_format_name: decimal_0
    filters: [record_type: "Booking"]
  }

  measure: total_grs_wgt {
    type: sum
    sql: ${grs_wgt};;
    value_format_name: decimal_0
    filters: [record_type: "Booking"]
  }

  measure: total_booking_rev {
    label: "Gross Revenue"
    type:  sum
    sql: ${tot_g_rev} ;;
    value_format_name: usd_0
    filters: [record_type: "Booking"]
  }

  ### Measures for Target ###

  measure: total_target_teu {
    label: "Target (TEU)"
    type: sum
    sql:  ${teu};;
    filters: [record_type: "Target"]
    value_format_name: decimal_0
  }

  measure: total_target_teu_with_vms {
    label: "Adjusted Target (TEU)"
    type: number
    sql: ${total_target_teu} * ceiling(${of_dep_sched_smry2.scheduled_wk_perc}) /100 ;;
    value_format_name: decimal_0
  }

  #measure: total_target_teu_with_vms_formatted {
  #  type: number
  #  sql: ${total_target_teu_with_vms};;
  #  value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\""
  #  html: {{total_target_teu_with_vms._rendered_value}}  ;;
  #}

  measure: total_target_teu_with_param {
    type: number
    sql: {% if apply_vms_adjustment_to_target._parameter_value == "'Yes'" %}
             ${total_target_teu_with_vms}
         {% else %}
             ${total_target_teu}
         {% endif %};;
    value_format_name: decimal_0
  }

  measure: total_target_teu_with_param_formatted {
    label: "{% if    apply_vms_adjustment_to_target._parameter_value ==  \"'Yes'\"  %}Adj Tgt{%
    elsif apply_vms_adjustment_to_target._parameter_value ==  \"'No'\"   %}Tgt{%
    else  %}total_target_teu_with_vms_formatted{% endif %}"
    type: number
    sql: ${total_target_teu_with_param};;
    value_format: "[>=10000000]#,##0,,\"M\" ; [>=10000]#,##0,\"K\" ; 0.00,\"K\""
    html: {{total_target_teu_with_param._rendered_value}}  ;;
  }

  #measure: total_target_teu_till_last_cmpl_mth {
  #  type: sum
  #  sql:  ${teu};;
  #  filters: [record_type: "Target", of_sales_week_master.is_til_last_completed_month_one_sided: "yes"]
  #  value_format_name: decimal_0
  #}

  measure: total_target_teu_till_last_cmpl_wk {
    type: sum
    sql:  ${teu};;
    filters: [record_type: "Target", of_sales_week_master.is_till_last_cmpl_wk: "yes"]
    value_format_name: decimal_0
  }

  #measure: total_target_teu_with_vms_till_last_cmpl_wk {
  #  type: number
  #  sql: ${total_target_teu_till_last_cmpl_wk} * ceiling(${of_dep_sched_smry2.scheduled_wk_perc}) /100 ;;
  #  value_format_name: decimal_0
  #}

  measure: total_target_teu_with_vms_till_last_cmpl_wk {
    type: number
    sql: ${total_target_teu_till_last_cmpl_wk} * ceiling(${of_dep_sched_smry2.scheduled_wk_perc_last_cmpl_wk}) /100 ;;
    value_format_name: decimal_0
  }

  measure: total_target_teu_with_param_till_last_cmpl_wk {
    type: number
    sql: {% if apply_vms_adjustment_to_target._parameter_value == "'Yes'" %}
             ${total_target_teu_till_last_cmpl_wk} * ceiling(${of_dep_sched_smry2.scheduled_wk_perc_last_cmpl_wk}) /100
         {% else %}
             ${total_target_teu_till_last_cmpl_wk}
         {% endif %};;
    value_format_name: decimal_0
  }

  ### Measures for Target Progression ###

  measure: target_progression_value {
    type: number
    sql:  ${total_target_teu_till_last_cmpl_wk}
      ;;
    value_format_name: decimal_0
  }

  measure: target_progression  {
    type: number
    sql:  ${total_target_teu_till_last_cmpl_wk} / NULLIF( ${total_target_teu} , 0)
      ;;
    value_format_name: percent_0
  }

  measure: target_progression_with_vms  {
    type: number
    sql:  ${total_target_teu_with_vms_till_last_cmpl_wk} / NULLIF( ${total_target_teu_with_vms} , 0)
      ;;
    value_format_name: percent_0
  }

  measure: target_progression_with_vms_value  {
    type: number
    sql:  ${total_target_teu_with_vms_till_last_cmpl_wk}
      ;;
    value_format_name: decimal_0
  }

  ### Measures for Variance ###

  measure: teu_variance {
    type: number
    sql: ${total_booking_teu} - ${total_target_teu} ;;
    value_format_name: decimal_0
  }

  measure: teu_variance_with_vms {
    type: number
    sql: ${total_booking_teu} - ${total_target_teu_with_vms} ;;
    value_format_name: decimal_0
  }

  measure: teu_variance_with_with_param {
    label: "{% if    apply_vms_adjustment_to_target._parameter_value ==  \"'Yes'\"  %}Adjusted Variance (TEU){%
    elsif apply_vms_adjustment_to_target._parameter_value ==  \"'No'\"   %}Variance (TEU){%
    else  %}teu_variance_with_with_param{% endif %}"
    type: number
    sql: ${total_booking_teu} - ${total_target_teu_with_param} ;;
    value_format_name: decimal_0
  }

  measure: teu_variance_till_last_cmpl_wk {
    label: "Running Variance (TEU)"
    type: number
    sql: ${total_booking_teu_till_last_compl_wk} - ${total_target_teu} ;;
    value_format_name: decimal_0
  }

  measure: teu_variance_with_vms_till_last_cmpl_wk {
    label: "Adj Running Variance (TEU)"
    type: number
    sql: ${total_booking_teu_till_last_compl_wk} - ${total_target_teu_with_vms} ;;
    value_format_name: decimal_0
  }

  measure: teu_variance_with_param_till_last_cmpl_wk {
    label: "{% if    apply_vms_adjustment_to_target._parameter_value ==  \"'Yes'\"  %}Adj Running Variance (TEU){%
    elsif apply_vms_adjustment_to_target._parameter_value ==  \"'No'\"   %}Running Variance (TEU){%
    else  %}teu_variance_with_param_till_last_cmpl_wk{% endif %}"
    type: number
    sql:  ${total_booking_teu_till_last_compl_wk} - ${total_target_teu_with_param} ;;
    value_format_name: decimal_0
  }

  ### Measures for Achievement ###

  measure: achievement_teu {
    label: "Achievement %"
    type: number
    sql: ${total_booking_teu} / NULLIF(${total_target_teu},0) ;;
    value_format_name: percent_0
  }

  measure: achievement_teu_with_vms {
    label: "Adjusted Achievement %"
    type: number
    sql: ${total_booking_teu} / NULLIF(${total_target_teu_with_vms},0) ;;
    value_format_name: percent_0
  }

  measure: achievement_teu_with_param {
    label: "{% if    apply_vms_adjustment_to_target._parameter_value ==  \"'Yes'\"  %}Adj Ach %{%
    elsif apply_vms_adjustment_to_target._parameter_value ==  \"'No'\"   %}Ach %{%
    else  %}achievement_teu_with_param{% endif %}"
    type: number
    sql: ${total_booking_teu} / NULLIF(${total_target_teu_with_param},0) ;;
    value_format_name: percent_0
  }

  measure: achievement_teu_till_last_cmpl_wk {
    label: "Running Achievement %"
    type: number
    sql: ${total_booking_teu_till_last_compl_wk} / NULLIF(${total_target_teu},0) ;;
    value_format_name: percent_0
  }

  measure: achievement_teu_with_vms_till_last_cmpl_wk {
    label: "Adjusted Running Achievement %"
    type: number
    sql: ${total_booking_teu_till_last_compl_wk} / NULLIF(${total_target_teu_with_vms},0) ;;
    value_format_name: percent_0
  }

  measure: achievement_teu_with_param_till_last_cmpl_wk {
    label: "{% if    apply_vms_adjustment_to_target._parameter_value ==  \"'Yes'\"  %}Adj Running Ach %{%
    elsif apply_vms_adjustment_to_target._parameter_value ==  \"'No'\"   %}Running Ach %{%
    else  %}achievement_teu_till_last_cmpl_wk_with_param{% endif %}"
    type: number
    sql: IFNULL(${total_booking_teu_till_last_compl_wk} / NULLIF(${total_target_teu_with_param},0) ,0);;
    value_format_name: percent_0
  }

  measure: achievement_teu_with_param_n_mode_selection {
    label: "{% if    apply_vms_adjustment_to_target._parameter_value ==  \"'Yes'\" and mode_of_achv_percentage._parameter_value ==  \"'NORMAL'\"             %}Adj Ach %{%
    elsif apply_vms_adjustment_to_target._parameter_value ==  \"'No'\"  and mode_of_achv_percentage._parameter_value ==  \"'NORMAL'\"             %}Ach %{%
    elsif apply_vms_adjustment_to_target._parameter_value ==  \"'Yes'\" and mode_of_achv_percentage._parameter_value ==  \"'TILL_LAST_CMPL_WK'\"  %}Adj Running Ach %{%
    elsif apply_vms_adjustment_to_target._parameter_value ==  \"'No'\"  and mode_of_achv_percentage._parameter_value ==  \"'TILL_LAST_CMPL_WK'\"  %}Running Ach %{%
    else  %}achievement_teu_with_param_n_mode_selection{% endif %}"
    type: number
    sql: {% if    mode_of_achv_percentage._parameter_value == "'NORMAL'"            %}
            ${achievement_teu_with_param}
         {% elsif mode_of_achv_percentage._parameter_value == "'TILL_LAST_CMPL_WK'" %}
            ${achievement_teu_with_param_till_last_cmpl_wk}
         {% endif %};;
    value_format_name: percent_0
  }

  ### Measures for Count of Contract ###


  measure: per_of_ttl_svc_cont_no {
    label: "Count of Contracts in %"
    type: number
    #sql: ${count_svc_cont_no} ;;
    sql: ${count_svc_cont_no} /
      NULLIF( SUM( ${count_svc_cont_no} ) OVER (PARTITION BY 1) , 0)   ;;
    value_format_name: percent_0
    html: Count (Total): {{count_svc_cont_no._rendered_value}} <br>
          Count (ONE Quote): {{count_svc_cont_no_1quote._rendered_value}} <br>
          Count (Other): {{count_svc_cont_no_non_1quote._rendered_value}} <br>
          <br>
          TEU: {{total_booking_teu._rendered_value}} <br>
          Weekly TEU: {{total_booking_teu_weekly._rendered_value}}    ;;
    drill_fields: [svc_cont_details*]
  }



  measure: count_svc_cont_no {
    label: "Count of Contracts"
    type: count_distinct
    sql: ${svc_cont_no} ;;
    value_format_name: decimal_0
    filters: [record_type: "Booking", svc_cont_no: "-DUM%"]
  }

  measure: count_svc_cont_no_1quote {
    label: "Count of Contracts (ONE Quote)"
    type: count_distinct
    sql: ${svc_cont_no} ;;
    value_format_name: decimal_0
    filters: [record_type: "Booking", svc_cont_no: "-DUM%", is_one_quotation: "Yes"]
  }

  measure: count_svc_cont_no_non_1quote {
    label: "Count of Contracts (Non ONE Quote)"
    type: count_distinct
    sql: ${svc_cont_no} ;;
    value_format_name: decimal_0
    filters: [record_type: "Booking", svc_cont_no: "-DUM%", is_one_quotation: "No"]
  }



  measure: count_svc_cont_no_sc {
    label: "Count of Contracts (S/C)"
    type: count_distinct
    sql: ${svc_cont_no} ;;
    value_format_name: decimal_0
    filters: [record_type: "Booking", of_svc_contract.sc_rfa_typ: "S"]
  }

  measure: count_svc_cont_no_rfa {
    label: "Count of Contracts (RFA)"
    type: count_distinct
    sql: ${svc_cont_no} ;;
    value_format_name: decimal_0
    filters: [record_type: "Booking", of_svc_contract.sc_rfa_typ: "R"]
  }

  measure: count_svc_cont_no_trf {
    label: "Count of Contracts (Tariff)"
    type: count_distinct
    sql: ${svc_cont_no} ;;
    value_format_name: decimal_0
    filters: [record_type: "Booking", of_svc_contract.sc_rfa_typ: "T"]
  }

  measure: count_svc_cont_no_oth {
    label: "Count of Contracts (Other)"
    type: count_distinct
    sql: ${svc_cont_no} ;;
    value_format_name: decimal_0
    filters: [record_type: "Booking", svc_cont_no: "-DUM%", of_svc_contract.sc_rfa_typ: "NULL"]
  }

  ### Measures for Count of Grp Cust ###


  measure: count_cust_grp {
    label: "Count of Group Customers:"
    type: count_distinct
    sql: ${consolidated_cnt_cust_grp_cd} ;;
    value_format_name: decimal_0
    filters: [record_type: "Booking"]
  }


  #### Drill to Raw Data ####

  measure: raw_data_drill_2_details {
    type:  string
    sql:  MAX('Drill to details') ;;
    link: {
      label: "Drill into Booking Details"
      url: "{{ total_booking_teu_drill_into_raw_data_2._link }}"
    }
    link: {
      label: "Drill into CVA Performance"
      url: "{{ total_target_teu_drill_into_raw_data_2._link }}"
    }
  }

  measure: total_booking_teu_drill_into_raw_data {
    label: "Raw data: Booking"
    type:  string
    sql:  MAX('Raw data: Booking') ;;
    link: {
      label: "Drill into booking raw data"
      url: "{{ total_booking_teu_drill_into_raw_data_2._link }}"
    }
  }

  measure: total_target_teu_drill_into_raw_data {
    label: "Raw data: Targets & Actuals"
    type:  string
    sql:  MAX('Raw data: Target and Achievement') ;;
    link: {
      label: "Drill into targets and achivement details"
      url: "{{ total_target_teu_drill_into_raw_data_2._link }}"
    }
  }

  measure: total_booking_teu_drill_into_raw_data_2 {
    type: sum
    sql:  1 ;;
    filters: [record_type: "Booking"]
    value_format_name: decimal_0
    drill_fields: [bkg_details*]
  }

  measure: total_target_teu_drill_into_raw_data_2 {
    type: sum
    sql:  1 ;;
    value_format_name: decimal_0
    drill_fields: [target_details*]
  }

  #WH DCN-948 (202305) add bkg_channel_code, desc & Trunk Service Lane Code to bkg_details
  #WH DCN-959 & 960 (ver 2023.06.20) add Key account Region and Key Account Country
  #WH DCN-1110 - add cmdt_nm into bkg_details
  set: bkg_details {
    fields: [
      bkg_no
      ,consolidated_cntr_tpsz_with_rd
      ,container_cat
      ,cmdt_nm
      ,bkg_cre_dt
      ,bkg_sts_cd_dscr
      ,of_sales_week_master.sales_month_new_fmt
      ,of_sales_week_master.sales_week_new_fmt
      ,teu
      ,cm_amt
      ,tot_g_rev
      ,consolidated_cnt_cust_cd
      ,v_customer_opus_n_prospect.name
      ,cust_owner.full_name
      ,cust_owner.mgr_full_name
      ,actual_cust_cd
      ,actual_cust_nm
      ,consolidated_cnt_cust_grp_cd
      ,of_customer_group.cust_grp_nm
      ,of_customer_group.key_acct_tp_cd
      ,of_customer_group.key_acct_cnt_name
      ,of_customer_group.key_acct_rgn_cd
      ,of_customer_group.global_customer_type
      ,gam.full_name
      ,ram_usr.full_name
      ,svc_cont_no
      ,ctrt_prop_ofc_cd
      ,contract_office_country.country_name
      ,contract_office_region.reg_rhq_code
      ,of_svc_contract.ctrt_eff_dt_in_date
      ,of_svc_contract.ctrt_exp_dt_in_date
      ,cont_period_typ
      ,bkg_channel
      ,bkg_channel_code
      ,bkg_channel_desc
      ,bkg_ofc_cd
      ,is_one_quotation
      ,rcv_term_dscr
      ,de_term_dscr
      ,gsym_cif_fob
      ,of_svc_scp_grp_cat.group_cat
      ,svc_scp_grp_cd
      ,svc_scp_cd
      ,sub_trd_cd
      ,dominant_flg
      ,rlane_cd
      ,trunk_slane_cd
      ,rev_vvd
      ,POR_reg_ref.reg_rhq_code
      ,POR_country.country_name
      ,por_cd
      ,n1st_pol_cd
      ,final_pod_cd
      ,del_cd
      ,DEL_country.country_name
      ,DEL_reg_ref.reg_rhq_code
      ,of_lcn_mty_pkup.ECC_Code
      ,of_lcn_mty_rtn.ECC_Code
    ]
  }

  #WH DCN-948 (202305) add bkg_channel and bkg_channel_code to bkg_status_details
  set: bkg_status_details {
    fields: [
      bkg_no
      ,bkg_cre_dt
      ,of_sales_week_master.sales_week_new_fmt
      ,bkg_sts_cd_dscr
      ,bkg_cncl_party
      ,bkg_channel
      ,bkg_channel_code
      ,bkg_channel_desc
      ,bkg_cxl_rsn_desc
      ,bkg_cxl_sub_rsn_desc
      ,consolidated_cnt_cust_cd
      ,v_customer_opus_n_prospect.name
      ,consolidated_cnt_cust_grp_cd
      ,of_customer_group.cust_grp_nm
      ,of_customer_group.key_acct_tp_cd
      ,of_customer_group.global_customer_type
      ,svc_cont_no
      ,ctrt_prop_ofc_cd
      ,svc_scp_grp_cd
      ,svc_scp_cd
      ,dominant_flg
      ,por_cd
      ,del_cd
      ,total_booking_teu
      ,total_booking_cm_amt
    ]
  }

  set: svc_cont_details {
    fields: [
      svc_cont_no
      ,of_svc_contract.sc_rfa_typ_dscr
      ,of_svc_contract.ofc_cd
      ,of_svc_contract.ctrt_eff_dt_in_date
      ,of_svc_contract.ctrt_exp_dt_in_date
      ,of_svc_contract.ctrt_dur_tp_cd
      ,of_svc_contract.via_ONE_Quote_yesno
      ,of_svc_contract.srep_nm
      ,of_svc_contract.srep_eml
      ,total_booking_teu
      ,total_booking_cm_amt
    ]
  }

  set: target_details {
    fields: [
      consolidated_cnt_cust_cd
      , v_customer_opus_n_prospect.name
      , consolidated_cnt_cust_grp_cd
      , of_customer_group.cust_grp_nm
      , gam.full_name
      , of_customer_group.key_acct_tp_cd
      , of_customer_group.global_customer_type
      , of_sales_week_master.sales_week_new_fmt
      , of_svc_scp_grp_cat.group_cat
      , svc_scp_grp_cd
      , svc_scp_cd
      , dominant_flg
      , total_target_teu
      , total_target_teu_with_vms
      , total_booking_teu
      , achievement_teu
      , achievement_teu_with_vms
    ]
  }

  ### Custom Dimensions ###
  dimension: port_pair {
    type: string
    sql: concat(${n1st_pol_cd}, ' > ', ${final_pod_cd})  ;;
  }

  dimension: gsym_cif_fob {
    #WH DCN-997 (2023.06.20) - label: "CIF/FOB (G-SYM logic)"
    label: "CIF/FOB"
    description: "CIF/FOB (G-SYM)"
    type: string
    sql:  CASE
          WHEN ${svc_scp_grp_cd} = 'EA' THEN
            CASE
            WHEN ${contract_office_country.country_code} = ${first_POL_country.country_code} THEN 'CIF'
            WHEN ${contract_office_country.country_code} = ${final_POD_country.country_code} THEN 'FOB'
            ELSE 'Others'
            END
          ELSE
            CASE
            WHEN ${of_cif_fob.cif_fob_div_desc} IS NULL THEN 'FOB'
            ELSE ${of_cif_fob.cif_fob_div_desc}
            END
          END ;;
    suggest_persist_for: "24 hour"

  }

  dimension: de_term_dscr {
    label: "Delivery Term"
    type: string
    sql: CASE ${TABLE}.de_term_cd
         WHEN 'Y' THEN 'CY'
         WHEN 'D' THEN 'Door'
         WHEN 'S' THEN 'CFS'
         WHEN 'T' THEN 'Tackle'
         WHEN 'O' THEN 'Free out'
         WHEN 'M' THEN 'Mixed'
         END
    ;;
  }

  dimension: rcv_term_dscr {
    label: "Receiving Term"
    type: string
    sql: CASE ${TABLE}.rcv_term_cd
         WHEN 'Y' THEN 'CY'
         WHEN 'D' THEN 'Door'
         WHEN 'S' THEN 'CFS'
         WHEN 'T' THEN 'Tackle'
         WHEN 'I' THEN 'Free In'
         WHEN 'M' THEN 'Mixed'
         END
    ;;
  }

############################

  dimension: record_type {
    type: string
    sql: ${TABLE}.record_type ;;
  }

  dimension: ckam_sales_person {
    type: string
    sql: ${TABLE}.ckam_sales_person ;;
  }

  dimension: bkg_no {
    label: "Booking No."
    type: string
    sql: ${TABLE}.bkg_no ;;
  }

  dimension: consolidated_cntr_tpsz {
    #WH DCN-997 (2023.06.20) - label: "Eqp Type Size"
    label: "Container Type Size Code"
    type: string
    sql: ${TABLE}.consolidated_cntr_tpsz ;;
  }

  dimension: consolidated_cntr_tpsz_with_rd {
    #WH DCN-997 (2023.06.20) - label: "Eqp Type Size"
    label: "Container Type Size Code"
    type: string
    sql: ${TABLE}.consolidated_cntr_tpsz_with_rd ;;
  }

  dimension: bkg_sts_cd {
    label: "Bkg Status Code"
    type: string
    sql: ${TABLE}.bkg_sts_cd ;;
  }

  dimension: bkg_cre_dt {
    label: "Booking Date"
    type: date
    datatype: datetime
    sql: ${TABLE}.bkg_cre_dt ;;
  }

  dimension: rec_typ_n_bkg_sts_cd {
    type: string
    sql: ${TABLE}.rec_typ_n_bkg_sts_cd ;;
    suggest_persist_for: "168 hours"
    suggestions: ["BKG:F","BKG:S","BKG:W","BKG:X","PLN","TGT"]
  }

  dimension: bkg_sts_cd_dscr_4chart {
    label: "Booking Status Description (For Charting)"
    type: string
    sql: CASE ${TABLE}.bkg_sts_cd
           WHEN 'F' THEN 'Firm & Waitlisted'
           WHEN 'S' THEN 'Firm & Waitlisted'
           WHEN 'W' THEN 'Firm & Waitlisted'
           WHEN 'X' THEN 'Cancelled'
           END  ;;
  }

  dimension: de_term_cd {
    type: string
    sql: ${TABLE}.de_term_cd ;;
  }

  dimension: rcv_term_cd {
    type: string
    sql: ${TABLE}.rcv_term_cd ;;
  }

  dimension: cif_fob_split_cd {
    type: string
    sql: ${TABLE}.cif_fob_split_cd ;;
  }

  dimension: frt_term_cd {
    type: string
    sql: ${TABLE}.frt_term_cd ;;
  }

  dimension: act_mty_pkup_scc_cd {
    type: string
    sql: ${TABLE}.act_mty_pkup_scc_cd ;;
  }

  dimension: mty_pkup_scc_cd {
    type: string
    sql: ${TABLE}.mty_pkup_scc_cd ;;
  }

  dimension: mty_rtn_scc_cd {
    type: string
    sql: ${TABLE}.mty_rtn_scc_cd ;;
  }

  dimension: bkg_mty_rtn_scc_cd {
    type: string
    sql: ${TABLE}.bkg_mty_rtn_scc_cd ;;
  }

  dimension: bkg_mty_pkup_yd_cd {
    type: string
    sql: ${TABLE}.bkg_mty_pkup_yd_cd ;;
  }

  dimension: bkg_mty_rtn_yd_cd {
    type: string
    sql: ${TABLE}.bkg_mty_rtn_yd_cd ;;
  }

  dimension: act_mty_pkup_yd_cd {
    type: string
    sql: ${TABLE}.act_mty_pkup_yd_cd ;;
  }

  dimension: act_mty_rtn_yd_cd {
    type: string
    sql: ${TABLE}.act_mty_rtn_yd_cd ;;
  }

  dimension: mty_pkup_yd_cd {
    type: string
    sql: ${TABLE}.mty_pkup_yd_cd ;;
  }

  dimension: mty_rtn_yd_cd {
    type: string
    sql: ${TABLE}.mty_rtn_yd_cd ;;
  }

  #dimension: mty_pkup_ecc {
  #  label: "Empty Pickup ECC"
  #  type: string
  #  sql: ${TABLE}.mty_pkup_ecc ;;
  #}

  #dimension: mty_rtn_ecc {
  #  label: "Empty Return ECC"
  #  type: string
  #  sql: ${TABLE}.mty_rtn_ecc ;;
  #}

  dimension: teu {
    label: "TEU"
    type: number
    sql: ${TABLE}.teu ;;
  }

  dimension: cm_amt {
    #WH DCN-997 (2023.06.20) - label: "CM Amount"
    label: "Gross CM"
    type: number
    sql:  {% if internal_vs_external._parameter_value == "'INT'" %}
            ${TABLE}.cm_amt
          {% else %}
             NULL
          {% endif %} ;;
    value_format_name: decimal_2
  }

  #   --WH 202309 (Add TPA logic) ${TABLE}.cm_amt
  # case when ${is_TPA_user} = "No" then ${TABLE}.cm_amt else null end

  dimension: cm_amt_eppa {
    type: number
    sql: ${TABLE}.cm_amt_eppa ;;
  }

  dimension: cm_amt_eppb {
    type: number
    sql: ${TABLE}.cm_amt_eppb ;;
  }

  dimension: bkg_cgo_wgt {
    type: number
    sql: ${TABLE}.bkg_cgo_wgt ;;
  }

  dimension: grs_wgt {
    type: number
    sql: ${TABLE}.grs_wgt ;;
  }

  dimension: cmdt_cd {
    type: string
    sql: ${TABLE}.cmdt_cd ;;
  }

  #WH DCN-1110 - add label to cmdt_nm
  dimension: cmdt_nm {
    type: string
    label: "Commodity Name"
    sql: ${TABLE}.cmdt_nm ;;
  }

  dimension: cgo_ntr_cd {
    type: string
    sql: ${TABLE}.cgo_ntr_cd ;;
  }

  dimension: cgo_ntr_nm {
    type: string
    sql: ${TABLE}.cgo_ntr_nm ;;
  }

  dimension: dcgo_flg {
    type: string
    sql: ${TABLE}.dcgo_flg ;;
  }

  dimension: rd_cgo_flg {
    type: string
    sql: ${TABLE}.rd_cgo_flg ;;
  }

  dimension: reefer_vs_dry {
    label: "Reefer vs Dry"
    type: string
    sql: CASE ${container_cat}
         WHEN 'Reefer' THEN 'Reefer'
         ELSE 'Dry'    END
    ;;
  }

  # dimension: scp_ofc_cd {
  #   type: string
  #   sql: ${TABLE}.scp_ofc_cd ;;
  # }

  dimension: sc_rfa_typ {
    type: string
    label: "Contract Type"
    sql: ${TABLE}.sc_rfa_typ ;;
  }

  dimension: container_cat_ord {
    type: number
    sql: CASE ${container_cat}
         WHEN 'Dry'     THEN 1
         WHEN 'RAD'     THEN 2
         WHEN 'Reefer'  THEN 3
         WHEN 'Special' THEN 4
         WHEN 'Others'  THEN 5
         END
    ;;
  }

  dimension: container_cat {
    label: "Container Category"
    order_by_field: container_cat_ord
    type: string
    sql: ${TABLE}.container_cat ;;
  }

  dimension: live_reefer_flag {
    type: string
    label: "Live Reefer Flag"
    sql: case when ${container_cat} = 'Reefer' then 'Yes' else 'No' end ;;
  }

  dimension: consolidated_cnt_cust_cd {
    label: "Customer Code"
    type: string
    sql: ${TABLE}.consolidated_cnt_cust_cd ;;
  }

  dimension: consolidated_cnt_cust_grp_cd {
    label: "Customer Group Code"
    type: string
    sql: ${TABLE}.consolidated_cnt_cust_grp_cd ;;
  }

  dimension: cust_nvo_fak_nac {
    type: string
    label: "NVO: FAK/NAC"
    sql: ${TABLE}.cust_nvo_fak_nac ;;
    suggest_persist_for: "24 hour"
  }

  dimension: cust_bco_fak_nac {
    type: string
    label: "BCO/FAK/NAC"
    sql: ${TABLE}.cust_bco_fak_nac ;;
    suggest_persist_for: "24 hour"
  }

  dimension: actual_cust_cd {
    type: string
    label: "Actual Customer Code"
    sql: ${TABLE}.actual_cust_cd ;;
  }

  dimension: actual_cust_nm {
    type: string
    label: "Actual Customer Name"
    sql: ${TABLE}.actual_cust_nm ;;
  }

  dimension: actual_cust_cd_and_name {
    type: string
    label: "Actual Customer Code & Name"
    sql: concat(${actual_cust_cd}, " - ", ${actual_cust_nm}) ;;
  }

  dimension: por_cd {
    label: "POR Code"
    type: string
    sql: ${TABLE}.por_cd ;;
  }

  dimension: ori_cnt {
    type: string
    sql: ${TABLE}.ori_cnt ;;
  }

  dimension:  cn_sub_reg {
    label: "China Sub Region"
    type: string
    sql: ${TABLE}.cn_sub_reg ;;
  }

  dimension: del_cd {
    label: "DEL Code"
    type: string
    sql: ${TABLE}.del_cd ;;
  }

  dimension: del_cnt {
    type: string
    sql: ${TABLE}.del_cnt ;;
  }

  dimension: n1st_pod_cd {
    label: "First POD"
    type: string
    sql: ${TABLE}.n1st_pod_cd ;;
  }

  dimension: n1st_pol_cd {
    #WH DCN-997 (2023.06.20) - label: "First POL"
    label: "First POL Code"
    type: string
    sql: ${TABLE}.n1st_pol_cd ;;
  }

  dimension: final_pod_cd {
    #WH DCN-997 (2023.06.20) - label: "Final POD"
    label: "Last POD Code"
    type: string
    sql: ${TABLE}.final_pod_cd ;;
  }

  dimension: pod_loc_cd {
    type: string
    sql: ${TABLE}.pod_loc_cd ;;
  }

  dimension: pol_loc_cd {
    type: string
    sql: ${TABLE}.pol_loc_cd ;;
  }

  dimension: trnk_pod_cd {
    label: "Trunk POD"
    type: string
    sql: ${TABLE}.trnk_pod_cd ;;
  }

  dimension: trnk_pol_cd {
    label: "Trunk POL"
    type: string
    sql: ${TABLE}.trnk_pol_cd ;;
  }

  dimension: cgm_por_country_name {
    label: "CGM POR Country Name"
    type: string
    sql: ${TABLE}.cgm_por_country_name ;;
  }

  dimension: cgm_por_country_code {
    label: "CGM POR Country Code"
    type: string
    sql: ${TABLE}.cgm_por_country_code ;;
  }

  dimension: svc_cont_no {
    #WH DCN-997 (2023.06.20) - label: "Svc/RFA No"
    label: "Contract Number"
    type: string
    sql: ${TABLE}.svc_cont_no ;;
    suggest_persist_for: "24 hour"
  }

  dimension: is_svc_cont_dummy {
    type: string
    sql: ${TABLE}.is_svc_cont_dummy ;;
  }

  dimension: sc_rfa_ctrt_tp_nm {
    type: string
    sql: ${TABLE}.sc_rfa_ctrt_tp_nm ;;
  }

  dimension_group: cont_effective_dt {
    type: time
    datatype: datetime
    sql: ${TABLE}.cont_effective_dt ;;
  }

  dimension_group: cont_expiry_dt {
    type: time
    datatype: datetime
    sql: ${TABLE}.cont_expiry_dt ;;
  }

  dimension: cont_period_typ_cd {
    #WH DCN-909 (202305) : label: "Contract Period Type Code"
    label: "Contract Length Type Code"
    type: string
    sql: ${TABLE}.cont_period_typ_cd ;;
  }

  dimension: cont_period_typ {
    #WH DCN-909 (202305) : label: "Contract Period Type"
    #WH DCN-997 (2023.06.20) - label: "Contract Length Type"
    label: "Contract Length"
    type: string
    sql: ${TABLE}.cont_period_typ ;;
    suggest_persist_for: "24 hour"
    suggestions: ["Long" , "Medium" ,"Short"]
  }

  #dimension: cont_period_typ_bkg {
  #  type: string
  #  label: "Contract Period Type"
  #  sql: ${TABLE}.cont_period_typ_bkg ;;
  #  suggest_persist_for: "24 hour"
  #  suggestions: ["Long" , "Medium" ,"Short"]
  #}

  dimension: ctrt_scp_srep_ofc_cd {
    type: string
    sql: ${TABLE}.ctrt_scp_srep_ofc_cd ;;
  }

  dimension: ctrt_scp_srep_eml {
    type: string
    sql: ${TABLE}.ctrt_scp_srep_eml ;;
  }

  dimension: ctrt_scp_srep_nm {
    type: string
    sql: ${TABLE}.ctrt_scp_srep_nm ;;
  }

  dimension: ctrt_prop_ofc_cd {
    #WH DCN-997 (2023.06.20) - label: "Contract Office Code"
    label: "Contract Office"
    type: string
    sql: ${TABLE}.ctrt_prop_ofc_cd ;;
    suggest_persist_for: "24 hour"
  }

  dimension: ctrt_prop_srep_eml {
    type: string
    sql: ${TABLE}.ctrt_prop_srep_eml ;;
  }

  dimension: ctrt_prop_srep_nm {
    type: string
    sql: ${TABLE}.ctrt_prop_srep_nm ;;
  }

  dimension: ctrt_prop_rhq_code {
    type: string
    sql: ${TABLE}.ctrt_prop_rhq_code ;;
  }

  dimension: ctrt_prop_ctry_code {
    type: string
    sql: ${TABLE}.ctrt_prop_ctry_code ;;
  }

  dimension: svc_scp_cd {
    label: "Service Scope Code"
    type: string
    sql: ${TABLE}.svc_scp_cd ;;
    suggest_persist_for: "24 hour"
  }

  dimension: dominant_flg {
    label: "Dominant Flag"
    type: string
    sql: ${TABLE}.dominant_flg ;;
    suggest_persist_for: "24 hour"
    suggestions: ["DOM", "N-DOM"]
  }

  dimension: dominant_flg_yn {
    label: "Dominant Flag (Y/N)"
    type: string
    sql: CASE WHEN ${TABLE}.dominant_flg = 'DOM' THEN 'Y' ELSE 'N' END ;;
    suggest_persist_for: "24 hour"
    suggestions: ["Y", "N"]
  }

  dimension: slane_cd {
    label: "Service Lane"
    type: string
    sql: ${TABLE}.slane_cd ;;
    suggest_persist_for: "24 hour"
  }

  dimension: rlane_cd {
    label: "Revenue Lane"
    type: string
    sql: ${TABLE}.rlane_cd ;;
    suggest_persist_for: "24 hour"
  }

  dimension: svc_scp_grp_cd {
    label : "Service Scope Group Code"
    type: string
    sql: ${TABLE}.svc_scp_grp_cd ;;
    suggest_persist_for: "24 hour"
  }

  dimension: trd_cd {
    type: string
    sql: ${TABLE}.trd_cd ;;
  }

  dimension: sub_trd_cd {
    label: "Sub Trade Code"
    type: string
    sql: ${TABLE}.sub_trd_cd ;;
  }

  dimension: week {
    type: number
    sql: ${TABLE}.week ;;
  }

  dimension: bkg_cxl_rsn_cd {
    type: string
    sql: ${TABLE}.bkg_cxl_rsn_cd ;;
  }

  dimension: bkg_cxl_sub_rsn_cd {
    type: number
    sql: ${TABLE}.bkg_cxl_sub_rsn_cd ;;
  }

  dimension: bkg_cncl_party {
    label: "Booking Cancellation Party"
    type: string
    sql: ${TABLE}.bkg_cncl_party ;;
    drill_fields: [bkg_cxl_rsn_desc,bkg_cxl_sub_rsn_desc]
  }

  dimension: bkg_cxl_rsn_desc {
    label: "Booking Cancellation Reason"
    type: string
    sql: ${TABLE}.bkg_cxl_rsn_desc ;;
    drill_fields: [bkg_cxl_sub_rsn_desc]
  }

  dimension: bkg_cxl_sub_rsn_desc {
    label: "Booking Cancellation Sub Reason"
    type: string
    sql: ${TABLE}.bkg_cxl_sub_rsn_desc ;;
  }

  dimension: bkg_channel {
    #WH DCN-948 (202305) rename dimension: label: "Booking Channel"
    label: "Booking Channel Group"
    type: string
    sql: ${TABLE}.bkg_channel ;;
  }

  #WH DCN-948 (202305) - add Booking Channel Code:
  dimension: bkg_channel_code {
    label: "Booking Channel Code"
    type: string
    sql: ${TABLE}.bkg_channel_code ;;
  }

  #WH DCN-948 (202305) - add Booking Channel Description:
  dimension: bkg_channel_desc {
    label: "Booking Channel"
    type: string
    sql: ${TABLE}.bkg_channel_desc ;;
  }


  dimension: is_one_quotation {
    label: "Is ONE Quote"
    type: string
    sql: ${TABLE}.is_one_quotation ;;
  }

  dimension: rev_vvd {
    #WH DCN-997 (2023.06.20) - label: "Revenue VVD"
    label: "Revenue Lane VVD"
    type: string
    sql: ${TABLE}.rev_vvd ;;
  }

  dimension: sc_rfa_sls_rep_ofc_cnt_cd {
    type: string
    sql: ${TABLE}.sc_rfa_sls_rep_ofc_cnt_cd ;;
  }

  dimension: sc_rfa_sls_rep_ofc_cnt_nm {
    type: string
    sql: ${TABLE}.sc_rfa_sls_rep_ofc_cnt_nm ;;
  }

  dimension: account_plan_sc_rfa_customer_group_code {
    type: string
    sql: ${TABLE}.account_plan_sc_rfa_customer_group_code ;;
  }

  dimension: rc_flg {
    type: string
    sql: ${TABLE}.rc_flg ;;
  }

  dimension: rev_period_yrqtr {
    type: string
    sql: ${TABLE}.rev_period_yrqtr ;;
  }

  dimension: tot_g_rev {
    #WH DCN-997 (2023.06.20) - label: "Total Revenue"
    label: "Gross Revenue"
    type: number
    #WH 202309 (Add TPA logic) :  sql: ${TABLE}.tot_g_rev ;;
    # sql: case when ${is_TPA_user} = "No" then ${TABLE}.tot_g_rev else null end;;
    sql: ${TABLE}.tot_g_rev ;;
    value_format_name: decimal_2
  }

  dimension: bkg_ofc_cd {
    label: "Booking Office Code"
    type: string
    sql: ${TABLE}.bkg_ofc_cd ;;
  }

  dimension: cgo_rcv_dt {
    label: "Cargo Receive Date"
    type: date
    datatype: datetime
    sql: ${TABLE}.cgo_rcv_dt ;;
  }

  dimension: lodg_due_dt {
    label: "Sailing Due Date"
    type: date
    datatype: datetime
    sql: ${TABLE}.lodg_due_dt ;;
  }

  #WH DCN-909 (202305)
  dimension: trunk_slane_cd {
    type: string
    label: "Trunk Service Lane"
    sql: ${TABLE}.T_SLAN_CD ;;
    suggest_persist_for: "24 hour"
  }

  dimension: primary_key {
    type: string
    sql: ${TABLE}.primary_key ;;
    primary_key: yes
  }

  #WH 202309 (Add TPA logic)
  # dimension: is_TPA_user {
  #   label: "Is TPA user"
  #   type: string
  #   sql: case when (select count(*) FROM ONEFORCE.OF_USER WHERE
  #   REPLACE(Email, '.invalid', '') = REPLACE('{{ _user_attributes["email"] }}', '.invalid', '') AND
  #   IsActive = 'true' AND
  #   (profile_name = 'TPA (Service Cloud) CCA' or profile_name = 'TPA (Service Cloud) CCS' or profile_name = 'Third Party Agent' )) > 0
  #   then "Yes"
  #   else "No"
  #   end;;
  # }

}

view: of_consolidated_actuals_cgm_target {
  derived_table: {
    sql: SELECT
        'Sales Budget' as record_type
        , 'Sales Budget:' || CAST( row_number() over() as string) as pkey
        , customer_code as consolidated_cnt_cust_cd
        , controlling_office as ctrt_prop_ofc_cd
        -- add by helen on 20210821
        , CASE  -- Update by Zoe 17 Sep,2021
           WHEN   o.OFFICE_CODE = 'TSNBB' then 'CNN'
           WHEN   o.OFFICE_CODE = 'SJWBB' then 'CNN'
           WHEN   o.OFFICE_CODE = 'DLCBB' then 'CNN'
           WHEN   o.OFFICE_CODE = 'SHABB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'LYGBB' then 'CNN'
           WHEN   o.OFFICE_CODE = 'NKGBB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'SZHBB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'HGHBB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'JIXBB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'NBOBB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'HFEBB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'FOCBB' then 'HK & CNS'
           WHEN   o.OFFICE_CODE = 'XMNBB' then 'HK & CNS'
           WHEN   o.OFFICE_CODE = 'TAOBB' then 'CNN'
           WHEN   o.OFFICE_CODE = 'CGOBB' then 'CNN'
           WHEN   o.OFFICE_CODE = 'WUHBB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'CANBB' then 'HK & CNS'
           WHEN   o.OFFICE_CODE = 'SWABA' then 'HK & CNS'
           WHEN   o.OFFICE_CODE = 'SZPBB' then 'HK & CNS'
           WHEN   o.OFFICE_CODE = 'ZHOBB' then 'HK & CNS'
           WHEN   o.OFFICE_CODE = 'ZHUBB' then 'HK & CNS'
           WHEN   o.OFFICE_CODE = 'CKGBB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'CTUBB' then 'CNC'
           WHEN   o.OFFICE_CODE = 'SIABB' then 'CNN'
           WHEN   o.OFFICE_CODE = 'HKGBB' then 'HK & CNS'
           WHEN   o.OFFICE_CODE = 'HKGHQ' then 'HK & CNS'
           WHEN   o.OFFICE_CODE = 'MACBA' then 'HK & CNS'
           ELSE  LEFT (l.LOCATION_CODE,2)
           END as ctrt_cnt_cd
        -- end add by helen on 20210821
        , salesperson as salesperson_cd
        , service_scope_group as svc_scp_grp_cd
        , cast(null as string) as dominant_flg
        , cast(null as string) as consolidated_cntr_tpsz
        , cast(null as string) as slane_cd
        , substr(format_date("%Y%m",  month_year),1, 6) as week
        , CASE
          WHEN zz_origin_country IN ('HK' , 'MO') THEN 'HK & CNS'
          Else zz_origin_country
          END as por_cnt_cd
        , cast(null as string) as rc_flg           -- dcn504, 2022-Jan
        , cast(null as string) as rev_period_yrqtr -- dcn504, 2022-Jan
        , 0 as teu
        , 0 as cm_amt
        , 0 as cm_amt_epp_b --dcn504, 2022-Jan
        , 0 as cm_amt_epp_a --dcn504, 2022-Jan

      FROM OF_SALES_BUDGET_CAPTURE as sales_budget_capture
      INNER JOIN OF_SALES_BUDGET_CAPTURE_DTL AS of_sales_budget_caputure_dtl ON sales_budget_capture.oneforce_id = of_sales_budget_caputure_dtl.sales_budget_capture
      -- add by helen on 20210821
      LEFT JOIN OF_OFFICE as o on o.OFFICE_CODE = sales_budget_capture.controlling_office
      LEFT JOIN OF_LOCATION as l on l.LOCATION_CODE = o.LOCATION_CODE
      -- end add by helen on 20210821

      UNION ALL

      --      SELECT
      --        'Actuals' as record_type
      --        -- change by DCN-491
      --        -- of_actuals.cnt_cust_cd as consolidated_cnt_cust_cd
      --        , coalesce(of_svc_contract.cust_cd, of_actuals.cnt_cust_cd) as consolidated_cnt_cust_cd
      --        -- end change DCN-491
      --        , CTRT_PROP_OFC_CD as ctrt_prop_ofc_cd
      --        -- add by helen on 20210818
      --        , CASE  -- Update by Zoe 17 Sep,2021
      --           WHEN   o.OFFICE_CODE = 'TSNBB' then 'CNN'
      --           WHEN   o.OFFICE_CODE = 'SJWBB' then 'CNN'
      --           WHEN   o.OFFICE_CODE = 'DLCBB' then 'CNN'
      --           WHEN   o.OFFICE_CODE = 'SHABB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'LYGBB' then 'CNN'
      --           WHEN   o.OFFICE_CODE = 'NKGBB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'SZHBB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'HGHBB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'JIXBB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'NBOBB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'HFEBB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'FOCBB' then 'HK & CNS'
      --           WHEN   o.OFFICE_CODE = 'XMNBB' then 'HK & CNS'
      --           WHEN   o.OFFICE_CODE = 'TAOBB' then 'CNN'
      --           WHEN   o.OFFICE_CODE = 'CGOBB' then 'CNN'
      --           WHEN   o.OFFICE_CODE = 'WUHBB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'CANBB' then 'HK & CNS'
      --           WHEN   o.OFFICE_CODE = 'SWABA' then 'HK & CNS'
      --           WHEN   o.OFFICE_CODE = 'SZPBB' then 'HK & CNS'
      --           WHEN   o.OFFICE_CODE = 'ZHOBB' then 'HK & CNS'
      --           WHEN   o.OFFICE_CODE = 'ZHUBB' then 'HK & CNS'
      --           WHEN   o.OFFICE_CODE = 'CKGBB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'CTUBB' then 'CNC'
      --           WHEN   o.OFFICE_CODE = 'SIABB' then 'CNN'
      --           WHEN   o.OFFICE_CODE = 'HKGBB' then 'HK & CNS'
      --           WHEN   o.OFFICE_CODE = 'HKGHQ' then 'HK & CNS'
      --           WHEN   o.OFFICE_CODE = 'MACBA' then 'HK & CNS'
      --           ELSE  LEFT (l.LOCATION_CODE,2)
      --           END as ctrt_cnt_cd
      --        -- end add by helen 20210818
      --        , of_salesperson.oneforce_id as salesperson_cd
      --        , of_svc_scp.service_scope_group_code as svc_scp_grp_cd
      ---- change on 20210726 by Helen
      ----      , of_svc_scp.dominant_flag as dominant_flg
      --        , CASE
      --          WHEN svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N-DOM'
      --          WHEN svc_scp_cd = 'LEA' THEN 'DOM'
      --          WHEN svc_scp_cd = 'IAA' AND right(vvd,1) IN ('S','W') THEN 'DOM'
      --          WHEN svc_scp_cd = 'IAA' THEN 'N-DOM'
      --          ELSE of_svc_scp.dominant_flag
      --          END as dominant_flg
      ---- end change on 20210726 by Helen
      --        , CNTR_TPSZ_CD as consolidated_cntr_tpsz
      ---- change on 20210726 by Helen
      ----      , substr(rlane_cd,1,3) as slane_cd
      --        , CASE
      --          WHEN sub_trd_cd = 'IP' and service_scope_group_code IN ('WA','EA') THEN 'TRUNK'
      --          WHEN substr(rlane_cd,1,3) = 'IBC' THEN 'IET'
      --          WHEN substr(rlane_cd,1,3) = 'NBS' THEN 'IET'
      --          WHEN substr(rlane_cd,1,3) = 'BAX' THEN 'IET'
      --          WHEN substr(rlane_cd,1,3) = 'REX' THEN 'IET'
      --          WHEN substr(rlane_cd,1,3) = 'SDX' THEN 'IET'
      --          WHEN substr(rlane_cd,1,3) = 'NPX' THEN 'IET'
      --          WHEN substr(rlane_cd,1,3) = 'GTE' THEN 'IET'
      --          WHEN substr(rlane_cd,1,3) = 'ADX' THEN 'IET'
      --          WHEN substr(rlane_cd,1,3) = 'LEX' THEN 'IET'
      --          ELSE substr(rlane_cd,1,3)
      --          END as slane_cd
      ---- end change on 20210726 by Helen
      --        , cast(week as string) as week
      ---- change on 20210726 by Helen
      ----       , ori_cnt as por_cnt_cd
      --          , CASE  -- Update by Zoe 17 Sep,2021
      --            WHEN of_location.location_code =  'CNLYG'  then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '11' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '12' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '13' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '14' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '15' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '21' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '22' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '23' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '31' then 'CNC'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '32' then 'CNC'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '33' then 'CNC'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '34' then 'CNC'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '35' then 'HK & CNS'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '36' then 'CNC'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '37' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '41' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '42' then 'CNC'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '43' then 'CNC'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '44' then 'HK & CNS'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '45' then 'HK & CNS'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '46' then 'HK & CNS'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '50' then 'CNC'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '51' then 'CNC'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '52' then 'HK & CNS'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '53' then 'HK & CNS'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '54' then 'HK & CNS'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '61' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '62' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '63' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '64' then 'CNN'
      --            WHEN ori_cnt = 'CN' AND of_location.State_Code =  '65' then 'CNN'
      --            WHEN ori_cnt IN ('CN' , 'HK' , 'MO') OR of_location.region_code IN ('HKG', 'MAC', 'CNS') THEN 'HK & CNS'
      --            WHEN ori_cnt IN ('HK','MO') THEN 'HK & CNS'
      --            WHEN ori_cnt = 'CN' THEN of_location.region_code
      --            ELSE ori_cnt
      --            END as por_cnt_cd
      ---- end change on 20210726 by Helen
      --        , of_actuals.rc_flg           -- dcn504, 2022-Jan
      --        , of_actuals.rev_period_yrqtr -- dcn504, 2022-Jan
      --        , bkg_teu as teu
      --        --, CASE WHEN of_svc_scp.service_scope_group_code = 'TP' THEN cast(cm_amt2 as numeric) ELSE cast(pa_cm_amt as numeric) END as cm_amt, --dcn504, 2022-Jan
      --        , CAST( (CASE WHEN of_svc_scp.Service_Scope_Group_Code = 'TP'
      --                 THEN cm_amt2   - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz_cd,1,1)='Q' then 0 else bkg_teu end) )
      --                 ELSE pa_cm_amt - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz_cd,1,1)='Q' then 0 else bkg_teu end) )
      --                 END ) as numeric) as cm_amt  --dcn504, 2022-Jan
      --        , cm_amt2   as cm_amt_epp_b --dcn504, 2022-Jan
      --        , pa_cm_amt as cm_amt_epp_a --dcn504, 2022-Jan
      --        FROM OF_ACTUALS as of_actuals
      --        LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME}
      --        as of_svc_contract ON of_actuals.svc_cont_no = of_svc_contract.sc_rfa_no
      --        LEFT JOIN OF_SVC_SCP AS of_svc_scp ON of_actuals.svc_scp_cd = of_svc_scp.service_scope_code
      --        LEFT JOIN (
      --              SELECT cust_cd, cust_grp_id, trim(lower(srep_eml)) as srep_eml
      --              FROM V_CUSTOMER_OPUS_N_PROSPECT
      --            ) as v_customer_opus_n_prospect ON coalesce(of_svc_contract.cust_cd, of_actuals.cnt_cust_cd)= v_customer_opus_n_prospect.cust_cd AND coalesce(of_svc_contract.cust_cd, of_actuals.cnt_cust_cd) IS NOT NULL
      --        LEFT JOIN OF_USER as of_salesperson ON v_customer_opus_n_prospect.srep_eml = trim(lower(of_salesperson.email))
      --        LEFT JOIN (
      --              SELECT distinct location_code, region_code, state_code
      --              FROM OF_LOCATION
      --              WHERE country_code = 'CN') as of_location ON of_location.location_code = of_actuals.por_cd
      ---- add by helen on 2021081
      --        LEFT JOIN OF_OFFICE as o on o.OFFICE_CODE = of_actuals.CTRT_PROP_OFC_CD
      --        LEFT JOIN OF_LOCATION as l on l.LOCATION_CODE = o.LOCATION_CODE
      ---- end add by helen on 20210818
      --        LEFT JOIN ${upload_other_cost.SQL_TABLE_NAME}
      --        as othercost --dcn504, 2022-Jan
      --        ON ( othercost.rc_flg           = of_actuals.rc_flg                      AND
      --             othercost.REV_PERIOD_YRQTR = of_actuals.rev_period_yrqtr            AND
      --             othercost.CUST_GRP_ID      = v_customer_opus_n_prospect.cust_grp_id AND
      --             othercost.SVC_GRP_CD       = of_svc_scp.service_scope_group_code    AND
      --             othercost.DMNT_FLG         = (CASE WHEN svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N'
      --                                           WHEN svc_scp_cd = 'LEA' THEN 'Y'
      --                                           WHEN svc_scp_cd = 'IAA' AND right(vvd,1) IN ('S','W') THEN 'Y'
      --                                           WHEN svc_scp_cd = 'IAA' THEN 'N'
      --                                           WHEN of_svc_scp.dominant_flag = 'DOM' THEN 'Y'
      --                                           ELSE 'N' END)
      --           )
      --      UNION ALL

      SELECT
      'Actuals' as record_type
      , 'Actuals:' || CAST( row_number() over() as string) as pkey


      , coalesce(of_svc_contract.cust_cd, of_booking.CTRT_CUST_CD) as consolidated_cnt_cust_cd

      , CTRT_PROP_OFC_CD as ctrt_prop_ofc_cd

      , CASE
      WHEN   o.OFFICE_CODE = 'TSNBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'SJWBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'DLCBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'SHABB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'LYGBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'NKGBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'SZHBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'HGHBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'JIXBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'NBOBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'HFEBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'FOCBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'XMNBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'TAOBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'CGOBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'WUHBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'CANBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'SWABA' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'SZPBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'ZHOBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'ZHUBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'CKGBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'CTUBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'SIABB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'HKGBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'HKGHQ' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'MACBA' then 'HK & CNS'
      ELSE  LEFT (l.LOCATION_CODE,2)
      END as ctrt_cnt_cd

      , of_salesperson.oneforce_id as salesperson_cd
      , of_svc_scp.service_scope_group_code as svc_scp_grp_cd

      --      , of_svc_scp.dominant_flag as dominant_flg
      , CASE
      WHEN svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N-DOM'
      WHEN svc_scp_cd = 'LEA' THEN 'DOM'
      WHEN svc_scp_cd = 'IAA' AND right(t_vvd_cd,1) IN ('S','W') THEN 'DOM'
      WHEN svc_scp_cd = 'IAA' THEN 'N-DOM'
      ELSE of_svc_scp.dominant_flag
      END as dominant_flg

      , cntr_tpsz as consolidated_cntr_tpsz

      --      , substr(rlane_cd,1,3) as slane_cd
      , CASE
      WHEN sub_trd_cd = 'IP' and service_scope_group_code IN ('WA','EA') THEN 'TRUNK'
      WHEN substr(rlane_cd,1,3) = 'IBC' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'NBS' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'BAX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'REX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'SDX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'NPX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'GTE' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'ADX' THEN 'IET'
      WHEN substr(rlane_cd,1,3) = 'LEX' THEN 'IET'
      ELSE substr(rlane_cd,1,3)
      END as slane_cd

      , cast(week as string) as week

      --       , ori_cnt as por_cnt_cd
      , CASE
      WHEN of_location.location_code =  'CNLYG'  then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '11' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '12' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '13' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '14' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '15' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '21' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '22' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '23' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '31' then 'CNC'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '32' then 'CNC'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '33' then 'CNC'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '34' then 'CNC'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '35' then 'HK & CNS'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '36' then 'CNC'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '37' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '41' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '42' then 'CNC'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '43' then 'CNC'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '44' then 'HK & CNS'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '45' then 'HK & CNS'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '46' then 'HK & CNS'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '50' then 'CNC'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '51' then 'CNC'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '52' then 'HK & CNS'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '53' then 'HK & CNS'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '54' then 'HK & CNS'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '61' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '62' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '63' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '64' then 'CNN'
      WHEN ori_cnt = 'CN' AND of_location.State_Code =  '65' then 'CNN'
      WHEN ori_cnt IN ('CN' , 'HK' , 'MO') OR of_location.region_code IN ('HKG', 'MAC', 'CNS') THEN 'HK & CNS'
      WHEN ori_cnt IN ('HK','MO') THEN 'HK & CNS'
      WHEN ori_cnt = 'CN' THEN of_location.region_code
      ELSE ori_cnt
      END as por_cnt_cd

      , of_booking.rc_flg
      , of_booking.rev_period_yrqtr
      , bkg_teu as teu
      --, CASE WHEN of_svc_scp.service_scope_group_code = 'TP' THEN cast(cm_amt2 as numeric) ELSE cast(pa_cm_amt as numeric) END as cm_amt, --dcn504, 2022-Jan
      , CAST( (CASE WHEN of_svc_scp.Service_Scope_Group_Code = 'TP'
      THEN cm_amt2   - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz,1,1)='Q' then 0 else bkg_teu end) )
      ELSE cm_amt1 - (IFNULL(othercost.VIP_AMT_PER_TEU_USD,0) * (case when substr(cntr_tpsz,1,1)='Q' then 0 else bkg_teu end) )
      END ) as numeric) as cm_amt  --dcn504, 2022-Jan
      , cm_amt2   as cm_amt_epp_b --dcn504, 2022-Jan
      , cm_amt1 as cm_amt_epp_a --dcn504, 2022-Jan
      FROM OF_BOOKING as of_booking
      LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract ON of_booking.svc_cont_no = of_svc_contract.sc_rfa_no
      LEFT JOIN (select distinct service_scope_code, Service_Scope_Group_Code, dominant_flag from OF_SVC_SCP ) AS of_svc_scp ON of_booking.svc_scp_cd = of_svc_scp.service_scope_code
      LEFT JOIN (
      SELECT cust_cd, cust_grp_id, trim(lower(srep_eml)) as srep_eml, of_owner_id
      FROM V_CUSTOMER_OPUS_N_PROSPECT
      ) as v_customer_opus_n_prospect ON coalesce(of_svc_contract.cust_cd, of_booking.ctrt_cust_cd)= v_customer_opus_n_prospect.cust_cd AND coalesce(of_svc_contract.cust_cd, of_booking.ctrt_cust_cd) IS NOT NULL
      -- LEFT JOIN OF_USER as of_salesperson ON v_customer_opus_n_prospect.srep_eml = trim(lower(of_salesperson.email)) -- DCN-552 , Jack 2022 Mar 15
      LEFT JOIN OF_USER as of_salesperson ON v_customer_opus_n_prospect.of_owner_id = of_salesperson.oneforce_id -- DCN-552-followup, Jack, 2022 Mar 23
      LEFT JOIN (
      SELECT distinct location_code, region_code, state_code
      FROM OF_LOCATION
      WHERE country_code = 'CN') as of_location ON of_location.location_code = of_booking.por_cd

      LEFT JOIN OF_OFFICE as o on o.OFFICE_CODE = of_booking.CTRT_PROP_OFC_CD
      LEFT JOIN OF_LOCATION as l on l.LOCATION_CODE = o.LOCATION_CODE

      LEFT JOIN ${upload_other_cost.SQL_TABLE_NAME} as othercost --dcn504, 2022-Jan
      ON ( othercost.rc_flg           = of_booking.rc_flg                      AND
      othercost.REV_PERIOD_YRQTR = of_booking.rev_period_yrqtr            AND
      othercost.CUST_GRP_ID      = v_customer_opus_n_prospect.cust_grp_id AND
      othercost.SVC_GRP_CD       = of_svc_scp.service_scope_group_code    AND
      othercost.DMNT_FLG         = (CASE WHEN svc_scp_cd = 'LEA' AND n1st_pol_cd LIKE 'MX%' THEN 'N'
      WHEN svc_scp_cd = 'LEA' THEN 'Y'
      WHEN svc_scp_cd = 'IAA' AND right(t_vvd_cd,1) IN ('S','W') THEN 'Y'
      WHEN svc_scp_cd = 'IAA' THEN 'N'
      WHEN of_svc_scp.dominant_flag = 'DOM' THEN 'Y'
      ELSE 'N' END)
      )
      where of_booking.bkg_sts_cd not in ( 'X','W')
      UNION ALL

      SELECT
      'CGM' as record_type
      , 'CGM:' || CAST( row_number() over() as string) as pkey
      , cast(null as string) as consolidated_cnt_cust_cd
      , contract_office_code as ctrt_prop_ofc_cd
      -- add by helen on 20210818
      , CASE  -- Update by Zoe 17 Sep,2021
      WHEN   o.OFFICE_CODE = 'TSNBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'SJWBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'DLCBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'SHABB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'LYGBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'NKGBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'SZHBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'HGHBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'JIXBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'NBOBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'HFEBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'FOCBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'XMNBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'TAOBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'CGOBB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'WUHBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'CANBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'SWABA' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'SZPBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'ZHOBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'ZHUBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'CKGBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'CTUBB' then 'CNC'
      WHEN   o.OFFICE_CODE = 'SIABB' then 'CNN'
      WHEN   o.OFFICE_CODE = 'HKGBB' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'HKGHQ' then 'HK & CNS'
      WHEN   o.OFFICE_CODE = 'MACBA' then 'HK & CNS'
      ELSE  LEFT (l.LOCATION_CODE,2)
      END as ctrt_cnt_cd
      -- end add by helen 20210818
      , cast(null as string) as salesperson_cd
      , service_scope_group as svc_scp_grp_cd
      , dom_nondom_flag as dominant_flg
      , cast(null as string) as consolidated_cntr_tpsz
      , revenue_lane as slane_cd
      , sales_week as week
      -- change on 20210726 by Helen
      , CASE
      WHEN por_country_code = 'CCN' THEN 'CNC'
      WHEN por_country_code = 'NCN' THEN 'CNN'
      WHEN por_country_code = 'SCN' THEN 'HK & CNS'
      ELSE por_country_code
      END as por_cnt_cd
      -- end change on 20210726 by Helen
      , cast(null as string) as rc_flg           -- dcn504, 2022-Jan
      , cast(null as string) as rev_period_yrqtr -- dcn504, 2022-Jan
      , TEU as teu -- Add CM_Amount back to it, Jack Jun 3, 2021
      , CM_Amount as cm_amt -- Add CM_Amount back to it, Jack Jun 3, 2021
      , 0 as cm_amt_epp_b --dcn504, 2022-Jan
      , 0 as cm_amt_epp_a --dcn504, 2022-Jan
      FROM OF_CGM_TARGET as of_cgm_target
      -- add by helen on 2021081
      LEFT JOIN OF_OFFICE as o on o.OFFICE_CODE = of_cgm_target.contract_office_code
      LEFT JOIN OF_LOCATION as l on l.LOCATION_CODE = o.LOCATION_CODE
      -- end add by helen on 2021081
      ;;
  }

  #Jack, 2022 Oct 20: added primary key handle the requirement of the measure count
  dimension: pkey {
    type: string
    sql: ${TABLE}.pkey ;;
    primary_key: yes
  }

  measure: count {
    type: count
    hidden: yes
  }

  dimension: record_type {
    type: string
    sql: ${TABLE}.record_type ;;
  }

  dimension: consolidated_cnt_cust_cd {
    type: string
    sql: ${TABLE}.consolidated_cnt_cust_cd ;;
  }

  dimension: ctrt_prop_ofc_cd {
    type: string
    sql: ${TABLE}.ctrt_prop_ofc_cd ;;
  }

  # add by helen on 20210818
  dimension: ctrt_cnt_cd {
    type: string
    sql: ${TABLE}.ctrt_cnt_cd ;;
  }
  # end add by helen on 20210818

  dimension: salesperson_cd {
    type: string
    sql: ${TABLE}.salesperson_cd ;;
  }

  dimension: svc_scp_grp_cd {
    label: "Svc Scp Grp Code" #by Sharon 3jun2021
    type: string
    sql: ${TABLE}.svc_scp_grp_cd ;;
  }

  dimension: dominant_flg {
    type: string
    sql: ${TABLE}.dominant_flg ;;
  }

  dimension: consolidated_cntr_tpsz {
    type: string
    sql: ${TABLE}.consolidated_cntr_tpsz ;;
  }

  dimension: slane_cd {
    label:"Service Lane" #by Sharon 3jun2021
    type: string
    sql: ${TABLE}.slane_cd ;;
  }

  dimension: sub_record_type {
    type: string
    sql:
      CASE
      WHEN ${record_type} = 'CGM' AND  ${por_cnt_cd} IS NOT NULL THEN 'CGM_POR_CTRY'
      WHEN ${record_type} = 'CGM' AND  ${por_cnt_cd} IS     NULL THEN 'CGM_CTRT_OFF'
      ELSE 'CGM_POR_CTRY'
      END;;
  }

  dimension: week {
    type: number
    sql: cast(${TABLE}.week as int64) ;;
  }

  dimension: por_cnt_cd {
    type: string
    sql: ${TABLE}.por_cnt_cd ;;
  }

  dimension: teu {
    type: number
    sql: ${TABLE}.teu ;;
  }

  ## Add Value format name on 13 Aug by Zoe Cheung ##
  dimension: cm_amt {
    type: number
    #WH 202309 (Add TPA logic) - sql: ${TABLE}.cm_amt ;;
    sql: case when ${is_TPA_user} = "No" then ${TABLE}.cm_amt else null end;;
    value_format_name: usd_0
  }

  dimension: cm_amt_epp_a {
    type: number
    sql: ${TABLE}.cm_amt_epp_a ;;
    value_format_name: usd_0
  }

  dimension: cm_amt_epp_b {
    type: number
    sql: ${TABLE}.cm_amt_epp_b ;;
    value_format_name: usd_0
  }

  measure: average_teu {
    type: average
    sql: ${teu} ;;
    value_format_name: decimal_2
  }

  measure: total_cm_amt_eppa {
    type: sum
    sql:  ${cm_amt_epp_a} ;;
    value_format_name: usd_0
  }

  measure: total_cm_amt_eppb {
    type: sum
    sql:  ${cm_amt_epp_b} ;;
    value_format_name: usd_0
  }

  ## Change Value format name on 13 Aug by Zoe Cheung##
  measure: average_cm_amt {
    type: sum
    sql: ${cm_amt} ;;
    value_format_name: usd_0
  }

##  measure: cm_per_teu {
##    type: number
##    sql:  ${total_cm_amt} / NULLIF(${total_actual_teu}, 0) ;;
##    value_format_name: usd_0
##  }

  measure: cm_per_teu_actual {
    label:"CM per TEU -  Actual"
    type: number
    sql:  ${total_actual_cm} / NULLIF(${total_actual_teu}, 0) ;;
    value_format_name: usd_0
  }

  measure: cm_per_teu_budget {
    label:"CM per TEU -  Budget"
    type: number
    sql:  ${total_budget_cm} / NULLIF(${total_budget_teu}, 0) ;;
    value_format_name: usd_0
  }
  measure: cm_per_teu_cgm_ctrt_off {
    label:"Total CM per TEU - CGM (by Contract Office)"
    type: number
    sql:  ${total_cgm_ctrt_off_cm} / NULLIF(${total_cgm_ctrt_off_teu}, 0) ;;
    value_format_name: usd_0
  }
  measure: cm_per_teu_cgm_por_ctry {
    label:"Total CM per TEU - CGM (by POR Country)"
    type: number
    sql:  ${total_cgm_por_ctry_cm} / NULLIF(${total_cgm_por_ctry_teu}, 0) ;;
    value_format_name: usd_0
  }

  measure: total_actual_teu {
    label:"Total TEU -  Actual" #by Jack, Jun 4
    type: sum
    sql: ${teu} ;;
    filters: [record_type: "Actuals"] #by Helen, Jun 7
    ##value_format_name: decimal_0
    value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
    drill_fields: [week, total_actual_teu, count]
  }

  measure: total_budget_teu {
    label:"Total TEU - Sales Budget" #by Jack, Jun 4
    type: sum
    sql: ${teu} ;;
    filters: [record_type: "Sales Budget"] #by Jack, Jun 4, changed from CGM to Sales Buedge
    value_format_name: decimal_0
    drill_fields: [week, total_budget_teu, count]
  }

  measure: total_cgm_ctrt_off_teu {
    label:"Total TEU - CGM (by Contract Office)"
    type: sum
    sql: ${teu} ;;
    filters: [record_type: "CGM", sub_record_type: "CGM_CTRT_OFF"]
    ##value_format_name: decimal_0
    value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
    drill_fields: [week, total_cgm_ctrt_off_teu, count]
  }
  measure: total_cgm_por_ctry_teu {
    label:"Total TEU - CGM (by POR Country)"
    type: sum
    sql: ${teu} ;;
    filters: [record_type: "CGM", sub_record_type: "CGM_POR_CTRY"]
    ##value_format_name: decimal_0
    value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
    drill_fields: [week, total_cgm_por_ctry_teu, count]
  }

  measure: total_actual_cm {
    label:"Total CM -  Actual"
    type: sum
    sql: ${cm_amt} ;;
    filters: [record_type: "Actuals"]
    #value_format_name: decimal_0
    ##value_format_name: usd_0 #Sharon 7Jun21
    value_format: "[>=1000000000]$0.0,,,\"B\";[>=1000000]$0.0,,\"M\";[>=1000]$0.0,\"K\";$0.0"
    drill_fields: [week, total_actual_cm, count]
  }

  measure: total_budget_cm {
    label:"Total CM - Sales Budget" #by Jack, Jun 4
    type: sum
    sql: ${cm_amt} ;;
    filters: [record_type: "Sales Budget"] #by Jack, Jun 4, changed from CGM to Sales Buedge
    #value_format_name: decimal_0
    value_format_name: usd_0 #Sharon 7Jun21
    drill_fields: [week, total_budget_cm, count]
  }

  measure: total_cgm_ctrt_off_cm {
    label:"Total CM - CGM (by Contract Office)"
    type: sum
    sql: ${cm_amt} ;;
    filters: [record_type: "CGM", sub_record_type: "CGM_CTRT_OFF"]
    #value_format_name: decimal_0
    ##value_format_name: usd_0 #Sharon 7Jun21
    value_format: "[>=1000000000]$0.0,,,\"B\";[>=1000000]$0.0,,\"M\";[>=1000]$0.0,\"K\";$0.0"
    drill_fields: [week, total_cgm_ctrt_off_cm, count]
  }

  measure: total_cgm_por_ctry_cm {
    label:"Total CM - CGM (by POR Country)"
    type: sum
    sql: ${cm_amt} ;;
    filters: [record_type: "CGM", sub_record_type: "CGM_POR_CTRY"]
    #value_format_name: decimal_0
    ##value_format_name: usd_0 #Sharon 7Jun21
    value_format: "[>=1000000000]$0.0,,,\"B\";[>=1000000]$0.0,,\"M\";[>=1000]$0.0,\"K\";$0.0"
    drill_fields: [week, total_cgm_por_ctry_cm, count]
  }

  measure: total_cm_amt {
    type: sum
    sql: ${cm_amt} ;;
    #value_format_name: decimal_0
    ##value_format_name: usd_0 #Sharon 7Jun21
    value_format: "[>=1000000000]$0.0,,,\"B\";[>=1000000]$0.0,,\"M\";[>=1000]$0.0,\"K\";$0.0"
  }

  measure: total_teu {
    type: sum
    sql: ${teu} ;;
    ##value_format_name: decimal_0
    value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
    drill_fields: [week, consolidated_cnt_cust_cd, count]
  }

######## Dynamic related >>  ###########################

## 30 Aug 2021 - added by Zoe Cheung ##

  parameter: CGM_by_Contract_Country_or_CGM_by_POR_Country {
    label: "CGM Country Picker"
    type: string
    allowed_value: {
      label: "Contract Country"
      value: "CGM_CTRT_OFF"
    }
    allowed_value: {
      label: "POR Country"
      value: "CGM_POR_CTRY"
    }
    default_value: "CGM_POR_CTRY"
  }

  measure: CGM_TEU_Dynamic {
    type: number
    ## value_format_name: decimal_0
    value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
    sql:
      CASE
        WHEN {% parameter CGM_by_Contract_Country_or_CGM_by_POR_Country %} = 'CGM_POR_CTRY'        THEN ${total_cgm_por_ctry_teu}
                ELSE ${total_cgm_ctrt_off_teu}
      END ;;
  }

  measure: CGM_CM_PER_TEU_Dynamic {
    type: number
    value_format_name: usd_0
    sql:
      CASE
        WHEN {% parameter CGM_by_Contract_Country_or_CGM_by_POR_Country %} = 'CGM_POR_CTRY'        THEN ${cm_per_teu_cgm_por_ctry}
                ELSE ${cm_per_teu_cgm_ctrt_off}
      END ;;
  }

  measure: CGM_CM_Dynamic {
    type: number
    ## value_format_name: usd_0
    value_format: "[>=1000000000]$0.0,,,\"B\";[>=1000000]$0.0,,\"M\";[>=1000]$0.0,\"K\";$0.0"
    sql:
      CASE
        WHEN {% parameter CGM_by_Contract_Country_or_CGM_by_POR_Country %} = 'CGM_POR_CTRY'        THEN ${total_cgm_por_ctry_cm}
                ELSE ${total_cgm_ctrt_off_cm}
      END ;;
  }

  dimension: CGM_Country_Dynamic {
    label: "Country"
    view_label: "CGM Country Dynamic"
    type: string
    sql:
      CASE
        WHEN {% parameter CGM_by_Contract_Country_or_CGM_by_POR_Country %} = 'CGM_POR_CTRY'        THEN ${por_cnt_cd}
                ELSE ${ctrt_cnt_cd}
      END ;;
  }

  dimension: CGM_Country_Title_Dynamic {
    label: "CGM_Country_Title_Dynamic"
    view_label: "CGM Country Title Dynamic"
    type: string
    sql:
      CASE
        WHEN {% parameter CGM_by_Contract_Country_or_CGM_by_POR_Country %} = 'CGM_POR_CTRY'        THEN "POR Country Performance"
                ELSE "Contract Country Performance"
      END ;;
  }


  dimension: CGM_Country_RHQ_Dynamic {
    label: "CGM_Country_RHQ_Dynamic"
    view_label: "CGM Country RHQ Dynamic"
    type: string
    sql:
      CASE
        WHEN {% parameter CGM_by_Contract_Country_or_CGM_by_POR_Country %} = 'CGM_POR_CTRY'        THEN right(${CGM_POR_country_region.reg_rhq_name},5)
                ELSE right(${contract_office_region2.reg_rhq_name},5)
      END ;;
  }


  dimension: CGM_CtrtOffice_Dynamic {
    label: "CGM_Contract_Office_Dynamic1"
    view_label: "CGM Contract Office Dynamic"
    type: string
    sql:
     CASE
       WHEN {% parameter CGM_by_Contract_Country_or_CGM_by_POR_Country %} = 'CGM_POR_CTRY'        THEN "Not Applicable"
               ELSE ${ctrt_prop_ofc_cd}
     END ;;
  }

  #WH 202309 (Add TPA logic)
  dimension: is_TPA_user {
    label: "Is TPA user"
    type: string
    sql: case when (select count(*) FROM ONEFORCE.OF_USER WHERE
          REPLACE(Email, '.invalid', '') = REPLACE('{{ _user_attributes["email"] }}', '.invalid', '') AND
          IsActive = 'true' and
          (profile_name = 'TPA (Service Cloud) CCA' or profile_name = 'TPA (Service Cloud) CCS' or profile_name = 'Third Party Agent' )) > 0
          then "Yes"
          else "No"
          end;;
  }

  ##Added by Zoe Cheung on 28Feb 2022##
  measure: TEU_Full_Perc{
    type: number
    sql: ${of_consolidated_actuals_cgm_target.total_actual_teu}/nullif(${of_consolidated_actuals_cgm_target.CGM_TEU_Dynamic},0) ;;
    value_format: "0%"
  }

  measure: CMperTEU_Full_Perc{
    type: number
    sql: ${of_consolidated_actuals_cgm_target.cm_per_teu_actual}/nullif(${of_consolidated_actuals_cgm_target.CGM_CM_PER_TEU_Dynamic},0) ;;
    value_format: "0%"
  }

  measure: CM_Full_Perc{
    type: number
    sql: ${of_consolidated_actuals_cgm_target.total_actual_cm}/nullif(${of_consolidated_actuals_cgm_target.CGM_CM_Dynamic},0) ;;
    value_format: "0%"
  }

  measure: total_actual_teu2 {
    label:"Total TEU -  Actual2"
    type: sum
    sql: ${teu} ;;
    filters: [record_type: "Actuals"]
    value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
    drill_fields: [week, total_actual_teu, count]
    html: {{ rendered_value }} || TEU Fulfill% {{ TEU_Full_Perc._rendered_value }}  || TEU Variance
          {% if Teu_Variance2._value >= 1000000 and value < 1000000000 %}
            {{Teu_Variance2._value | divided_by: 1000000 | round:1 }}M
          {% elsif Teu_Variance2._value >= 1000 and value < 1000000 %}
            {{Teu_Variance2._value | divided_by: 1000 | round:1 }}K
          {% elsif Teu_Variance2._value >= 0 and value < 1000 %}
            {{Teu_Variance2._value | round:1 }}
          {% elsif Teu_Variance2._value > -1000 and value < 0 %}
              {{Teu_Variance2._value | round:1 }}
          {% elsif Teu_Variance2._value > -1000000 and value <= -1000 %}
              {{Teu_Variance2._value | divided_by: 1000 | round:1 }}K
          {% elsif Teu_Variance2._value > -1000000000 and value <= -1000000 %}
              {{Teu_Variance2._value | divided_by: 1000000 | round:1 }}M
          {% endif %}  ;;
  }



  measure: total_actual_cm2 {
    label:"Total CM -  Actual2"
    type: sum
    sql: ${cm_amt} ;;
    filters: [record_type: "Actuals"]
    value_format: "[>=1000000000]$0.0,,,\"B\";[>=1000000]$0.0,,\"M\";[>=1000]$0.0,\"K\";$0.0"
    drill_fields: [week, total_actual_cm, count]
    html: {{ rendered_value }}  || CM Fulfill% {{ CM_Full_Perc._rendered_value }} || CM Variance
          {% if CM_Variance2._value >= 1000000000 %}
            {{CM_Variance2._value | divided_by: 1000000000 | round:1 }}B
          {% elsif CM_Variance2._value >= 1000000 and value < 1000000000 %}
            {{CM_Variance2._value | divided_by: 1000000 | round:1 }}M
          {% elsif Teu_Variance2._value >= 1000 and value < 1000000 %}
            {{CM_Variance2._value | divided_by: 1000 | round:1 }}K
          {% elsif Teu_Variance2._value >= 0 and value < 1000 %}
            {{CM_Variance2._value | round:1 }}
          {% elsif Teu_Variance2._value > -1000 and value < 0 %}
              {{CM_Variance2._value | round:1 }}
          {% elsif Teu_Variance2._value > -1000000 and value <= -1000 %}
              {{CM_Variance2._value | divided_by: 1000 | round:1 }}K
          {% elsif Teu_Variance2._value > -1000000000 and value <= -1000000 %}
              {{CM_Variance2._value | divided_by: 1000000 | round:1 }}M
          {% elsif Teu_Variance2._value <= -1000000000 %}
              {{CM_Variance2._value | divided_by: 1000000000 | round:1 }}B
          {% endif %}  ;;
  }

  measure: cm_per_teu_actual2 {
    label:"CM per TEU -  Actual2"
    type: number
    sql:  ${total_actual_cm} / NULLIF(${total_actual_teu}, 0) ;;
    value_format_name: usd_0
    html: {{ rendered_value }} || CM/TEU Variance {{ CMperTeu_Variance2._rendered_value }} || CM/TEU Fulfill% {{ CMperTEU_Full_Perc._rendered_value }}  ;;
  }

  measure: Teu_Variance2 {
    label: "TEU Variance"
    type: number
    sql: ${of_consolidated_actuals_cgm_target.total_actual_teu} - ${of_consolidated_actuals_cgm_target.CGM_TEU_Dynamic}  ;;
    value_format: "[>=1000000]0.0,,\"M\";[>=1000]0.0,\"K\";0.0"
  }

  measure:  CM_Variance2 {
    label : "CM Variance"
    type: number
    sql:  ${of_consolidated_actuals_cgm_target.total_actual_cm} - ${of_consolidated_actuals_cgm_target.CGM_CM_Dynamic} ;;
    value_format: "[>=1000000000]$0.0,,,\"B\";[>=1000000]$0.0,,\"M\";[>=1000]$0.0,\"K\";$0.0"
  }

  measure:  CMperTeu_Variance2 {
    label : "CM Per Teu Variance"
    type: number
    sql: ${of_consolidated_actuals_cgm_target.cm_per_teu_actual} - ${of_consolidated_actuals_cgm_target.CGM_CM_PER_TEU_Dynamic} ;;
    value_format_name: usd_0
  }


}

view: of_contact {
  # change for DCN-526 to include cust_cd from
  #sql_table_name: `ONEFORCE.OF_CONTACT`

  derived_table: {
    #sql: select b.cust_cd, a.*
    #     from `ONEFORCE.OF_CONTACT` as a
    #     left join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as b on a.AccountId = b.ONEForce_Id
    #     ;;


    sql: select a.oneforce_id,  a.createdbyid, a.createddate, a.lastmodifiedbyid, a.lastmodifieddate, a.accountid,
              a.title, a.email, a.is_primary_contact, a.ownerid, a.name, a.preferred_name, a.role, a.one_non_crm_user, a.is_group_id, a.decision_maker,
              a.department, a.contact_method, a.do_not_call, a.hasoptedoutofemail, a.hasoptedoutoffax, a.mailingcity, a.mailingcountrycode, a.mailingstatecode,
              a.mailingpostalcode, a.business_phone_country_code, a.business_phone_extension, a.phone, a.mobile_phone_country_code, a.mobilephone,
              a.fax_country_code, a.fax, a.inactive, a.group_handled_by, a.preferred_language
       from `ONEFORCE.OF_CONTACT` as a
       union distinct
       select aa.oneforce_id,  aa.createdbyid, aa.createddate, aa.lastmodifiedbyid, aa.lastmodifieddate, vv.oneforce_id as accountid,
              aa.title, aa.email, 'true' as is_primary_contact, aa.ownerid, aa.name, aa.preferred_name, aa.role, aa.one_non_crm_user, aa.is_group_id, 'false' as decision_maker,
              aa.department, aa.contact_method, aa.do_not_call, aa.hasoptedoutofemail, aa.hasoptedoutoffax, aa.mailingcity, aa.mailingcountrycode, aa.mailingstatecode,
              aa.mailingpostalcode, aa.business_phone_country_code, aa.business_phone_extension, aa.phone, aa.mobile_phone_country_code, aa.mobilephone,
              aa.fax_country_code, aa.fax, aa.inactive, aa.group_handled_by, aa.preferred_language
       from `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` vv
       inner join `ONEFORCE.OF_CONTACT` aa on vv.primary_contact = aa.oneforce_id
       where vv.cust_cd is not null
    ;;

    persist_for: "4 hours"

  }

  ##################################
  ### Parameters
  ##################################

  parameter: pc_or_dm { ## PC = Primary Contact / DM = Decision Maker
    label: "W/o Primary Contact or Decision Maker"
    description: "Use this parameter to choose with information you want to count"
    type: unquoted
    allowed_value: {
      label: "Primary Contact"
      value: "PC"
    }
    allowed_value: {
      label: "Decision Maker"
      value: "DM"
    }
    allowed_value: {
      label: "Complete Information"
      value: "OK"
    }
    default_value: "PC"
  }

  ##################################
  ### END Parameters
  ##################################



  ##################################
  ### Derived Parameter Fields
  ##################################

  dimension: MissInfo_Track { #set a value to check after if the customer has both information, just one, or even any information
    type: string
    hidden: yes
    # sql: case when (select distinct oc.AccountId from `ONEFORCE.OF_CONTACT` as oc where oc.is_primary_contact = "true" and oc.accountId = ${account_id}) is null and "{% parameter pc_or_dm %}" = "PC"  THEN "PC"
    #           when (select distinct oc.AccountId from `ONEFORCE.OF_CONTACT` as oc where oc.decision_Maker = "true" and oc.accountId = ${account_id}) is null and "{% parameter pc_or_dm %}" = "DM" THEN "DM"
    #           else "OK" end ;;
    sql: case when (select distinct oc.customer_oneforce_id from ${of_primary_contact.SQL_TABLE_NAME} as oc where oc.customer_oneforce_id = ${account_id} ) is null and "{% parameter pc_or_dm %}" = "PC"  THEN "PC"
              when (select distinct oc.AccountId from `ONEFORCE.OF_CONTACT` as oc where oc.decision_Maker = "true" and oc.accountId = ${account_id}) is null and "{% parameter pc_or_dm %}" = "DM" THEN "DM"
              else "OK" end ;;
  }

  dimension: Info_Track { #set a value to check after if the customer has both information, just one, or even any information
    type: string
    # hidden: yes
    # sql: case when (select distinct oc.AccountId from `ONEFORCE.OF_CONTACT` as oc where oc.is_primary_contact = "true" and oc.accountId = ${account_id}) is not null and "{% parameter pc_or_dm %}" = "PC"  THEN "PC"
    #           when (select distinct oc.AccountId from `ONEFORCE.OF_CONTACT` as oc where oc.decision_Maker = "true" and oc.accountId = ${account_id}) is not null   and "{% parameter pc_or_dm %}" = "DM"   THEN "DM"
    #           else null end ;;
    sql: case when (select distinct oc.customer_oneforce_id from ${of_primary_contact.SQL_TABLE_NAME}  as oc where oc.customer_oneforce_id = ${account_id} ) is not null and "{% parameter pc_or_dm %}" = "PC"  THEN "PC"
             when (select distinct oc.AccountId from `ONEFORCE.OF_CONTACT` as oc where oc.decision_Maker = "true" and oc.accountId = ${account_id}) is not null   and "{% parameter pc_or_dm %}" = "DM"   THEN "DM"
             else null end ;;

  }

  dimension: Role_Tile {
    type:  string
    view_label: "Role-based"
    sql: case when "{% parameter pc_or_dm %}" = "PC"  then "Primary Contact"
              when "{% parameter pc_or_dm %}" = "DM"  then "Decision Maker"
              else "Complete Information" end;;
    html: <h2> {{rendered_value}} </h2> ;;
  }

  dimension: status_satisfies_filter {
    type: yesno
    #hidden: yes
    sql: "{% parameter pc_or_dm %}" = ${Info_Track} ;;
  }

  measure: Total_MissInformation {
    view_label: "Role-based"
    description: "Count customers without decision maker or Primary Contact, Based on the Parameter W/O PRIMARY CONTACT OR DECISION MAKER (pc_or_dm parameter field)"
    type: count_distinct
    label: "{% if pc_or_dm._parameter_value == 'PC' %} Without Primary Contact
    {% elsif pc_or_dm._parameter_value == 'DM' %} Without Decision Maker
    {% else %} With Complete Information
    {% endif %}"
    #sql: case when "{% parameter pc_or_dm %}" = ${MissInfo_Track} then ${cust_cd} end;;
    sql: ${account_id} ;;
    drill_fields: [cust_cd]
    filters: [status_satisfies_filter: "no"]

  }

  measure: Total_PCorDMInformation {
    view_label: "Role-based"
    description: "Count customers having decision maker or Primary Contact, Based on the Parameter W/O PRIMARY CONTACT OR DECISION MAKER (pc_or_dm parameter field)"
    type: count_distinct
    label: "{% if pc_or_dm._parameter_value == 'PC' %} With Primary Contact
    {% elsif pc_or_dm._parameter_value == 'DM' %} With Decision Maker
    {% else %} With Complete Information
    {% endif %}"
    #sql: case when "{% parameter pc_or_dm %}" = ${Info_Track} then ${account_id} end;;
    sql: ${account_id} ;;
    drill_fields: [cust_cd]
    filters: [status_satisfies_filter: "yes"]
  }


  ##################################
  ### END Derived Parameter Fields
  ##################################

  dimension: cust_cd {
    type: string
    sql: ${TABLE}.cust_cd ;;
  }

  dimension: account_id {
    type: string
    sql: ${TABLE}.AccountId ;;
  }

  dimension: business_phone_country_code {
    type: string
    sql: ${TABLE}.Business_Phone_Country_Code ;;
  }

  dimension: business_phone_extension {
    type: string
    sql: ${TABLE}.Business_Phone_Extension ;;
  }

  dimension: contact_method {
    type: string
    sql: ${TABLE}.Contact_Method ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: decision_maker {
    type: string
    sql: ${TABLE}.Decision_Maker ;;
  }

  dimension: department {
    type: string
    sql: ${TABLE}.Department ;;
  }

  dimension: do_not_call {
    type: string
    sql: ${TABLE}.Do_Not_Call ;;
  }

  dimension: email {
    type: string
    sql: ${TABLE}.Email ;;
  }

  dimension: fax {
    type: string
    sql: ${TABLE}.Fax ;;
  }

  dimension: fax_country_code {
    type: string
    sql: ${TABLE}.Fax_Country_Code ;;
  }

  dimension: has_opted_out_of_email {
    type: string
    sql: ${TABLE}.HasOptedOutOfEmail ;;
  }

  dimension: has_opted_out_of_fax {
    type: string
    sql: ${TABLE}.HasOptedOutOfFax ;;
  }

  dimension: is_group_id {
    type: string
    sql: ${TABLE}.Is_Group_Id ;;
  }

  dimension: is_primary_contact {
    type: string
    sql: ${TABLE}.Is_Primary_Contact ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: mailing_city {
    type: string
    sql: ${TABLE}.MailingCity ;;
  }

  dimension: mailing_country_code {
    type: string
    sql: ${TABLE}.MailingCountryCode ;;
  }

  dimension: mailing_postal_code {
    type: string
    sql: ${TABLE}.MailingPostalCode ;;
  }

  dimension: mailing_state_code {
    type: string
    sql: ${TABLE}.MailingStateCode ;;
  }

  dimension: mobile_phone {
    type: string
    sql: ${TABLE}.MobilePhone ;;
  }

  dimension: mobile_phone_country_code {
    type: string
    sql: ${TABLE}.Mobile_Phone_Country_Code ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
    label: "Contact Name"
  }

  dimension: one_non_crm_user {
    type: string
    sql: ${TABLE}.ONE_Non_CRM_User ;;
  }

  dimension: oneforce_id {
    type: string
    primary_key: yes
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension: phone {
    type: string
    sql: ${TABLE}.Phone ;;
  }

  dimension: preferred_name {
    type: string
    sql: ${TABLE}.Preferred_Name ;;
  }

  dimension: role {
    type: string
    sql: ${TABLE}.Role ;;
  }

  dimension: title {
    type: string
    sql: ${TABLE}.Title ;;
  }

  dimension: PrimaryContact_DecisionMaker_Flag {
    hidden: yes
    type: string
    sql:
    CASE WHEN (${is_primary_contact} = "true" and ${decision_maker} = "true" then "True"
        else "False" end    ;;
  }

  dimension: Is_PrimaryContact_DecisionMaker {
    hidden: no
    view_label: "V Customer Opus N Prospect"
    label: "{{ _view._name }}: Is PrimaryContact / DecisionMaker"  # programmatically added by LookML modifier
    type: string
    sql: case when AccountId in (select distinct AccountId from `ONEFORCE.OF_CONTACT` where is_primary_contact = "true" and decision_maker = "true")
      then "True" else "False" end;;
  }

  ## ADDITIONAL FIELDS FOR OF 2.0
# dimension: inactive {
#   type: string
#   sql: ${TABLE}.Inactive ;;
# }

# dimension: group_handled_by {
#   type: string
#   sql: ${TABLE}.Group_Handled_By ;;
# }

# dimension: preferred_language {
#   type: string
#   sql: ${TABLE}.Preferred_Language ;;
# }

# dimension: is_dummy {
#   type: string
#   sql: ${TABLE}.IsDummy ;;
# }
  ## END FIELDS FOR OF 2.0

  measure: count {
    type: count
    drill_fields: [
      name, preferred_name, email, is_primary_contact,
      decision_maker, mobile_phone_country_code,
      business_phone_country_code, phone, mobile_phone, fax
    ]
  }
}

#view: of_contact_2 {
#  sql_table_name: `one-global-dde-insights-uat.ONEFORCE.OF_CONTACT_2`
#    ;;
#
#  dimension: group_handled_by {
#    type: string
#    sql: ${TABLE}.Group_Handled_By ;;
#  }
#
#  dimension: is_dummy {
#    type: string
#    sql: ${TABLE}.IsDummy ;;
#  }
#
#  dimension: preferred_language {
#    type: string
#    sql: ${TABLE}.Preferred_Language ;;
#  }
#
#  measure: count {
#    type: count
#    drill_fields: []
#  }
#}

view: of_contract_customer_contact {
  derived_table: {
    sql: with cc as ( select a.oneforce_id,  a.createdbyid, a.createddate, a.lastmodifiedbyid, a.lastmodifieddate, a.accountid,
              a.title, a.email, a.is_primary_contact, a.ownerid, a.name, a.preferred_name, a.role, a.one_non_crm_user, a.is_group_id
              ,
              --DCN-1035, July 12nd 2023----
              CASE WHEN a.role = 'D' or a.role like ';D' or a.role like 'D;' THEN 'true' ELSE 'false' END as decision_maker
              ----------------------------------
              ,
              a.department, a.contact_method, a.do_not_call, a.hasoptedoutofemail, a.hasoptedoutoffax, a.mailingcity, a.mailingcountrycode, a.mailingstatecode,
              a.mailingpostalcode, a.business_phone_country_code, a.business_phone_extension, a.phone, a.mobile_phone_country_code, a.mobilephone,
              a.fax_country_code, a.fax, a.inactive, a.group_handled_by, a.preferred_language
       from `ONEFORCE.OF_CONTACT` as a
       where inactive = false
       union distinct
       select aa.oneforce_id,  aa.createdbyid, aa.createddate, aa.lastmodifiedbyid, aa.lastmodifieddate, vv.oneforce_id as accountid,
              aa.title, aa.email, 'true' as is_primary_contact, aa.ownerid, aa.name, aa.preferred_name, aa.role, aa.one_non_crm_user, aa.is_group_id,'false' decision_maker,
              aa.department, aa.contact_method, aa.do_not_call, aa.hasoptedoutofemail, aa.hasoptedoutoffax, aa.mailingcity, aa.mailingcountrycode, aa.mailingstatecode,
              aa.mailingpostalcode, aa.business_phone_country_code, aa.business_phone_extension, aa.phone, aa.mobile_phone_country_code, aa.mobilephone,
              aa.fax_country_code, aa.fax, aa.inactive, aa.group_handled_by, aa.preferred_language
       from `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` vv
       inner join `ONEFORCE.OF_CONTACT` aa on vv.primary_contact = aa.oneforce_id-- and vv.primary_contact = '0032w00000bdQjTAAU'
       where vv.cust_cd is not null
       and not exists (Select 1 from `ONEFORCE.OF_CONTACT` oc where oc.accountid = vv.oneforce_id and oc.oneforce_id = vv.primary_contact and oc.is_primary_contact = 'true'))
select
        cus.cust_cd, cus.name as cust_name, cc.* , max(case when cc.is_primary_contact = 'true' then cc.oneforce_id else null end) OVER (PARTITION BY cc.accountid) max_pc , max(case when cc.decision_maker = 'true' then cc.oneforce_id else null end) OVER (PARTITION BY cc.accountid) max_dm
from `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` cus
left join cc  on cc.accountid = cus.oneforce_id
where cus.cust_cd is not null and cus.delt_flg = 'N'
 ;;

    persist_for: "4 hours"

  }
  ##################################
  ### Parameters
  ##################################

  parameter: pc_or_dm { ## PC = Primary Contact / DM = Decision Maker
    label: "W/o Primary Contact or Decision Maker"
    description: "Use this parameter to choose with information you want to count"
    type: unquoted
    allowed_value: {
      label: "Primary Contact"
      value: "PC"
    }
    allowed_value: {
      label: "Decision Maker"
      value: "DM"
    }
    allowed_value: {
      label: "Complete Information"
      value: "OK"
    }
    default_value: "PC"
  }

  parameter: show_detail_tooltip {
    label: "Toggle detailed tooltip"
    type: unquoted
    allowed_value: {
      label: "Yes"
      value: "Yes"
    }
    allowed_value: {
      label: "No"
      value: "No"
    }
    default_value: "No"
  }

  ##################################
  ### END Parameters
  ##################################



  ##################################
  ### Derived Parameter Fields
  ##################################


  dimension: Info_Track { #set a value to check after if the customer has both information, just one, or even any information
    type: string
    sql: case when ${max_pc} is not null and "{% parameter pc_or_dm %}" = "PC"  THEN "PC"
              when ${max_dm} is not null and "{% parameter pc_or_dm %}" = "DM"  THEN "DM"
              else null end ;;
  }

  dimension: Role_Tile {
    type:  string
    view_label: "Contact: Role-based"
    sql: case when "{% parameter pc_or_dm %}" = "PC"  then "Primary Contact"
              when "{% parameter pc_or_dm %}" = "DM"  then "Decision Maker"
              else "Complete Information" end;;
    html: <h2> {{rendered_value}} </h2> ;;
  }

  dimension: status_satisfies_filter {
    type: yesno
    sql: "{% parameter pc_or_dm %}" = ${Info_Track} ;;
  }

  measure: MissAndPCorDM {
    view_label: "Contact: Role-based"
    type: count_distinct
    label: "Miss And Completed"
    sql: ${cust_cd} ;;
    drill_fields: [cust_cd, cust_name]
    filters: [status_satisfies_filter: "yes, no"]
  }

  measure: Total_MissInformation {
    view_label: "Contact: Role-based"
    description: "Count customers without decision maker or Primary Contact, Based on the Parameter W/O PRIMARY CONTACT OR DECISION MAKER (pc_or_dm parameter field)"
    type: count_distinct
    label: "{% if pc_or_dm._parameter_value == 'PC' %} Without Primary Contact
    {% elsif pc_or_dm._parameter_value == 'DM' %} Without Decision Maker
    {% else %} With Complete Information
    {% endif %}"
    sql: ${cust_cd} ;;
    html: {% if show_detail_tooltip._parameter_value == 'Yes' %}
                {{rendered_value}} out of {{MissAndPCorDM._rendered_value}} ({{Percent_of_MissInformation._rendered_value}})
            {% else %} {{rendered_value}}
            {% endif %} ;;
    drill_fields: [cust_cd, cust_name]
    filters: [status_satisfies_filter: "no"]
  }


  measure: Total_MissInformation_Count {
    view_label: "Contact: Role-based"
    description: "Count customers without decision maker or Primary Contact, Based on the Parameter W/O PRIMARY CONTACT OR DECISION MAKER (pc_or_dm parameter field)"
    type: count_distinct
    label: "{% if pc_or_dm._parameter_value == 'PC' %} Without Primary Contact Count
    {% elsif pc_or_dm._parameter_value == 'DM' %} Without Decision Maker Count
    {% else %} With Complete Information
    {% endif %}"
    sql: ${cust_cd} ;;
    drill_fields: [cust_cd, cust_name]
    filters: [status_satisfies_filter: "no"]

  }


  measure: Total_PCorDMInformation {
    view_label: "Contact: Role-based"
    description: "Count customers having decision maker or Primary Contact, Based on the Parameter W/O PRIMARY CONTACT OR DECISION MAKER (pc_or_dm parameter field)"
    type: count_distinct
    label: "{% if pc_or_dm._parameter_value == 'PC' %} With Primary Contact
    {% elsif pc_or_dm._parameter_value == 'DM' %} With Decision Maker
    {% else %} With Complete Information
    {% endif %}"
    #value_format: "0.0,\" K\""
    value_format: "[<1000]0;[>=1000]0.0,\"K\""
    sql: ${cust_cd} ;;
    drill_fields: [cust_cd, cust_name]
    filters: [status_satisfies_filter: "yes"]
  }


  measure: Percent_of_Total_PCorDM {
    view_label: "Contact: Role-based"
    description: "Percentage of customers having decision maker or Primary Contact, Based on the Parameter W/O PRIMARY CONTACT OR DECISION MAKER (pc_or_dm parameter field)"
    type: number
    sql: ${Total_PCorDMInformation} / (${Total_PCorDMInformation} + ${Total_MissInformation}) ;;
    value_format_name: percent_0
  }

  measure: Percent_of_MissInformation {
    view_label: "Contact: Role-based"
    description: "Percentage of customers without decision maker or Primary Contact, Based on the Parameter W/O PRIMARY CONTACT OR DECISION MAKER (pc_or_dm parameter field)"
    type: number
    sql: ${Total_MissInformation} / (${Total_PCorDMInformation} + ${Total_MissInformation}) ;;
    value_format_name: percent_0
  }

  # Sales Process Landing Page ----- Start -------
  measure: Total_PCorDMInformation1 {
    view_label: "Contact: Role-based"
    description: "Count customers having decision maker or Primary Contact, Based on the Parameter W/O PRIMARY CONTACT OR DECISION MAKER (pc_or_dm parameter field)"
    type: count_distinct
    label: "{% if pc_or_dm._parameter_value == 'PC' %} With Primary Contact
    {% elsif pc_or_dm._parameter_value == 'DM' %} With Decision Maker
    {% else %} With Complete Information
    {% endif %}"
    sql: ${cust_cd} ;;
    drill_fields: [cust_cd, cust_name,createddate_time,  lastmodifiedbyid, lastmodifieddate_time,  accountid, title, email,ownerid, one_non_crm_user, is_group_id,department,of_customer_fy_teu.total_teu]
    filters: [status_satisfies_filter: "yes"]
  }

  measure: Total_MissInformation1 {
    view_label: "Contact: Role-based"
    description: "Count customers without decision maker or Primary Contact, Based on the Parameter W/O PRIMARY CONTACT OR DECISION MAKER (pc_or_dm parameter field)"
    type: count_distinct
    label: "{% if pc_or_dm._parameter_value == 'PC' %} Without Primary Contact
    {% elsif pc_or_dm._parameter_value == 'DM' %} Without Decision Maker
    {% else %} With Complete Information
    {% endif %}"
    sql: ${cust_cd} ;;
    value_format: "0.0,\" K\""
    html: {% if show_detail_tooltip._parameter_value == 'Yes' %}
                {{rendered_value}} out of {{MissAndPCorDM._rendered_value}} ({{Percent_of_MissInformation._rendered_value}})
            {% else %} {{rendered_value}}
            {% endif %} ;;
    drill_fields: [v_customer_opus_n_prospect.cust_cd,v_customer_opus_n_prospect.name,createddate_time,  lastmodifiedbyid, lastmodifieddate_time,  accountid, title, email,ownerid, one_non_crm_user, is_group_id,department, of_customer_fy_teu.total_teu]
    filters: [status_satisfies_filter: "no"]
  }
  # Sales Process Landing Page ----- End -------

  ##################################
  ### END Derived Parameter Fields
  ##################################

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: customer_contact {
    type: string
    sql: concat(${accountid},'-',${oneforce_id}) ;;
    primary_key: yes
  }
  dimension: cust_cd {
    type: string
    sql: ${TABLE}.cust_cd ;;
  }
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
  }

  dimension: createdbyid {
    type: string
    sql: ${TABLE}.createdbyid ;;
  }

  dimension_group: createddate {
    type: time
    datatype: datetime
    sql: ${TABLE}.createddate ;;
  }

  dimension: lastmodifiedbyid {
    type: string
    sql: ${TABLE}.lastmodifiedbyid ;;
  }

  dimension_group: lastmodifieddate {
    type: time
    datatype: datetime
    sql: ${TABLE}.lastmodifieddate ;;
  }

  dimension: accountid {
    type: string
    sql: ${TABLE}.accountid ;;
  }

  dimension: title {
    type: string
    sql: ${TABLE}.title ;;
  }

  dimension: email {
    type: string
    sql: ${TABLE}.email ;;
  }

  dimension: is_primary_contact {
    type: string
    sql: ${TABLE}.is_primary_contact ;;
  }

  dimension: ownerid {
    type: string
    sql: ${TABLE}.ownerid ;;
  }

  dimension: cust_name {
    type: string
    sql: ${TABLE}.cust_name ;;
  }

  dimension: preferred_name {
    type: string
    sql: ${TABLE}.preferred_name ;;
  }

  dimension: role {
    type: string
    sql: ${TABLE}.role ;;
  }

  dimension: one_non_crm_user {
    type: string
    sql: ${TABLE}.one_non_crm_user ;;
  }

  dimension: is_group_id {
    type: string
    sql: ${TABLE}.is_group_id ;;
  }

  dimension: decision_maker {
    type: string
    sql: ${TABLE}.decision_maker ;;
  }

  dimension: department {
    type: string
    sql: ${TABLE}.department ;;
  }

  dimension: contact_method {
    type: string
    sql: ${TABLE}.contact_method ;;
  }

  dimension: do_not_call {
    type: string
    sql: ${TABLE}.do_not_call ;;
  }

  dimension: hasoptedoutofemail {
    type: string
    sql: ${TABLE}.hasoptedoutofemail ;;
  }

  dimension: hasoptedoutoffax {
    type: string
    sql: ${TABLE}.hasoptedoutoffax ;;
  }

  dimension: mailingcity {
    type: string
    sql: ${TABLE}.mailingcity ;;
  }

  dimension: mailingcountrycode {
    type: string
    sql: ${TABLE}.mailingcountrycode ;;
  }

  dimension: mailingstatecode {
    type: string
    sql: ${TABLE}.mailingstatecode ;;
  }

  dimension: mailingpostalcode {
    type: string
    sql: ${TABLE}.mailingpostalcode ;;
  }

  dimension: business_phone_country_code {
    type: string
    sql: ${TABLE}.business_phone_country_code ;;
  }

  dimension: business_phone_extension {
    type: string
    sql: ${TABLE}.business_phone_extension ;;
  }

  dimension: phone {
    type: string
    sql: ${TABLE}.phone ;;
  }

  dimension: mobile_phone_country_code {
    type: string
    sql: ${TABLE}.mobile_phone_country_code ;;
  }

  dimension: mobilephone {
    type: string
    sql: ${TABLE}.mobilephone ;;
  }

  dimension: fax_country_code {
    type: string
    sql: ${TABLE}.fax_country_code ;;
  }

  dimension: fax {
    type: string
    sql: ${TABLE}.fax ;;
  }

  dimension: inactive {
    type: yesno
    sql: ${TABLE}.inactive ;;
  }

  dimension: group_handled_by {
    type: string
    sql: ${TABLE}.group_handled_by ;;
  }

  dimension: preferred_language {
    type: string
    sql: ${TABLE}.preferred_language ;;
  }

  dimension: max_pc {
    hidden: yes
    type: string
    sql: ${TABLE}.max_pc ;;
  }

  dimension: max_dm {
    hidden: yes
    type: string
    sql: ${TABLE}.max_dm ;;
  }

  set: detail {
    fields: [
      oneforce_id,
      cust_cd,
      createdbyid,
      createddate_time,
      lastmodifiedbyid,
      lastmodifieddate_time,
      accountid,
      title,
      email,
      is_primary_contact,
      ownerid,
      name,
      preferred_name,
      role,
      one_non_crm_user,
      is_group_id,
      decision_maker,
      department,
      contact_method,
      do_not_call,
      business_phone_country_code,
      business_phone_extension,
      phone,
      mobile_phone_country_code,
      mobilephone,
      fax_country_code,
      fax,
      inactive,
      group_handled_by,
      preferred_language
    ]
  }
}

view: of_country {
  sql_table_name: @{table_country}
    ;;

  dimension: country_code {
    primary_key: yes
    type: string
    sql: ${TABLE}.Country_Code ;;
    #WH DCN-1110 (show country_Code: hidden: yes
  }

  dimension: country_name {
    type: string
    #WH DCN-997 (2023-07)
    label:  "{%if _view._name == \"contract_office_country\" %}Contract Country{%
    else %}Country Name
    {%endif %}"
    sql: ${TABLE}.Country_Name ;;
  }

  dimension: currency_code {
    type: string
    sql: ${TABLE}.Currency_Code ;;
  }

  dimension: eu_country_flag {
    type: string
    sql: ${TABLE}.EU_Country_Flag ;;
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
    hidden: yes
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
    hidden: yes
  }

  dimension: sub_continent_code {
    type: string
    sql: ${TABLE}.Sub_Continent_Code ;;
  }

  dimension: dummy {
    type: string
    sql: 'DUMMY' ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [country_name]
  }

  set: primary_key {
    fields: [country_code, count]
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: actual_empty_pick_up_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: actual_empty_return_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: estimated_empty_pick_up_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: estimated_empty_return_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: final_POL_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Count"
  }
}

# Added during dashboard mering exercise
view: final_POD_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Count"
  }
}


# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: first_POL_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: first_POD_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: trunk_POL_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: trunk_POD_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: POR_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "POR Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: DEL_country {
  extends: [of_country]

  dimension: country_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Country Code"
  }

  dimension: country_name {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Country Name"
  }

  dimension: currency_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Currency Code"
  }

  dimension: eu_country_flag {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL EU Coutnry Flag"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL ONEForce Id"
  }

  dimension: sub_continent_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Sub Continent Code"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Count"
  }

}

view: CGM_POR_country {
  derived_table: {
    sql: select  distinct
                  CASE WHEN ol.state_code IN ( '11', '12', '13', '14', '15', '21', '22', '23', '37', '41', '61', '62', '63', '64', '65') THEN 'CNN'
                       WHEN ol.state_code IN ( '31', '32', '33', '34', '36', '42', '43', '50', '51') THEN 'CNC'
                       WHEN ol.state_code IN ( '35', '44', '45', '46', '52', '53', '54') THEN 'HK & CNS'
                       WHEN ol.region_Code IN ('MAC', 'HKG','CNS') THEN 'HK & CNS'
                       ELSE ol.region_code
                  END as country_code,
                  CASE WHEN ol.state_code IN ( '11', '12', '13', '14', '15', '21', '22', '23', '37', '41', '61', '62', '63', '64', '65') THEN 'CHINA-NORTH'
                       WHEN ol.state_code IN ( '31', '32', '33', '34', '36', '42', '43', '50', '51') THEN 'CHINA-CENTRAL'
                       WHEN ol.state_code IN ( '35', '44', '45', '46', '52', '53', '54') THEN 'HK & CHINA-SOUTH'
                       WHEN ol.region_Code IN ('MAC', 'HKG' ,'CNS') THEN 'HK & CHINA-SOUTH'
                       WHEN ol.region_code = 'CNN' THEN  'CHINA-NORTH'
                       WHEN ol.region_code = 'CNC' THEN  'CHINA-CENTRAL'
                  END as country_name,
                  --oc.country_code as country_code_2,
                  --oc.country_name as country_name_2,
                  'CN' as country_code_2,
                  'CHINA' as country_name_2,
                  --oc.currency_code,
                  oc.EU_Country_Flag,
                  oc.Inactive
                  --oc.ONEForce_ID,
                  --oc.Sub_Continent_Code
             from  @{table_country} as oc, (select distinct region_code, country_code, state_code from  @{table_location} where country_code in ('HK','MO', 'CN')) as ol
             where oc.country_code = ol.country_code
             and oc.country_code IN ('HK','MO', 'CN')
             union all
             select country_code, country_name, country_code, country_name,
            --currency_code,
            EU_Country_Flag, Inactive
            --ONEForce_ID, Sub_Continent_Code, state_code
             from  @{table_country} where country_code not IN ('HK','CN','MO')
              ;;
  }


  dimension: country_code {
    type: string
    view_label: "CGM POR Country"
    group_label: "CGM POR"
    label: "CGM POR Country Code"
    sql: ${TABLE}.country_code ;;
  }

  dimension: country_code_2 {
    type: string
    view_label: "CGM POR Country"
    group_label: "CGM POR"
    label: "POR Country Code"
    sql: ${TABLE}.country_code_2 ;;
  }

  dimension: country_name {
    type: string
    view_label: "CGM POR Country"
    group_label: "CGM POR"
    label: "CGM POR Country Name"
    sql: ${TABLE}.country_name ;;
  }

  dimension: country_name_2 {
    type: string
    view_label: "CGM POR Country"
    group_label: "CGM POR"
    label: "POR Country Name"
    sql: ${TABLE}.country_nam_2 ;;
  }

  # dimension: currency_code {
  #   type: string
  #   view_label: "CGM POR Country"
  #   group_label: "CGM POR"
  #   label: "CGM POR Currency Code"
  #   sql: ${TABLE}.currency_code ;;
  # }

  dimension: eu_country_flag {
    type: string
    view_label: "CGM POR Country"
    group_label: "CGM POR"
    label: "CGM POR EU Country Flag"
    sql: ${TABLE}.EU_Country_Flag ;;
  }

  dimension: inactive {
    type: string
    view_label: "CGM POR Country"
    group_label: "CGM POR"
    label: "CGM POR Inactive"
    sql: ${TABLE}.Inactive ;;
  }

  # dimension: oneforce_id {
  #   type: string
  #   view_label: "CGM POR Country"
  #   group_label: "CGM POR"
  #   label: "CGM POR ONEForce_ID"
  #   sql: ${TABLE}.ONEForce_ID ;;
  # }
#
  # dimension: sub_continent_code {
  #   type: string
  #   view_label: "CGM POR Country"
  #   group_label: "CGM POR"
  #   label: "CGM POR Sub Continent Code"
  #   sql: ${TABLE}.Sub_Continent_Code ;;
  # }

}


view: CGM_Ctrt_country {
  derived_table: {
    sql: select  distinct
                  CASE WHEN ol.office_code IN ('TSNBB','SJWBB','DLCBB','LYGBB','TAOBB','CGOBB','SIABB') THEN 'CNN'
                       WHEN ol.office_code IN ('SHABB','NKGBB','SZHBB','HGHBB','JIXBB','NBOBB','HFEBB','WUHBB','CKGBB','CTUBB') THEN 'CNC'
                       WHEN ol.office_code IN ('FOCBB','XMNBB','CANBB','SWABA','SZPBB','ZHOBB','ZHUBB','HKGBB','HKGHQ','MACBA') THEN 'HK & CNS'
                       ELSE LEFT(ol.location_code,2)
                  END as country_code,
                  CASE WHEN ol.office_code IN ('TSNBB','SJWBB','DLCBB','LYGBB','TAOBB','CGOBB','SIABB') THEN 'CHINA-NORTH'
                       WHEN ol.office_code IN ('SHABB','NKGBB','SZHBB','HGHBB','JIXBB','NBOBB','HFEBB','WUHBB','CKGBB','CTUBB') THEN 'CHINA-CENTRAL'
                       WHEN ol.office_code IN ('FOCBB','XMNBB','CANBB','SWABA','SZPBB','ZHOBB','ZHUBB','HKGBB','HKGHQ','MACBA') THEN 'HK & CHINA-SOUTH'
                       ELSE oc.country_name
                  END as country_name,
                  --oc.country_code as country_code_2,
                  --oc.country_name as country_name_2,
                  'CN' as country_code_2,
                  'CHINA' as country_name_2,
                  --oc.currency_code,
                  oc.EU_Country_Flag,
                  oc.Inactive
                  --oc.ONEForce_ID,
                  --oc.Sub_Continent_Code
         from  @{table_country} as oc,
                  (select distinct region_code, country_code, office_code, l.location_code from  @{table_location} l, OF_OFFICE f where l.location_code = f.location_code and l.country_code in ('HK','MO', 'CN') and f.inactive = 'false' ) as ol
                   where oc.country_code = ol.country_code
                   and oc.country_code IN ('HK','MO', 'CN')
         union all
         select country_code, country_name, country_code, country_name,
         --   --currency_code,
                   EU_Country_Flag, Inactive
         --   --ONEForce_ID, Sub_Continent_Code, state_code
         from  @{table_country} where country_code not IN ('HK','CN','MO')
            ;;
  }

  dimension: country_code {
    type:  string
    view_label: "CGM Contract Country"
    group_label: "CGM Contract"
    label: "CGM Contract Country Code"
    sql: ${TABLE}.country_code ;;
  }

  dimension: country_code_2 {
    type: string
    view_label: "CGM Contract Country"
    group_label: "CGM Contract"
    label: "Contract Country Code"
    sql: ${TABLE}.country_code_2 ;;
  }

  dimension: country_name {
    type: string
    view_label: "CGM Contract Country"
    group_label: "CGM Contract"
    label: "CGM Contract Country Name"
    sql:  ${TABLE}.country_name ;;
  }

  dimension: country_name_2 {
    type: string
    view_label: "CGM Contract Country"
    group_label: "CGM Contract"
    label: "Contract Country Name"
    sql:  ${TABLE}.country_name_2 ;;
  }

  # dimension: currency_code {
  #   view_label: "CGM Contract Country"
  #   group_label: "CGM Contract"
  #   label: "CGM Contract Currency Code"
  # }

  dimension: eu_country_flag {
    type: string
    view_label: "CGM Contract Country"
    group_label: "CGM Contract"
    label: "CGM Contract EU Country Flag"
    sql:  ${TABLE}.eu_country_flag ;;
  }

  dimension: inactive {
    type: string
    view_label: "CGM Contract Country"
    group_label: "CGM Contract"
    label: "CGM Contract Inactive"
    sql:  ${TABLE}.inactive ;;
  }

  #dimension: oneforce_id {
  #  view_label: "CGM Contract Country"
  #  group_label: "CGM Contract"
  #  label: "CGM Contract ONEForce_ID"
  #}

  #dimension: sub_continent_code {
  #  view_label: "CGM Contract Country"
  #  group_label: "CGM Contract"
  #  label: "CGM Contract Sub Continent Code"
  #}

}
## ##Added by Zoe Cheung 29 Nov##
##
##   view: Key_Account_country_SYM {
##    derived_table: {
##      sql: select  distinct
##                  CASE WHEN oll.office_code IN ('TSNBB','SJWBB','DLCBB','LYGBB','TAOBB','CGOBB','SIABB') THEN 'CNN'
##                       WHEN oll.office_code IN ('SHABB','NKGBB','SZHBB','HGHBB','JIXBB','NBOBB','HFEBB','WUHBB','CKGBB','CTUBB') THEN 'CNC'
##                       WHEN oll.office_code IN ('FOCBB','XMNBB','CANBB','SWABA','SZPBB','ZHOBB','ZHUBB','HKGBB','HKGHQ','MACBA') THEN 'HK & CNS'
##                       ELSE left(oll.office_code,2)
##                       END as country_code,
##                  --oc.country_code as country_code_3,
##                  --oc.country_name as country_name_3,
##                  'CN' as country_code_3,
##                  'CHINA' as country_name_3,
##                  --oc.currency_code,
##                  oc.EU_Country_Flag,
##                  oc.Inactive
##                  --oc.ONEForce_ID,
##                  --oc.Sub_Continent_Code
##         from  @{table_country} as oc,
##                  select distinct region_code, country_code, where LEFT(${OF_OFFICE.location_code},2) = oc.country_code as oll
##                  where oc.country_code = oll.country_code
##                  and oc.country_code IN ('HK','MO', 'CN')
##         union all
##         select country_code, country_name, country_code, country_name,
##         --   --currency_code,
##                   EU_Country_Flag, Inactive
##         --   --ONEForce_ID, Sub_Continent_Code, state_code
##         from  @{table_country} where country_code not IN ('HK','CN','MO')
##            ;;
##    }
##
##   dimension: country_code {
##     type:  string
##     view_label: "Key Account Country"
##     group_label: "Key Account Country"
##     label: "Key Account Country Code"
##     sql: ${TABLE}.country_code ;;
##   }
##
##   dimension: country_code_3 {
##     type: string
##     view_label: "Key Account Country_SYM"
##     group_label: "Key Account Country"
##     label: "Key Account Country Code"
##     sql: ${TABLE}.country_code_3 ;;
##   }
##
##   dimension: country_name {
##     type: string
##     view_label: "Key Account Country"
##     group_label: "Key Account Country"
##     label: "Key Account Country Country Name"
##     sql:  ${TABLE}.country_name ;;
##   }
##
##   dimension: country_name_3 {
##     type: string
##     view_label: "Key Account Country_SYM"
##     group_label: "Key Account Country"
##     label: "Key Account Country Name"
##     sql:  ${TABLE}.country_name_3 ;;
##   }
##
##   # dimension: currency_code {
##   #   view_label: "CGM Contract Country"
##   #   group_label: "CGM Contract"
##   #   label: "CGM Contract Currency Code"
##   # }
##
##   dimension: eu_country_flag {
##     type: string
##     view_label: "Key Account Country"
##     group_label: "Key Account Country"
##     label: "Key Account Country EU Country Flag"
##     sql:  ${TABLE}.eu_country_flag ;;
##   }
##
##   dimension: inactive {
##     type: string
##     view_label: "Key Account Country"
##     group_label: "Key Account Country"
##     label: "Key Account Country Inactive"
##     sql:  ${TABLE}.inactive ;;
##   }
## }

view: of_customer {
  sql_table_name: `ONEFORCE.OF_CUSTOMER`
    ;;

  dimension: oneforce_id {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: abrv {
    type: string
    sql: ${TABLE}.ABRV ;;
  }

  dimension: addr_1 {
    type: string
    sql: ${TABLE}.ADDR_1 ;;
  }

  dimension: capi_amt {
    label: "Capital Amount" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.CAPI_AMT ;;
  }

  dimension: capi_curr_cd {
    label: "Capital Currency Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CAPI_CURR_CD ;;
  }

  dimension: cnt_nm {
    type: string
    sql: ${TABLE}.CNT_NM ;;
  }

  dimension: cntc_pson_nm {
    type: string
    sql: ${TABLE}.CNTC_PSON_NM ;;
  }

  dimension: cntc_pson_tel {
    type: string
    sql: ${TABLE}.CNTC_PSON_TEL ;;
  }

  dimension: cntr_cust_tp_cd {
    label: "customer type"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CNTR_CUST_TP_CD ;;
    suggestions: ["BCO" , "NVO"]
    suggest_persist_for: "24 hour"
  }


  dimension: customer_type {
    label: "Customer Type"
    type: string
    sql: (CASE
          WHEN ${cntr_cust_tp_cd}= "B" THEN "BCO"
          WHEN ${cntr_cust_tp_cd}= "N" THEN "NVO"  ELSE Null END)  ;;
  }

  dimension_group: cre_dt {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CRE_DT ;;
  }

  dimension: cre_usr_id {
    type: string
    sql: ${TABLE}.CRE_USR_ID ;;
  }

  dimension: crm_if_flg {
    label: "Track in CRM" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CRM_IF_FLG ;;
  }

  dimension: crnt_vol_knt {
    label: "Yearly Volume (TEU)"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.CRNT_VOL_KNT ;;
  }

  dimension: cty_nm {
    label: "City" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTY_NM ;;
  }

  dimension: cust_cd {
    label: "Customer Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_CD ;;
    suggest_persist_for: "4 hour"
  }

  dimension: cust_cnt_cd {
    label: "Country"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_CNT_CD ;;
    suggest_persist_for: "24 hour"
  }

  dimension: cust_div_cd {
    label: "Individual/Group" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_DIV_CD ;;
  }

  dimension: cust_eml {
    label: "Email Address"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_EML ;;
  }

  dimension: cust_fax {
    label: "Fax"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_FAX ;;
  }

  dimension: cust_grp_hrchy_cd {
    label: "Office Type"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_GRP_HRCHY_CD ;;
  }

  dimension: cust_grp_id {
    label: "Customer Group Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_GRP_ID ;;
    suggest_persist_for: "4 hour"
  }

  dimension: cust_grp_nm {
    type: string
    sql: ${TABLE}.CUST_GRP_NM ;;
    suggest_persist_for: "4 hour"
  }

  dimension: cust_rgst_no {
    label: "Tax ID" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_RGST_NO ;;
  }

  dimension: cust_rmk {
    type: string
    sql: ${TABLE}.CUST_RMK ;;
  }

  dimension: delt_flg {
    label: "Inactive" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DELT_FLG ;;
  }

  dimension: eml_from_addr {
    type: string
    sql: ${TABLE}.EML_FROM_ADDR ;;
  }

  dimension: finc_sts_lvl_cd {
    label: "Finance Status Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FINC_STS_LVL_CD ;;
  }

  dimension: frt_fwrd {
    label: "Is A Forwarder?"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRT_FWRD ;;
  }

  dimension: frt_fwrd_fmc_no {
    label: "Forwarder No."  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRT_FWRD_FMC_NO ;;
  }

  dimension: indiv_corp_div_cd {
    label: "Firm/Private Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.INDIV_CORP_DIV_CD ;;
  }

  dimension: indus_desc {
    label: "Industry Type Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.INDUS_DESC ;;
  }

  dimension_group: key_acct_end_eff_dt {
    label: "GCM Account Exp Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.KEY_ACCT_END_EFF_DT ;;
  }

  dimension: key_acct_flg {
    label: "GCM Account"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.KEY_ACCT_FLG ;;
  }

  dimension_group: key_acct_st_eff_dt {
    label: "GCM Account Effective Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.KEY_ACCT_ST_EFF_DT ;;
  }

  dimension: lgcy_cust_cd {
    type: string
    sql: ${TABLE}.LGCY_CUST_CD ;;
  }

  dimension: loc_cd {
    label: "Location Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LOC_CD ;;
  }

  dimension: lsr_flg {
    label: "Is a Lessor?" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LSR_FLG ;;
  }

  dimension: mfr_flg {
    label: "Is a Manufacturer?" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MFR_FLG ;;
  }

  dimension: mlt_trd_acct_flg {
    label: "Multi Trade Account"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MLT_TRD_ACCT_FLG ;;
  }

  dimension: modi_cust_cd2 {
    type: string
    sql: ${TABLE}.MODI_CUST_CD2 ;;
  }

  dimension: name {
    label: "Customer Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NAME ;;
    suggest_persist_for: "24 hour"
  }

  dimension: nbs_clss_cd1 {
    label: "Customer Sub Typ Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NBS_CLSS_CD1 ;;
  }

  dimension: nbs_clss_cd3 {
    label: "Regional Key Account" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NBS_CLSS_CD3 ;;
  }

  dimension: nmd_cust_flg {
    label: "Named Customer" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NMD_CUST_FLG ;;
  }

  dimension: ofc_cd {
    view_label: "Office Information"
    label: "Admin Office Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OFC_CD ;;
    suggest_persist_for: "24 hour"
  }

  dimension: ofc_nm {
    view_label: "Office Information"
    label: "Sales Person's Office"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OFC_NM ;;
    suggest_persist_for: "24 hour"
  }

  dimension: parent_customer_code {
    label: "Parent Customer"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.PARENT_CUSTOMER_CODE ;;
    suggest_persist_for: "4 hour"
  }

  dimension: post_code {
    label: "Zip/Postal Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POST_CODE ;;
  }

  dimension: sanc_flg {
    type: string
    sql: ${TABLE}.SANC_FLG ;;
  }

  dimension: shp_agnt_flg {
    label: "Is a Shipping Agent?" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SHP_AGNT_FLG ;;
  }

  dimension: srep_eml {
    label: "Sales Rep Email"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_EML ;;
  }

  dimension: srep_nm {
    label: "Sales Rep Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_NM ;;
  }

  dimension: ste_cd {
    type: string
    sql: ${TABLE}.STE_CD ;;
  }

  dimension: ste_nm {
    type: string
    sql: ${TABLE}.STE_NM ;;
  }

  dimension_group: upd_dt {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.UPD_DT ;;
  }

  dimension: upd_usr_id {
    type: string
    sql: ${TABLE}.UPD_USR_ID ;;
  }
#added for service cloud 2.O KPI dashboards - START
  dimension: customer_cd_and_name {
    type: string
    sql: concat(${cust_cd}, " - ", ${name}) ;;
  }

#added for service cloud 2.O KPI dashboards - END

  dimension: bklst_cust_flg {
    type: string
    sql: ${TABLE}.bklst_cust_flg ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [name]
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: of_customer_fy_teu {
  derived_table: {
    #sql: select CTRT_CUST_CD2, b.fiscal_year, sum(bkg_teu) as teu
    #     from ${of_booking.SQL_TABLE_NAME} a
    #     inner join ${of_sales_week_master.SQL_TABLE_NAME} b on a.week = cast (b.sales_week as int64)
    #     where bkg_sts_cd != 'X'
    #     group by 1,2 ;;
    sql:  select consolidated_cnt_cust_cd as cust_cd,
                v.name as cust_nm,
                consolidated_cnt_cust_grp_cd as cust_grp_id,
                g.cust_grp_nm,
                b.sales_week,
                consolidated_cnt_cust_cd||'-'||b.sales_week as primkey,
                sum(teu) as teu,
                sum(cm_amt) as cm_amt
         from ${of_consolidated.SQL_TABLE_NAME} a
         inner join ${of_sales_week_master.SQL_TABLE_NAME} b on a.week = cast(b.sales_week as int64)
         left join ${of_customer_group.SQL_TABLE_NAME} g on a.consolidated_cnt_cust_grp_cd = g.cust_grp_id
         left join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} v on a.consolidated_cnt_cust_cd = v.cust_cd
         where record_type = 'Booking' and bkg_sts_cd not in ( 'X','W')  and b.week_start_date <= current_date()
         and 1 =  {%  if fiscal_or_week._parameter_value == 'W' %} 1 {% else %} 0 {% endif %}
         group by 1,2,3,4,5,6
         union all
         select consolidated_cnt_cust_cd as cust_cd,
                v.name as cust_nm,
                consolidated_cnt_cust_grp_cd as cust_grp_id,
                g.cust_grp_nm,
                b.fiscal_year,
                consolidated_cnt_cust_cd||'-'||b.fiscal_year as primkey,
                sum(teu) as teu,
                sum(cm_amt) as cm_amt
         from ${of_consolidated.SQL_TABLE_NAME} a
         inner join ${of_sales_week_master.SQL_TABLE_NAME} b on a.week = cast(b.sales_week as int64)
         left join ${of_customer_group.SQL_TABLE_NAME} g on a.consolidated_cnt_cust_grp_cd = g.cust_grp_id
         left join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} v on a.consolidated_cnt_cust_cd = v.cust_cd
         where record_type = 'Booking' and bkg_sts_cd not in ( 'X','W')  and b.week_start_date <= current_date()
          and 1 =  {%  if fiscal_or_week._parameter_value == 'F' %} 1 {% else %} 0 {% endif %}
          and {% condition fiscal_year_filter %} b.fiscal_year {% endcondition %}
          group by 1,2,3,4,5,6
        ;;
  }

  parameter: fiscal_or_week {
    type: unquoted
    allowed_value: {
      label: "Fiscal"
      value: "F"}
    allowed_value: {
      label: "Week"
      value: "W"
    }
    default_value: "W"
  }

  filter: fiscal_year_filter {
    type: string
    suggestions: ["FY2020"]
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: primkey {
    type: string
    sql: ${TABLE}.primkey ;;
    primary_key: yes
    hidden: yes
  }

  dimension: cust_cd {
    type: string
    sql: ${TABLE}.cust_cd ;;
  }

  dimension: cust_nm {
    type: string
    sql: ${TABLE}.cust_nm ;;
  }

  dimension: cust_grp_id {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: cust_grp_nm {
    type: string
    sql: ${TABLE}.cust_grp_nm ;;
  }

  dimension: sales_week {
    type: string
    sql: ${TABLE}.sales_week ;;
  }

  dimension: teu {
    type: number
    sql: ${TABLE}.teu ;;
    drill_fields: [detail*]
  }

  dimension: is_TPA_user {
    label: "Is TPA user"
    type: string
    sql: case when (select count(*) FROM ONEFORCE.OF_USER WHERE REPLACE(Email, '.invalid', '') = REPLACE('{{ _user_attributes["email"] }}', '.invalid', '') AND IsActive = 'true' AND (profile_name = 'Third Party Agent' or profile_name = 'TPA (Service Cloud) CCA' or profile_name = 'TPA (Service Cloud) CCS' ) ) > 0 then "Yes" else "No" end;;
  }

  dimension: cm_amt {
    type: number
    sql:  case when ${is_TPA_user} = "No" then ${TABLE}.cm_amt else null end ;;
    drill_fields: [detail*]
  }

  dimension: is_ungroup {
    type: yesno
    sql: ${cust_grp_id} IS NULL ;;
  }

  measure: total_teu {
    description: "TEU till last completed month in the specified fiscal year"
    type: sum
    sql: coalesce(${teu},0);;
    drill_fields: [detail*]
    value_format_name: decimal_2
  }

  measure: total_cm_amt {
    description: "CM till last completed month in the specified fiscal year"
    type: sum
    sql: coalesce(${cm_amt},0) ;;
    drill_fields: [detail*]
    value_format_name: decimal_2
  }

  measure: total_teu_ungroup {
    type: sum
    sql: coalesce(${teu},0);;
    filters: [is_ungroup: "yes"]
    drill_fields: [detail*]
    value_format_name: decimal_2
  }

  measure: total_cm_amt_ungroup {
    type: sum
    sql: coalesce(${cm_amt},0) ;;
    filters: [is_ungroup: "yes"]
    drill_fields: [detail*]
    value_format_name: decimal_2
  }

  measure: total_teu_group {
    type: sum
    sql: coalesce(${teu},0);;
    filters: [is_ungroup: "no"]
    drill_fields: [detail*]
    value_format_name: decimal_2
  }

  measure: total_cm_amt_group {
    type: sum
    sql: coalesce(${cm_amt},0)  ;;
    filters: [is_ungroup: "no"]
    drill_fields: [detail*]
    value_format_name: decimal_2
  }

  set: detail {
    fields: [cust_cd, cust_nm, cust_grp_id, cust_grp_nm, sales_week, teu, cm_amt]
  }

}

view: of_customer_group_1 {
  derived_table: {
    sql:
      WITH V_CUSTOMER_OPUS_N_PROSPECT_GLOBAL as (
        -- Jack : May 29 Simplication
        SELECT  * FROM (
          SELECT v.CUST_GRP_ID, v.CUST_CD , v.NAME, v.key_acct_st_eff_dt, v.OF_OWNER_ID, v.cntr_cust_tp_cd ,
                 v.srep_nm, v.srep_eml, -- add by Helen on 20211209
          row_number() OVER (PARTITION BY V.cust_grp_id ORDER BY V.key_acct_st_eff_dt ASC) as rank_in_grp
          FROM ${v_customer_opus_n_prospect.SQL_TABLE_NAME} v
          where v.CUST_GRP_HRCHY_CD = 'G' and v.CUST_CD is not null and IFNULL(v.DELT_FLG, 'N' ) = 'N'
        ) WHERE rank_in_grp = 1
      ),  CN_OFFICE  as (select ol.office_Code, 'CNN' as ctry_cd, 'CHINA-NORTH' as ctry_nm, 'EAS' region
                      from OF_OFFICE as ol
                      where  ol.office_code IN ('TSNBB','SJWBB','DLCBB','LYGBB','TAOBB','CGOBB','SIABB')
                      union all
                      select ol.office_Code, 'CNC' as ctry_cd,  'CHINA-CENTRAL' as ctry_nm, 'EAS' region
                      from OF_OFFICE as ol
                      where ol.office_code IN ('SHABB','NKGBB','SZHBB','HGHBB','JIXBB','NBOBB','HFEBB','WUHBB','CKGBB','CTUBB')
                      union all
                      select ol.office_code, 'HK & CNS' as ctry_cd, 'HK & CHINA-SOUTH'  as  ctry_nm, 'EAS' region
                      from OF_OFFICE as ol
                      where ol.office_code IN ('FOCBB','XMNBB','CANBB','SWABA','SZPBB','ZHOBB','ZHUBB','HKGBB','HKGHQ','MACBA')
-- Jack , 2022.8.25. Take out this one and use  V_CUSTOMER_OPUS_N_PROSPECT_GLOBAL.OF_OWNER_ID  to obtain customers' owner ONEForce Id
--      ),  UEML as ( SELECT oneforce_id, email
--                    FROM ${of_user.SQL_TABLE_NAME}
--                    UNION ALL
--                    SELECT oneforce_id, email_2 as email
--                    FROM ${of_user.SQL_TABLE_NAME}
--                    WHERE email_2 is not null
      ),  GAM as (SELECT * FROM (
                      -- Jack, 2022.11.10 use LastModifiedDate instead of sales_person as sorting key
                      -- SELECT  customer_group, sales_person, row_number() OVER (PARTITION BY customer_group ORDER BY sales_person ASC) as rn
                      SELECT  customer_group, sales_person, row_number() OVER (PARTITION BY customer_group ORDER BY LastModifiedDate ASC) as rn
                      FROM ${of_sales_team_member.SQL_TABLE_NAME} s
                      WHERE s.team_role like 'Global Account Manager (GAM)' and s.inactive = 'false'
                      ) WHERE rn = 1
      )

      SELECT OF_CUSTOMER_GROUP.cust_grp_id
      , OF_CUSTOMER_GROUP.bklst_cust_flg
      , OF_CUSTOMER_GROUP.bklst_cust_rsn
      , OF_CUSTOMER_GROUP.cust_grp_nm
      , OF_CUSTOMER_GROUP.delt_flg
      , OF_CUSTOMER_GROUP.KEY_ACCT_CNT_CD
      , OF_CUSTOMER_GROUP.key_acct_flg
      , OF_CUSTOMER_GROUP.key_acct_tp_cd
      , OF_CUSTOMER_GROUP.key_acct_rgn_cd
      , OF_CUSTOMER_GROUP.nbs_clss_cd1
      , OF_CUSTOMER_GROUP.nbs_clss_cd2
      , OF_CUSTOMER_GROUP.nbs_clss_cd3
      , OF_CUSTOMER_GROUP.ofc_cd
      , OF_CUSTOMER_GROUP.oneforce_id
      , OF_CUSTOMER_GROUP.vbs_clss_cd
      , case when  USER.office_code = 'zzUnclaimed - Office' then V_CUSTOMER_OPUS_N_PROSPECT.SREP_EML
      else coalesce(USER.email, V_CUSTOMER_OPUS_N_PROSPECT.SREP_EML) end as srep_email
      , case when  USER.office_code = 'zzUnclaimed - Office' then V_CUSTOMER_OPUS_N_PROSPECT.SREP_NM
      else coalesce(trim(USER.firstname||' '||USER.lastname), V_CUSTOMER_OPUS_N_PROSPECT.SREP_NM) end as srep_nm
      , coalesce(GAM.sales_person, V_CUSTOMER_OPUS_N_PROSPECT.of_owner_id) as global_account_manager
      , coalesce(OF_CUSTOMER_GROUP.cntr_cust_tp_cd,V_CUSTOMER_OPUS_N_PROSPECT.cntr_cust_tp_cd) as global_customer_type
      , CASE WHEN cn_office.office_code is null then  OFFICE.office_code else cn_office.office_code end as srep_ofc_cd
      , CASE WHEN cn_office.ctry_nm is null then  CTRY.Country_Name else cn_office.ctry_nm end as srep_cnt_nm
      , CASE WHEN cn_office.ctry_cd is null then  CTRY.Country_Code else cn_office.ctry_cd end as srep_cnt_cd
      , coalesce(cn_office.region, CASE WHEN REG.reg_cust_cnt_cd = "BR" then 'LAM'
      WHEN REG.reg_cust_cnt_cd = "GB"  then 'EUA'
      WHEN REG.reg_cust_cnt_cd = "HK"  then 'EAS'
      WHEN REG.reg_cust_cnt_cd = "SG"  then 'SAS'
      WHEN REG.reg_cust_cnt_cd = "US"  then 'NAM'
      ELSE REG.reg_cust_cnt_cd END) as srep_region
      FROM @{table_customer_group} as OF_CUSTOMER_GROUP
      LEFT JOIN V_CUSTOMER_OPUS_N_PROSPECT_GLOBAL as V_CUSTOMER_OPUS_N_PROSPECT ON V_CUSTOMER_OPUS_N_PROSPECT.cust_grp_id = OF_CUSTOMER_GROUP.cust_grp_id
      LEFT JOIN GAM on OF_CUSTOMER_GROUP.oneforce_id = GAM.customer_group
      LEFT JOIN ${of_user.SQL_TABLE_NAME} as USER on USER.ONEForce_ID = coalesce(GAM.sales_person, V_CUSTOMER_OPUS_N_PROSPECT.OF_OWNER_ID)
      LEFT JOIN cn_office on cn_office.office_code =
      case when trim(USER.office_code) is null or USER.office_code = 'zzUnclaimed - Office' then
      RIGHT(V_CUSTOMER_OPUS_N_PROSPECT.srep_nm,5) else RIGHT(USER.office_code,5) end
      LEFT JOIN ${of_office.SQL_TABLE_NAME} as OFFICE on OFFICE.office_code =
      case when trim(USER.office_code) is null or USER.office_code = 'zzUnclaimed - Office' then
      RIGHT(V_CUSTOMER_OPUS_N_PROSPECT.srep_nm,5) else RIGHT(USER.office_code,5) end
      LEFT JOIN ${of_country.SQL_TABLE_NAME} CTRY on LEFT(OFFICE.LOCATION_CODE,2) = CTRY.Country_Code
      LEFT JOIN ${of_reg_ref.SQL_TABLE_NAME} REG on  REG.CUST_CNT_CD = CTRY.Country_Code
      ;;

    ##-- Jack 2022.8.25 : take out this one, and use V_CUSTOMER_OPUS_N_PROSPECT_GLOBAL.OF_OWNER_ID  to obtain customers' owner ONEForce Id
    ##--LEFT JOIN UEML on trim(lower(UEML.email)) = trim(lower(V_CUSTOMER_OPUS_N_PROSPECT.SREP_EML))
    ##--LEFT JOIN ${of_user.SQL_TABLE_NAME} as USER on USER.ONEForce_ID = coalesce(GAM.sales_person, UEML.ONEFORCE_ID)

    ##--Add By Zoe Cheung on 26 Nov2021--
    ##--LEFT JOIN ${of_user.SQL_TABLE_NAME} USER ON trim(lower(OF_CUSTOMER_GROUP.srep_email)) = trim(lower(USER.email))

    ##--Jack Mar 23, 2022
    ##-- LEFT JOIN ${of_user.SQL_TABLE_NAME} as USER on ( case when USER.tpa_user = 'true' then trim(lower(USER.email_2)) else trim(lower(USER.email)) end ) = lower(trim(V_CUSTOMER_OPUS_N_PROSPECT.srep_eml)) -- DCN-552 , Jack 2022 Mar 15
    ##-- Helen 12-May 2022 add ueml and gam sub-query, change to join cust and user with srep_eml instead of of_owner id
    ##   -- there are 20% record whose owner_id is not the actual salesrep but crm user. (e.g. KW100353, SA503659)
    ##   -- need ueml because srep_eml in customer table has tpa@one-line.com doman. the join with email_2 does not work.


    # commented out by Jack for adding Key Account Country Name
    persist_for: "2 hours"
  }

  dimension: cust_grp_id {
    hidden: yes
    label: "Customer Group Code"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.CUST_GRP_ID ;;
    suggest_persist_for: "4 hour"
  }

  dimension: bklst_cust_flg {
    label: "Blacklist"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKLST_CUST_FLG ;;
  }

  dimension: bklst_cust_rsn {
    label: "Blacklist Reason" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKLST_CUST_RSN ;;
  }

  dimension: cust_grp_and_name {
    label: "Customer Group & Name"
    type: string
    sql: concat(${cust_grp_id}, " - ", ${cust_grp_nm}) ;;
    suggest_persist_for: "4 hour"
  }

  dimension: cust_grp_and_name_filtered{
    label: "Customer Group & Name (Exc)"
    type: string
    sql: case when ${delt_flg} = 'Y' then null
      else concat(${cust_grp_id}, " - ", ${cust_grp_nm}) end ;;
    suggest_persist_for: "4 hour"
  }

  dimension: cust_grp_nm {
    label: "Customer Group Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_GRP_NM ;;
    suggest_persist_for: "4 hour"
  }

  #  commented out by helen to disassolcated of_customer_group and v_customer_opus_n_prospect
  #  dimension: name_or_group_name {
  #    type: string
  #    sql: coalesce(${cust_grp_nm}, ${v_customer_opus_n_prospect.name}) ;;
  #  }

  dimension: delt_flg {
    label: "Deletion Flag"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DELT_FLG ;;
  }

  dimension: global_account_manager {
    type: string
    sql: ${TABLE}.global_account_manager ;;
  }

  ##Update by Zoe Cheung on 8 Feb 2022##
  dimension: global_customer_type {
    label: "Customer Type (BCO/NVO)"
    type: string
    sql: CASE WHEN ${cust_grp_id} IS NULL THEN NULL
           ELSE ( Case when ${TABLE}.global_customer_type = 'B' then 'BCO' Else 'NVO' END )
           END  ;;
    suggest_persist_for: "24 hour"
  }

  dimension: global_customer_type_ord {
    type: number
    sql:  case when ${TABLE}.global_customer_type = 'B' then 1 else 2 end;;
  }

  dimension: key_acct_cnt_cd {
    label: "Key Account Country Code"  # programmatically added by LookML modifier
    description: "GAM's country (if not available, sales rep's country of global child customer)"
    type: string
    sql: ${TABLE}.srep_cnt_cd ;;
    suggest_persist_for: "24 hour"
  }


  dimension: key_acct_cnt_name {
    label: "Key Account Country"  # programmatically added by LookML modifier
    description: "GAM's country (if not available, sales rep's country of global child customer)"
    type: string
    sql: ${TABLE}.srep_cnt_nm ;;
    suggest_persist_for: "24 hour"
  }


  dimension: key_acct_flg {
    label: "GKA"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.KEY_ACCT_FLG ;;
  }

  dimension: key_acct_rgn_cd {
    label: "Key Account Region" # programmatically added by LookML modifier
    description: "GAM's region (if not available, sales rep's region of global child customer)"
    #sql: ${TABLE}.KEY_ACCT_RGN_CD ;;
    suggest_persist_for: "24 hour"
    # change on 2021.12.29 to fix link filter not work
    # sql: ${TABLE}.KEY_ACCT_RGN_CD ;;
    sql: ${TABLE}.srep_region ;;
    # end change
    suggestions: ["EAS", "EUA", "LAM", "NAM", "SAS"]
  }

  ## Update by Zoe on 17Feb ##
  dimension: key_acct_tp_cd {
    label: "Key Account Type" # programmatically added by LookML modifier
    type: string
    order_by_field: key_acct_tp_cd_ord
    sql:
      CASE
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='GKA' THEN 'GKA'
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='RKA' THEN 'RKA'
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='LKA' THEN 'LKA'
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='SME' THEN 'ONECare'
      ELSE (CASE WHEN ${cust_grp_id} IS NULL THEN NULL ELSE 'ONECare' END)
      END ;;
    suggest_persist_for: "24 hour"
    suggestions: ["GKA", "RKA", "LKA", "ONECare"]
  }

  dimension: key_acct_tp_cd_ord {
    type: number
    sql:
      CASE
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='GKA' THEN 1
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='RKA' THEN 2
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='LKA' THEN 3
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='SME' THEN 4
      ELSE 4
      END ;;
  }

  dimension: is_gka {
    type: string
    sql: CASE WHEN ${key_acct_tp_cd} = 'GKA' THEN 'GKA' ELSE 'Non-GKA' END ;;
  }

  dimension: nbs_clss_cd1 {
    type: string
    sql: ${TABLE}.NBS_CLSS_CD1 ;;
  }

  dimension: nbs_clss_cd2 {
    type: string
    sql: ${TABLE}.NBS_CLSS_CD2 ;;
  }

  dimension: nbs_clss_cd3 {
    type: string
    sql: ${TABLE}.NBS_CLSS_CD3 ;;
  }

  dimension: ofc_cd {
    view_label: "Office Information"
    label: "Control Office Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OFC_CD ;;
    suggest_persist_for: "24 hour"
  }

  dimension: oneforce_id {
    label: "ONEForce Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: srep_email {
    label: "Sale Rep Email" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_EMAIL ;;
    suggest_persist_for: "24 hour"
  }

  dimension: srep_nm {
    label: "Sale Rep Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_NM ;;
  }

  # add helen on 12-May-2022
  dimension: srep_ofc_cd {
    label: "Sale Rep Office"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_OFC_CD;;
  }

  dimension: vbs_clss_cd {
    label: "Value based segmentation class" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.VBS_CLSS_CD ;;
  }

  measure: count {
    # unhidden by helen on 2022.02.24 for global CVA completion.
    # hidden: yes
    type: count
    drill_fields: [cust_grp_id, cust_grp_nm, global_customer_type, global_account_manager]
  }

  set: primary_key {
    fields: [cust_grp_id, count]
  }
}

view: of_customer_group_for_consol2 {
  derived_table: {
    sql:
    SELECT g.CUST_GRP_ID,
            g.CUST_GRP_NM,
            g.global_customer_type,
            g.key_acct_tp_cd,
            g.DELT_FLG
    FROM  ${of_customer_group.SQL_TABLE_NAME} g
    WHERE g.DELT_FLG = 'N'
    ;;
  }

  dimension: cust_grp_id {
    label: "Customer Group Code"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.CUST_GRP_ID ;;
    suggest_persist_for: "4 hour"
  }

  dimension: cust_grp_and_name {
    label: "Customer Group & Name"
    type: string
    sql: concat(${cust_grp_id}, " - ", ${cust_grp_nm}) ;;
    suggest_persist_for: "4 hour"
  }

  dimension: cust_grp_nm {
    label: "Customer Group Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_GRP_NM ;;
    suggest_persist_for: "4 hour"
  }

  dimension: delt_flg {
    label: "Deletion Flag"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DELT_FLG ;;
  }

  dimension: global_customer_type {
    label: "Customer Type (BCO/NVO)"
    type: string
    sql: Case when ${TABLE}.global_customer_type = 'B' then 'BCO'
      Else 'NVO'
      END;;
    suggest_persist_for: "24 hour"
  }

  dimension: global_customer_type_ord {
    type: string
    sql:  case when ${TABLE}.global_customer_type = 'B' then '1' else '2' end;;
  }

  dimension: key_acct_tp_cd {
    label: "Key Account Type" # programmatically added by LookML modifier
    type: string
    sql:
      CASE
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='GKA' THEN 'GKA'
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='RKA' THEN 'RKA'
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='LKA' THEN 'LKA'
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='SME' THEN 'ONECare'
      ELSE 'ONECare'
      END ;;
    suggest_persist_for: "24 hour"
    suggestions: ["GKA", "RKA", "LKA", "ONECare"]
  }

  dimension: key_acct_tp_cd_ord {
    type: string
    sql:
      CASE
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='GKA' THEN '1'
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='RKA' THEN '2'
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='LKA' THEN '3'
      WHEN ${TABLE}.KEY_ACCT_TP_CD ='SME' THEN '4'
      ELSE '4'
      END ;;
  }

}

view: of_customer_grp_4_cvamon {
  derived_table: {
    sql: SELECT     cust.cust_cd,
           cust_cd || ' - ' || cust.name cust_cd_n_name ,
           grp.cust_grp_id ,
           grp.cust_grp_id ||' - '|| grp.cust_grp_nm cust_grp_n_name

      FROM       `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` cust
      LEFT JOIN ${of_customer_group.SQL_TABLE_NAME} grp ON (cust.cust_grp_id = grp.cust_grp_id)
      WHERE EXISTS (SELECT 1
      FROM   `ONEFORCE.OF_SVC_CONTRACT` ctrt
      WHERE  ctrt.cust_cd = cust.cust_cd
      AND    ctrt.ctrt_exp_dt >= DATE('2022-04-01')
      AND    ctrt.sc_rfa_typ IN ('S','R')
      AND NOT (  SUBSTR(ctrt.sc_rfa_no,1,2)='KT'  OR
      REGEXP_CONTAINS(ctrt.sc_rfa_no, r'^R[0-9JQ][A-Za-z][0-9]{8}$') OR
      REGEXP_CONTAINS(ctrt.sc_rfa_no, r'^S[0-9JQ][A-Za-z][0-9]{7}$') OR
      REGEXP_CONTAINS(ctrt.sc_rfa_no, r'^R[0-9]{8}[A-Za-z][0-9JQ]$') OR
      REGEXP_CONTAINS(ctrt.sc_rfa_no, r'^S[0-9]{7}[A-Za-z][0-9JQ]$')  )
      )
      ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: cust_cd {
    type: string
    sql: ${TABLE}.cust_cd ;;
  }

  dimension: cust_cd_n_name {
    type: string
    sql: ${TABLE}.cust_cd_n_name ;;
  }

  dimension: cust_grp_id {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: cust_grp_n_name {
    type: string
    sql: ${TABLE}.cust_grp_n_name ;;
  }

  set: detail {
    fields: [cust_cd, cust_cd_n_name, cust_grp_id, cust_grp_n_name]
  }
}

view: of_customer_target {
  sql_table_name: `ONEFORCE.OF_CUSTOMER_TARGET`
    ;;

  dimension: oneforce_id {
    label: "ONEForce Id"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: bound {
    label: "Bound"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Bound ;;
  }

  dimension: created_by_id {
    label: "Created By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: datetime(${TABLE}.CreatedDate) ;;
  }

  dimension_group: cva_effective_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: datetime(${TABLE}.CVA_Effecitve_Date) ;;
  }

  dimension_group: cva_expiry_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CVA_Expiry_Date ;;
  }

  dimension: customer {
    label: "Customer" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Customer ;;
    suggest_persist_for: "4 hour"
  }

  dimension: destination {
    label: "Destination"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Destination ;;
  }

  dimension: direction {
    label: "Direction"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Direction ;;
  }

  dimension: equipment_type_size {
    label: "Equipment Size" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Equipment_Type_Size ;;
  }

  dimension: internal_contract_id {
    label: "Internal Contract Id" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Internal_Contract_Id ;;
  }

  dimension: last_modified_by_id {
    label: "Last Modified By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: name {
    label: "Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: origin {
    label: "Origin" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Origin ;;
  }

  dimension: sales_person {
    label: "Sales Person" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Sales_Person ;;
  }

  dimension: service_lane_product {
    label: "Service Lane (Rev)"
    type: string
    sql: ${TABLE}.Service_Lane_Product ;;
    suggest_persist_for: "24 hour"
  }

  dimension: service_scope {
    label: "Service Scope"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Service_Scope ;;
    suggest_persist_for: "24 hour"
  }

  dimension: service_scope_group {
    label: "Service Scope Group"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
    suggest_persist_for: "24 hour"
  }

  dimension: syear {
    hidden: yes
    type: number
    sql:  ${TABLE}.SYear;;
  }


  measure: count {
    hidden: yes
    type: count
    drill_fields: [name]
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: of_customer_target_and_target_dtl_weekly {
  derived_table: {
    sql: with target_and_target_detail as (
      SELECT ofct.*
          --, ofct_dtl.Month_Year_Id
          --, ofct_dtl.Month_Target
        , null as Month_Year_Id
        , null as Month_Target
        -- , coalesce(weekly_average_v2,0) as Weekly_Average
        , of_svc_contract.sc_rfa_no as of_svc_contract_sc_rfa_no
        , of_svc_contract.ctrt_dur_tp_cd as of_svc_contract_cont_period_typ_cd
        --, (CASE of_svc_contract.ctrt_dur_tp_cd WHEN 'L' THEN 'Long' WHEN 'M' THEN 'Medium'  WHEN 'S' THEN 'Short' END) as of_svc_contract_cont_period_typ
        , (CASE
           WHEN of_svc_contract.sc_rfa_typ     = 'T' THEN 'Short'
           WHEN of_svc_contract.ctrt_dur_tp_cd = 'L' THEN 'Long'
           WHEN of_svc_contract.ctrt_dur_tp_cd = 'M' THEN 'Medium'
           WHEN of_svc_contract.ctrt_dur_tp_cd = 'S' THEN 'Short' END) as of_svc_contract_cont_period_typ
        , of_svc_contract.ctrt_eff_dt as of_svc_contract_cont_eff_dt
        , of_svc_contract.ctrt_exp_dt as of_svc_contract_cont_exp_dt
        , of_svc_contract.ofc_cd      as of_svc_contract_ofc_cd
        , v_customer_opus_n_prospect.cust_cd as v_customer_opus_n_prospect_cust_cd
        , of_location_destination.location_code as of_location_destination_location_code
        , of_location_origin.location_code as of_location_origin_location_code
        , of_location_origin.country_code as of_location_origin_country_code   -- Kai-CGM dashboard
        , v_customer_opus_n_prospect.of_owner_id as v_customer_opus_n_prospect_of_owner_id
        , v_customer_opus_n_prospect.cust_grp_id as v_customer_opus_n_prospect_of_cust_grp_cd
        , v_customer_opus_n_prospect.cust_grp_hrchy_cd as v_customer_opus_n_prospect_cust_grp_hrchy_cd
        , of_vsl_svc_lane.service_lane_code as of_vsl_svc_lane_service_lane_code
        , CONCAT(of_user.firstname, ' ', of_user.lastname) as of_user_fullname
        , UPPER(right( trim(of_user.office_code), 5) )  as of_user_ofc_code
        -- NA dashboard DCN-741
        ,  na_dshb_sls_person.ONEForce_ID as na_dashboard_sls_person
        -- NA dashboard DCN-741
        ,  na_dshb_sls_person.Sub_Region  as na_dashboard_usr_sub_rgn
      FROM `ONEFORCE.OF_CUSTOMER_TARGET` ofct
      LEFT JOIN ${of_svc_contract.SQL_TABLE_NAME} as of_svc_contract
      ON ofct.internal_contract_id = of_svc_contract.ONEForce_ID
      LEFT JOIN ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as v_customer_opus_n_prospect
      ON ofct.customer = v_customer_opus_n_prospect.ONEForce_ID AND v_customer_opus_n_prospect.cust_cd IS NOT NULL
      LEFT JOIN ${of_location.SQL_TABLE_NAME} as of_location_destination
      ON ofct.destination = of_location_destination.ONEForce_ID
      LEFT JOIN ${of_location.SQL_TABLE_NAME} as of_location_origin
      ON ofct.origin = of_location_origin.ONEForce_ID
      LEFT JOIN ${of_vsl_svc_lane.SQL_TABLE_NAME} as of_vsl_svc_lane
      ON ofct.service_lane_product = of_vsl_svc_lane.ONEForce_ID
      LEFT JOIN ${of_user.SQL_TABLE_NAME} as of_user
      ON ofct.sales_person = of_user.ONEForce_ID
      LEFT JOIN ${of_user.SQL_TABLE_NAME} as na_dshb_sls_person
      ON na_dshb_sls_person.ONEForce_ID = v_customer_opus_n_prospect.of_owner_id
      WHERE ofct.ONEForce_ID IS NOT NULL
    )


      SELECT target_and_target_detail.*, swm.week_start_date, swm.week_end_date, swm.Sales_Week,
      upper(format_date("%b%Y", parse_date("%Y%m",sales_month))) as Swm_Month_Year_Id,
      cast(Format_Date("%Y", cva_effective_date) as int64) as Swm_Syear,
      CASE WHEN cva_effective_date between swm.week_start_date and swm.week_end_date THEN
      (target*7/(DATE_DIFF(cva_expiry_date, cva_effective_date, day)+1)/7)*(7-extract(DAYOFWEEK from cva_effective_date)+1)
      WHEN cva_expiry_date between swm.week_start_date and swm.week_end_date THEN
      (target*7/(DATE_DIFF(cva_expiry_date, cva_effective_date, day)+1)/7)*(extract(DAYOFWEEK from cva_expiry_date))
      ELSE target*7/(DATE_DIFF(cva_expiry_date,cva_effective_date,day)+1)
      end as weekly_average
      FROM target_and_target_detail
      INNER JOIN ${of_sales_week_master.SQL_TABLE_NAME} swm
      ON swm.week_end_date >= target_and_target_detail.cva_effective_date AND swm.week_start_date <= target_and_target_detail.cva_expiry_date
      ;;
    #(target_dtl_oneforce_id IS NOT NULL AND LOWER(SUBSTR(Month_Year_Id, 1, 7)) = LOWER(FORMAT_DATE("%b%Y", parse_date('%Y%m', swm.Sales_Month))))

    persist_for: "4 hours"

  }

  dimension: primary_key {
    primary_key: yes
    hidden: yes
    type: string
    sql: concat(${oneforce_id}, "-", ${sales_week}) ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: internal_contract_id {
    type: string
    sql: ${TABLE}.Internal_Contract_Id ;;
  }

  dimension: bound {
    type: string
    sql: ${TABLE}.Bound ;;
  }

  dimension: customer {
    type: string
    sql: ${TABLE}.Customer ;;
  }

  dimension: destination {
    type: string
    sql: ${TABLE}.Destination ;;
  }

  dimension: direction {
    type: string
    sql: ${TABLE}.Direction ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: equipment_type_size {
    type: string
    sql: ${TABLE}.Equipment_Type_Size ;;
  }

  dimension: origin {
    type: string
    sql: ${TABLE}.Origin ;;
  }

  dimension: origin_country {
    type: string
    sql: ${TABLE}.of_location_origin_country_code ;;
  }

  dimension: service_lane_product {
    hidden: yes
    label: "Service Lane (Rev)"
    type: string
    sql: ${TABLE}.Service_Lane_Product ;;
  }

  dimension: service_scope {
    type: string
    sql: ${TABLE}.Service_Scope ;;
  }

  dimension: service_scope_group {
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: sales_person {
    type: string
    sql: ${TABLE}.Sales_Person ;;
  }

  dimension: syear {
    # obsolete dimension / avoid using this dimension after FY23
    type: number
    sql: coalesce(${TABLE}.SYear, ${TABLE}.Swm_SYear );;
  }

  dimension: month_year_id {
    # obsolete dimension / avoid using this dimension after FY23
    type: string
    sql: coleasce(${TABLE}.Month_Year_Id,${TABLE}.Swm_Month_Year_Id) ;;
  }

  dimension: month_target {
    # obsolete dimension / avoid using this dimension after FY23
    type: number
    sql: ${TABLE}.Month_Target ;;
    hidden: yes
  }

  dimension: weekly_average {
    type: number
    sql: coalesce(${TABLE}.weekly_average,0);;
  }

  dimension: of_svc_contract_sc_rfa_no {
    type: string
    sql: ${TABLE}.of_svc_contract_sc_rfa_no ;;
  }

# Jack/Jul 26, 2021, add of_svc_contract_contract_period_typ_cd
  dimension: of_svc_contract_contract_period_typ_cd {
    type:  string
    sql: ${TABLE}.of_svc_contract_cont_period_typ_cd ;;
  }

  dimension: of_svc_contract_cont_period_typ {
    type:  string
    sql: ${TABLE}.of_svc_contract_cont_period_typ ;;
  }

  dimension_group: cva_effective_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: timestamp(${TABLE}.CVA_Effective_Date) ;;
  }

  dimension_group: cva_expiry_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: timestamp(${TABLE}.CVA_Expiry_Date) ;;
  }

# Add by Helen for cva completion monitor
  dimension_group: of_svc_contract_cont_eff_dt {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.of_svc_contract_cont_eff_dt ;;
    html: {{ rendered_value | date: "%b %d, %y" }} ;;
  }

  dimension_group: of_svc_contract_cont_exp_dt {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.of_svc_contract_cont_exp_dt ;;
    html: {{ rendered_value | date: "%b %d, %y" }} ;;
  }

# end add for cva completion monitor

  dimension: of_svc_contract_ofc_cd {
    type: string
    sql: ${TABLE}.of_svc_contract_ofc_cd ;;
  }

  dimension: of_vsl_svc_lane_service_lane_code {
    type: string
    sql: ${TABLE}.of_vsl_svc_lane_service_lane_code ;;
  }

  dimension: v_customer_opus_n_prospect_cust_cd {
    type: string
    sql: ${TABLE}.v_customer_opus_n_prospect_cust_cd ;;
  }

  dimension: v_customer_opus_n_prospect_of_owner_id {
    type: string
    sql: ${TABLE}.v_customer_opus_n_prospect_of_owner_id ;;
  }

  dimension: v_customer_opus_n_prospect_cust_grp_hrchy_cd {
    type: string
    sql: ${TABLE}.v_customer_opus_n_prospect_cust_grp_hrchy_cd ;;
  }

  dimension: v_customer_opus_n_prospect_of_cust_grp_cd {
    type: string
    sql: ${TABLE}.v_customer_opus_n_prospect_of_cust_grp_cd ;;
  }

  dimension: of_location_destination_location_code {
    type: string
    sql: ${TABLE}.of_location_destination_location_code ;;
  }

  dimension: of_location_origin_location_code {
    type: string
    sql: ${TABLE}.of_location_origin_location_code ;;
  }

  dimension: sales_week {
    type: string
    sql: cast(${TABLE}.Sales_Week as int64) ;;
  }

  dimension: of_user_fullname {
    type: string
    sql: ${TABLE}.of_user_fullname ;;
  }

  dimension: of_user_ofc_code {
    type: string
    sql: ${TABLE}.of_user_ofc_code
        }

      dimension: na_dashboard_sls_person {
      type: string
      sql: ${TABLE}.na_dashboard_sls_person ;;
  }

  dimension: na_dashboard_usr_sub_rgn {
    type: string
    sql: ${TABLE}.na_dashboard_usr_sub_rgn ;;
  }
  #CGM db - Kai
  # dimension: scp_ofc_cd {
  #   type: string
  #   sql: ${TABLE}.scp_ofc_cd ;;
  # }

  dimension: target {
    type: number
    sql: ${TABLE}.target ;;
  }

  measure: count {
    type: count
  }

  set: primary_key {
    fields: [primary_key, count]
  }
}

view: of_customer_target_dtl {
  sql_table_name: `ONEFORCE.OF_CUSTOMER_TARGET_DTL`
    ;;

  dimension: oneforce_id {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: customer_target {
    hidden: yes
    type: string
    sql: ${TABLE}.Customer_Target ;;
  }

  dimension: month_target {
    type: number
    sql: ${TABLE}.Month_Target ;;
  }

  dimension: month_year_id {
    type: string
    sql: ${TABLE}.Month_Year_Id ;;
  }

  dimension: weekly_average {
    type: number
    sql: ${TABLE}.Weekly_Average ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: of_dom_ndom {
  derived_table: {
    sql:
      SELECT 'DOM'   as dominant_flag UNION ALL
      SELECT 'N-DOM' as dominant_flag
       ;;
  }

  dimension: dominant_flag {
    label: "Dominant Flag"
    type: string
    sql: ${TABLE}.dominant_flag ;;
  }

}

view: of_ecom_evnt_ntfc_log {
  sql_table_name: `ONEFORCE.OF_eCOM_EVNT_NTFC_LOG`
    ;;

  dimension: also_ntfy_cust_cd {
    label: "Notify"
    type: string
    sql: ${TABLE}.ALSO_NTFY_CUST_CD ;;
  }

  dimension: bkg_hq_ofc_cd {
    label: "Booking Office (HQ)"
    type: string
    sql: ${TABLE}.BKG_HQ_OFC_CD ;;
  }

  dimension: bkg_no {
    type: string
    sql: ${TABLE}.BKG_NO ;;
    label: "Booking"

    link: { # -- Arul  OPUS Direct Link -- Start 13-Sep-2021 not Rleased
      label: "View Booking"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_0079_Q.do%3FmainPage%3Dtrue%26pid%3DESM_BKG_M020%26MENU%3DY%26pgmNo%3DESM_BKG_0079_Q%26parentPgmNo%3DESM_BKG_M001%26mainMenuLinkFlag%3Dtrue%26menuflag%3Dtrue%26mainPage%3Dtrue%26bkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    }
    link: {
      label: "B/L Preview"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_0927_POP.do%3Fbkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    }
    link: {
      label: "Standby Booking Detail"
      url: "https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_BKG_2020.do%3Fbkg_no%3D{{value}}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico"
    } # -- Arul OPUS Direct Link-- Emd 13-Sep-2021 not Rleased
  }

  dimension: bkg_ofc_cd {
    type: string
    sql: ${TABLE}.BKG_OFC_CD ;;
    label: "Booking Office"
  }

  dimension: bl_no {
    type: string
    sql: ${TABLE}.BL_NO ;;
    label: "BL Number"
  }

  dimension: cnee_cust_cd {
    type: string
    sql: ${TABLE}.CNEE_CUST_CD ;;
    label: "Consignee"
  }

  dimension: cntr_desc {
    type: string
    sql: ${TABLE}.CNTR_DESC ;;
    label: "Size"
  }

  dimension: cntr_no {
    type: string
    sql: ${TABLE}.CNTR_NO ;;
    label: "Container"
  }

  dimension: cntr_tp_sz {
    type: string
    sql: ${TABLE}.CNTR_TP_SZ ;;
    label: "Type Size"
  }

  dimension_group: cre_dt {
    label: "Event Notification Created On"
    description: "Singapore Standard Time"
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CRE_DT ;;
  }

  dimension: cre_usr_id {
    type: string
    sql: ${TABLE}.CRE_USR_ID ;;
  }

  dimension: e_com_log_id {
    type: string
    sql: ${TABLE}.eCOM_LOG_ID ;;
    primary_key: yes
  }

  dimension_group: edw_upd_dt {
    label: "Last Sent On"
    description: "Singapore Standard Time"
    type: time
    datatype: date
    timeframes: [
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EDW_UPD_DT ;;
    html: {{ rendered_value | date: "%Y-%m-%d" }} ;;

  }

  dimension_group: eml_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EML_DT ;;
  }

  dimension: eml_proc_sts_cd {
    type: string
    sql: ${TABLE}.EML_PROC_STS_CD ;;
  }

  dimension: eml_proc_sts_nm {
    label: "Status"
    type: string
    sql: ${TABLE}.EML_PROC_STS_NM ;;
  }

  dimension: eml_svc_id {
    type: string
    sql: ${TABLE}.EML_SVC_ID ;;
  }

  dimension: eml_svc_nm {
    type: string
    sql: ${TABLE}.EML_SVC_NM ;;
  }

  dimension: eml_svc_nm_of {
    label: "Event Type"
    type: string
    sql: ${TABLE}.EML_SVC_NM_OF ;;
  }

  dimension: evnt_dt {
    type: number
    sql: ${TABLE}.EVNT_DT ;;
  }

  dimension: evnt_dt_seq {
    label: "Sequence"
    type: number
    sql: ${TABLE}.EVNT_DT_SEQ ;;
  }

  dimension: evnt_tp_cd {
    type: string
    sql: ${TABLE}.EVNT_TP_CD ;;
  }

  dimension: evnt_tp_nm {
    label: "Event"
    type: string
    sql: ${TABLE}.EVNT_TP_NM ;;
  }

  dimension: fwdr_cust_cd {
    type: string
    sql: ${TABLE}.FWDR_CUST_CD ;;
  }

  dimension: mail_key {
    type: string
    sql: ${TABLE}.MAIL_KEY ;;
  }

  dimension: ntfy_cust_cd {
    type: string
    sql: ${TABLE}.NTFY_CUST_CD ;;
  }

  dimension: rfa_no {
    type: string
    sql: ${TABLE}.RFA_NO ;;
  }

  dimension: sc_no {
    type: string
    sql: ${TABLE}.SC_NO ;;
  }

  dimension: sc_rfa_no {
    label: "Contract"
    type: string
    sql: ${TABLE}.SC_RFA_NO ;;
  }

  dimension: sc_rfa_typ {
    type: string
    sql: ${TABLE}.SC_RFA_TYP ;;
  }

  dimension: shpr_cust_cd {
    type: string
    sql: ${TABLE}.SHPR_CUST_CD ;;
  }

  dimension: taa_no {
    type: string
    sql: ${TABLE}.TAA_NO ;;
  }

  dimension: to_eml_ctnt {
    label: "Recipients List"
    type: string
    sql: ${TABLE}.TO_EML_CTNT ;;
  }

  dimension_group: upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.UPD_DT ;;
  }

  dimension: upd_usr_id {
    type: string
    sql: ${TABLE}.UPD_USR_ID ;;
  }

  dimension: vvd_nm {
    label: "Service (VVD) Route"
    type: string
    sql: ${TABLE}.VVD_NM ;;
  }

  measure: count {
    type: count
    drill_fields: []
  }
}

#added for service cloud 2.O KPI dashboards

view: of_escalation_history {
  sql_table_name: `ONEFORCE.OF_ESCALATION_HISTORY`
    ;;

  #label : "Escalation History"
  #derived_table: {
  #  sql: SELECT Case_ID,role,
  #  Age_at_which_Case_Escalated,Description,Escalation_Status,Escalation_Type,Name,Reason from (
  #  SELECT e.`Case` as Case_ID,e.Role,
  #  e.Age_at_which_Case_Escalated, e.Description, e.Escalation_Status, e.Escalation_Type, e.Name, e.Reason,
  #  rank() over (partition by e.`Case` order by e.CreatedDate desc) as e_rank
  #  FROM `one-global-dde-insights-uat.ONEFORCE.OF_ESCALATION_HISTORY` e
  # ) EH where e_rank=1
  #  ;;
  #}

  dimension: oneforce_id {
    label: "Oneforce ID"
    type: string
    primary_key: yes
    sql: ${TABLE}.ONEForce_ID ;;
    hidden: yes
  }

  dimension: case_id {
    hidden: yes
    #primary_key: yes
    label: "Case"
    type: string
    sql: ${TABLE}.`Case` ;;
  }

  dimension: role {
    label: "Role"
    type: string
    sql: (CASE WHEN ${TABLE}.Role = "Service Key Account Support (S-KAS)" THEN "S-KAS"
        WHEN ${TABLE}.Role = "Service Key Account Manager (S-KAM)" THEN "S-KAM"
        WHEN ${TABLE}.Role = "Contract Key Account Support (C-KAS)" THEN "C-KAS"
        WHEN ${TABLE}.Role = "Contract Key Account Manager (C-KAM)" THEN "C-KAM"
        WHEN ${TABLE}.Role IS NULL and ${of_case.total_escalation} >0 and ${of_queue.developer_name} LIKE '%ONECare%' THEN "ONECare Queue"
        WHEN ${TABLE}.Role IS NULL and ${of_case.total_escalation} >0 THEN "No KA Mapping"
        ELSE "Others" END);;
  }

  dimension: age_at_which_case_escalated {
    label: "Age at which Case Escalated"
    type: number
    sql: ${TABLE}.Age_at_which_Case_Escalated ;;
  }
  dimension: description {
    label: "Description"
    type: string
    sql: ${TABLE}.Description ;;
  }
  dimension: escalation_status {
    label: "Escalation Status"
    type: string
    sql: ${TABLE}.Escalation_Status ;;
  }
  dimension: escalation_type {
    label: "Escalation Type"
    type: string
    sql: ${TABLE}.Escalation_Type ;;
  }
  dimension: name {
    label: "EH Name"
    type: string
    sql: ${TABLE}.Name ;;
  }
  dimension: reason {
    label: "Reason"
    type: string
    sql: ${TABLE}.Reason ;;
  }

  dimension: escalated_by {
    label: "Escalated By"
    type: string
    sql: ${TABLE}.Escalated_By ;;
  }

  dimension: escalated_to {
    label: "Escalated To User"
    type: string
    sql: ${TABLE}.Escalated_To ;;
  }

  dimension: escalated_to_group {
    label: "Escalated To Group"
    type: string
    sql: ${TABLE}.Escalated_To_Group ;;
    hidden: yes
  }
  dimension: escalated_to_queue {
    label: "Escalated To Queue"
    type: string
    sql: ${TABLE}.Escalated_To_Queue ;;
  }

  dimension_group: escalation_open_date_time {
    label: "Escalation Open Date/Time"
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: timestamp(${TABLE}.Escalation_Open_Date_Time) ;;
  }

  dimension_group: escalation_closed_date_time {
    label: "Escalation Closed Date/Time"
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: timestamp(${TABLE}.Escalation_Closed_Date_Time) ;;
  }

  dimension: total_age_of_escalation {
    label: "Total Age of Escalation"
    type: number
    sql: ${TABLE}.Total_Age_of_Escalation ;;
  }

  dimension: created_by {
    label: "Created By"
    type: string
    sql: ${TABLE}.CreatedById ;;
    hidden: yes
  }

  dimension: last_modified_by_id {
    label: "Last Modified By"
    type: string
    sql: ${TABLE}.LastModifiedById ;;
    hidden: yes
  }


  dimension: escalated_to_display {
    label: "Escalated To"
    type: string
    sql: ${TABLE}.Escalated_To_Display ;;
  }

  dimension: escalated_to_queue_id {
    label: "Escalated To Queue"
    type: string
    sql: ${TABLE}.Escalated_To_Queue_Id ;;
    hidden: yes
  }

  dimension: sstm {
    label: "SSTM"
    type: string
    sql: ${TABLE}.SSTM ;;
    hidden: yes
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CreatedDate ;;
    hidden: yes
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
    hidden: yes
  }

  dimension: is_dummy {
    type: string
    sql: ${TABLE}.IsDummy ;;
    hidden: yes
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
    hidden: yes
  }

  dimension_group: system_modstamp {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SystemModstamp ;;
    hidden: yes
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  set: detail {
    fields: [
      name,
      role,
      reason,
      escalation_type,
      escalation_status,
      escalation_open_date_time_date,
      escalation_closed_date_time_date
    ]
  }
}
#added for service cloud 2.O KPI dashboards

#PDT POC
view: of_escalation_history_pdt {
  sql_table_name: `ONEFORCE.OF_ESCALATION_HISTORY`
    ;;

  #label : "Escalation History"
  #derived_table: {
  #  sql: SELECT Case_ID,role,
  #  Age_at_which_Case_Escalated,Description,Escalation_Status,Escalation_Type,Name,Reason from (
  #  SELECT e.`Case` as Case_ID,e.Role,
  #  e.Age_at_which_Case_Escalated, e.Description, e.Escalation_Status, e.Escalation_Type, e.Name, e.Reason,
  #  rank() over (partition by e.`Case` order by e.CreatedDate desc) as e_rank
  #  FROM `one-global-dde-insights-uat.ONEFORCE.OF_ESCALATION_HISTORY` e
  # ) EH where e_rank=1
  #  ;;
  #}

  dimension: oneforce_id {
    label: "Oneforce ID"
    type: string
    primary_key: yes
    sql: ${TABLE}.ONEForce_ID ;;
    hidden: yes
  }

  dimension: case_id {
    hidden: yes
    #primary_key: yes
    label: "Case"
    type: string
    sql: ${TABLE}.`Case` ;;
  }

  dimension: role {
    label: "Role"
    type: string
    sql: (CASE WHEN ${TABLE}.Role = "Service Key Account Support (S-KAS)" THEN "S-KAS"
        WHEN ${TABLE}.Role = "Service Key Account Manager (S-KAM)" THEN "S-KAM"
        WHEN ${TABLE}.Role = "Contract Key Account Support (C-KAS)" THEN "C-KAS"
        WHEN ${TABLE}.Role = "Contract Key Account Manager (C-KAM)" THEN "C-KAM"
        WHEN ${TABLE}.Role IS NULL and ${of_case_pdt.total_escalation} >0 and ${of_queue.developer_name} LIKE '%ONECare%' THEN "ONECare Queue"
        WHEN ${TABLE}.Role IS NULL and ${of_case_pdt.total_escalation} >0 THEN "No KA Mapping"
        ELSE "Others" END);;
  }

  dimension: age_at_which_case_escalated {
    label: "Age at which Case Escalated"
    type: number
    sql: ${TABLE}.Age_at_which_Case_Escalated ;;
  }
  dimension: description {
    label: "Description"
    type: string
    sql: ${TABLE}.Description ;;
  }
  dimension: escalation_status {
    label: "Escalation Status"
    type: string
    sql: ${TABLE}.Escalation_Status ;;
  }
  dimension: escalation_type {
    label: "Escalation Type"
    type: string
    sql: ${TABLE}.Escalation_Type ;;
  }
  dimension: name {
    label: "EH Name"
    type: string
    sql: ${TABLE}.Name ;;
  }
  dimension: reason {
    label: "Reason"
    type: string
    sql: ${TABLE}.Reason ;;
  }

  dimension: escalated_by {
    label: "Escalated By"
    type: string
    sql: ${TABLE}.Escalated_By ;;
  }

  dimension: escalated_to {
    label: "Escalated To User"
    type: string
    sql: ${TABLE}.Escalated_To ;;
  }

  dimension: escalated_to_group {
    label: "Escalated To Group"
    type: string
    sql: ${TABLE}.Escalated_To_Group ;;
    hidden: yes
  }
  dimension: escalated_to_queue {
    label: "Escalated To Queue"
    type: string
    sql: ${TABLE}.Escalated_To_Queue ;;
  }

  dimension_group: escalation_open_date_time {
    label: "Escalation Open Date/Time"
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: timestamp(${TABLE}.Escalation_Open_Date_Time) ;;
  }

  dimension_group: escalation_closed_date_time {
    label: "Escalation Closed Date/Time"
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: timestamp(${TABLE}.Escalation_Closed_Date_Time) ;;
  }

  dimension: total_age_of_escalation {
    label: "Total Age of Escalation"
    type: number
    sql: ${TABLE}.Total_Age_of_Escalation ;;
  }

  dimension: created_by {
    label: "Created By"
    type: string
    sql: ${TABLE}.CreatedById ;;
    hidden: yes
  }

  dimension: last_modified_by_id {
    label: "Last Modified By"
    type: string
    sql: ${TABLE}.LastModifiedById ;;
    hidden: yes
  }


  dimension: escalated_to_display {
    label: "Escalated To"
    type: string
    sql: ${TABLE}.Escalated_To_Display ;;
  }

  dimension: escalated_to_queue_id {
    label: "Escalated To Queue"
    type: string
    sql: ${TABLE}.Escalated_To_Queue_Id ;;
    hidden: yes
  }

  dimension: sstm {
    label: "SSTM"
    type: string
    sql: ${TABLE}.SSTM ;;
    hidden: yes
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CreatedDate ;;
    hidden: yes
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
    hidden: yes
  }

  dimension: is_dummy {
    type: string
    sql: ${TABLE}.IsDummy ;;
    hidden: yes
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
    hidden: yes
  }

  dimension_group: system_modstamp {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.SystemModstamp ;;
    hidden: yes
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  set: detail {
    fields: [
      name,
      role,
      reason,
      escalation_type,
      escalation_status,
      escalation_open_date_time_date,
      escalation_closed_date_time_date
    ]
  }
}

view: of_event {
  derived_table: {
    sql: select e.*, r.eventid
      from ONEFORCE.OF_EVENT e
      left join (select distinct eventid from ONEFORCE.OF_EVENT_RELATION where isparent = 'true') r on e.oneforce_id = r.eventid ;;
  }

  parameter: Sales_Actv_Partpn {
    label: "Sales Activity Participation"
    type: unquoted
    allowed_value: {
      label: "Organizer"
      value: "Creator"
    }
    allowed_value: {
      label: "Attendee"
      value: "Assignee"
    }
    allowed_value: {
      label: "Either Organizer or Attendee"
      value: "Either"
    }
    allowed_value: {
      label: "Identical Organizer and Attendee"
      value: "Parent"
    }
    default_value: "Creator"
  }

  dimension: city {
    type: string
    sql: ${TABLE}.City ;;
  }

  dimension: participant {
    description: "Event Creator and Assignee"
    type: string
    sql: concat(${created_by_id},",",${owner_id}) ;;
  }

  dimension: eventid {
    description: "Relation Event ID"
    type: string
    sql: ${TABLE}.eventid ;;
  }

  dimension: is_parent_event{
    type: yesno
    sql: coalesce(eventid,'xxx') <> 'xxx';;
  }

  dimension: Completed_On{
    type: date_raw
    hidden: yes
    sql: CASE WHEN ${TABLE}.Completed_On IS NULL THEN current_date() else ${TABLE}.Completed_On end;;
  }

  dimension: regional_head_office_short_nm{
    type: string
    sql: ${TABLE}.regional_head_office_short_nm;;
  }

  dimension_group: completed {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: date
    sql: CASE WHEN ${TABLE}.Completed_On IS NULL THEN current_date() else ${TABLE}.Completed_On end;;
  }

  dimension: country {
    type: string
    map_layer_name: countries
    sql: ${TABLE}.Country ;;
  }

  dimension: Note_Count {
    type: string
    sql: ${TABLE}.Note_Count ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: TIMESTAMP(${TABLE}.CreatedDate) ;;
  }

  dimension: duration_in_minutes {
    type: number
    sql: ${TABLE}.DurationInMinutes ;;
  }

  dimension_group: edw_upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EDW_UPD_DT ;;
  }

  dimension_group: end_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EndDateTime ;;
  }

  dimension: event_created_from_activity {
    type: string
    sql: ${TABLE}.Event_Created_From_Activity ;;
  }

  dimension: event_priority {
    type: string
    sql: ${TABLE}.Event_Priority ;;
  }

  dimension: event_status {
    type: string
    sql: ${TABLE}.Event_Status ;;
  }

  dimension: event_subtype {
    type: string
    sql: ${TABLE}.EventSubtype ;;
  }

  dimension: is_all_day_event {
    type: string
    sql: ${TABLE}.IsAllDayEvent ;;
  }

  dimension: is_recurrence2 {
    type: string
    sql: ${TABLE}.IsRecurrence2 ;;
  }

  dimension: is_reminder_set {
    type: string
    sql: ${TABLE}.IsReminderSet ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: location {
    type: string
    sql: ${TABLE}.Location ;;
  }

  dimension: oneforce_id {
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
    html:
    <p><a href="https://one-line.lightning.force.com/lightning/r/Event/{{ of_event.oneforce_id._value }}/view" target="_blank">{{rendered_value}}</a></p>
    ;;
  }


  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension: recurrence_activity_id {
    type: string
    sql: ${TABLE}.RecurrenceActivityId ;;
  }

  dimension: recurrence_day_of_month {
    type: number
    sql: ${TABLE}.RecurrenceDayOfMonth ;;
  }

  dimension: recurrence_day_of_week_mask {
    type: number
    sql: ${TABLE}.RecurrenceDayOfWeekMask ;;
  }

  dimension_group: recurrence_end_date_only {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.RecurrenceEndDateOnly ;;
  }

  dimension: recurrence_instance {
    type: string
    sql: ${TABLE}.RecurrenceInstance ;;
  }

  dimension: recurrence_interval {
    type: number
    sql: ${TABLE}.RecurrenceInterval ;;
  }

  dimension: recurrence_month_of_year {
    type: string
    sql: ${TABLE}.RecurrenceMonthOfYear ;;
  }

  dimension_group: recurrence_start_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.RecurrenceStartDateTime ;;
  }

  dimension: recurrence_time_zone_sid_key {
    type: string
    sql: ${TABLE}.RecurrenceTimeZoneSidKey ;;
  }

  dimension: recurrence_type {
    type: string
    sql: ${TABLE}.RecurrenceType ;;
  }

  dimension_group: reminder_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ReminderDateTime ;;
  }

  dimension: startDateTime {
    type: date_raw
    hidden: no
    sql: date_trunc(${TABLE}.startDateTime,day) ;;
  }

  dimension: EndDateTime {
    type: date_raw
    hidden: no
    sql: date_trunc(${TABLE}.EndDateTime,day) ;;
  }

  dimension_group: start_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: TIMESTAMP(${TABLE}.StartDateTime) ;;
  }

  dimension: subject {
    type: string
    sql: ${TABLE}.Subject ;;
    html:
        <p><a href="https://one-line.lightning.force.com/lightning/r/Event/{{ of_event.oneforce_id._value }}/view" target="_blank">{{rendered_value}}</a></p>
    ;;
  }

  dimension: what_id {
    type: string
    sql: ${TABLE}.WhatId ;;
  }

  dimension: who_id {
    type: string
    sql: ${TABLE}.WhoId ;;
  }

  dimension: zip_postal_code {
    type: string
    sql: ${TABLE}.Zip_Postal_Code ;;
  }

  dimension: event_category {
    type: string
    sql: ${TABLE}.event_category ;;
  }


########################################################################################################
### Created Dimensions #############################
########################################################################################################
  dimension: FiscalYear {
    type: string
    label: "Fiscal Year"
    description: "Based on Event Create Date"
    sql: ${of_sales_week_master.fiscal_year} ;;
  }

  dimension: Grouped_status{
    label: "Grouped Event Status"
    type: string
    sql: case when ${event_status} in ("Open","Not Started", "Scheduled") then "Open Events"

                    when ${event_status} = "Completed" then "Completed Events"
                    else "Cancelled Events" end;;
  }

  dimension: is_scheduled_event {
    type: yesno
    sql:  ${event_status} = "Scheduled";;
  }

  dimension: EventDuration {
    label: "Event Duration Grouped"
    type: string
    #<HW>
    #sql: case when ${Completed_On} <> current_date() and ${event_status} = "Open" then "Error"
    #          when date_diff(date ${Completed_On},date ${created_date},day) between 0 and 7 then "Within 7 days"
    #          when date_diff(date ${Completed_On},date ${created_date},day) > 7 then "Exceeds 7 days"
    #          else "Error" end;;
    #   sql:  case when ${Completed_On} <> current_date() and ${event_status} = "Open" then "Error"
    # when date_diff(date ${Completed_On},date ${startDateTime},day) between 0 and 7 then "Within 7 days"
    # when date_diff(date ${Completed_On},date ${startDateTime},day) > 7 then "Exceeds 7 days"
    # when date_diff(date ${Completed_On},date ${startDateTime},day) < 0 then "Future"
    # else "Error" end;;

    sql:
    case when abs(date_diff(date ${Completed_On},date ${startDateTime},day)) between 0 and 7 then "Within 7 days"
    when abs(date_diff(date ${Completed_On},date ${startDateTime},day)) > 7 then "Exceeds 7 days"
    else "Others" end;;

    # </HW>
  }

  dimension: EventGrpStsDur {
    label: "Event Group Status & Duration"
    type: string
    sql:  concat(replace(${Grouped_status}," Events","")," - ", ${EventDuration}) ;;
  }


  dimension: EventDurationDays {
    label: "Event Duration (Qty days)"
    type: number
    sql: date_diff(date ${Completed_On},date ${start_date_time},day);;
  }

  dimension: Note_Validation {
    type: string
    sql: case when ${Note_Count} > 0 then "With Note"
      else "Without Note" end;;
  }

########################################################################################################
### End Created Dimensions #############################
########################################################################################################

  dimension: is_parent {
    type: yesno
    sql: ${created_by_id} = ${owner_id} ;;
  }

  dimension: should_count {
    type: yesno
    # sql: ( "{% parameter Sales_Actv_Partpn %}" = "Creator" and ${created_by_id} = ${owner_id})
    #      or
    #      ( "{% parameter Sales_Actv_Partpn %}" = "Assignee" and ${created_by_id} <> ${owner_id})
    #      or
    #      ( "{% parameter Sales_Actv_Partpn %}" = "Both") ;;
    sql: ( "{% parameter Sales_Actv_Partpn %}" = "Parent" and ${created_by_id} = ${owner_id})
         or
         ( "{% parameter Sales_Actv_Partpn %}" <> "Parent" ) ;;
  }

  measure: createdby_count {
    type: count_distinct
    sql: ${created_by_id} ;;
    #filters: [is_salesuser: "yes"]
  }
  measure: with_notes_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [Note_Validation: "With Note", is_parent: "yes", Grouped_status: "Open Events, Completed Events"]
    filters: [Note_Validation: "With Note", should_count: "yes", Grouped_status: "Open Events, Completed Events"]
    html:  {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %} {{ rendered_value }} ({{ with_notes_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
          {% endif %};;
  }


  measure: without_notes_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [Note_Validation: "Without Note", is_parent: "yes", Grouped_status: "Open Events, Completed Events"]
    filters: [Note_Validation: "Without Note", should_count: "yes", Grouped_status: "Open Events, Completed Events"]
    html: {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %} {{ rendered_value }} ({{ without_notes_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
          {% endif %};;
  }

  measure: with_notes_percent {
    type:  number
    sql:  ${with_notes_count}/CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END *100;;
    value_format: "0.0\%"
  }

  measure: without_notes_percent {
    type:  number
    sql:  ${without_notes_count}/CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END *100;;
    value_format: "0.0\%"
  }

  filter: event_start_date_filter {
    type: date
    sql:  ${start_date_date} >= date({% date_start event_start_date_filter %}) AND
      ${start_date_date} < date({% date_end event_start_date_filter %});;
  }

  measure: event_month_count {
    type: count_distinct
    sql: CASE
         WHEN {% parameter event_timeframe_picker %} = 'Week'  THEN cast(${start_date_week}  as string)
         WHEN {% parameter event_timeframe_picker %} = 'Month' THEN cast(${start_date_month} as string)
         WHEN {% parameter event_timeframe_picker %} = 'Year'  THEN cast(${start_date_year}  as string)
         ELSE NULL
         END ;;
  }

  parameter: event_timeframe_picker {
    label: "Event Start Date Granularity"
    type: string
    allowed_value: { value: "Week" }
    allowed_value: { value: "Month" }
    allowed_value: { value: "Year" }
    suggest_persist_for: "24 hour"
  }

  #add by Helen for Sales Event Monitor #
  dimension: event_timeframe_dynamic {
    label: "{% parameter event_timeframe_picker %}"
    type: string
    sql:
       CASE
         WHEN {% parameter event_timeframe_picker %} = 'Week'  THEN cast(${start_date_week} as string)
         WHEN {% parameter event_timeframe_picker %} = 'Month' THEN cast(${start_date_month} as string)
         WHEN {% parameter event_timeframe_picker %} = 'Year'  THEN cast(${start_date_year} as string)
                 ELSE NULL
       END ;;
    suggest_persist_for: "24 hour"
  }

  dimension:  event_timeframe_filter_value {
    label: "Event timeframe filter value"
    type: string
    sql:
       CASE
         WHEN {% parameter event_timeframe_picker %} = 'Week'  THEN "Week"
         WHEN {% parameter event_timeframe_picker %} = 'Month' THEN "Month"
         WHEN {% parameter event_timeframe_picker %} = 'Year'  THEN "Year"
                 ELSE NULL
       END ;;

  }


  dimension_group: Completed_On_Dttm {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: TIMESTAMP(${TABLE}.Completed_On) ;;
  }


  set: detail {
    fields: [
      of_sales_week_master.sales_week,
      oneforce_id,
      created_date,
      start_date_date,
      Completed_On_Dttm_date,
      event_status,
      of_user.full_name,
      of_user.office_code,
      v_customer_opus_n_prospect.cust_cd,
      v_customer_opus_n_prospect.name,
      subject,
      Note_Validation,
      event_category
    ]
  }


  dimension: Task_Tab_Link {
    type: string
    sql:  CONCAT(1,2);;
    html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
        <nav style="font-size: 18px;">
        <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed; " href="https://oneline.cloud.looker.com/embed/dashboards-next/464?Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Calendar%20Year={{ _filters['event_of_calendar.calendar_year'] | url_encode }}&Calendar%20Month={{ _filters['event_of_calendar.calendar_year_month'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20User%20Region={{ _filters['of_user.regional_head_office_short_nm'] | url_encode }}&Sales%20User%20Country={{ _filters['of_user.office_Country_Code'] | url_encode }}&Sales%20User%20Office={{ _filters['of_user.office_code_number'] | url_encode }}&Sales%20User={{ _filters['of_user.full_name'] | url_encode }}&Sales%20Manager={{ _filters['of_user_manager.full_name'] | url_encode }}&US%20Sub-Region%20(Yes/No)={{ _filters['of_user.US_Spcl_Grouping'] | url_encode }}&Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Status={{ _filters['of_event.EventGrpStsDur'] | url_encode }}&Event%20Start%20Date={{ _filters['of_event.start_date_date'] | url_encode }}" target="_blank"> Event </a>
        <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/490?&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Calendar%20Year={{ _filters['event_of_calendar.calendar_year'] | url_encode }}&Calendar%20Month={{ _filters['event_of_calendar.calendar_year_month'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20User%20Region={{ _filters['of_user.regional_head_office_short_nm'] | url_encode }}&Sales%20User%20Country={{ _filters['of_user.office_Country_Code'] | url_encode }}&Sales%20User%20Office={{ _filters['of_user.office_code_number'] | url_encode }}&Sales20User={{ _filters['of_user.full_name'] | url_encode }}&Sales%20Manager={{ _filters['of_user_manager.full_name'] | url_encode }}&US%20Sub-Region%20(Yes/No)={{ _filters['of_user.US_Spcl_Grouping'] | url_encode }}&Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Status={{ _filters['of_event.EventGrpStsDur'] | url_encode }}&Task%20Create%20Date={{ _filters['of_event.start_date_date'] | url_encode }}" target="_blank"> Task </a>
        <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/512?&Fiscal%20Year={{ _filters['of_sales_week_master.fiscal_year'] | url_encode }}&Calendar%20Year={{ _filters['event_of_calendar.calendar_year'] | url_encode }}&Calendar%20Month={{ _filters['event_of_calendar.calendar_year_month'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master.sales_week'] | url_encode }}&Sales%20User%20Region={{ _filters['of_user.regional_head_office_short_nm'] | url_encode }}&Sales%20User%20Country={{ _filters['of_user.office_Country_Code'] | url_encode }}&Sales%20User%20Office={{ _filters['of_user.office_code_number'] | url_encode }}&Sales%20User={{ _filters['of_user.full_name'] | url_encode }}&Sales%20Manager={{ _filters['of_user_manager.full_name'] | url_encode }}&US%20Sub-Region%20(Yes/No)={{ _filters['of_user.US_Spcl_Grouping'] | url_encode }}&Customer={{ _filters['v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Call%20Create%20Date={{ _filters['of_event.start_date_date'] | url_encode }}" target="_blank"> Log a Call </a>
      </nav>
       </div>
   ;;
  }

  filter: is_trendline_table {
    type: string
    default_value: "No"
  }

  measure: completed_exd7_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Completed Events", EventDuration: "Exceeds 7 days"]
    filters: [should_count: "yes", Grouped_status: "Completed Events", EventDuration: "Exceeds 7 days"]
    html:  {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
           {% if word[0] == "Yes" %}  {{ rendered_value }}
           {% else %} {{ rendered_value }} ({{ completed_exd7_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
           {% endif %};;
  }
  measure: completed_win7_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Completed Events", EventDuration: "Within 7 days"]
    filters: [should_count: "yes", Grouped_status: "Completed Events", EventDuration: "Within 7 days"]
    html: {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %}  {{ rendered_value }} ({{ completed_win7_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
          {% endif %};;
  }
  measure: completed_oth_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Completed Events", EventDuration: "-Within 7 days, -Exceeds 7 days"]
    filters: [should_count: "yes", Grouped_status: "Completed Events", EventDuration: "-Within 7 days, -Exceeds 7 days"]
    html: {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %}  {{ rendered_value }} ({{ completed_oth_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
          {% endif %};;
  }
  measure: open_exd7_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Events", EventDuration: "Exceeds 7 days"]
    filters: [should_count: "yes", Grouped_status: "Open Events", EventDuration: "Exceeds 7 days"]
    html: {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %} {{ rendered_value }} ({{ open_exd7_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
          {% endif %};;
  }
  measure: open_win7_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Events", EventDuration: "Within 7 days"]
    filters: [should_count: "yes", Grouped_status: "Open Events", EventDuration: "Within 7 days"]
    html:  {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
           {% if word[0] == "Yes" %}  {{ rendered_value }}
           {% else %} {{ rendered_value }} ({{ open_win7_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
           {% endif %};;
  }

  measure: open_oth_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Events", EventDuration: "-Within 7 days, -Exceeds 7 days"]
    filters: [should_count: "yes", Grouped_status: "Open Events", EventDuration: "-Within 7 days, -Exceeds 7 days"]
    html: {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %} {{ rendered_value }} ({{ open_oth_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
          {% endif %};;
  }

  measure: total_open_completed {
    description: "include open,scheduled and completed"
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Events, Completed Events"]
    filters: [should_count: "yes", Grouped_status: "Open Events, Completed Events"]

  }
  measure: total_completed {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Completed Events"]
    filters: [should_count: "yes", Grouped_status: "Completed Events"]
  }
  measure: total_open {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Events"]
    filters: [should_count: "yes", Grouped_status: "Open Events"]
  }
  measure: total_completed_participation {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    filters: [Grouped_status: "Completed Events"]
  }
  measure: total_open_participation {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    filters: [Grouped_status: "Open Events"]
  }
  measure: total_created {
    description: "include open,scheduled, cancelled and completed"
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Events, Completed Events, Cancelled Events"]
    filters: [should_count: "yes", Grouped_status: "Open Events, Completed Events, Cancelled Events"]

  }
  measure: completed_exd7_percent {
    type:  number
    sql:  ${completed_exd7_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: completed_win7_percent {
    type:  number
    sql:  ${completed_win7_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: completed_oth_percent {
    type:  number
    sql:  ${completed_oth_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: open_exd7_percent {
    type:  number
    sql:  ${open_exd7_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: open_win7_percent {
    type:  number
    sql:  ${open_win7_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: open_oth_percent {
    type:  number
    sql:  ${open_oth_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: count {
    type: count
    drill_fields: []
  }

  # Sales Process Landing Page ----- Start -------
  measure: with_notes_count1 {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    filters: [Note_Validation: "With Note", is_parent: "yes", Grouped_status: "Open Events, Completed Events"]
    html:  {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %} {{ rendered_value }} ({{ with_notes_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
          {% endif %};;
  }


  measure: without_notes_count1 {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    filters: [Note_Validation: "Without Note", is_parent: "yes", Grouped_status: "Open Events, Completed Events"]
    html: {% assign word = _filters['of_event.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %} {{ rendered_value }} ({{ without_notes_percent._rendered_value }}) of {{ total_open_completed._rendered_value }} total creation
          {% endif %};;
  }
# Sales Process Landing Page ----- End -------

}

view: of_event_relation {
  sql_table_name: `ONEFORCE.OF_EVENT_RELATION`
    ;;

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension_group: edw_upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EDW_UPD_DT ;;
  }

  dimension: event_id {
    type: string
    sql: ${TABLE}.EventId ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: is_invitee {
    type: string
    sql: ${TABLE}.IsInvitee ;;
  }

  dimension: is_parent {
    type: string
    sql: ${TABLE}.IsParent ;;
  }

  dimension: is_what {
    type: string
    sql: ${TABLE}.IsWhat ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: relation_id {
    type: string
    sql: ${TABLE}.RelationId ;;
  }

  dimension: status {
    type: string
    sql: ${TABLE}.Status ;;
  }

  measure: count {
    type: count
    drill_fields: []
  }
}

view: of_intent {
  sql_table_name: `ONEFORCE.OF_INTENT`
    ;;

  dimension: business_hours {
    type: string
    sql: ${TABLE}.Business_Hours ;;
  }

  dimension: bypass_email_address {
    type: string
    sql: ${TABLE}.Bypass_Email_Address ;;
  }

  dimension: bypass_to_email {
    type: string
    sql: ${TABLE}.Bypass_to_Email ;;
  }

  dimension: case_priority {
    type: string
    sql: ${TABLE}.Case_Priority ;;
  }

  dimension: country {
    type: string
    map_layer_name: countries
    sql: ${TABLE}.Country ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: display_name {
    type: string
    sql: ${TABLE}.Display_Name ;;
  }

  dimension: enable_transfer {
    type: string
    sql: ${TABLE}.Enable_Transfer ;;
  }

  dimension: from_address {
    type: string
    sql: ${TABLE}.From_Address ;;
  }

  dimension: intent_code {
    type: string
    sql: ${TABLE}.Intent_Code ;;
  }

  dimension: is_active {
    type: string
    sql: ${TABLE}.IsActive ;;
  }

  dimension: is_authentication_required {
    type: string
    sql: ${TABLE}.Is_Authentication_Required ;;
  }

  dimension: is_available_of_chat {
    type: string
    sql: ${TABLE}.Is_Available_of_Chat ;;
  }

  dimension: is_booking_contract_number_required {
    type: string
    sql: ${TABLE}.Is_Booking_Contract_Number_Required ;;
  }

  dimension: is_dd_transfer_directly {
    type: string
    sql: ${TABLE}.Is_DD_transfer_directly ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: is_digital_deflection {
    type: string
    sql: ${TABLE}.Is_Digital_Deflection ;;
  }

  dimension: is_node {
    type: string
    sql: ${TABLE}.IsNode ;;
  }

  dimension: is_self_service {
    type: string
    sql: ${TABLE}.Is_Self_Service ;;
  }

  dimension: is_selfservice_directly_leave_message {
    type: string
    sql: ${TABLE}.Is_Selfservice_Directly_Leave_Message ;;
  }

  dimension: is_user_id_login_validation {
    type: string
    sql: ${TABLE}.Is_User_Id_Login_Validation ;;
  }

  dimension: key_without_office_code {
    type: string
    sql: ${TABLE}.Key_Without_Office_Code ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: level {
    type: string
    sql: ${TABLE}.Level ;;
  }

  dimension: level_of_authentication_required {
    type: string
    sql: ${TABLE}.Level_of_Authentication_Required ;;
  }

  dimension: lfm_welcome_message {
    type: string
    sql: ${TABLE}.LFM_Welcome_Message ;;
  }

  dimension: lfm_welcome_message_translation {
    type: string
    sql: ${TABLE}.LFM_Welcome_Message_Translation ;;
  }

  dimension: link_to_self_service {
    type: string
    sql: ${TABLE}.Link_to_Self_Service ;;
  }

  dimension: link_to_self_service_html {
    type: string
    sql: ${TABLE}.Link_to_Self_Service_Html ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: office {
    type: string
    sql: ${TABLE}.Office ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: oq_service_type {
    type: string
    sql: ${TABLE}.OQ_Service_Type ;;
  }

  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension: parent_intent {
    type: string
    sql: ${TABLE}.Parent_Intent ;;
  }

  dimension: queue_name {
    type: string
    sql: ${TABLE}.Queue_Name ;;
  }

  dimension: queue_name_web {
    type: string
    sql: ${TABLE}.Queue_Name_Web ;;
  }

  dimension: self_service_type {
    type: string
    sql: ${TABLE}.Self_Service_Type ;;
  }

  dimension: self_service_welcome_message {
    type: string
    sql: ${TABLE}.Self_Service_Welcome_Message ;;
  }

  dimension: self_service_welcome_message_tranlsation {
    type: string
    sql: ${TABLE}.Self_Service_Welcome_Message_Tranlsation ;;
  }

  dimension_group: system_modstamp {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.SystemModstamp ;;
  }

  dimension: trade_lane {
    type: string
    sql: ${TABLE}.Trade_Lane ;;
  }

  dimension: unique_key {
    type: string
    sql: ${TABLE}.Unique_Key ;;
  }

  measure: count {
    type: count
    drill_fields: [name, display_name, queue_name]
  }
}

view: of_lkr_db {
  sql_table_name: ONEFORCE.OF_LKR_DB
    ;;
  drill_fields: [id]

  dimension: id {
    primary_key: yes
    type: number
    sql: ${TABLE}.ID ;;
  }

  dimension: category {
    type: string
    sql: ${TABLE}.CATEGORY ;;
    label: "Dashboard Statistics"
  }

  dimension: of_console {
    type: string
    sql: ${TABLE}.OF_CONSOLE ;;
    label: "Sales or Service Dashboard"
  }

  dimension: record_id {
    type: string
    sql: ${TABLE}.Record_Id ;;
  }

  measure: count {
    type: count
    drill_fields: [id]
  }
}

view: of_lkr_dbpfmc_1 {
  #sql_table_name: ONEFORCE.OF_LKR_DBPFMC;;
  derived_table: {
    sql: select e.*, r.of_console, u.oneforce_id,
                split(replace(e.email,'@','.'),'.') [safe_offset(0)]  as lastname,
                split(replace(e.email,'@','.'),'.') [safe_offset(1)]  as firstname
          from ONEFORCE.OF_LKR_DBPFMC e
          inner join ONEFORCE.OF_LKR_DB r on e.id_user_defined_only = r.id
          left join ${of_user_email.SQL_TABLE_NAME} u on rtrim(lower(u.email)) = trim(rtrim(lower(e.email),'.zz')) ;;
  }

  filter: of_console_filter {
    type: string
    label: "Looker Console Filter"
    suggestions: ["Sales", "Service"]
    default_value: "Sales"
    sql: (  ${of_console} = 'Both' OR ({% condition of_console_filter %} ${of_console} {% endcondition %}) );;
  }

  filter: license_filter {
    type: string
    label: "License"
    suggestions: ["User with ONEForce License", "User without ONEForce License"]
    sql: ({% condition license_filter %} ${Has_License} {% endcondition %} );;
  }

  dimension: dashboard_run_count {
    type: number
    sql: ${TABLE}.Dashboard_Run_Count ;;
    label: : "Dashboard Run"
  }

  dimension: of_user_oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
    label: "OF User ID"
  }

  dimension: of_console {
    type: string
    sql: ${TABLE}.of_console ;;
    label: "OF Console"
    hidden: yes
  }

  dimension: email {
    type: string
    sql: ${TABLE}.Email ;;
    label: "Email"
  }

  dimension: email_first_name {
    type: string
    sql: ${TABLE}.firstname ;;
    label: "First Name"
  }

  dimension: email_last_name {
    type: string
    sql: ${TABLE}.lastname ;;
    label: "Last Name"
  }

  dimension: email_full_name {
    type: string
    sql: concat(Initcap(${TABLE}.lastname), " ", Initcap(${TABLE}.firstname)) ;;
    label: "User Name"
  }

  dimension_group: first_event_at {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.First_Event_At_Time ;;
    label: "First Event Time"
  }


  dimension: id_user_defined_only {
    type: number
    sql: ${TABLE}.ID_User_Defined_Only ;;
    label: "ID User Defined"
  }

  dimension: title {
    type: string
    sql: ${TABLE}.Title ;;
    drill_fields: [drillfields*]
    label: "Dashboard"
  }

  dimension: Has_License {
    type: string
    label: "User has OF License"
    sql: CASE WHEN ${of_user_oneforce_id} is NOT NULL THEN "User with ONEForce License" ELSE "User without ONEForce License" END ;;
    hidden: yes
  }

  measure: email_distinct_count {
    type: count_distinct
    sql: ${email}  ;;
    label: "Distinct User Count"
    drill_fields: [user_detail*]
  }


  measure: email_distinct_count_drill {
    type: count_distinct
    sql: ${email}  ;;
    label: "Distinct User Count with drill"
    drill_fields: [user_detail*]

    link: {
      label: "By profile"
      url: "{{ DUC_by_user_profile._link }}"
    }

    link: {
      label: "By user types"
      url: "{{ DUC_by_user_types._link }}"
    }

    link: {
      label: "By RHQ"
      url: "{{ DUC_by_RHQ._link }}"
    }

    link: {
      label: "By country"
      url: "{{ DUC_by_country._link }}"
    }

    link: {
      label: "By office"
      url: "{{ DUC_by_office_code._link }}"
    }

    link: {
      label: "By user role"
      url: "{{ DUC_by_user_role._link }}"
    }

    link: {
      label: "By office type"
      url: "{{ DUC_by_office_type._link }}"
    }

  }

  measure: DUC_by_user_profile {
    type: count
    drill_fields: [of_user.profile_name, email_distinct_count_drill]
    hidden: yes
  }

  measure: DUC_by_user_types {
    type: count
    drill_fields: [of_user.user_types,email_distinct_count_drill]
    hidden: yes
  }

  measure: DUC_by_RHQ {
    type: count
    drill_fields: [of_user.regional_head_office_5char,email_distinct_count_drill]
    hidden: yes
  }

  measure: DUC_by_country {
    type: count
    drill_fields: [of_user.country,email_distinct_count_drill]
    hidden: yes
  }

  measure: DUC_by_office_code {
    type: count
    drill_fields: [of_user.office_code_new,email_distinct_count_drill]
    hidden: yes
  }

  measure: DUC_by_user_role {
    type: count
    drill_fields: [of_user.user_role_name,email_distinct_count_drill]
    hidden: yes
  }

  measure: DUC_by_office_type {
    type: count
    drill_fields: [of_user.officetype,email_distinct_count_drill]
    hidden: yes
  }

  measure: Sum_dashboard_Run_Count {
    type: sum
    sql: ${TABLE}.Dashboard_Run_Count  ;;
    label: "Dashboard Run Count"
    drill_fields: [detail*]

    link: {
      label: "By profile"
      url: "{{ DRC_by_user_profile._link }}"
    }

    link: {
      label: "By user types"
      url: "{{ DRC_by_user_types._link }}"
    }

    link: {
      label: "By RHQ"
      url: "{{ DRC_by_RHQ._link }}"
    }

    link: {
      label: "By country"
      url: "{{ DRC_by_country._link }}"
    }

    link: {
      label: "By office"
      url: "{{ DRC_by_office_code._link }}"
    }

    link: {
      label: "By category"
      url: "{{ DRC_by_category._link }}"
    }

    link: {
      label: "By user role"
      url: "{{ DRC_by_user_role._link }}"
    }

    link: {
      label: "By office type"
      url: "{{ DRC_by_office_type._link }}"
    }

    link: {
      label: "By user"
      url: "{{ DRC_by_user_name._link }}"
    }
  }

  measure: DRC_by_user_profile {
    type: count
    drill_fields: [ of_user.profile_name,Sum_dashboard_Run_Count]
    hidden: yes
  }

  measure: DRC_by_user_types {
    type: count
    drill_fields: [ user_types,Sum_dashboard_Run_Count]
    hidden: yes
  }

  measure: DRC_by_RHQ {
    type: count
    drill_fields: [ of_user.regional_head_office_5char,Sum_dashboard_Run_Count]
    hidden: yes
  }

  measure: DRC_by_country {
    type: count
    drill_fields: [ of_user.country,Sum_dashboard_Run_Count]
    hidden: yes
  }

  measure: DRC_by_office_code {
    type: count
    drill_fields: [ of_user.office_code_new,Sum_dashboard_Run_Count]
    hidden: yes
  }

  measure: DRC_by_category {
    type: count
    drill_fields: [ of_lkr_db.category,Sum_dashboard_Run_Count]
    hidden: yes
  }

  measure: DRC_by_user_role {
    type: count
    drill_fields: [ of_user.user_role_name,Sum_dashboard_Run_Count]
    hidden: yes
  }

  measure: DRC_by_office_type {
    type: count
    drill_fields: [ of_user.officetype,Sum_dashboard_Run_Count]
    hidden: yes
  }

  measure: DRC_by_user_name {
    type: count
    drill_fields: [ email_full_name, email,Sum_dashboard_Run_Count]
    hidden: yes
  }

  dimension: dashboard_run_time_dynamic {
    type: date
    datatype: datetime
    label: "Dashboard Run Time Dynamic Adoption2"
    sql:
    CASE
    WHEN {% parameter timeframe_picker %} = 'Day' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),DAY)
    WHEN {% parameter timeframe_picker %} = 'Week' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'), WEEK(MONDAY))
    WHEN {% parameter timeframe_picker %} = 'Month' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),MONTH)
    WHEN {% parameter timeframe_picker %} = 'Quarter' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),QUARTER)
    WHEN {% parameter timeframe_picker %} = 'Year' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),YEAR)
    ELSE NULL
    END ;;
    drill_fields: [drillfields*]
    convert_tz: no
  }

  dimension: dashboard_run_time_dynamic2 {
    type: date
    datatype: datetime
    label: "Dashboard Run Time Dynamic Adoption"
    sql:
    CASE
    WHEN {% parameter timeframe_picker %} = 'Day' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),DAY)
    WHEN {% parameter timeframe_picker %} = 'Week' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),WEEK(MONDAY))
    WHEN {% parameter timeframe_picker %} = 'Month' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),MONTH)
    WHEN {% parameter timeframe_picker %} = 'Quarter' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),QUARTER)
    WHEN {% parameter timeframe_picker %} = 'Year' THEN DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),YEAR)
    ELSE DATETIME_TRUNC(DATETIME(${first_event_at_raw},'{{_query._query_timezone}}'),MONTH)
    END;;
    drill_fields: [drillfields*]
    convert_tz: no
  }

  parameter: timeframe_picker {
    label: "Date Granularity Adoption"
    type: string
    allowed_value: { value: "Day" }
    allowed_value: { value: "Week" }
    allowed_value: { value: "Month" }
    allowed_value: { value: "Quarter" }
    allowed_value: { value: "Year" }
    default_value: "Month"

  }

  set: user_detail {
    fields: [
      email_full_name,
      email,
      of_user.profile_name,
      of_user.user_role_name,
      user_types,
      of_user.regional_head_office_5char,
      of_user.country,
      of_country.country_name,
      of_user.office_code_new,
      of_user.officetype
    ]
  }


  set: detail {
    fields: [
      title,
      of_dashboard_group.category,
      first_event_at_date,
      email_full_name,
      email,
      of_user.profile_name,
      of_user.user_role_name,
      user_types,
      of_user.regional_head_office_5char,
      of_user.country,
      of_country.country_name,
      of_user.office_code_new,
      of_user.officetype
    ]
  }


  set: drillfields {
    fields: [
      email_full_name,
      email,
      of_dashboard_group.category,
      of_user.profile_name,
      of_user.user_role_name,
      user_types,
      of_user.regional_head_office_5char,
      of_user.country,
      of_user.office_code_new,
      of_user.officetype
    ]
  }

  measure: Dashboard_run_per_user {
    type:number
    sql: (${Sum_dashboard_Run_Count}/NULLIF(${email_distinct_count},0)) ;;
    label: "Dashboard Run Per User"
    value_format: "0.0"
    drill_fields: [detail*]


    link: {
      label: "By profile"
      url: "{{ DRU_by_user_profile._link }}"
    }

    link: {
      label: "By user types"
      url: "{{ DRU_by_user_types._link }}"
    }

    link: {
      label: "By RHQ"
      url: "{{ DRU_by_RHQ._link }}"
    }

    link: {
      label: "By country"
      url: "{{ DRU_by_country._link }}"
    }

    link: {
      label: "By office"
      url: "{{ DRU_by_office_code._link }}"
    }

    link: {
      label: "By category"
      url: "{{ DRU_by_category._link }}"
    }

    link: {
      label: "By user role"
      url: "{{ DRU_by_user_role._link }}"
    }

    link: {
      label: "By office type"
      url: "{{ DRU_by_office_type._link }}"
    }

    link: {
      label: "By user"
      url: "{{ DRU_by_user_name._link }}"
    }
  }

  measure: DRU_by_user_profile {
    type: count
    drill_fields: [ of_user.profile_name,Dashboard_run_per_user]
    hidden: yes
  }

  measure: DRU_by_user_types {
    type: count
    drill_fields: [ user_types,Dashboard_run_per_user]
    hidden: yes
  }

  measure: DRU_by_RHQ {
    type: count
    drill_fields: [ of_user.regional_head_office_5char,Dashboard_run_per_user]
    hidden: yes
  }

  measure: DRU_by_country {
    type: count
    drill_fields: [ of_user.country,Dashboard_run_per_user]
    hidden: yes
  }

  measure: DRU_by_office_code {
    type: count
    drill_fields: [ of_user.office_code_new,Dashboard_run_per_user]
    hidden: yes
  }

  measure: DRU_by_category {
    type: count
    drill_fields: [ of_lkr_db.category,Dashboard_run_per_user]
    hidden: yes
  }

  measure: DRU_by_user_role {
    type: count
    drill_fields: [ of_user.user_role_name,Dashboard_run_per_user]
    hidden: yes
  }

  measure: DRU_by_office_type {
    type: count
    drill_fields: [ of_user.officetype,Dashboard_run_per_user]
    hidden: yes
  }

  measure: DRU_by_user_name {
    type: count
    drill_fields: [ email_full_name, email,Dashboard_run_per_user]
    hidden: yes
  }

  dimension: user_types{
    label: "User Types"
    type: string
    drill_fields: [drillfields*]
    sql: CASE
          WHEN ${of_user.name} IN ('Venkatachalam Natarajan TPV','Martina Priya TPV','Ekta Vijan TPV','Vamshi Kayitha TPV',
                                   'Helen Wong','John Jabaraj','Sundar Pandurangan','YeeHao Lee','Jack Wong', 'Matthew Ding',
                                   'Joee Leong','Mayur Botadra','Andy Ting','Tri Thamrin') THEN "Dev User"
          ELSE "End User" END;;
  }

}

# include: "/views/of_lkr_dbpfmc.view.lkml"

view: of_lkr_dbpfmc_rowtot_sort {
  derived_table: {
    explore_source: dashboard_performance {
      column: email_full_name { field: dashboard_performance.email_full_name }
      column: run_count { field: dashboard_performance.Sum_dashboard_Run_Count }
      derived_column: run_count_total {
        sql: SUM(run_count) over (partition by email_full_name) ;;
      }
      bind_all_filters: yes
    }
  }
  dimension: email_full_name {
    label: "Email Full Name"
    description: ""
  }

  dimension: run_count {
    label: "Run Count"
    description: ""
    type: number
  }
  dimension: run_count_total {
    label: "Total Run Count"
    description: ""
    type: number
  }
}

# 05/18/21 Aubrie Rice
# The of_location view is used as the base to extended views.
# The mechanics of the dimensions and table belong in the of_location view.
# the extended views are only used to apply labels. Why? The of_location view
# is joined many times and each join relates to a different relationship or entitiy.
# Example: actual_empty_pick_up and first_port_of_load both use the
# underlying of_location view but the dimensions and measures should have
# different names in the field picker. Ex: Actual Empty Pick Up Country Code
# Fist POL Country Code

# USED FOR EXTENDING
view: of_location {
  sql_table_name: @{table_location};;

  dimension: location_code {
    primary_key: yes
    type: string
    sql: ${TABLE}.Location_Code ;;
    drill_fields: [of_location.location_name]
    hidden: yes
  }

  dimension: location_code_and_name {
    type: string
    sql: concat(${location_code}, " - ", ${location_name}) ;;
    hidden: yes
  }

  dimension: calling_port_flag {
    type: string
    sql: ${TABLE}.Calling_Port_Flag ;;
    hidden: yes
  }

  dimension: country_code {
    type: string
    sql: ${TABLE}.Country_Code ;;
    drill_fields: [of_location.region_code]
    map_layer_name: countries
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    type: string
    sql: ${TABLE}.Eq_Ctrl_Ofc_Code ;;
    hidden: yes
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    type: string
    sql: ${TABLE}.Fin_Ctrl_Ofc_Code ;;
    hidden: yes
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
    hidden: yes
  }

  dimension: lat_ut_code {
    type: string
    sql: ${TABLE}.Lat_UT_Code ;;
    hidden: yes
  }

  dimension: latitude {
    type: string
    sql: ${TABLE}.Latitude ;;
    hidden: yes
  }

  dimension: location_name {
    type: string
    sql: ${TABLE}.Location_Name ;;
  }

  dimension: location {
    type: location
    sql_latitude: ${latitude} ;;
    sql_longitude: ${longitude} ;;
  }

  dimension: long_ut_code {
    type: string
    sql: ${TABLE}.Long_UT_Code ;;
    hidden: yes
  }

  dimension: longitude {
    type: string
    sql: ${TABLE}.Longitude ;;
    hidden: yes
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: port_flag {
    type: string
    sql: ${TABLE}.Port_Flag ;;
    hidden: yes
  }

  dimension: region_code {
    type: string
    sql: ${TABLE}.Region_Code ;;
    drill_fields: [of_location.state_code]
  }

  dimension: sales_ofc_code {
    view_label: "Office Information"
    type: string
    sql: ${TABLE}.Sales_Ofc_Code ;;
    drill_fields: [of_location.location_code_and_name]
    hidden: yes
  }

  dimension: state_code {
    type: string
    sql: ${TABLE}.State_Code ;;
    drill_fields: [of_location.location_code]
  }

  dimension: state_code_us {
    type: string
    sql: CASE WHEN ${country_code} = 'US' THEN ${state_code} ELSE NULL END ;;
    drill_fields: [of_location.location_code]
    map_layer_name: us_states
  }

  dimension: type_code {
    type: string
    sql: ${TABLE}.Type_Code ;;
    hidden: yes
  }

  dimension: un_code {
    type: string
    sql: ${TABLE}.UN_Code ;;
    hidden: yes
  }

  dimension: un_loc_flag {
    type: string
    sql: ${TABLE}.UN_Loc_Flag ;;
    hidden: yes
  }

  dimension: SCC_Code {
    type: string
    sql: ${TABLE}.SCC_Code ;;
  }

  dimension: ECC_Code {
    #WH DCN-997 (2023-07) - rename (Empty Pkup ECC to Empty Pickup ECC Code), (Empty Rtn ECC to Empty Return ECC Code)
    #label: "{% if    _view._name ==  \"of_lcn_mty_pkup\" %}Empty Pkup ECC{%
    #            elsif _view._name ==  \"of_lcn_mty_rtn\"  %}Empty Rtn ECC{%
    #            else                                      %}ECC Code{%
    #            endif %}"
    label: "{% if    _view._name ==  \"of_lcn_mty_pkup\" %}Empty Pickup ECC Code{%
    elsif _view._name ==  \"of_lcn_mty_rtn\"  %}Empty Return ECC Code{%
    else                                      %}ECC Code{%
    endif %}"
    type: string
    sql: ${TABLE}.ECC_Code ;;
  }

  dimension: LCC_Code {
    #WH DCN-997 (2023-07) - (Empty Pkup LCC to Empty Pickup LCC Code), (Empty Rtn LCC to Empty Return LCC Code)
    #label: "{% if    _view._name ==  \"of_lcn_mty_pkup\" %}Empty Pkup LCC{%
    #           elsif _view._name ==  \"of_lcn_mty_rtn\"  %}Empty Rtn lCC{%
    #           else                                      %}LCC Code{%
    #           endif %}"
    label: "{% if    _view._name ==  \"of_lcn_mty_pkup\" %}Empty Pickup LCC Code{%
    elsif _view._name ==  \"of_lcn_mty_rtn\"  %}Empty Return lCC Code{%
    else                                      %}LCC Code{%
    endif %}"
    type: string
    sql: ${TABLE}.LCC_Code ;;
  }

  dimension: RCC_Code {
    #WH DCN-997 (2023-07) - (Empty Pkup RCC to Empty Pickup RCC Code), (Empty Rtn RCC to Empty Return RCC Code)
    #label: "{% if    _view._name ==  \"of_lcn_mty_pkup\" %}Empty Pkup RCC{%
    #           elsif _view._name ==  \"of_lcn_mty_rtn\"  %}Empty Rtn RCC{%
    #           else                                      %}RCC Code{%
    #           endif %}"
    label: "{% if    _view._name ==  \"of_lcn_mty_pkup\" %}Empty Pickup RCC Code{%
    elsif _view._name ==  \"of_lcn_mty_rtn\"  %}Empty Return RCC Code{%
    else                                      %}RCC Code{%
    endif %}"
    type: string
    sql: ${TABLE}.RCC_Code ;;
  }

  measure: count {
    type: count
    drill_fields: [location_name]
    hidden: yes
  }

  set: primary_key {
    fields: [location_code, count]
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: actual_empty_pick_up_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: actual_empty_return_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: estimated_empty_pick_up_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: estimated_empty_return_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: first_POD_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "First POD"
    label: "Actual Empty Return Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "First POD"
    label: "First POD Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "First POD"
    label: "First POD Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "First POD"
    label: "First POD Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: first_POL_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "First POL"
    label: "First POL Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "First POL"
    label: "First POL Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "First POL"
    label: "Actual Empty Return Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "First POL"
    label: "First POL Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: final_POD_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Final POD"
    label: "Final POD Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Final POD"
    label: "Final POD Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "Final POD"
    label: "Final POD Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Final POD"
    label: "Final POD Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: trunk_POD_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Trunk POD"
    label: "Trunk POD Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Trunk POD"
    label: "Trunk POD Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "Trunk POD"
    label: "Trunk POD Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: trunk_POL_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Trunk POL"
    label: "Trunk POL Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "Trunk POL"
    label: "Trunk POL Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "Trunk POL"
    label: "Trunk POL Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: POR_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "POR"
    label: "POR Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "POR"
    label: "POR Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "POR"
    label: "POR Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: DEL_location {
  extends: [of_location]

  dimension: location_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Location Code"
  }

  dimension: location_code_and_name {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Code & Name"
  }

  dimension: calling_port_flag {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Calling Port Flag"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Country Code"
  }

  dimension: eq_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "DEL"
    label: "DEL Equipment Control Office Code"
  }

  dimension: fin_ctrl_ofc_code {
    view_label: "Office Information"
    group_label: "DEL"
    label: "DEL Fin Control Office Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Inactive"
  }

  dimension: lat_ut_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Latitude UT Code"
  }

  dimension: latitude {
    view_label: "Location Information"
    group_label: "DEL"
    label: "DEL Latitude"
  }

  dimension: location_name {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Location Name"
  }

  dimension: location {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Geo Location"
  }

  dimension: long_ut_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Longitude UT Code"
  }

  dimension: longitude {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Longitude"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Location ONEForce Id"
  }

  dimension: port_flag {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Port Flag"
  }

  dimension: region_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Region Code"
  }

  dimension: sales_ofc_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Sales Office Code"
  }

  dimension: state_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL State Code"
  }

  dimension: state_code_us {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL US State Code"
  }

  dimension: type_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Location Type Code"
  }

  dimension: un_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL UN Code"
  }

  dimension: un_loc_flag {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL UN Location Flag"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Count"
  }
}

view: of_note {
  sql_table_name: `ONEFORCE.OF_NOTE`
    ;;

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension_group: edw_upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EDW_UPD_DT ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: is_private {
    type: string
    sql: ${TABLE}.IsPrivate ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension: parent_id {
    type: string
    sql: ${TABLE}.ParentId ;;
  }

  dimension: title {
    type: string
    sql: ${TABLE}.Title ;;
  }

  measure: count {
    type: count
    drill_fields: []
  }
}

view: of_office {
  sql_table_name: `ONEFORCE.OF_OFFICE`
    ;;

  dimension: office_code {
    primary_key: yes
    view_label: "Office Information"
    label: "{{ _view._name}}: Code"
    type: string
    sql: ${TABLE}.Office_Code ;;
    hidden: yes
  }

  dimension: inactive {
    view_label: "Office Information"
    label: "{{ _view._name}}: Inactive"
    type: string
    sql: ${TABLE}.Inactive ;;
    hidden: yes
  }

  dimension: location_code {
    view_label: "Office Information"
    label: "{{ _view._name}}: Location Code"
    type: string
    sql: ${TABLE}.Location_Code ;;
    hidden: no   ##22 Oct by Zoe##
  }

  dimension: office_name {
    view_label: "Office Information"
    label: "{{ _view._name}}: Name"
    type: string
    sql: ${TABLE}.Office_Name ;;
  }

## Added by Zoe 30Nov ##
##  dimension: country_SYM {
##    type: string
##    sql: CASE
##           WHEN office_code = 'SJWBB' then  'CNN'
##           WHEN office_code = 'DLCBB' then  'CNN'
##           WHEN office_code = 'SHABB' then  'CNC'
##           WHEN office_code = 'LYGBB' then  'CNN'
##           WHEN office_code = 'NKGBB' then  'CNC'
##           WHEN office_code = 'SZHBB' then  'CNC'
##           WHEN office_code = 'HGHBB' then  'CNC'
##           WHEN office_code = 'JIXBB' then  'CNC'
##           WHEN office_code = 'NBOBB' then  'CNC'
##           WHEN office_code = 'HFEBB' then  'CNC'
##           WHEN office_code = 'FOCBB' then  'HK & CNS'
##           WHEN office_code = 'XMNBB' then  'HK & CNS'
##           WHEN office_code = 'TAOBB' then  'CNN'
##           WHEN office_code = 'CGOBB' then  'CNN'
##           WHEN office_code = 'WUHBB' then  'CNC'
##           WHEN office_code = 'CANBB' then  'HK & CNS'
##           WHEN office_code = 'SWABA' then  'HK & CNS'
##           WHEN office_code = 'SZPBB' then  'HK & CNS'
##           WHEN office_code = 'ZHOBB' then  'HK & CNS'
##           WHEN office_code = 'ZHUBB' then  'HK & CNS'
##           WHEN office_code = 'CKGBB' then  'CNC'
##           WHEN office_code = 'CTUBB' then  'CNC'
##           WHEN office_code = 'SIABB' then  'CNN'
##           WHEN office_code = 'HKGBB' then  'HK & CNS'
##           WHEN office_code = 'HKGHQ' then  'HK & CNS'
##           WHEN office_code = 'MACBA' then  'HK & CNS'
##           ELSE LEFT (Location_Code,2)
##           END ;;
##    hidden: yes
##  }


  measure: count {
    view_label: "Office Information"
    label: "{{ _view._name}}: Count"
    hidden: yes
    type: count
    drill_fields: [office_name]
  }

  set: primary_key {
    fields: [office_code, count]
  }
}

view: of_office_custom {
  sql_table_name: `ONEFORCE.OF_OFFICE`
    ;;

  dimension: office_code {
    primary_key: yes
    view_label: "Office Information"
    label: "{{ _view._name}}: Code"
    type: string
    sql: ${TABLE}.Office_Code ;;
  }

  dimension: inactive {
    view_label: "Office Information"
    label: "{{ _view._name}}: Inactive"
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: location_code {
    view_label: "Office Information"
    label: "{{ _view._name}}: Location Code"
    type: string
    sql: ${TABLE}.Location_Code ;;
  }

  dimension: office_name {
    view_label: "Office Information"
    label: "{{ _view._name}}: Name"
    type: string
    sql: initcap(lower(${TABLE}.Office_Name)) ;;
  }

  measure: count {
    view_label: "Office Information"
    label: "{{ _view._name}}: Count"
    hidden: yes
    type: count
    drill_fields: [office_name]
  }

  set: primary_key {
    fields: [office_code, count]
  }

}

#added for service cloud 2.O KPI dashboards

view: of_office_hierarchy {
  sql_table_name: `ONEFORCE.OF_OFFICE_HIERARCHY`
    ;;

  dimension: office_code {
    label: "Office Code"
    group_label: "{{ _view._name }}"
    type: string
    primary_key: yes
    sql: ${TABLE}.Office_Code ;;
  }


  dimension: office_name {
    label: "Office Name"
    group_label: "{{ _view._name }}"
    type: string
    sql: ${TABLE}.Office_Name ;;
  }
  dimension: parent_office {
    label: "Parent Office"
    group_label: "{{ _view._name }}"
    type: string
    sql: ${TABLE}.Parent_Office ;;
  }

  dimension: regional_head_office {
    label: "Regional Head Office"
    group_label: "{{ _view._name }}"
    type: string
    sql: ${TABLE}.Regional_Head_Office ;;
  }

  dimension: regional_head_office_short_nm {
    label: "RHQ"
    group_label: "{{ _view._name }}"
    type: string
    sql: case when ${TABLE}.Regional_Head_Office is not null THEN substr(${TABLE}.Regional_Head_Office, -5) else "Unclaimed" end;;

  }

  dimension: head_office {
    label: "Head Office"
    group_label: "{{ _view._name }}"
    type: string
    sql: ${TABLE}.Head_Office ;;
  }
  dimension: country {
    label: "Country"
    #map_layer_name: countries
    group_label: "{{ _view._name }}"
    type: string
    sql: (CASE
          WHEN ${TABLE}.Country ='CY'THEN 'CZ'
          WHEN ${office_code} IN ('FOCBB','XMNBB','CANBB','SWABA','SZPBB','ZHOBB','ZHUBB','HKGBB','HKGHQ','MACBA') THEN 'HK & SCN'
          ELSE ${TABLE}.Country END);;
  }


  #dimension: country_1 {
  # label: "Country 1"
  #map_layer_name: countries
  #group_label: "{{ _view._name }}"
  #  type: string
  # sql: (CASE
  #      WHEN ${TABLE}.Country ='CY'THEN 'CZ'
  #     WHEN ${office_code} IN ('FOCBB','XMNBB','CANBB','SWABA','SZPBB','ZHOBB','ZHUBB','HKGBB','HKGHQ','MACBA') THEN 'HK & SCN'
  #    ELSE ${TABLE}.Country END);;
  # }

  dimension: country1{
    label: "Country"
    # map_layer_name: countries
    group_label: "{{ _view._name }}"
    type: string
    sql:  ${TABLE}.Country;;
  }

  dimension: country_name {
    label: "Country Name"
    # map_layer_name: countries
    group_label: "{{ _view._name }}"
    type: string
    sql: ${TABLE}.Country_Name ;;
  }

}

#added for service cloud 2.O KPI dashboards

view: of_one_team {
  sql_table_name: `ONEFORCE.OF_ONE_TEAM`
    ;;

  dimension: oneforce_id {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: department {
    type: string
    sql: ${TABLE}.Department ;;
  }

  dimension: name {
    label: "Team Name"
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: team_manager {
    type: string
    sql: ${TABLE}.Team_Manager ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [name]
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: of_one_team_membership {
  sql_table_name: `ONEFORCE.OF_ONE_TEAM_MEMBERSHIP`
    ;;

  dimension: oneforce_id {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: team {
    type: string
    sql: ${TABLE}.Team ;;
  }

  dimension: team_member {
    hidden: yes
    type: string
    sql: ${TABLE}.Team_Member ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: of_opp_and_opp_dtl {
  derived_table: {
    sql: SELECT
      opp.oneforce_id  as opp_id,
      opp.name         as opp_name,
      opp.CreatedDate  as opp_createddate,
      opp.Origin       as opp_source,
      i.oneforce_id    as opp_line_id,
      i.Equipment_Type as opp_equipment_type,
      j.commodity_string as opp_commodity,
      j.commodity_name_string as opp_commodity_name,
      i.Service_Scope  as opp_svc_scp_cd,
      i.Destination_Code as destination_cd,
      i.Destination    as opp_destination,
      --d.Country_Code   as opp_destination_country,  -- DCN-1079
      i.Service_Scope_Group as opp_svc_scp_grp_cd,
      i.POL            as opp_pol,
      i.POD            as opp_pod,
      i.Origin_Code    as origin_cd,
      i.Origin         as origin,
      --o.Country_Code   as origin_country, -- DCN-1079
      opp.ownerid     as opp_owner_id,
      u.User_Role_Name as opp_owner_role_name,
      u.TMYM_Profile as opp_owner_tmym_profile,
      u.Office_Code   as opp_owner_office,
      u.Regional_Head_Office as opp_owner_rhq,
      m.oneforce_id       as opp_manager_id,
      concat(u.firstname,' ', u.lastname) as opp_owner_name,
      concat(m.firstname,' ', m.lastname) as opp_owner_manager_name,
      opp.accountid    as opp_account_id ,
      opp.contract_duration_from  as opp_contract_duration_from,
      opp.contract_duration_to    as opp_contract_duration_to,
      i.effective_from            as opp_line_eff_from,
      i.effective_to              as opp_line_eff_to,
      opp.contractid              as opp_contract_id,
      opp.stagename               as opp_stagename ,
      opp.CampaignId              as opp_Campaign_id,
      i.nac_code                  as opp_nac_code,
      i.productcode               as t_slan_cd,
      i.Cargo_Type                as opp_cargo_type,
      --p.productcode             as product_code,
      SUM(i.Awarded_TEU)          as opp_awarded_teu,
      --SUM(i.Awarded_TEU*ceil(date_diff(i.effective_to,i.effective_from, DAY)/7))          as opp_awarded_teu,
      SUM(i.quantity)             as opp_potential_teu
      FROM `ONEFORCE.OF_OPPORTUNITY` as opp
      INNER JOIN `ONEFORCE.OF_OPPORTUNITY_LINE_ITEM` i  ON (opp.oneforce_id  = i.OpportunityId )
  --    LEFT JOIN ${of_location.SQL_TABLE_NAME} o ON (i.Origin = o.Location_Name)
    --  LEFT JOIN ${of_location.SQL_TABLE_NAME} d ON (i.Destination = d.Location_Name)
      LEFT JOIN ${of_opp_commodity_split.SQL_TABLE_NAME} j ON j.oneforce_id = i.oneforce_id
      LEFT JOIN ${of_user.SQL_TABLE_NAME} u ON (opp.ownerid = u.oneforce_id )
      LEFT JOIN ${of_user.SQL_TABLE_NAME} m ON (u.managerid = m.oneforce_id )
      LEFT JOIN ${of_product2.SQL_TABLE_NAME} p ON i.productcode =  p.productcode
      WHERE i.IsDeleted = 'false'
      group by 1,2,3, 4, 5, 6, 7, 8, 9, 10, 11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  # DCN-1016 - Start
  dimension: is_campaign_linked {
    label: "Is Campaign Linked"
    type: string
    sql: CASE WHEN ${opp_campaign_id} IS NOT NULL THEN "Campaign" ELSE "Non-Campaign" END ;;
  }

  dimension: opp_source_name {
    label: "Opportunity Source Name"
    type: string
    sql: CASE ${opp_source} WHEN "O" THEN "ONE Force" WHEN "T" THEN "Tiger" ELSE "Other" END ;;
  }

  dimension: opp_createddate {
    label: "Opportunity Created Date"
    type: date
    sql:  ${TABLE}.opp_createddate ;;
  }

  dimension_group: opp_createddate_filter {
    type: time
    datatype: date
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    group_label:  "Opp Created Date For Filter"
    label: "Opp Created Date For Filter"
    sql: ${TABLE}.opp_createddate ;;
  }

  dimension: opp_owner_name {
    label: "Owner Name"
    type: string
    sql: ${TABLE}.opp_owner_name ;;
  }

  dimension: opp_owner_role_name {
    label: "User Role Name"
    type: string
    sql: ${TABLE}.opp_owner_role_name ;;
  }

  dimension: opp_owner_tmym_profile {
    label: "Owner TM/YM Label"
    type: string
    sql: ${TABLE}.opp_owner_tmym_profile ;;
  }

  dimension: opp_owner_role_name_for_trade_marketing {
    label: "User Role Name For Trade Marketing"
    type: string
    sql: case when ${opp_owner_role_name} = 'Trade Marketing' then
            case when left(${opp_owner_tmym_profile}, 2) = 'TM' then concat(${opp_owner_role_name}, SUBSTRING(${opp_owner_tmym_profile}, 3, LENGTH(${opp_owner_tmym_profile})))
                when left(${opp_owner_tmym_profile}, 2) = 'YM' then 'Yield Management'
                else ${opp_owner_role_name} end
         else ${opp_owner_role_name} end ;;
  }

  dimension: opp_owner_office {
    label: "Owner Office"
    type: string
    sql: ${TABLE}.opp_owner_office ;;
  }

  dimension: opp_owner_RHQ {
    label: "Owner RHQ"
    type: string
    sql: ${TABLE}.opp_owner_rhq ;;
  }

  dimension: opp_owner_manager_name {
    label: "Owner's Manager"
    type: string
    sql: ${TABLE}.opp_owner_manager_name ;;
  }

  dimension: opp_owner_manager_id {
    label: "Owner's Manager ID"
    type: string
    sql: ${TABLE}.opp_manager_id ;;
  }

  # DCN-1016 - End

  #DCN-1079s
  # dimension: origin_country {
  #   type: string
  #   sql: ${TABLE}.origin_country ;;
  # }

  # dimension: opp_destination_country {
  #   type: string
  #   sql: ${TABLE}.opp_destination_country ;;
  # }
  #DCN-1079e
  dimension: opp_id {
    label: "Opportunity ID"
    type: string
    sql: ${TABLE}.opp_id ;;
  }

  dimension: opp_name {
    label: "Opportunity Name"
    type: string
    sql: ${TABLE}.opp_name ;;
  }

  dimension: opp_source {
    label: "Source"
    type: string
    sql: ${TABLE}.opp_source ;;
  }

  dimension: opp_line_id {
    label: "Opportunity Line ID"
    type: string
    sql: ${TABLE}.opp_line_id ;;
    primary_key: yes
  }

  dimension: opp_equipment_type {
    label: "Equipment Type"
    type: string
    sql: ${TABLE}.opp_equipment_type ;;
  }

  dimension: opp_commodity {
    label: "Commodity Code"
    type: string
    sql: ${TABLE}.opp_commodity ;;
  }

  dimension: opp_commodity_name {
    label: "Commodity Full Name"
    type: string
    sql: ${TABLE}.opp_commodity_name ;;
  }

  dimension: opp_svc_scp_cd {
    label: "Service Scope Code"
    type: string
    sql: ${TABLE}.opp_svc_scp_cd ;;
  }

  dimension: destination_cd {
    label: "Destination Code"
    type: string
    sql: ${TABLE}.destination_cd ;;
  }

  dimension: opp_destination {
    label: "Destination"
    type: string
    sql: ${TABLE}.opp_destination ;;
  }

  dimension: opp_svc_scp_grp_cd {
    label: "Service Scope Group Code"
    type: string
    sql: ${TABLE}.opp_svc_scp_grp_cd ;;
  }

  dimension: opp_pol {
    label: "POL"
    type: string
    sql: ${TABLE}.opp_pol ;;
  }

  dimension: opp_pod {
    label: "POD"
    type: string
    sql: ${TABLE}.opp_pod ;;
  }

  dimension: origin_cd {
    label: "Origin Code"
    type: string
    sql: ${TABLE}.origin_cd ;;
  }

  dimension: origin {
    label: "Origin"
    type: string
    sql: ${TABLE}.origin ;;
  }

  dimension: t_slan_cd {
    label: "Product Code"
    type: string
    sql: ${TABLE}.t_slan_cd ;;
  }

  dimension: opp_owner_id {
    label: "Owner ID"
    type: string
    sql: ${TABLE}.opp_owner_id ;;
  }

  dimension: opp_account_id {
    label: "Account ID"
    type: string
    sql: ${TABLE}.opp_account_id ;;
  }

  dimension: opp_contract_duration_from {
    label: "Contract Start Date"
    type: date
    datatype: date
    sql: ${TABLE}.opp_contract_duration_from ;;
  }

  # dummy
  dimension: opp_contract_duration_to {
    label: "Contract End Date"
    type: date
    datatype: date
    sql: ${TABLE}.opp_contract_duration_to ;;
  }

  dimension: opp_line_eff_from {
    label: "Opportunity Product Effective"
    type: date
    datatype: date
    sql: ${TABLE}.opp_line_eff_from ;;
  }

  dimension: opp_line_eff_to {
    label: "Opportunity Product Expiry"
    type: date
    datatype: date
    sql: ${TABLE}.opp_line_eff_to ;;
  }

  dimension: db_eff_from {
    label: "Dashboard Capture Date From"
    type: date
    datatype: date
    sql: case when ${opp_campaign_id} is not null and ${of_campaign.camp_eff_from} is not null and ${of_campaign.camp_eff_from} >= ${opp_line_eff_from}
      then ${of_campaign.camp_eff_from} else ${opp_line_eff_from} end;;
  }

  dimension: db_eff_to {
    label: "Dashboard Capture Date To"
    type: date
    datatype: date
    sql: case when ${opp_campaign_id} is not null and ${of_campaign.camp_eff_to} is not null and ${of_campaign.camp_eff_to} <= ${opp_line_eff_to}
      then ${of_campaign.camp_eff_to} else ${opp_line_eff_to} end;;
  }

  dimension: opp_contract_id {
    label: "Opportunity Contract ID"
    type: string
    sql: ${TABLE}.opp_contract_id ;;
  }

  dimension: opp_stagename {
    label: "Stage"
    type: string
    sql: ${TABLE}.opp_stagename ;;
  }

  dimension: opp_stagename_order {
    label: "Stage for ordering"
    type: number
    sql: CASE ${opp_stagename} WHEN "Opportunity WON" THEN 1
                                WHEN "Partially WON" THEN 2
                                WHEN "Opportunity LOST" THEN 3
                                WHEN "Quoted" THEN 4
                                WHEN "Auto Approved" THEN 5
                                WHEN "Approved By Pricer" THEN 6
                                WHEN "Counter Offer By Pricer" THEN 7
                                WHEN "Requested for Pricer Approval" THEN 8
                                WHEN "Click the Request button in Tiger System for Pricer Approval" THEN 9
                                WHEN "Investigate Need" THEN 10
                                WHEN "Submit to Tiger" THEN 11
                                WHEN "Pricing Request" THEN 12
                                WHEN "Revised Quote" THEN 13
                                WHEN "Quotation" THEN 14 END;;

  }

  dimension: opp_campaign_id {
    label: "Campaign Id"
    type: string
    sql: ${TABLE}.opp_Campaign_id ;;
  }

  dimension: opp_nac_code {
    label: "NAC Code"
    type: string
    sql: ${TABLE}.opp_nac_code ;;
  }

  dimension: opp_cargo_type {
    label: "Cargo Type"
    type: string
    sql: ${TABLE}.opp_cargo_type ;;
  }

  dimension: svc_scp_dynamic {
    type: string
    label: "{%  if    param_svc_grping_option._parameter_value ==  \"'SVC_GRP'\"  %}Service Scope Group{%
    elsif param_svc_grping_option._parameter_value ==  \"'SVC_CD'\"   %}Service Scope Code{%
    endif %}"
    sql: {% if     param_svc_grping_option._parameter_value == "'SVC_GRP'"  %} ${opp_svc_scp_grp_cd}
        {% elsif  param_svc_grping_option._parameter_value == "'SVC_CD'"   %} ${opp_svc_scp_cd}
        {% endif %} ;;
  }

  dimension: opp_awarded_teu {
    label: "Awarded TEU"
    type: number
    sql: ${TABLE}.opp_awarded_teu ;;
    hidden: yes
  }

  dimension: opp_potential_teu {
    label: "Potential TEU"
    type: number
    sql: ${TABLE}.opp_potential_teu ;;
    hidden: yes
  }

  measure: awarded_teu {
    label: "Awarded TEU"
    type: sum
    sql:  ${TABLE}.opp_awarded_teu ;;
    drill_fields: [detail*]
  }

  measure: potential_teu {
    label: "Potential TEU"
    type: sum
    sql:  ${TABLE}.opp_potential_teu ;;
    drill_fields: [detail*]
  }

  parameter: param_svc_grping_option {
    label: "Service Scope Group By"
    type: string
    allowed_value: { label: "Service Scope Group"  value: "SVC_GRP"     }
    allowed_value: { label: "Service Scope"   value: "SVC_CD"  }
    default_value: "SVC_GRP"
  }

  set: detail {
    fields: [
      opp_name,
      of_campaign.name,
      t_slan_cd,
      opp_stagename,
      v_customer_opus_n_prospect.cust_cd,
      v_customer_opus_n_prospect.name,
      opp_equipment_type,
      opp_potential_teu,
      opp_awarded_teu,
      opp_commodity,
      opp_commodity_name,
      of_svc_contract.sc_rfa_no,
      origin,
      opp_svc_scp_cd,
      opp_destination,
      opp_svc_scp_grp_cd,
      opp_pol,
      opp_pod,
      opp_line_eff_from,
      opp_line_eff_to,
      opp_line_id
    ]
  }
}

view: of_opp_commodity_split {
  derived_table: {
    sql: with aa as (select distinct a.oneforce_id, left(ltrim(b),6) as commodity_code,  multiple_commodity as commodity_name, productcode
         from  `ONEFORCE.OF_OPPORTUNITY_LINE_ITEM` a,
                unnest(split(multiple_commodity," / ")) b
         where multiple_commodity is not null
         and SAFE_CAST(left(ltrim(b),6) as int64) is not null
         union all
         select a.oneforce_id,  commodity_code, commodity_code||'-'||commodity_full_name as commodity_name, productcode
         from  `ONEFORCE.OF_OPPORTUNITY_LINE_ITEM` a
         inner join `ONEFORCE.OF_COMMODITY` as b on a.commodity =  b.oneforce_id
         where commodity is not null)
        select oneforce_id, productcode, STRING_AGG(commodity_code) as commodity_string, STRING_AGG(commodity_name) as commodity_name_string
        from aa
        group by 1, 2
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
    primary_key: yes
  }

  dimension: commodity_string {
    label: "Commodity Codes"
    type: string
    sql: ${TABLE}.commodity_string ;;
  }

  dimension: commodity_name_string {
    label: "Commodity Names"
    type: string
    sql: ${TABLE}.commodity_name_string ;;
  }

  set: detail {
    fields: [oneforce_id, commodity_string, commodity_name_string]
  }
}

view: of_opp_query {
  derived_table: {
    sql:
    WITH opp AS (
    SELECT o.Origin,
           o.ONEForce_Id as id,
           o.Name,
           --CASE WHEN uo.username = 'crm.systemuser@one-line.com' THEN ue.ONEForce_ID ELSE uo.ONEForce_ID END as usr_id,
           o.ownerid     as usr_id,
           o.StageName   as stagename,
           o.AccountId   as accountid,
           o.Contract_Duration_From,
           o.Contract_Duration_To,
           o.ContractId ,
           EXTRACT(DATE FROM o.CreatedDate) as createddate,
           o.CampaignId as Campaign_id
    FROM `ONEFORCE.OF_OPPORTUNITY` o
    -- NA dashbord: do not use Tiger_Created_By to overwrite, in order not to cause confusion
    --LEFT JOIN `ONEFORCE.OF_USER` uo ON ( o.OwnerId = uo.ONEForce_ID )
    --LEFT JOIN `ONEFORCE.OF_USER` ue ON ( lower(o.Tiger_Created_By) = (case when ue.TPA_user = 'true' then lower(ue.Email_2) else lower(ue.Email) end ) )
    WHERE o.Origin = 'T'
    UNION ALL
    SELECT o.Origin,
           o.ONEForce_Id as id,
           o.Name,
           o.ownerid     as usr_id,
           o.StageName   as stagename,
           o.AccountId   as accountid,
           o.Contract_Duration_From,
           o.Contract_Duration_To,
           o.ContractId ,
           EXTRACT(DATE FROM o.CreatedDate) as createddate,
           o.CampaignId as Campaign_id
    FROM `ONEFORCE.OF_OPPORTUNITY` o
    WHERE IFNULL(o.Origin,'NULL') <> 'T'
    )
    SELECT
    opp.id           as opp_id,
    opp.name         as opp_name,
    opp.Origin       as opp_origin,
    i.Service_Scope  as opp_svc_scp_cd,
    opp.usr_id       as opp_owner_id ,
    w.Sales_Week     as opp_sales_week ,
    opp.accountid    as opp_account_id ,
    opp.contract_duration_from  as opp_contract_duration_from,
    opp.contract_duration_to    as opp_contract_duration_to,
    opp.contractid              as opp_contract_id,
    opp.stagename    as opp_stagename ,
    opp.Campaign_id as opp_Campaign_id,
    SUM(i.Quantity)  as opp_teu,
    SUM(i.Awarded_TEU) as opp_awarded_teu
    FROM opp
    INNER JOIN `ONEFORCE.OF_OPPORTUNITY_LINE_ITEM` i  ON (opp.id  = i.OpportunityId )
    LEFT JOIN `ONEFORCE.OF_SALES_WEEK_MASTER`     w  ON (opp.createddate BETWEEN w.week_start_date and w.week_end_date )
    WHERE i.IsDeleted = 'false'
    --WHERE upper(opp.stagename) not like '%WON%' AND upper(opp.stagename) not like '%LOST%'
    group by 1,2,3, 4, 5, 6, 7, 8, 9, 10, 11,12
           ;;

    persist_for: "1 hour"
  }

  measure: count {
    label: "Count"
    type: count_distinct
    sql: ${TABLE}.opp_id ;;
    drill_fields: [detail*]
  }

  measure: opp_teu {
    label: "TEU"
    type: sum
    sql: ${TABLE}.opp_teu ;;
    drill_fields: [detail*]
  }

  measure: opp_awarded_teu {
    label: "Awarded TEU"
    type: sum
    sql: ${TABLE}.opp_awarded_teu ;;
    drill_fields: [detail*]
  }

  dimension: opp_id {
    type: string
    sql: ${TABLE}.opp_id ;;
  }

  dimension: opp_name {
    label: "Opportunity Name"
    type: string
    sql: ${TABLE}.opp_name ;;
    link: {
      label: "View Opportunity"
      url: "https://one-line.lightning.force.com/{{ opp_id }}"
      icon_url: "https://www.salesforce.com/content/dam/sfdc-docs/www/logos/logo-salesforce.svg"
    }
  }

  dimension: opp_origin {
    type: string
    sql: CASE ${TABLE}.opp_origin WHEN 'O' THEN 'ONE Force' WHEN 'T' THEN 'Tiger' ELSE NULL END;;
  }

  dimension: opp_svc_scp_cd {
    type: string
    sql: ${TABLE}.opp_svc_scp_cd ;;
  }

  dimension: opp_owner_id {
    type: string
    sql: ${TABLE}.opp_owner_id ;;
  }

  dimension: opp_campaign_id {
    type: string
    #primary_key: yes
    sql: ${TABLE}.opp_campaign_id ;;
  }

  dimension: opp_sales_week {
    type: string
    sql: ${TABLE}.opp_sales_week ;;
  }

  dimension: opp_account_id {
    type: string
    sql: ${TABLE}.opp_account_id ;;
  }

  dimension: opp_contract_duration_from {
    label: "Contract Duration From"
    type: date
    datatype: date
    sql: ${TABLE}.opp_contract_duration_from ;;
  }

  dimension: opp_contract_duration_to {
    label: "Contract Duration To"
    type: date
    datatype: date
    sql: ${TABLE}.opp_contract_duration_to ;;
  }

  dimension: opp_contract_id {
    type: string
    sql: ${TABLE}.opp_contract_id ;;
  }

  dimension: opp_stagename_ord {
    type: number
    sql: CASE ${opp_stagename}
         WHEN 'Pricing Request' THEN 1
         WHEN 'Investigate Need' THEN 2
         WHEN 'Submit to Tiger' THEN 3
         WHEN 'Click the Request button in Tiger System for Pricer Approval' THEN 4
         WHEN 'Requested for Pricer Approval' THEN 5
         WHEN 'Counter Offer By Pricer' THEN 6
         WHEN 'Approved By Pricer' THEN 7
         WHEN 'Auto Approved' THEN 8
         WHEN 'Revised Quote' THEN 9
         WHEN 'Quoted' THEN 10
         WHEN 'Opportunity WON' THEN 11
         WHEN 'Partially WON' THEN 12
         WHEN 'Opportunity LOST' THEN 13
         WHEN 'Quotation' THEN 14
         ELSE NULL END;;
  }

  dimension: opp_stagename {
    label: "Stage"
    type: string
    sql: ${TABLE}.opp_stagename ;;
    order_by_field: opp_stagename_ord
  }

  dimension: opp_stagename_simplified {
    type: string
    sql: CASE WHEN ${opp_stagename} LIKE '%WON%' THEN 'Won'
              WHEN ${opp_stagename} LIKE '%LOST%' THEN 'Lost'
              ELSE 'Open' END    ;;
    order_by_field: opp_stagename_simplified_ord
  }

  dimension: opp_stagename_simplified_ord {
    type: number
    sql: CASE WHEN ${opp_stagename} LIKE '%WON%' THEN 2
              WHEN ${opp_stagename} LIKE '%LOST%' THEN 3
              ELSE 1 END    ;;
  }

  set: detail {
    fields: [
      opp_name,
      v_customer_opus_n_prospect.customer_cd_and_name,
      of_customer_group.cust_grp_and_name,
      opp_teu,
      of_svc_contract.sc_rfa_no,
      opp_contract_duration_from,
      opp_contract_duration_to,
      opp_stagename,
      na_user_opp.full_name,
    ]
  }
}

view: of_opp_vs_bkg {

  derived_table: {
    sql: SELECT
                    record_type
                  , bkg_no
                  , consolidated_cntr_tpsz
                  , consolidated_cntr_tpsz_with_rd
                  , bkg_sts_cd
                  , bkg_cre_dt
                  , rec_typ_n_bkg_sts_cd
                  , de_term_cd
                  , rcv_term_cd
                  , cif_fob_split_cd
                  , frt_term_cd
                  ---------- pickup and return SCC and Yard ---------------
                  , act_mty_pkup_scc_cd
                  , mty_pkup_scc_cd
                  , mty_rtn_scc_cd
                  , bkg_mty_rtn_scc_cd
                  --- empty return ---------------------
                  , bkg_mty_pkup_yd_cd
                  , bkg_mty_rtn_yd_cd
                  , act_mty_pkup_yd_cd
                  , act_mty_rtn_yd_cd
                  , coalesce(act_mty_pkup_yd_cd, bkg_mty_pkup_yd_cd) mty_pkup_yd_cd
                  , coalesce(act_mty_rtn_yd_cd,  bkg_mty_rtn_yd_cd ) mty_rtn_yd_cd
                  ---------- TEU, CM and Weight ---------------of
                  , teu
                  , cm_amt
                  , cm_amt_eppa
                  , cm_amt_eppb
                  , bkg_cgo_wgt
                  ---------- cargo and commdity ---------------
                  , cmdt_cd
                  , of_commodity.commodity_full_name as cmdt_full_nm
                  , cgo_ntr_cd
                  , cgo_ntr_nm
                  , dcgo_flg
                  , rd_cgo_flg
                  , container_cat
                  ---------- contract customer, shipper, consinee, forwarder, and sales person ---------------
                  , consolidated_cnt_cust_cd
                  , v.name as consolidated_cnt_cust_nm
                  , consolidated_cnt_cust_grp_cd
                  , g.cust_grp_nm as consolidated_cnt_cust_grp_nm
                  , cust_nvo_fak_nac
                  , cust_bco_fak_nac
                  , actual_cust_cd
                  , actual_cust_nm
                  ---------- locations  ---------------
                  , por_cd
                  , ori_cnt
                  , del_cd
                  , del_cnt
                  , n1st_pod_cd
                  , n1st_pol_cd
                  , final_pod_cd
                  , pod_loc_cd
                  , pol_loc_cd
                  ---------- about service contract ---------------
                  , svc_cont_no
                  , is_svc_cont_dummy
                  , sc_rfa_ctrt_tp_nm
                  , cont_effective_dt
                  , cont_expiry_dt
                  , cont_period_typ_cd
                  , cont_period_typ
                  , ctrt_scp_srep_ofc_cd
                  , ctrt_scp_srep_eml
                  , ctrt_scp_srep_nm
                  , ctrt_prop_ofc_cd
                  , ctrt_prop_srep_eml
                  , ctrt_prop_srep_nm
                  , ctrt_prop_rhq_code
                  , ctrt_prop_ctry_code
                  ---------- about service scope, service lane  ---------------
                  , svc_scp_cd
                  , dominant_flg
                  , t_slan_cd
                  , slane_cd
                  , rlane_cd
                  , svc_scp_grp_cd
                  , trd_cd
                  , sub_trd_cd
                  ----------- sales week ---------------
                  , week
                  ---- dashboard mering exercise -----
                  , bkg_cxl_rsn_cd
                  , bkg_cxl_sub_rsn_cd
                  , bkg_cncl_party
                  , bkg_cxl_rsn_desc
                  , bkg_cxl_sub_rsn_desc
                  -------------- others --------------------
                  , bkg_channel
                  , is_one_quotation
                  , rev_vvd
                  , sc_rfa_sls_rep_ofc_cnt_cd
                  , sc_rfa_sls_rep_ofc_cnt_nm
                  , rc_flg
                  , rev_period_yrqtr
                  , tot_g_rev
                  , bkg_ofc_cd
                  , cgo_rcv_dt
                  , lodg_due_dt
                  , primary_key
FROM ${of_consolidated2.SQL_TABLE_NAME} as of_consolidated2
LEFT JOIN ${of_commodity.SQL_TABLE_NAME} as of_commodity on  of_commodity.commodity_code = of_consolidated2.cmdt_cd
LEFT JOIN ${v_customer_opus_n_prospect.SQL_TABLE_NAME} as v on v.cust_cd = of_consolidated2.consolidated_cnt_cust_cd
LEFT JOIN ${of_customer_group.SQL_TABLE_NAME} as g on g.cust_grp_id = of_consolidated2.consolidated_cnt_cust_grp_cd
WHERE (rec_typ_n_bkg_sts_cd ) IN ('BKG:F', 'BKG:S', 'BKG:W' );;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: record_type {
    type: string
    sql: ${TABLE}.record_type ;;
  }

  dimension: bkg_no {
    label: "Booking No."
    type: string
    sql: ${TABLE}.bkg_no ;;
  }

  dimension: consolidated_cntr_tpsz {
    label: "Eqp Type Size"
    type: string
    sql: ${TABLE}.consolidated_cntr_tpsz ;;
  }

  dimension: consolidated_cntr_tpsz_with_rd {
    label: "Eqp Type Size (RD)"
    type: string
    sql: ${TABLE}.consolidated_cntr_tpsz_with_rd ;;
  }

  dimension: bkg_sts_cd {
    label: "Bkg Status Code"
    type: string
    sql: ${TABLE}.bkg_sts_cd ;;
  }

  dimension_group: bkg_cre_dt {
    label: "Booking Date"
    type: time
    datatype: datetime
    sql: ${TABLE}.bkg_cre_dt ;;
  }

  dimension: rec_typ_n_bkg_sts_cd {
    type: string
    sql: ${TABLE}.rec_typ_n_bkg_sts_cd ;;
  }

  dimension: de_term_cd {
    type: string
    sql: ${TABLE}.de_term_cd ;;
  }

  dimension: rcv_term_cd {
    type: string
    sql: ${TABLE}.rcv_term_cd ;;
  }

  dimension: cif_fob_split_cd {
    type: string
    sql: ${TABLE}.cif_fob_split_cd ;;
  }

  dimension: frt_term_cd {
    type: string
    sql: ${TABLE}.frt_term_cd ;;
  }

  dimension: act_mty_pkup_scc_cd {
    type: string
    sql: ${TABLE}.act_mty_pkup_scc_cd ;;
  }

  dimension: mty_pkup_scc_cd {
    type: string
    sql: ${TABLE}.mty_pkup_scc_cd ;;
  }

  dimension: mty_rtn_scc_cd {
    type: string
    sql: ${TABLE}.mty_rtn_scc_cd ;;
  }

  dimension: bkg_mty_rtn_scc_cd {
    type: string
    sql: ${TABLE}.bkg_mty_rtn_scc_cd ;;
  }

  dimension: bkg_mty_pkup_yd_cd {
    type: string
    sql: ${TABLE}.bkg_mty_pkup_yd_cd ;;
  }

  dimension: bkg_mty_rtn_yd_cd {
    type: string
    sql: ${TABLE}.bkg_mty_rtn_yd_cd ;;
  }

  dimension: act_mty_pkup_yd_cd {
    type: string
    sql: ${TABLE}.act_mty_pkup_yd_cd ;;
  }

  dimension: act_mty_rtn_yd_cd {
    type: string
    sql: ${TABLE}.act_mty_rtn_yd_cd ;;
  }

  dimension: mty_pkup_yd_cd {
    type: string
    sql: ${TABLE}.mty_pkup_yd_cd ;;
  }

  dimension: mty_rtn_yd_cd {
    type: string
    sql: ${TABLE}.mty_rtn_yd_cd ;;
  }

  dimension: teu {
    label: "Booking TEU"
    type: number
    sql: ${TABLE}.teu ;;
  }

  dimension: cm_amt {
    label: "CM Amount"
    type: number
    sql: ${TABLE}.cm_amt ;;
  }

  dimension: cm_amt_eppa {
    type: number
    sql: ${TABLE}.cm_amt_eppa ;;
  }

  dimension: cm_amt_eppb {
    type: number
    sql: ${TABLE}.cm_amt_eppb ;;
  }

  dimension: bkg_cgo_wgt {
    type: number
    sql: ${TABLE}.bkg_cgo_wgt ;;
  }

  dimension: cmdt_cd {
    label: "Commodity Code"
    type: string
    sql: ${TABLE}.cmdt_cd ;;
  }

  dimension: cmdt_full_nm {
    label: "Commodity Full Name"
    type: string
    sql: ${TABLE}.cmdt_full_nm ;;
  }

  dimension: cgo_ntr_cd {
    type: string
    sql: ${TABLE}.cgo_ntr_cd ;;
  }

  dimension: cgo_ntr_nm {
    type: string
    sql: ${TABLE}.cgo_ntr_nm ;;
  }

  dimension: dcgo_flg {
    type: string
    sql: ${TABLE}.dcgo_flg ;;
  }

  dimension: rd_cgo_flg {
    type: string
    sql: ${TABLE}.rd_cgo_flg ;;
  }

  dimension: container_cat {
    label: "Container Category"
    type: string
    sql: ${TABLE}.container_cat ;;
  }

  dimension: consolidated_cnt_cust_cd {
    label: "Customer Code"
    type: string
    sql: ${TABLE}.consolidated_cnt_cust_cd ;;
  }

  dimension: consolidated_cnt_cust_nm {
    label: "Customer Name"
    type: string
    sql: ${TABLE}.consolidated_cnt_cust_nm ;;
  }

  dimension: consolidated_cnt_cust_grp_cd {
    label: "Customer Group Code"
    type: string
    sql: ${TABLE}.consolidated_cnt_cust_grp_cd ;;
  }

  dimension: consolidated_cnt_cust_grp_nm {
    label: "Customer Group Name"
    type: string
    sql: ${TABLE}.consolidated_cnt_cust_grp_nm ;;
  }

  dimension: cust_nvo_fak_nac {
    type: string
    sql: ${TABLE}.cust_nvo_fak_nac ;;
  }

  dimension: cust_bco_fak_nac {
    type: string
    sql: ${TABLE}.cust_bco_fak_nac ;;
  }

  dimension: actual_cust_cd {
    label: "Actual Customer Code"
    type: string
    sql: ${TABLE}.actual_cust_cd ;;
  }

  dimension: actual_cust_nm {
    label: "Actual Customer Name"
    type: string
    sql: ${TABLE}.actual_cust_nm ;;
  }

  dimension: por_cd {
    label: "POR Location"
    type: string
    sql: ${TABLE}.por_cd ;;
  }

  dimension: ori_cnt {
    label: "Origin Country"
    type: string
    sql: ${TABLE}.ori_cnt ;;
  }

  dimension: del_cd {
    label: "DEL Location"
    type: string
    sql: ${TABLE}.del_cd ;;
  }

  dimension: del_cnt {
    label: "Destination Country"
    type: string
    sql: ${TABLE}.del_cnt ;;
  }

  dimension: n1st_pod_cd {
    type: string
    sql: ${TABLE}.n1st_pod_cd ;;
  }

  dimension: n1st_pol_cd {
    label: "First POL Location"
    type: string
    sql: ${TABLE}.n1st_pol_cd ;;
  }

  dimension: final_pod_cd {
    label: "Final POD Location"
    type: string
    sql: ${TABLE}.final_pod_cd ;;
  }

  dimension: pod_loc_cd {
    type: string
    sql: ${TABLE}.pod_loc_cd ;;
  }

  dimension: pol_loc_cd {
    type: string
    sql: ${TABLE}.pol_loc_cd ;;
  }

  dimension: svc_cont_no {
    label: "Svc/RFA No"
    type: string
    sql: ${TABLE}.svc_cont_no ;;
  }

  dimension: is_svc_cont_dummy {
    type: string
    sql: ${TABLE}.is_svc_cont_dummy ;;
  }

  dimension: sc_rfa_ctrt_tp_nm {
    label: "Contract Type Name"
    type: string
    sql: ${TABLE}.sc_rfa_ctrt_tp_nm ;;
  }

  dimension_group: cont_effective_dt {
    label: "Contract Effective"
    type: time
    datatype: datetime
    sql: ${TABLE}.cont_effective_dt ;;
  }

  dimension_group: cont_expiry_dt {
    label: "Contract Expiry"
    type: time
    datatype: datetime
    sql: ${TABLE}.cont_expiry_dt ;;
  }

  dimension: cont_period_typ_cd {
    label: "Contract Period Type Code"
    type: string
    sql: ${TABLE}.cont_period_typ_cd ;;
  }

  dimension: cont_period_typ {
    label: "Contract Period Type"
    type: string
    sql: ${TABLE}.cont_period_typ ;;
    suggestions: ["Long" , "Medium" ,"Short"]
  }

  dimension: ctrt_scp_srep_ofc_cd {
    type: string
    sql: ${TABLE}.ctrt_scp_srep_ofc_cd ;;
  }

  dimension: ctrt_scp_srep_eml {
    label: "Service Scope Sales Rep Email"
    type: string
    sql: ${TABLE}.ctrt_scp_srep_eml ;;
  }

  dimension: ctrt_scp_srep_nm {
    label: "Service Scope Sales Rep"
    type: string
    sql: ${TABLE}.ctrt_scp_srep_nm ;;
  }

  dimension: ctrt_prop_ofc_cd {
    label: "Contract Office Code"
    type: string
    sql: ${TABLE}.ctrt_prop_ofc_cd ;;
  }

  dimension: ctrt_prop_srep_eml {
    label: "Contract Sales Rep Email"
    type: string
    sql: ${TABLE}.ctrt_prop_srep_eml ;;
  }

  dimension: ctrt_prop_srep_nm {
    label: "Contract Sales Rep"
    type: string
    sql: ${TABLE}.ctrt_prop_srep_nm ;;
  }

  dimension: ctrt_prop_rhq_code {
    label: "Contract Office RHQ"
    type: string
    sql: ${TABLE}.ctrt_prop_rhq_code ;;
  }

  dimension: ctrt_prop_ctry_code {
    label: "Contract Office Country"
    type: string
    sql: ${TABLE}.ctrt_prop_ctry_code ;;
  }

  dimension: svc_scp_cd {
    label: "Service Scope Code"
    type: string
    sql: ${TABLE}.svc_scp_cd ;;
  }

  dimension: dominant_flg {
    label: "Dominant Flag"
    type: string
    sql: ${TABLE}.dominant_flg ;;
  }

  dimension: slane_cd {
    label: "Service Lane"
    type: string
    sql: ${TABLE}.slane_cd ;;
  }

  dimension: t_slan_cd {
    hidden: yes
    type: string
    sql: ${TABLE}.t_slan_cd ;;
  }

  dimension: rlane_cd {
    label: "Revenue Lane"
    type: string
    sql: ${TABLE}.rlane_cd ;;
  }

  dimension: svc_scp_grp_cd {
    label : "Service Scope Group Code"
    type: string
    sql: ${TABLE}.svc_scp_grp_cd ;;
  }

  dimension: trd_cd {
    label : "Trade Code"
    type: string
    sql: ${TABLE}.trd_cd ;;
  }

  dimension: sub_trd_cd {
    label : "Sub Trade Code"
    type: string
    sql: ${TABLE}.sub_trd_cd ;;
  }

  dimension: week {
    label : "Sales Week"
    type: string
    sql: ${TABLE}.week ;;
  }

  dimension: bkg_cxl_rsn_cd {
    type: string
    sql: ${TABLE}.bkg_cxl_rsn_cd ;;
  }

  dimension: bkg_cxl_sub_rsn_cd {
    type: string
    sql: ${TABLE}.bkg_cxl_sub_rsn_cd ;;
  }

  dimension: bkg_cncl_party {
    type: string
    sql: ${TABLE}.bkg_cncl_party ;;
  }

  dimension: bkg_cxl_rsn_desc {
    type: string
    sql: ${TABLE}.bkg_cxl_rsn_desc ;;
  }

  dimension: bkg_cxl_sub_rsn_desc {
    type: string
    sql: ${TABLE}.bkg_cxl_sub_rsn_desc ;;
  }

  dimension: bkg_channel {
    label: "Booking Channel"
    type: string
    sql: ${TABLE}.bkg_channel ;;
  }

  dimension: is_one_quotation {
    label: "ONE Quotation"
    type: string
    sql: ${TABLE}.is_one_quotation ;;
  }

  dimension: rev_vvd {
    label: "Revenue VVD"
    type: string
    sql: ${TABLE}.rev_vvd ;;
  }

  dimension: sc_rfa_sls_rep_ofc_cnt_cd {
    label: "Contract Sales Rep Country"
    type: string
    sql: ${TABLE}.sc_rfa_sls_rep_ofc_cnt_cd ;;
  }

  dimension: sc_rfa_sls_rep_ofc_cnt_nm {
    label: "Contract Sales Rep Country Name"
    type: string
    sql: ${TABLE}.sc_rfa_sls_rep_ofc_cnt_nm ;;
  }

  dimension: rc_flg {
    type: string
    sql: ${TABLE}.rc_flg ;;
  }

  dimension: rev_period_yrqtr {
    type: string
    sql: ${TABLE}.rev_period_yrqtr ;;
  }

  dimension: tot_g_rev {
    type: number
    sql: ${TABLE}.tot_g_rev ;;
  }

  dimension: bkg_ofc_cd {
    label: "Booking Office"
    type: string
    sql: ${TABLE}.bkg_ofc_cd ;;
  }

  dimension_group: cgo_rcv_dt {
    label: "Cargo Received Date"
    type: time
    datatype: datetime
    sql: ${TABLE}.cgo_rcv_dt ;;
  }

  dimension_group: lodg_due_dt {
    label: "Sailing Due Date"
    type: time
    datatype: datetime
    sql: ${TABLE}.lodg_due_dt ;;
  }

  dimension: primary_key {
    label : "Primary Key"
    type: string
    sql: ${TABLE}.primary_key ;;
    primary_key: yes
  }

  dimension:status  {
    type: string
    sql: case when ${bkg_sts_cd}='F' then 'Shipped' else 'Awarded' end  ;;
  }

  dimension:bkg_status_code  {
    label: "Booking Status Code"
    type: string
    sql: case when ${rec_typ_n_bkg_sts_cd}='BKG:F' then 'Firm'
              when ${rec_typ_n_bkg_sts_cd}='BKG:S' then 'Split'
              when ${rec_typ_n_bkg_sts_cd}='BKG:W' then 'Wait' end  ;;
  }

  measure: total_teu {
    label : "Total Booking TEU"
    type: sum
    sql: ${TABLE}.teu ;;
    drill_fields: [detail*]
    filters: [bkg_no: "-NULL"]
  }

  set: detail {
    fields: [
      bkg_no,
      por_cd,
      ori_cnt,
      del_cd,
      del_cnt,
      consolidated_cntr_tpsz,
      teu,
      consolidated_cnt_cust_nm,
      consolidated_cnt_cust_cd,
      consolidated_cnt_cust_grp_nm,
      consolidated_cnt_cust_grp_cd,
      ctrt_scp_srep_nm,
      ctrt_scp_srep_eml,
      ctrt_prop_srep_nm,
      ctrt_prop_srep_eml,
      bkg_status_code,
      cmdt_cd,
      cmdt_full_nm,
      container_cat,
      actual_cust_cd,
      actual_cust_nm,
      svc_cont_no,
      sc_rfa_ctrt_tp_nm,
      cont_effective_dt_date,
      cont_expiry_dt_date,
      cont_period_typ,
      ctrt_scp_srep_ofc_cd,
      ctrt_prop_ofc_cd,
      ctrt_prop_rhq_code,
      ctrt_prop_ctry_code,
      svc_scp_cd,
      dominant_flg,
      slane_cd,
      rlane_cd,
      svc_scp_grp_cd,
      trd_cd,
      sub_trd_cd,
      week,
      bkg_channel,
      is_one_quotation,
      rev_vvd,
      sc_rfa_sls_rep_ofc_cnt_cd,
      sc_rfa_sls_rep_ofc_cnt_nm,
      bkg_ofc_cd,
      primary_key
    ]
  }

}

view: of_org_bkg_qty {
  sql_table_name: `ONEFORCE.OF_ORG_BKG_QTY`
    ;;

  dimension: bkg_no {
    hidden: yes
    label: "BKG_NO" # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.BKG_NO ;;
  }

  dimension: bkg_no_stripped {
    hidden: yes
    label: "BKG_NO_STRIPPED"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.BKG_NO_STRIPPED ;;
  }

  dimension: eff_bkg_cgo_tp_cd {
    label: "EFF_BKG_CGO_TP_CD"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.EFF_BKG_CGO_TP_CD ;;
  }

  dimension: eff_bkg_sts_cd {
    label: "EFF_BKG_STS_CD" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.EFF_BKG_STS_CD ;;
  }

  dimension: eff_file_id {
    type: number
    sql: ${TABLE}.EFF_FILE_ID ;;
  }

  dimension: eff_prcs_batch_id {
    type: number
    sql: ${TABLE}.EFF_PRCS_BATCH_ID ;;
  }

  dimension_group: eff_received_dt {
    label: "EFF_RECEIVED_DT"  # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EFF_RECEIVED_DT ;;
  }

  dimension: eff_week {
    label: "EFF_WEEK" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.EFF_WEEK ;;
  }

  dimension: first_bkg_cgo_tp_cd {
    label: "FIRST_BKG_CGO_TP_CD"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FIRST_BKG_CGO_TP_CD ;;
  }

  dimension: first_bkg_sts_cd {
    label: "FIRST_BKG_STS_CD" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FIRST_BKG_STS_CD ;;
  }

  dimension: first_file_id {
    type: number
    sql: ${TABLE}.FIRST_FILE_ID ;;
  }

  dimension: first_prcs_batch_id {
    type: number
    sql: ${TABLE}.FIRST_PRCS_BATCH_ID ;;
  }

  dimension_group: first_received_dt {
    label: "FIRST_RECEIVED_DT"  # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.FIRST_RECEIVED_DT ;;
  }

  dimension: is_all_cncl {
    label: "IS_ALL_CNCL"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.IS_ALL_CNCL ;;
  }

  dimension: is_teu_chg {
    label: "IS_TEU_CHG" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.IS_TEU_CHG ;;
  }

  dimension: last_total_teu {
    label: "LAST_TOTAL_TEU" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.LAST_TOTAL_TEU ;;
  }

  dimension: org_total_teu {
    label: "ORG_TOTAL_TEU"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.ORG_TOTAL_TEU ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [bkg_no, count]
  }
}

view: of_primary_contact {
  derived_table: {
    sql: SELECT primary_contact AS contact_oneforce_id,
                oneforce_id  AS customer_oneforce_id,
                cust_cd AS cust_cd
          FROM  `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT`
          WHERE  primary_contact is not null
          union all
          SELECT cc.oneforce_id AS contact_oneforce_id,
                cc.accountid  AS customer_oneforce_id,
                vv.cust_cd
          FROM  `ONEFORCE.OF_CONTACT` cc
          inner join  `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` vv on cc.accountid = vv.oneforce_id
          WHERE cc.is_primary_contact = 'true' and cc.inactive = false
          ;;
    persist_for: "4 hours"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: contact_oneforce_id {
    type: string
    sql: ${TABLE}.contact_oneforce_id ;;
  }

  dimension: customer_oneforce_id {
    type: string
    sql: ${TABLE}.customer_oneforce_id ;;
  }

  dimension: cust_cd {
    type: string
    sql: ${TABLE}.cust_cd ;;
  }

  set: detail {
    fields: [contact_oneforce_id, customer_oneforce_id]
  }
}

view: of_product2 {
  sql_table_name: `ONEFORCE.OF_PRODUCT2`
    ;;

  dimension: code {
    type: string
    sql: ${TABLE}.Code ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: description {
    type: string
    sql: ${TABLE}.Description ;;
  }

  dimension: description_ {
    type: string
    sql: ${TABLE}.Description_ ;;
  }

  dimension: display_url {
    type: string
    sql: ${TABLE}.DisplayUrl ;;
  }

  dimension: external_data_source_id {
    type: string
    sql: ${TABLE}.ExternalDataSourceId ;;
  }

  dimension: external_id {
    type: string
    sql: ${TABLE}.ExternalId ;;
  }

  dimension: family {
    type: string
    sql: ${TABLE}.Family ;;
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: is_active {
    type: string
    sql: ${TABLE}.IsActive ;;
  }

  dimension: is_archived {
    type: string
    sql: ${TABLE}.IsArchived ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension_group: last_modified_date_integration_user {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.Last_Modified_Date_Integration_User ;;
  }

  dimension_group: last_referenced {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastReferencedDate ;;
  }

  dimension_group: last_viewed {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastViewedDate ;;
  }

  dimension_group: msd_first_migrated_datetime {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.MSD_First_Migrated_Datetime ;;
  }

  dimension_group: msd_last_migrated_datetime {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.MSD_Last_Migrated_Datetime ;;
  }

  dimension: msd_last_modified_by {
    type: string
    sql: ${TABLE}.MSD_Last_Modified_By ;;
  }

  dimension_group: msd_last_modified_datetime {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.MSD_Last_Modified_Datetime ;;
  }

  dimension: msd_legacy_id {
    type: string
    sql: ${TABLE}.MSD_Legacy_Id ;;
  }

  dimension: msd_legacy_owner_email {
    type: string
    sql: ${TABLE}.MSD_Legacy_Owner_Email ;;
  }

  dimension: msd_legacy_owner_id {
    type: string
    sql: ${TABLE}.MSD_Legacy_Owner_Id ;;
  }

  dimension: msd_legacy_owner_name {
    type: string
    sql: ${TABLE}.MSD_Legacy_Owner_Name ;;
  }

  dimension: msd_migrated_remark {
    type: string
    sql: ${TABLE}.MSD_Migrated_Remark ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
    primary_key: yes
  }

  dimension_group: opus_created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.OPUS_Created_On ;;
  }

  dimension_group: opus_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.OPUS_Modified_On ;;
  }

  dimension: product_code {
    type: string
    sql: ${TABLE}.ProductCode ;;
  }

  dimension: quantity_unit_of_measure {
    type: string
    sql: ${TABLE}.QuantityUnitOfMeasure ;;
  }

  dimension: stock_keeping_unit {
    type: string
    sql: ${TABLE}.StockKeepingUnit ;;
  }

  dimension_group: system_modstamp {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.SystemModstamp ;;
  }

  measure: count {
    type: count
    drill_fields: [name, msd_legacy_owner_name]
  }
}

view: of_prospect_customer {
  sql_table_name: `ONEFORCE.OF_PROSPECT_CUSTOMER`
    ;;

  dimension: oneforce_id {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: capi_amt {
    label: "Capital Amount" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.CAPI_AMT ;;
  }

  dimension: capi_curr_cd {
    label: "Capital Currency Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CAPI_CURR_CD ;;
  }

  dimension: cntr_cust_tp_cd {
    label: "Customer Type"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CNTR_CUST_TP_CD ;;
  }

  dimension: crm_if_flg {
    label: "Track in CRM" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CRM_IF_FLG ;;
  }

  dimension: crnt_vol_knt {
    label: "Yearly Volume (TEU)"  # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.CRNT_VOL_KNT ;;
  }

  dimension: cty_nm {
    label: "City" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CTY_NM ;;
  }

  dimension: cust_cnt_cd {
    label: "Country"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_CNT_CD ;;
  }

  dimension: cust_div_cd {
    label: "Individual/Group" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_DIV_CD ;;
  }

  dimension: cust_eml {
    label: "Email Address"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_EML ;;
  }

  dimension: cust_fax {
    label: "Fax"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_FAX ;;
  }

  dimension: cust_grp_hrchy_cd {
    label: "Office Type"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_GRP_HRCHY_CD ;;
  }

  dimension: cust_grp_id {
    label: "Customer Group Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_GRP_ID ;;
  }

  dimension: cust_rgst_no {
    label: "Tax ID" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_RGST_NO ;;
  }

  dimension: delt_flg {
    label: "Inactive" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.DELT_FLG ;;
  }

  dimension: finc_sts_lvl_cd {
    label: "Finance Status Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FINC_STS_LVL_CD ;;
  }

  dimension: frt_fwrd {
    label: "Is A Forwarder?"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRT_FWRD ;;
  }

  dimension: frt_fwrd_fmc_no {
    label: "Forwarder No."  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FRT_FWRD_FMC_NO ;;
  }

  dimension: indiv_corp_div_cd {
    label: "Firm/Private Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.INDIV_CORP_DIV_CD ;;
  }

  dimension: indus_desc {
    label: "Industry Type Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.INDUS_DESC ;;
  }

  dimension_group: key_acct_end_eff_dt {
    label: "GCM Account Exp Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.KEY_ACCT_END_EFF_DT ;;
  }

  dimension: key_acct_flg {
    label: "GCM Account"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.KEY_ACCT_FLG ;;
  }

  dimension_group: key_acct_st_eff_dt {
    label: "GCM Account Effective Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.KEY_ACCT_ST_EFF_DT ;;
  }

  dimension: loc_cd {
    label: "Location Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LOC_CD ;;
  }

  dimension: lsr_flg {
    label: "Is a Lessor?" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LSR_FLG ;;
  }

  dimension: mfr_flg {
    label: "Is a Manufacturer?" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MFR_FLG ;;
  }

  dimension: mlt_trd_acct_flg {
    label: "Multi Trade Account"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.MLT_TRD_ACCT_FLG ;;
  }

  dimension: name {
    label: "Customer Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NAME ;;
  }

  dimension: nbs_clss_cd1 {
    label: "Customer Sub Typ Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NBS_CLSS_CD1 ;;
  }

  dimension: nbs_clss_cd3 {
    label: "Regional Key Account" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NBS_CLSS_CD3 ;;
  }

  dimension: nmd_cust_flg {
    label: "Named Customer" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.NMD_CUST_FLG ;;
  }

  dimension_group: of_cre_dt {
    label: "Created Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.OF_CRE_DT ;;
  }

  dimension: of_cre_usr_id {
    label: "Created By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OF_CRE_USR_ID ;;
  }

  dimension: of_owner_id {
    label: "Owner Id, or Sales Person designated to this customer"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OF_OWNER_ID ;;
  }

  dimension_group: of_upd_dt {
    label: "Last Modified Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.OF_UPD_DT ;;
  }

  dimension: of_upd_usr_id {
    label: "Last Modified By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OF_UPD_USR_ID ;;
  }

  dimension: ofc_cd {
    view_label: "Office Information"
    label: "Admin Office Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OFC_CD ;;
  }

  dimension: ofc_nm {
    view_label: "Office Information"
    label: "Sales Person's Office"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OFC_NM ;;
  }

  dimension: parent_customer_code {
    label: "Parent Customer"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Parent_Customer_Code ;;
  }

  dimension: post_code {
    label: "Zip/Postal Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.POST_CODE ;;
  }

  dimension: shp_agnt_flg {
    label: "Is a Shipping Agent?" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SHP_AGNT_FLG ;;
  }

  dimension: srep_eml {
    label: "Sales Rep Email"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_EML ;;
  }

  dimension: srep_nm {
    label: "Sales Rep Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_NM ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [name]
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

#added for service cloud 2.O KPI dashboards

view: of_queue {
  sql_table_name: `ONEFORCE.OF_QUEUE`
    ;;

  dimension: oneforce_id {
    label: "OneForce ID"
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
    primary_key: yes
    hidden: yes
  }

  dimension: developer_name {
    label: "Queue Name"
    type: string
    sql: ${TABLE}.DeveloperName ;;
    drill_fields: [drillfields*]
  }

  dimension: queue_email {
    label: "Queue Email"
    type: string
    sql: ${TABLE}.Email ;;
  }

  dimension: routing_configuration {
    label: "Routing Configuration"
    hidden: yes
    type: string
    sql: ${TABLE}.QueueRoutingConfigId ;;
  }

  dimension: type {
    label: "Type"
    hidden: yes
    type: string
    sql: ${TABLE}.Type ;;
  }

  dimension: owner_id{
    label: "Owner ID"
    type: string
    sql: ${TABLE}.OwnerId ;;
    hidden: yes
  }
  dimension: created_by {
    label: "Created By"
    type: string
    sql: ${TABLE}.CreatedById ;;
    hidden: yes
  }

  dimension: modified_by {
    label: "Modified By"
    type: string
    sql: ${TABLE}.LastModifiedById ;;
    hidden: yes
  }

  dimension: ownedbyQueue {
    view_label: "Case"
    label: "Case Owned by Queue"
    type: string
    sql: (CASE WHEN ${TABLE}.DeveloperName is not Null THEN "Yes" else "No" END) ;;
  }

  dimension: country_queue {
    label: "County Code Queue"
    type: string
    #sql: CASE WHEN instr(${TABLE}.DeveloperName,"_")=3 THEN substr(${TABLE}.DeveloperName,1, instr(${TABLE}.DeveloperName,"_")-1) ELSE "Unknown" END ;;
    #To Map NA to US
    sql: CASE
      WHEN instr(${TABLE}.DeveloperName,"_")=3 AND substr(${TABLE}.DeveloperName,1, instr(${TABLE}.DeveloperName,"_")-1)="NA" THEN "US"
      WHEN instr(${TABLE}.DeveloperName,"_")=3 THEN substr(${TABLE}.DeveloperName,1, instr(${TABLE}.DeveloperName,"_")-1) ELSE "Unknown" END ;;
    drill_fields: [drillfields*]
  }

  dimension: office_queue {
    label: "Office Code Queue"
    type: string
    sql: substr(${TABLE}.DeveloperName,4,5);;
  }

  set: drillfields {
    fields: [
      queue_name_office_hierarchy.regional_head_office_short_nm,
      queue_name_office_hierarchy.country,
      of_case.origin,
      of_case.initial_queue_name,
      of_case.sub_category_l2,
      of_case.subordinate_category_l3,
      of_customer_group.cust_grp_and_name,
      of_customer.customer_cd_and_name,
      of_case.case_owner_name,
      of_user.name,
      of_case.priority,
      of_case.case_age_group,
      of_case.status,
      of_case.nps_group,
      of_case.createddate_month,
      of_case.ecomm_id,
      of_contact.name,
      of_case.contactemail
    ]
  }
}

#ended for service cloud 2.O KPI dashboards

#added for service cloud 2.O KPI dashboards
view: of_queue_member {
  sql_table_name: `ONEFORCE.OF_QUEUE_MEMBER`
    ;;

  dimension: user_or_group_id {
    label: "User Name"
    type: string
    sql: ${TABLE}.UserOrGroupId ;;
    hidden: yes
  }

  dimension: group_id {
    label: "Queue ID"
    type: string
    sql: ${TABLE}.GroupId ;;
    hidden: yes
  }

  dimension: oneforce_id {
    label: "OneforceID"
    type: string
    hidden: yes
    sql: ${TABLE}.ONEForce_ID ;;
    primary_key: yes
  }

  measure: queue_size {
    view_label: "Queue"
    label: "Queue size"
    type: count_distinct
    sql: ${oneforce_id} ;;
  }

  measure: user_group_id {
    label: "User Count"
    type: count_distinct
    sql: ${TABLE}.UserOrGroupId ;;
  }
}
#added for service cloud 2.O KPI dashboards

view: of_record_type {
  sql_table_name: `ONEFORCE.OF_RECORD_TYPE`
    ;;

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  measure: count {
    type: count
    drill_fields: [name]
  }
}

view: of_reg_ref {
  sql_table_name: `ONEFORCE.OF_REG_REF`
    ;;

  dimension: cust_cnt_cd {
    hidden: no #this information is necessary, cause some information is controled by admin office, not just regional Office, like which office is responsible to fill out customer group information
    label: "Customer country"
    type: string
    sql: ${TABLE}.CUST_CNT_CD ;;
    description: "Customer Country adm"
  }

  dimension: reg_cust_cnt_cd {
    type: string
    sql: ${TABLE}.REG_CUST_CNT_CD ;;
  }

  dimension: reg_nm1 {
    label: "Region Name"
    type: string
    sql: ${TABLE}.REG_NM1 ;;
  }

  dimension: reg_nm2 {
    type: string
    sql: ${TABLE}.REG_NM2 ;;
  }

  dimension: reg_rhq_code {
    #WH DCN-997 (202307) - rename Contract Office RHQ to Contract RHQ
    #label: "{%  if    _view._name ==  \"contract_office_region\" %}Contract Office RHQ{%
    #            elsif _view._name ==  \"DEL_reg_ref\"            %}DEL RHQ{%
    #            elsif _view._name ==  \"POR_reg_ref\"            %}POR RHQ{%
    #            else                                             %}RHQ{%
    #            endif %}"
    label: "{%  if    _view._name ==  \"contract_office_region\" %}Contract RHQ{%
    elsif _view._name ==  \"DEL_reg_ref\"            %}DEL RHQ{%
    elsif _view._name ==  \"POR_reg_ref\"            %}POR RHQ{%
    else                                             %}RHQ{%
    endif %}"

    type:  string
    case: {
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "BR" ;;
        label: "SAOHQ"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "US" ;;
        label: "RICHQ"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "HK" ;;
        label: "HKGHQ"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "SG" ;;
        label: "SINHQ"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "GB" ;;
        label: "LONHQ"
      }
      #else: "XXXHQ"
    }
  }

  dimension: reg_rhq_abbrev {
    label: "Region Abbrev"
    type:  string
    case: {
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "BR" ;;
        label: "LAM"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "US" ;;
        label: "NAM"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "HK" ;;
        label: "EAS"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "SG" ;;
        label: "SAS"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "GB" ;;
        label: "EUA"
      }
      #else: "XXXHQ"
    }
  }


  dimension: reg_rhq_name {
    type:  string
    case: {
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "BR";;
        label: "Brazil - Sao Paulo - SAOHQ"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "US";;
        label: "United States - Richmond - RICHQ"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "HK";;
        label: "Hong Kong - Hong Kong - HKGHQ"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "SG";;
        label: "Singapore - Singapore - SINHQ"
      }
      when: {
        sql: ${TABLE}.reg_cust_cnt_cd = "GB";;
        label: "United Kingdom - London - LONHQ"
      }
      #else: "Unclaimed - RHQ "
    }
  }

  dimension: dummy {
    type: string
    sql: 'DUMMY' ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }
}

view: Key_Acct_Reg_Ref {
  extends: [of_reg_ref]

  dimension: cust_cnt_code {
    view_label: "Key Account Region"
    group_label: "Key Account Country RHQ"
    label: "Key Account Country Code"
  }

  dimension: reg_cust_cnt_cd {
    view_label: "Key Account Region"
    group_label: "Key Account Country RHQ"
    label: "Key Account Region Country Code"
  }

  dimension: reg_nm1 {
    view_label: "Key Account Region"
    group_label: "Key Account Country RHQ"
    label: "Key Account Region Name 1"
  }

  dimension: reg_nm2 {
    view_label: "Key Account Region"
    group_label: "Key Account Country RHQ"
    label: "Key Account Region Name 2"
  }

  dimension: reg_rhq_code {
    view_label: "Key Account Region"
    group_label: "Key Account Country RHQ"
    label: "Key Account Region HQ code"
  }

  dimension: reg_rhq_name {
    view_label: "Key Account Region"
    group_label: "Key Account Country RHQ"
    label: "Key Account Region HQ Name"
  }

  measure: count {
    view_label: "Key Account Region"
    group_label: "Key Account Country RHQ"
    label: "Key Account Region Count"
  }
}

view: of_region {
  sql_table_name: @{table_region}
    ;;

  dimension: code {
    primary_key: yes
    type: string
    sql: ${TABLE}.Code ;;
    hidden: yes
  }

  dimension: country_code {
    type: string
    sql: ${TABLE}.Country_Code ;;
    hidden: yes
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
    hidden: yes
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
    hidden: yes
  }

  dimension: region_name {
    type: string
    sql: ${TABLE}.Region_Name ;;
  }

  dimension: region_code_and_name {
    type: string
    sql: concat(${code}, " - ", ${region_name}) ;;
    hidden: yes
  }

  measure: count {
    type: count
    drill_fields: [region_name]
    hidden: yes
  }

  set: primary_key {
    fields: [code, count]
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: actual_empty_pick_up_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Actual Empty Pick Up"
    label: "Actual Empty Pick Up Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: actual_empty_return_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Actual Empty Return"
    label: "Actual Empty Return Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: estimated_empty_pick_up_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Estimated Empty Pick Up"
    label: "Estimated Empty Pick Up Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: estimated_empty_return_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Estimated Empty Return"
    label: "Estimated Empty Return Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: final_POL_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Final POL"
    label: "Final POL Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: first_POL_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "First POL"
    label: "First POL Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: first_POD_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "First POD"
    label: "First POD Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: trunk_POD_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Trunk POD"
    label: "Trunk POD Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: trunk_POL_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "Trunk POL"
    label: "Trunk POL Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: POR_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "POR"
    label: "POR Region Count"
  }
}

# EXTENDED VIEWS SHOULD ONLY USE label, group_label, and view_label
view: DEL_region {
  extends: [of_region]

  dimension: code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Region Code"
  }

  dimension: country_code {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Country Code"
  }

  dimension: inactive {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Inactive"
  }

  dimension: oneforce_id {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL ONEForce Id"
  }

  dimension: region_name {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Region Name"
  }

  dimension: region_code_and_name {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Region Code & Name"
  }

  measure: count {
    view_label: "Route Information"
    group_label: "DEL"
    label: "DEL Region Count"
  }
}

view: of_sales_budget_capture {
  sql_table_name: `ONEFORCE.OF_SALES_BUDGET_CAPTURE`
    ;;

  dimension: oneforce_id {
    hidden: yes
    label: "ONEForce Id"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: controlling_office {
    label: "Controlling Office" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Controlling_Office ;;
  }

  dimension: created_by_id {
    label: "Created By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: customer_code {
    label: "Customer Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Customer_Code ;;
  }

  dimension: last_modified_by_id {
    label: "Last Modified By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: origin_country {
    label: "Origin Country" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Origin_Country ;;
  }

  dimension: plan_period {
    label: "Plan Period"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Plan_Period ;;
  }

  dimension: sales_budget {
    type: string
    sql: ${TABLE}.Sales_Budget ;;
  }

  dimension: sales_budget_owner_id {
    type: string
    sql: ${TABLE}.Sales_Budget_Owner_ID ;;
  }

  dimension: sales_person_id {
    label: "Sales Person" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Sales_Person_ID ;;
  }

  dimension: sales_target_total_teu {
    label: "Sales Target TEU" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.Sales_Target_Total_TEU ;;
  }

  dimension: service_scope_group {
    label: "Service Scope Group"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: year {
    label: "Year" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.Year ;;
  }

# NA dashboard <start>
#  dimension: budget_type {
#    label: "Budget Type"
#    type: string
#    sql: 'Controlling Office' ;;
#  }
#
#  dimension: dom_non_dom {
#    label: "Dom/Non-Dom"
#    type: string
#    sql: 'DOM' ;;
#  }
#
#  dimension: lane {
#    label: "Service Lane"
#    type: string
#    sql: 'FE1' ;;
#  }
#
#  dimension: sales_target_cm_usd {
#    label: "Sales Target CM"
#    type: number
#    sql: ${sales_target_total_teu} * 1100 ;;
#  }
# NA dashboard <end>

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: of_sales_budget_capture_dtl {
  sql_table_name: `ONEFORCE.OF_SALES_BUDGET_CAPTURE_DTL`
    ;;

  dimension: oneforce_id {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension_group: month_year {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Month_Year ;;
  }

  dimension: monthly_target {
    type: number
    sql: ${TABLE}.Monthly_Target ;;
  }

  dimension: sales_budget_capture {
    type: string
    sql: ${TABLE}.Sales_Budget_Capture ;;
  }

  dimension: weekly_average {
    type: number
    sql: ${TABLE}.Weekly_Average ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: of_sales_team_member {
  sql_table_name: `ONEFORCE.OF_SALES_TEAM_MEMBER`
    ;;

  dimension: oneforce_id {
    hidden: yes
    label: "ONEForce Id"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: commodity {
    label: "Commodity"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Commodity ;;
  }

  dimension: container_type {
    label: "Container Type" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Container_Type ;;
  }

  dimension: created_by_id {
    label: "Created By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    label: "Created Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: customer {
    hidden: yes
    type: string
    sql: ${TABLE}.Customer ;;
  }

  dimension: customer_group {
    type: string
    sql: ${TABLE}.Customer_Group ;;
  }


  dimension: destination {
    label: "Destination"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Destination ;;
  }

  dimension: last_modified_by_id {
    label: "Last Modified By Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    label: "Last Modified Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: origin {
    label: "Origin" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Origin ;;
  }

  dimension: sales_person {
    type: string
    sql: ${TABLE}.Sales_Person ;;
  }

  dimension: service_scope {
    label: "Service Scope"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Service_Scope ;;
  }

  dimension: service_scope_group {
    label: "Service Scope Group"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: svc_rfa_number {
    label: "SVC RFA Number" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SVC_RFA_Number ;;
  }

  dimension: team_role {
    label: "Team Member Role" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Team_Role ;;
  }

  dimension: inactive {
    label: "Inactive" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: status {
    label: "Status" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Status ;;
  }

  dimension: exception {
    label: "Exception" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Exception ;;
  }


  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: of_sales_team_member_contract_country {
  derived_table: {
    sql:   WITH sales_team_member_contract_country AS  (
          SELECT m.ONEForce_ID,
                 m.Contract_Country ,
                 m.Customer_Group,
                 g.cust_grp_id,
                 m.Sales_Person,
                 m.Team_Role,
                 m.LastModifiedDate,
                 m.CreatedDate,
                SPLIT(Contract_Country, ';') Contract_Country_Array
          FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` m
          LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g  ON (m.Customer_Group = g.ONEForce_Id )
          WHERE  Contract_Country is not null and Inactive = 'false'
      )
      SELECT oneforce_id, Customer_Group, cust_grp_id, Sales_Person, Team_Role, contract_country_code, LastModifiedDate, CreatedDate
      FROM sales_team_member_contract_country
      CROSS JOIN UNNEST(sales_team_member_contract_country.contract_country_array) AS contract_country_code
      ;;
    persist_for: "30 minutes"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
  }

  dimension: customer_group {
    type: string
    sql: ${TABLE}.Customer_Group ;;
  }

  dimension: cust_grp_id {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: sales_person {
    type: string
    sql: ${TABLE}.Sales_Person ;;
  }

  dimension: team_role {
    type: string
    sql: ${TABLE}.Team_Role ;;
  }

  dimension: contract_country_code {
    type: string
    sql: ${TABLE}.contract_country_code ;;
  }

  dimension: LastModifiedDate {
    type: date_raw
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: CreatedDate {
    type: date_raw
    sql: ${TABLE}.CreatedDate ;;
  }

  set: detail {
    fields: [oneforce_id, contract_country_code]
  }
}

view: of_sales_team_member_country_split {
  derived_table: {
    sql: WITH sales_team_member_contract_country AS  (
          SELECT m.ONEForce_ID,
                 m.Contract_Country ,
                 m.Customer_Group,
                 g.cust_grp_id,
                 m.Sales_Person,
                 m.Team_Role,
                 m.Exception,
                 m.Status,
                SPLIT(Contract_Country, ';') Contract_Country_Array
          FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` m
          LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g  ON (m.Customer_Group = g.ONEForce_Id )
          WHERE  Contract_Country is not null and Inactive = 'false')

      , sales_team_member_service_country AS  (
      SELECT m.ONEForce_ID,
      m.Service_Country ,
      m.Customer_Group,
      g.cust_grp_id,
      m.Sales_Person,
      m.Team_Role,
      m.Exception,
      m.Status,
      SPLIT(Service_Country, ';') Service_Country_Array
      FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` m
      LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g  ON (m.Customer_Group = g.ONEForce_Id )
      WHERE  Service_Country is not null and Inactive = 'false'
      )

      SELECT oneforce_id, Customer_Group, cust_grp_id, Sales_Person, Team_Role, contract_country_code as Country_Code, Exception, Status
      FROM sales_team_member_contract_country
      CROSS JOIN UNNEST(sales_team_member_contract_country.contract_country_array) AS contract_country_code

      union all

      SELECT oneforce_id, Customer_Group, cust_grp_id, Sales_Person, Team_Role, service_country_code as Country_Code, Exception, Status
      FROM sales_team_member_service_country
      CROSS JOIN UNNEST(sales_team_member_service_country.service_country_array) AS service_country_code

      union all

      SELECT sstm.oneforce_id, sstm.Customer_Group, g.CUST_GRP_ID as cust_grp_id, sstm.Sales_Person, sstm.Team_Role, null as Country_Code, sstm.Exception, sstm.Status
      FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` sstm
      LEFT JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g
      ON (sstm.Customer_Group = g.ONEForce_Id )
      where sstm.Service_Country is null and sstm.Contract_Country is null and Inactive = 'false'
      ;;
  }


  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: Primary_key {
    hidden: yes
    label: "Primary_key"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: concat(${oneforce_id},${cust_grp_id},${sales_person},${team_role},${country_code} ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
  }

  dimension: customer_group {
    type: string
    sql: ${TABLE}.Customer_Group ;;
  }

  dimension: cust_grp_id {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: sales_person {
    type: string
    sql: ${TABLE}.Sales_Person ;;
  }

  dimension: team_role {
    type: string
    sql: ${TABLE}.Team_Role ;;
  }

  dimension: country_code {
    type: string
    sql: ${TABLE}.Country_Code ;;
  }

  dimension: exception {
    type: string
    sql: ${TABLE}.Exception ;;
  }

  dimension: status {
    type: string
    sql: ${TABLE}.Status ;;
  }

  set: detail {
    fields: [
      oneforce_id,
      customer_group,
      cust_grp_id,
      sales_person,
      team_role,
      country_code,
      exception,
      status
    ]
  }
}

view: of_sales_team_member_service_country {
  derived_table: {
    sql: WITH sales_team_member_service_country AS  (
          SELECT m.ONEForce_ID, Service_Country , SPLIT(Service_Country, ';') Service_Country_Array
          FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` m
          WHERE m.Inactive = 'false'
      )
      SELECT oneforce_id, service_country_code
      FROM sales_team_member_service_country
      CROSS JOIN UNNEST(sales_team_member_service_country.service_country_array) AS service_country_code
       ;;
    persist_for: "30 minutes"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
  }

  dimension: service_country_code {
    type: string
    sql: ${TABLE}.service_country_code ;;
  }

  set: detail {
    fields: [oneforce_id, service_country_code]
  }
}

view: of_sales_user_global {
  derived_table: {
    sql: select w1.isoweek_start_date,  w1.isoweek,  count(distinct u1.oneforce_id) as rec_count
      from ${of_user.SQL_TABLE_NAME} u1
      inner join  ${of_calendar.SQL_TABLE_NAME} w1 on ((u1.isactive = 'true' and u1.createddate <= w1.isoweek_end_date )
             or (u1.isactive = 'false' and w1.isoweek_start_date between u1.createddate and u1.lastmodifieddate))
      where lower(trim(u1.profile_name)) in ("third party agent", "sales executive")
      group by 1,2
       ;;
    persist_for: "24 hours"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension_group: isoweek_start_date {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.isoweek_start_date;;
  }

  dimension: isoweek {
    type: number
    sql: ${TABLE}.isoweek ;;
  }

  dimension: rec_count {
    type: number
    sql: ${TABLE}.rec_count ;;
  }

  measure: max_sales_count {
    type: max
    sql: ${rec_count} ;;
  }

  set: detail {
    fields: [isoweek_start_date_date, isoweek, rec_count]
  }
}

view: of_sales_user_manager {
  derived_table: {
    sql: with aa As (select distinct managerid from ${of_user.SQL_TABLE_NAME}
      where lower(profile_name) in ("third party agent",  "sales executive" ))
      select u.* from ${of_user.SQL_TABLE_NAME} u
      inner join aa on aa.managerid = u.oneforce_id
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: country {
    type: string
    sql: ${TABLE}.Country ;;
  }

  dimension: office_code {
    type: string
    sql: ${TABLE}.Office_Code ;;
  }

  dimension: regional_head_office {
    type: string
    sql: ${TABLE}.Regional_Head_Office ;;
  }

  dimension: parent_office {
    type: string
    sql: ${TABLE}.Parent_Office ;;
  }

  dimension: user_role_id {
    type: string
    sql: ${TABLE}.UserRoleId ;;
  }

  dimension: user_role_name {
    type: string
    sql: ${TABLE}.User_Role_Name ;;
  }

  dimension: profile_id {
    type: string
    sql: ${TABLE}.ProfileId ;;
  }

  dimension: profile_name {
    type: string
    sql: ${TABLE}.Profile_Name ;;
  }

  dimension: city {
    type: string
    sql: ${TABLE}.City ;;
  }

  dimension: crm_trainer {
    type: string
    sql: ${TABLE}.CRM_Trainer ;;
  }

  dimension: suppressed_in_crm_usage_kpi_dashboard {
    type: string
    sql: ${TABLE}.Suppressed_in_CRM_Usage_KPI_Dashboard ;;
  }

  dimension: username {
    type: string
    sql: ${TABLE}.Username ;;
  }

  dimension: first_name {
    type: string
    sql: ${TABLE}.FirstName ;;
  }

  dimension: email {
    type: string
    sql: ${TABLE}.Email ;;
  }

  dimension: last_name {
    type: string
    sql: ${TABLE}.LastName ;;
  }

  dimension: full_name {
    type: string
    sql: Initcap(concat(${first_name}," ",${last_name})) ;;
  }

  dimension: manager_id {
    type: string
    sql: ${TABLE}.ManagerId ;;
  }

  dimension: title {
    type: string
    sql: ${TABLE}.Title ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: rownum_by_email {
    type: number
    sql: ${TABLE}.rownum_by_email ;;
  }

  dimension_group: created_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension_group: last_modified_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: is_active {
    type: string
    sql: ${TABLE}.IsActive ;;
  }

  dimension: email_2 {
    type: string
    sql: ${TABLE}.Email_2 ;;
  }

  dimension: tpa_user {
    type: string
    sql: ${TABLE}.TPA_user ;;
  }

  set: detail {
    fields: [
      country,
      office_code,
      regional_head_office,
      parent_office,
      user_role_id,
      user_role_name,
      profile_id,
      profile_name,
      city,
      crm_trainer,
      suppressed_in_crm_usage_kpi_dashboard,
      username,
      first_name,
      email,
      last_name,
      manager_id,
      title,
      oneforce_id,
      rownum_by_email,
      created_date_time,
      last_modified_date_time,
      is_active,
      email_2,
      tpa_user
    ]
  }
}

view: of_sales_user_weekly {
  derived_table: {
    sql: select w.calendar_year, w.calendar_year_month, w.isoweek_start_date,  w.isoweek, u.firstname||' '||u.lastname as fullname, u.oneforce_id,
                u.office_code_number as office_code,  case when u.Regional_Head_Office is not null then trim(substr(u.Regional_Head_Office, instr(u.Regional_Head_Office,'-')+1))
         else "Unclaimed Region"  end  as region_short_nm,
               SUBSTR (u.Office_Code, 1, STRPOS(u.Office_Code, '-') -2) as office_country,
               mu.firstname||' '||mu.lastname as manager_fullname,
               u.ManagerId as manager_id
          from ${of_user.SQL_TABLE_NAME} u
          inner join  ${of_calendar.SQL_TABLE_NAME} w on ((u.isactive = 'true' and u.createddate <= w.isoweek_end_date ) or (u.isactive = 'false' and w.isoweek_start_date between u.createddate and u.lastmodifieddate))
          left join ${of_office.SQL_TABLE_NAME} f on f.office_code = u.office_code_number
          left join ${of_user.SQL_TABLE_NAME} mu on mu.oneforce_id = u.managerId
          where lower(trim(u.profile_name)) in ("third party agent", "sales executive")
          and w.calendar_year between '2021' and '2022'

      ;;

    persist_for: "24 hours"
  }

  measure: count {
    type: count
    hidden: yes
    drill_fields: [detail*]
  }

  measure: user_count {
    type: count_distinct
    sql: ${oneforce_id};;
    drill_fields: [detail*]
  }

  dimension: user_weekly_pk {
    type: string
    sql:  concat(cast(${TABLE}.isoweek as string),"-", ${TABLE}.oneforce_id);;
    primary_key: yes
  }

  dimension: isoweek {
    type: number
    sql: ${TABLE}.isoweek ;;
  }

  dimension: fullname {
    type: string
    sql: ${TABLE}.fullname;;
  }

  dimension: manager_fullname {
    type: string
    sql: ${TABLE}.manager_fullname;;
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.calendar_year ;;
  }

  dimension: calendar_year_month {
    type: string
    sql: ${TABLE}.calendar_year_month ;;
  }

  dimension_group: isoweek_start_date {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.isoweek_start_date;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
  }

  dimension: manager_id {
    type: string
    sql: ${TABLE}.manager_id ;;
  }

  dimension: office_code {
    type: string
    sql: ${TABLE}.office_code ;;
  }

  dimension: region_short_nm {
    type: string
    sql: ${TABLE}.region_short_nm;;
  }

  dimension: office_country {
    type: string
    sql: ${TABLE}.office_country;;
  }

  set: detail {
    fields: [oneforce_id, fullname, office_code]
  }
}

view: of_sales_week_master_1 {
  sql_table_name: `ONEFORCE.OF_SALES_WEEK_MASTER`
    ;;

  dimension: sales_week {
    #hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.Sales_Week ;;
    suggest_persist_for: "24 hour"
  }

  dimension: calendar_quarter {
    type: string
    sql: ${TABLE}.Calendar_Quarter ;;
    suggest_persist_for: "24 hour"
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.Calendar_Year ;;
    drill_fields: [sales_month]
    suggest_persist_for: "24 hour"
  }

  dimension: fiscal_quarter {
    type: string
    sql: ${TABLE}.Fiscal_Quarter ;;
    suggest_persist_for: "24 hour"
  }

  dimension: is_fiscal_ytd {
    type: yesno
    # change by helen on 11-Aug-2021 to align with Power BI logic
    #sql: ${week_start_date} BETWEEN DATE_TRUNC(CURRENT_DATE(), year) AND DATE_TRUNC(CURRENT_DATE(), week) ;;
    sql: ${week_start_date} BETWEEN  CASE WHEN EXTRACT(MONTH FROM date_trunc(current_date(), month) ) >= 4
                                          THEN PARSE_DATE ("%Y%m%d", CAST( (EXTRACT(YEAR  FROM date_trunc(current_date(), month)   )*10000) + 401 AS STRING ))
                                          ELSE PARSE_DATE ("%Y%m%d", CAST( ((EXTRACT(YEAR  FROM date_trunc(current_date(), month))-1 )*10000) + 401 AS STRING ))
                                     END
                            AND current_date() ;;
    suggest_persist_for: "24 hour"
  }

  dimension: is_til_last_completed_month {
    type: yesno
    sql: ${sales_month} >= ${1st_fy_mth} AND ${sales_month} <= ${1_complete_mth_ago} ;;
  }

  dimension: is_til_last_2_completed_month {
    type: yesno
    sql: ${is_fiscal_ytd} AND ${week_start_month} < ${last_2_complete_month} ;;
  }

  ## Add by Zoe Cheung on 4 Oct 2021 ##
  dimension: is_til_last_3_completed_month {
    type: yesno
    sql: ${is_fiscal_ytd} AND ${week_start_month} < ${last_3_complete_month} ;;
  }


  dimension: last_complete_month {
    type: date_month
    sql: date_trunc(current_date(), month) ;;
    convert_tz: no
  }

  dimension: last_2_complete_month {
    type: date_month
    sql: date_trunc(current_date(), month) - 1 ;;
    convert_tz: no
  }

  ## add by Zoe on 4 Oct 2021##
  dimension: last_3_complete_month {
    type: date_month
    sql: date_trunc(current_date(), month) - 2 ;;
    convert_tz: no
  }

  dimension: accumulate_sales_month {
    type: string
    sql:
    CASE
      WHEN ${TABLE}.Sales_Month < ${3_complete_mth_ago}  then 'Acc Total'
      Else ${TABLE}.Sales_Month
      End ;;

    drill_fields: [fiscal_year, fiscal_quarter, sales_week]
  }


  dimension: fiscal_year {
    type: string
    sql: ${TABLE}.Fiscal_Year ;;
    suggest_persist_for: "24 hour"
  }

  dimension: sales_month {
    type: string
    sql: ${TABLE}.Sales_Month ;;
    #WH20210721 - Change: drill_fields: [sales_week]
    drill_fields: [fiscal_year, fiscal_quarter, sales_week]
    suggest_persist_for: "24 hour"
  }

#add Quarter/Fiscal Quarter by Zoe on 23Jun#
  parameter: timeframe_picker {
    label: "Date Granularity"
    type: string
    allowed_value: { value: "Week" }
    allowed_value: { value: "Month" }
    allowed_value: { value: "Quarter" }
    allowed_value: { value: "Fiscal Quarter" }
    allowed_value: { value: "Year" }
    allowed_value: { value: "Fiscal Year" }
    default_value: "Month"
    suggest_persist_for: "24 hour"
  }

#add Quarter/Fiscal Quarter by Zoe on 23Jun#
  dimension: timeframe_dynamic {
    type: string
    # change by Helen to remove view name
    #sql:
    #  CASE
    #    WHEN {% parameter timeframe_picker %} = 'Week'        THEN ${of_sales_week_master.week_start_week}
    #    WHEN {% parameter timeframe_picker %} = 'Month'       THEN ${of_sales_week_master.sales_month}
    #    WHEN {% parameter timeframe_picker %} = 'Quarter'     THEN ${of_sales_week_master.calendar_quarter}
    #    WHEN {% parameter timeframe_picker %} = 'Fiscal Quarter'     THEN ${of_sales_week_master.fiscal_quarter}
    #    WHEN {% parameter timeframe_picker %} = 'Year'        THEN ${of_sales_week_master.calendar_year}
    #    WHEN {% parameter timeframe_picker %} = 'Fiscal Year' THEN ${of_sales_week_master.fiscal_year}
    #            ELSE NULL
    #  END ;;
    sql:
      CASE
        WHEN {% parameter timeframe_picker %} = 'Week'        THEN ${week_start_week}
        WHEN {% parameter timeframe_picker %} = 'Month'       THEN ${sales_month}
        WHEN {% parameter timeframe_picker %} = 'Quarter'     THEN ${calendar_quarter}
        WHEN {% parameter timeframe_picker %} = 'Fiscal Quarter'     THEN ${fiscal_quarter}
        WHEN {% parameter timeframe_picker %} = 'Year'        THEN ${calendar_year}
        WHEN {% parameter timeframe_picker %} = 'Fiscal Year' THEN ${fiscal_year}
        ELSE NULL
        END ;;
    # end change by Helen
      suggest_persist_for: "24 hour"
    }

    dimension_group: week_end {
      type: time
      timeframes: [
        raw,
        date,
        week,
        week_of_year,
        month,
        quarter,
        year
      ]
      convert_tz: no
      datatype: date
      sql: ${TABLE}.Week_End_Date ;;
    }

    dimension_group: week_start {
      type: time
      timeframes: [
        raw,
        date,
        week,
        week_of_year,
        month,
        month_name,
        quarter,
        year
      ]
      convert_tz: no
      datatype: date
      sql: ${TABLE}.Week_Start_Date ;;
    }


    measure: count {
      hidden: yes
      type: count
      drill_fields: []
    }

    set: primary_key {
      fields: [sales_week, count]
    }

    dimension: 1_complete_mth_ago {
      type:  string
      sql: CAST(
         EXTRACT(YEAR  FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 1 MONTH) ) * 100 +
         EXTRACT(MONTH FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 1 MONTH) )
         AS STRING )
    ;;
    }

    dimension: 2_complete_mth_ago {
      type:  string
      sql: CAST(
         EXTRACT(YEAR  FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 2 MONTH) ) * 100 +
         EXTRACT(MONTH FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 2 MONTH) )
         AS STRING )
    ;;
    }

    ## Add by Zoe Cheung on 4 Oct 2021 ##
    dimension: 3_complete_mth_ago {
      type:  string
      sql: CAST(
         EXTRACT(YEAR  FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 3 MONTH) ) * 100 +
         EXTRACT(MONTH FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 3 MONTH) )
         AS STRING )
    ;;
    }


    dimension: current_mth{
      type:  string
      sql: CAST(
         EXTRACT(YEAR  FROM date_trunc(current_date(), month) ) * 100 +
         EXTRACT(MONTH FROM date_trunc(current_date(), month) )
         AS STRING )
    ;;
    }

    dimension: 1st_fy_mth{
      type:  string
      sql: CASE WHEN EXTRACT(MONTH FROM date_trunc(current_date(), month) ) >= 4
              THEN CAST( (EXTRACT(YEAR  FROM date_trunc(current_date(), month)   )*100) + 4 AS STRING )
              ELSE CAST( (EXTRACT(YEAR  FROM date_trunc(current_date(), month)-1 )*100) + 4 AS STRING )
         END
    ;;
    }

    dimension: is_last_2_complete_mth{
      type:  yesno
      sql:   ${sales_month} < ${current_mth} AND ${sales_month} >= ${2_complete_mth_ago}
        ;;
    }

    ## Add by Zoe Cheung on 4 Oct 2021 ##
    dimension: is_last_3_complete_mth{
      type:  yesno
      sql:   (${sales_month} < ${current_mth} AND ${sales_month} >= ${3_complete_mth_ago}) or ${accumulate_sales_month} = 'Acc Total'
        ;;
    }

    dimension: Timeline { # Used in Account Plan
      label: "{% parameter timeframe_picker %}"
      type: string
      #change by Helen to remove view name
      #sql:
      #  CASE
      #    WHEN {% parameter timeframe_picker %} = 'Week'  THEN ${of_sales_week_master.sales_week}
      #    WHEN {% parameter timeframe_picker %} = 'Month' THEN ${of_sales_week_master.sales_month}
      #    WHEN {% parameter timeframe_picker %} = 'Year'  THEN ${of_sales_week_master.calendar_year}
      #    WHEN {% parameter timeframe_picker %} = 'Fiscal Year' THEN ${of_sales_week_master.fiscal_year}
      #    ELSE NULL
      #  END ;;
      sql:
      {% if    timeframe_picker._parameter_value == "'Week'"            %} ${sales_week}
      {% elsif timeframe_picker._parameter_value == "'Month'"           %} ${sales_month}
      {% elsif timeframe_picker._parameter_value == "'Quarter'"         %} ${calendar_quarter}
      {% elsif timeframe_picker._parameter_value == "'Fiscal Quarter'"  %} ${fiscal_quarter}
      {% elsif timeframe_picker._parameter_value == "'Year'"            %} ${calendar_year}
      {% elsif timeframe_picker._parameter_value == "'Fiscal Year'"     %} ${fiscal_year}
      {% else  %} ${sales_month}
      {% endif %} ;;
    # end change by Helen
        suggest_persist_for: "24 hour"
      }

      # New dimension for NA dashboard
      dimension: fiscal_year_new_fmt {
        label: "Fiscal Year (new fmt)"
        type: string
        sql: 'FY'||RIGHT(${fiscal_year},2);;
        #suggest_persist_for: "24 hour"
      }

      dimension: sales_month_new_fmt {
        label: "Sales Month (new fmt)"
        type: string
        sql: LEFT(${sales_month},4) ||'/M'|| RIGHT(${sales_month},2) ;;
        drill_fields: [fiscal_year, fiscal_quarter, sales_week_new_fmt]
        suggest_persist_for: "24 hour"
      }

      dimension: sales_week_new_fmt {
        label: "Sales Week (new fmt)"
        type: string
        sql: LEFT(${sales_week},4) ||'/W'|| RIGHT(${sales_week},2) ;;
        suggest_persist_for: "24 hour"
      }

      dimension: calendar_quarter_new_fmt {
        label: "Calendar Quarter (new fmt)"
        type: string
        sql: LEFT(${calendar_quarter},4) ||'/Q'|| RIGHT(${calendar_quarter},2) ;;
        suggest_persist_for: "24 hour"
      }

      dimension: fiscal_quarter_new_fmt {
        label: "Fiscal Quarter (new fmt)"
        type: string
        sql: ${fiscal_year_new_fmt} ||'/'|| ${fiscal_quarter} ;;
        suggest_persist_for: "24 hour"
      }

      dimension: Timeline_New_Fmt {
        label_from_parameter: timeframe_picker
        type: string
        sql:
              {% if    timeframe_picker._parameter_value == "'Week'"            %} ${sales_week_new_fmt}
              {% elsif timeframe_picker._parameter_value == "'Month'"           %} ${sales_month_new_fmt}
              {% elsif timeframe_picker._parameter_value == "'Quarter'"         %} ${calendar_quarter_new_fmt}
              {% elsif timeframe_picker._parameter_value == "'Fiscal Quarter'"  %} ${fiscal_quarter_new_fmt}
              {% elsif timeframe_picker._parameter_value == "'Year'"            %} ${calendar_year}
              {% elsif timeframe_picker._parameter_value == "'Fiscal Year'"     %} ${fiscal_year_new_fmt}
              {% else  %} ${sales_month}
              {% endif %} ;;
        suggest_persist_for: "24 hour"
      }

      #add by Helen for Sales Activities Monitor which just need Week/Month/Calendar & Fiscal Year#
      parameter: wmcfy_timeframe_picker {
        label: "Date Granularity (WMCFY)"
        type: string
        allowed_value: { value: "Week" }
        allowed_value: { value: "Month" }
        allowed_value: { value: "Year" }
        allowed_value: { value: "Fiscal Year" }
        suggest_persist_for: "24 hour"
      }

      #add by Helen for Sales Event Monitor #
      dimension: wmcfy_timeframe_dynamic {
        label: "{% parameter wmcfy_timeframe_picker %}"
        type: string
        sql:
               CASE
                 WHEN {% parameter wmcfy_timeframe_picker %} = 'Week'        THEN ${sales_week}
                 WHEN {% parameter wmcfy_timeframe_picker %} = 'Month'       THEN ${sales_month}
                 WHEN {% parameter wmcfy_timeframe_picker %} = 'Year'        THEN ${calendar_year}
                 WHEN {% parameter wmcfy_timeframe_picker %} = 'Fiscal Year' THEN ${fiscal_year}
                         ELSE NULL
               END ;;
        suggest_persist_for: "24 hour"
      }
      #end add by Helen for Sales Event Monitor #


      dimension: Calendar_Year_D {
        type: date
        sql: ${calendar_year} ;;
        convert_tz: no
      }

      ## Jack DCN-484: start
      dimension: is_til_last_completed_month_one_sided {
        type: yesno
        sql: ${sales_month} <= ${1_complete_mth_ago} ;;
      }

      measure: sales_month_count {
        type: count_distinct
        sql: ${sales_month} ;;
      }

      measure: sales_month_count_til_last_completed {
        type: count_distinct
        sql: ${sales_month} ;;
        filters: [is_til_last_completed_month_one_sided: "yes"]
      }

      measure: sales_month_min {
        type: min
        sql: ${sales_month} ;;
      }

      measure: sales_month_max {
        type: max
        sql: ${sales_month} ;;
      }

      measure: sales_month_max_till_last_mth {
        type: max
        sql: ${sales_month} ;;
        filters: [is_til_last_completed_month_one_sided: "yes"]
      }

      measure: sales_month_info_till_last_mth {
        type: string
        sql: substr(${sales_month_min},1,4)||'-'||substr(${sales_month_min},5,2) || ' to '|| substr(${sales_month_max_till_last_mth},1,4)||'-'||substr(${sales_month_max_till_last_mth},5,2) || ' ('|| ${sales_month_count_til_last_completed} ||' month'|| case when ${sales_month_count_til_last_completed} > 1 then 's)' else ')' end   ;;
        html: <span style="color:#BD0F72;font-size:large;font-weight:bold;"> <p style="line-height:1;">Performance till the last month</p> <p style="line-height:1;"> {{value}} </p></span> ;;
      }

      measure: sales_month_info_projected {
        type: string
        sql: substr(${sales_month_min},1,4)||'-'||substr(${sales_month_min},5,2) || ' to '|| substr(${sales_month_max},1,4)||'-'||substr(${sales_month_max},5,2) || ' ('|| ${sales_month_count} ||' month'||case when ${sales_month_count} > 1 then 's)' else ')' end  ;;
        html: <span style="color:#3D7876;font-size:large;font-weight:bold;"> <p style="line-height:1;">Performance Projection</p> <p style="line-height:1;"> {{value}} </p></span> ;;
      }


      measure: sales_month_info_as_per_filter {
        type: string
        sql: substr(${sales_month_min},1,4)||'-'||substr(${sales_month_min},5,2) || ' to '|| substr(${sales_month_max},1,4)||'-'||substr(${sales_month_max},5,2) || ' ('|| ${sales_month_count} ||' month'||case when ${sales_month_count}  > 1 then 's)' else ')' end  ;;
        html: <span style="color:#340335;font-size:large;font-weight:bold;"> <p style="line-height:1;">Bookings as of today</p> <p style="line-height:1;"> {{value}} </p></span> ;;
      }

      ## Jack DCN-484: end

      # Jack DCN-35 (duplicate cust grp):start

      dimension: fiscal_year_and_quarter {
        type: string
        sql: ${TABLE}.Fiscal_Year ||'-'|| ${TABLE}.Fiscal_Quarter  ;;
        suggest_persist_for: "24 hour"
      }

      # Jack DCN-35 (duplicate cust grp):end




## Added by Zoe Cheung 24 Dec 2021 ##

## dimension: is_calendar_ytd {
##   type: yesno
##   sql: ${week_start_date} BETWEEN  CASE WHEN EXTRACT(MONTH FROM date_trunc(current_date(), month) ) >= 1
##                                         THEN PARSE_DATE ("%Y%m%d", CAST( (EXTRACT(YEAR  FROM date_trunc(current_date(), month)   )*10000) + 101 AS STRING ))
##                                         ELSE PARSE_DATE ("%Y%m%d", CAST( (EXTRACT(YEAR  FROM date_trunc(current_date(), month)-1 )*10000) + 101 AS STRING ))
##                                    END
##                           AND current_date() ;;
##   suggest_persist_for: "24 hour"
## }

## dimension: 1st_cy_mth{
##   type:  string
##   sql: CASE WHEN EXTRACT(MONTH FROM date_trunc(current_date(), month) ) >= 1
##             THEN CAST( (EXTRACT(YEAR  FROM date_trunc(current_date(), month)   )*100) + 1 AS STRING )
##             ELSE CAST( (EXTRACT(YEAR  FROM date_trunc(current_date(), month)-1 )*100) + 1 AS STRING )
##        END
##   ;;
## }


##  dimension: is_til_last_completed_month_CY {
##    type: yesno
##    sql: ${sales_month} >= ${1st_cy_mth} AND ${sales_month} <= ${1_complete_mth_ago} ;;
##  }

##  dimension: is_til_last_2_completed_month_CY {
##    type: yesno
##    sql: ${is_calendar_ytd} AND ${week_start_month} < ${last_2_complete_month} ;;
##  }

##  ## Add by Zoe Cheung on 4 Oct 2021 ##
##  dimension: is_til_last_3_completed_month_CY {
##    type: yesno
##    sql: ${is_calendar_ytd} AND ${week_start_month} < ${last_3_complete_month} ;;
##  }

      measure: sales_week_count {
        type: count_distinct
        sql: ${sales_week} ;;
      }


      measure: wmcfy_timeframe_count {
        label: "wmcfy_timeframe_count"
        type: count_distinct
        sql: ${wmcfy_timeframe_dynamic} ;;
      }


    }

view: of_sales_week_master2 {
  derived_table: {
    sql: SELECT
          of_sales_week_master.Sales_Week     AS sales_week,
          of_sales_week_master.Calendar_Year  AS calendar_year,
          LEFT(of_sales_week_master.Calendar_Quarter,4) ||'/Q'|| RIGHT(of_sales_week_master.Calendar_Quarter,2)  AS calendar_quarter_new_fmt,
          'FY'||RIGHT(of_sales_week_master.Fiscal_Year,2) AS fiscal_year_new_fmt_pfx,
          RIGHT(of_sales_week_master.Fiscal_Year,4) AS fiscal_year_new_fmt,
          'FY'||RIGHT(of_sales_week_master.Fiscal_Year,2) ||'/'|| of_sales_week_master.Fiscal_Quarter  AS fiscal_quarter_new_fmt,
          LEFT(of_sales_week_master.Sales_Month,4) ||'/M'|| RIGHT(of_sales_week_master.Sales_Month,2)  AS sales_month_new_fmt,
          LEFT(of_sales_week_master.Sales_Week ,4) ||'/W'|| RIGHT(of_sales_week_master.Sales_Week ,2)  AS sales_week_new_fmt,
          (CASE WHEN of_sales_week_master.Sales_Month <=
          (CAST (EXTRACT(YEAR  FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 1 MONTH) ) * 100 +
                 EXTRACT(MONTH FROM DATE_SUB( date_trunc(current_date(), month), INTERVAL 1 MONTH) ) AS STRING ))  THEN 'yes' ELSE 'no' END) AS is_til_last_completed_month_one_sided,
          (CASE WHEN current_date() > of_sales_week_master.Week_END_Date then 'yes' ELSE 'no' END) as is_till_last_cmpl_wk
      FROM `ONEFORCE.OF_SALES_WEEK_MASTER` AS of_sales_week_master
       ;;

    persist_for: "24 hours"
  }

  parameter: calendar_selection {
    label: "Calendar Selection"
    type: string
    allowed_value: { value: "CALENDAR" label: "Calendar" }
    allowed_value: { value: "FISCAL"   label: "Fiscal" }
    default_value: "FISCAL"
    suggest_persist_for: "24 hour"
  }

  dimension: sales_week {
    type: string
    sql: ${TABLE}.sales_week ;;
    primary_key: yes
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.calendar_year ;;
  }

  dimension: fiscal_year_new_fmt {
    type: string
    sql: ${TABLE}.fiscal_year_new_fmt ;;
  }

  dimension: fiscal_year_new_fmt_pfx {
    type: string
    sql: ${TABLE}.fiscal_year_new_fmt_pfx ;;
  }

  dimension: year_by_param {
    type: string
    sql:
      {% if    calendar_selection._parameter_value == "'CALENDAR'" %} ${calendar_year}
      {% elsif calendar_selection._parameter_value == "'FISCAL'"   %} ${fiscal_year_new_fmt}
      {% endif %} ;;
  }

  dimension: year_by_param_fypfx {
    type: string
    sql:
      {% if    calendar_selection._parameter_value == "'CALENDAR'" %} ${calendar_year}
      {% elsif calendar_selection._parameter_value == "'FISCAL'"   %} ${fiscal_year_new_fmt_pfx}
      {% endif %} ;;
  }

  dimension: calendar_quarter_new_fmt {
    type: string
    sql: ${TABLE}.calendar_quarter_new_fmt ;;
  }

  dimension: fiscal_quarter_new_fmt {
    type: string
    sql: ${TABLE}.fiscal_quarter_new_fmt ;;
  }

  dimension: quarter_by_param {
    type: string
    sql:
      {% if    calendar_selection._parameter_value == "'CALENDAR'" %} ${calendar_quarter_new_fmt}
      {% elsif calendar_selection._parameter_value == "'FISCAL'"   %} ${fiscal_quarter_new_fmt}
      {% endif %} ;;
  }


  dimension: sales_month_new_fmt {
    label: "Sales Month"
    type: string
    sql: ${TABLE}.sales_month_new_fmt ;;
  }

  dimension: sales_week_new_fmt {
    label: "Sales Week"
    type: string
    sql: ${TABLE}.sales_week_new_fmt ;;
  }

  dimension: is_til_last_completed_month_one_sided {
    type: string
    sql: ${TABLE}.is_til_last_completed_month_one_sided ;;
  }

  dimension: is_till_last_cmpl_wk {
    type: string
    sql: ${TABLE}.is_till_last_cmpl_wk ;;
  }

  parameter: timeframe_picker {
    label: "Date Granularity"
    type: string
    allowed_value: { value: "Week" }
    allowed_value: { value: "Month" }
    allowed_value: { value: "Quarter" }
    #allowed_value: { value: "Fiscal Quarter" }
    allowed_value: { value: "Year" }
    #allowed_value: { value: "Fiscal Year" }
    default_value: "Month"
    suggest_persist_for: "24 hour"
  }

#  dimension: Timeline_New_Fmt {
#    label_from_parameter: timeframe_picker
#    type: string
#    sql:
#      {% if    timeframe_picker._parameter_value == "'Week'"            %} ${sales_week_new_fmt}
#      {% elsif timeframe_picker._parameter_value == "'Month'"           %} ${sales_month_new_fmt}
#      {% elsif timeframe_picker._parameter_value == "'Quarter'"         %} ${calendar_quarter_new_fmt}
#      {% elsif timeframe_picker._parameter_value == "'Fiscal Quarter'"  %} ${fiscal_quarter_new_fmt}
#      {% elsif timeframe_picker._parameter_value == "'Year'"            %} ${calendar_year}
#      {% elsif timeframe_picker._parameter_value == "'Fiscal Year'"     %} ${fiscal_year_new_fmt}
#      {% else  %} ${sales_month_new_fmt}
#      {% endif %} ;;
#    suggest_persist_for: "24 hour"
#  }

  dimension: Timeline_New_Fmt {
    #label_from_parameter: timeframe_picker
    label: "{% if    timeframe_picker._parameter_value ==  \"'Week'\"    %}Week{%
    elsif timeframe_picker._parameter_value ==  \"'Month'\"   %}Month{%
    elsif timeframe_picker._parameter_value ==  \"'Quarter'\" and calendar_selection._parameter_value == \"'CALENDAR'\" %}Quarter{%
    elsif timeframe_picker._parameter_value ==  \"'Quarter'\" and calendar_selection._parameter_value == \"'FISCAL'\"   %}Fiscal Quarter{%
    elsif timeframe_picker._parameter_value ==  \"'Year'\"    and calendar_selection._parameter_value == \"'CALENDAR'\" %}Year{%
    elsif timeframe_picker._parameter_value ==  \"'Year'\"    and calendar_selection._parameter_value == \"'FISCAL'\"   %}Fiscal Year{%
    else  %}Month{% endif %}"
    type: string
    sql:
      {% if    timeframe_picker._parameter_value == "'Week'"            %} ${sales_week_new_fmt}
      {% elsif timeframe_picker._parameter_value == "'Month'"           %} ${sales_month_new_fmt}
      {% elsif timeframe_picker._parameter_value == "'Quarter'"         %} ${quarter_by_param}
      {% elsif timeframe_picker._parameter_value == "'Year'"            %} ${year_by_param_fypfx}
      {% else  %} ${sales_month_new_fmt}
      {% endif %} ;;
    suggest_persist_for: "24 hour"
  }

  # for CGM Gap Analysis - Kai
  # dimension: ytd_calendar {
  #   type: string
  #   sql: case when cast(RIGHT(${sales_week}, 2) as int64) < extract(week from current_timestamp()) AND cast(LEFT(${sales_week}, 4) as int64) = extract(year from current_timestamp()) then "YTD" else "N" end   ;;
  # }

  # dimension: ytd_fiscal {
  #   type: string
  #   sql: case when extract(month from current_timestamp()) >= 4
  #       then
  #     (case when
  #     cast(RIGHT(${sales_month_new_fmt}, 2) as int64) >= 4 AND cast(RIGHT(${sales_week}, 2) as int64) < extract(week from current_timestamp()) AND
  #     cast(LEFT(${sales_month_new_fmt}, 4) as int64) = extract(year from current_timestamp()) then "YTD" else "N" end)
  #       else
  #     (case when
  #     (cast(RIGHT(${sales_month_new_fmt}, 2) as int64) >= 4 AND cast(LEFT(${sales_month_new_fmt}, 4) as int64) = extract(year from current_timestamp()) - 1)
  #     or
  #     (cast(RIGHT(${sales_week}, 2) as int64) < extract(week from current_timestamp()) AND cast(LEFT(${sales_month_new_fmt}, 4) as int64) = extract(year from current_timestamp()))
  #     then "YTD" else "N" end) end ;;
  # }

  # dimension: dynamic_ytd {
  #   type: string
  #   sql: {% if calendar_selection._parameter_value == "'CALENDAR'" %} ${ytd_calendar} {% else %} ${ytd_fiscal} {% endif %} ;;
  # }

  # Kai

  measure: sales_week_count {
    type: count_distinct
    sql: ${sales_week} ;;
  }

}

view: of_sales_week_n_day_master {
  #sql_table_name: `ONEFORCE.OF_SALES_WEEK_MASTER`
  #  ;;
  derived_table: {
    sql:
      WITH weekdays as (
      select 0 as day union all
      select 1 as day union all
      select 2 as day union all
      select 3 as day union all
      select 4 as day union all
      select 5 as day union all
      select 6 as day
      )
      select
         DATE_ADD(Week_Start_Date, INTERVAL d.day  DAY) as Calendar_Date
        ,Week_Start_Date
        ,Week_End_Date
        ,Sales_Week
        ,Sales_Month
        ,Fiscal_Quarter
        ,Fiscal_Year
        ,Calendar_Quarter
        ,Calendar_Year
        from `ONEFORCE.OF_SALES_WEEK_MASTER` w, weekdays d
      ;;
  }

  dimension: calendar_date {
    primary_key: yes
    type: date
    sql: ${TABLE}.Calendar_Date ;;
  }
  dimension: sales_week {
    #hidden: yes
    type: string
    sql: ${TABLE}.Sales_Week ;;
  }

  dimension: calendar_quarter {
    type: string
    sql: ${TABLE}.Calendar_Quarter ;;
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.Calendar_Year ;;
    drill_fields: [sales_month]
  }

  dimension: fiscal_quarter {
    type: string
    sql: ${TABLE}.Fiscal_Quarter ;;
  }

  dimension: fiscal_year {
    type: string
    sql: ${TABLE}.Fiscal_Year ;;
  }

  dimension: sales_month {
    type: string
    sql: ${TABLE}.Sales_Month ;;
    drill_fields: [sales_week]
  }

  dimension_group: week_end {
    type: time
    timeframes: [
      raw,
      date,
      week,
      week_of_year,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Week_End_Date ;;
  }

  dimension_group: week_start {
    type: time
    timeframes: [
      raw,
      date,
      week,
      week_of_year,
      month,
      month_name,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Week_Start_Date ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }


}

view: of_sales_week_user {
  derived_table: {
    #sql: select w.sales_week,
    #            count(u.oneforce_id) as sales_user_count
    #  from ${of_user.SQL_TABLE_NAME} u
    #  inner join  ${of_sales_week_master.SQL_TABLE_NAME} w on ((u.isactive = 'true' and u.createddate <= w.week_start_date ) or (u.isactive = 'false' and w.week_start_date between u.createddate and u.lastmodifieddate))
    #  where lower(trim(u.profile_name)) in ("third party agent", "sales executive")
    #  group by 1
    #  order by 1   ;;

    sql: select w.isoweek_start_date, count(distinct u.oneforce_id) as sales_user_count
          from ${of_user.SQL_TABLE_NAME} u
          inner join  ${of_calendar.SQL_TABLE_NAME} w on ((u.isactive = 'true' and u.createddate <= w.isoweek_start_date ) or (u.isactive = 'false' and w.isoweek_start_date between u.createddate and u.lastmodifieddate))
    where lower(trim(u.profile_name)) in ("third party agent", "sales executive")
    group by 1
    order by 1
    ;;

    persist_for: "24 hours"


    #sql: select  FORMAT_TIMESTAMP('%F', TIMESTAMP_TRUNC(TIMESTAMP(u.createdate) , WEEK(MONDAY)))  as sales_week,
    #            regional_head_office_short_nm,
    #            count(u.oneforce_id) as sales_user_count
    #      from ${of_user.SQL_TABLE_NAME} u
    #       where lower(trim(u.profile_name)) in ("third party agent", "sales executive")
    #      and ((u.isactive = 'true' and u.createddate <= w.week_start_date ) or (u.isactive = 'false' and w.week_start_date between u.createddate and u.lastmodifieddate))
    #      group by 1,2
    #      order by 1
    #      ;;

    #sql:  select w.sales_week,
    #            concat(firstname," ",lastname) as fullname,
    #            oneforce_id,
    #            SUBSTR (Office_Code, 1, STRPOS(Office_Code, '-') -2) as office_country_code,
    #            case when Regional_Head_Office is not null then
    #                trim(substr(Regional_Head_Office, instr(Regional_Head_Office,'-')+1))
    #            else "Unclaimed Region" end as reg_short_nm,
    #            managerid as manager_id,
    #            case when Initcap( concat(firstname," ",lastname)) in
    #                 ( "Akie Crabdree", "Ayako Sheinkopf", "Ayumi Soobratty","Kaori Usui",
    #                   "Kenichi Nemoto","Masahiro Yamanaka", "Masami Rusting","Masanao Shimazu",
    #                   "Mizuki Ro","Shuntaro Honzawa", "Teruyo Okumura","Tetsuo Sonobe",
    #                   "Yasushi Suzuki","Yoshihiro Nomura","Yuki Ishii","Maria Bodnar",
    #                   "Karen Usui" ) then "JPN"
    #                   when Initcap(concat(firstname," ",lastname)) in
    #                 ( "George Douglass", "Katie Brown", "Kevin Rodriguez", "Rob Rawson",
    #                   "Wilma McCord", "Tim Walsh", "Tom Smart", "Mark Kendall" ) then "GKA"
    #                   when upper(trim(SUBSTR(office_code, LENGTH(office_code) - 5, 6) )) in ("CHIBB") then "CRO"
    #                   when upper(trim(SUBSTR(office_code, LENGTH(office_code) - 5, 6) )) in ("NYCBB", "TORBB") then "ERO"
    #                   when upper(trim(SUBSTR(office_code, LENGTH(office_code) - 5, 6) )) in ("ATLBB") then "SRO"
    #                   when upper(trim(SUBSTR(office_code, LENGTH(office_code) - 5, 6) )) in ("BOIBB", "LAXBB", "SEABB", "VANBB") then "WRO"
    #            else  "Others"
    #            end as srep_group,
    #            SUBSTR(office_code, LENGTH(office_code) - 5, 6) as office_code_number
    #           -- count(u.oneforce_id) as sales_user_count
    #      from ${of_user.SQL_TABLE_NAME} u
    #      inner join  ${of_sales_week_master.SQL_TABLE_NAME} w on ((u.isactive = 'true' and u.createddate <= w.week_start_date ) or (u.isactive = 'false' and w.week_start_date between u.createddate and u.lastmodifieddate))
    #      where lower(trim(u.profile_name)) = "sales executive"
    #     -- group by 1,2,3,4,5,6,7
    #     -- order by 1
    #    ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: isoweek_start_date {
    type: string
    sql: ${TABLE}.isoweek_start_date ;;
  }

# dimension: regional_head_office_short_nm {
#   type: string
#   sql: ${TABLE}.regional_head_office_short_nm ;;
# }

  #dimension: fullname {
  #  type: string
  #  sql: ${TABLE}.fullname ;;
  #}

  #dimension: office_country_code {
  #  type: string
  #  sql: ${TABLE}.office_country_code ;;
  #}

  #dimension: reg_short_nm {
  #  type: string
  #  sql: ${TABLE}.reg_short_nm ;;
  #}

  #dimension: manager_id {
  #  type: string
  #  sql: ${TABLE}.manager_id ;;
  #}

  #dimension: srep_group {
  #  type: string
  #  sql: ${TABLE}.srep_group ;;
  #}

  #dimension: office_code_number {
  #  type: string
  #  sql: ${TABLE}.office_code_number ;;
  #}

  dimension: sales_user_count {
    type: number
    sql: ${TABLE}.sales_user_count ;;
  }

  #dimension: oneforce_id {
  #  type: number
  #  sql: ${TABLE}.oneforce_id ;;
  #  primary_key: yes
  #}
#
  #measure: total_sales_user {
  #  type: count_distinct
  #  sql: ${oneforce_id} ;;
  #  drill_fields: [detail*]
  #}
#

  measure: total_sales_user {
    type: max
    sql: ${sales_user_count} ;;
    drill_fields: [detail*]
  }

  set: detail {
    fields: [isoweek_start_date,  sales_user_count]
  }
}

view: of_service_kpi_target {
  sql_table_name: `ONEFORCE.OF_SERVICE_KPI_TARGET`
    ;;

  dimension: active {
    type: string
    sql: ${TABLE}.Active ;;
  }

  dimension: channel {
    type: string
    sql: ${TABLE}.Channel ;;
  }

  dimension: createdby_id {
    type: string
    sql: ${TABLE}.CreatedbyId ;;
  }

  dimension_group: end {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.End_Date ;;
  }

  dimension: kpi {
    type: string
    sql: ${TABLE}.KPI ;;
  }

  dimension: kpi_type {
    type: string
    sql: ${TABLE}.KPI_Type ;;
  }

  dimension: kpi_value {
    type: number
    sql: ${TABLE}.KPI_Value ;;
  }

  dimension: last_modified_id {
    type: string
    sql: ${TABLE}.LastModifiedId ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.Oneforce_Id ;;
  }

  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension: region {
    type: string
    sql: ${TABLE}.Region ;;
  }

  dimension: target_region {
    type: string
    sql: case when  ${region}="EUA" THEN "LONHQ"
          when  ${region}="NAM" then "RICHQ"
          when  ${region}="SAS" then "SINHQ"
          when  ${region}="LAT" then "SAOHQ"
          when  ${region}="EAS" then "HKGHQ"
          else "Global"
          end;;
  }

  dimension_group: start {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Start_Date ;;
  }

  dimension: units {
    type: string
    sql: ${TABLE}.Units ;;
  }

  measure: count {
    type: count
    drill_fields: [name]
  }
}

view: of_service_kpi_targets {
  sql_table_name: `ONEFORCE.OF_SERVICE_KPI_TARGETS`
    ;;

  dimension: active {
    type: string
    sql: ${TABLE}.Active ;;
  }

  dimension: channel {
    type: string
    sql: ${TABLE}.Channel ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension_group: end {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.End_Date ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: kpi {
    type: string
    sql: ${TABLE}.KPI ;;
  }

  dimension: kpi_type {
    type: string
    sql: ${TABLE}.KPI_Type ;;
  }

  #dimension: kpi_value {
  # type: number
  #sql: case when ${units}="Hrs" then ${kpi_value_org}*60
  # else ${kpi_value_org} end;;
  #}

  dimension: kpi_value {
    type: number
    sql: ${TABLE}.KPI_Value ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension_group: last_referenced {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastReferencedDate ;;
  }

  dimension_group: last_viewed {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastViewedDate ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension: region {
    type: string
    sql: ${TABLE}.Region ;;
  }

  dimension: target_region {
    type: string
    sql: case when  ${region}="EUA" THEN "LONHQ"
          when  ${region}="NAM" then "RICHQ"
          when  ${region}="SAS" then "SINHQ"
          when  ${region}="LAT" then "SAOHQ"
          when  ${region}="EAS" then "HKGHQ"
          else "Global"
          end;;
  }

  dimension_group: start {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Start_Date ;;
  }

  dimension_group: system_modstamp {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.SystemModstamp ;;
  }

  dimension: units {
    type: string
    sql: ${TABLE}.Units ;;
  }

  measure: count {
    type: count
    drill_fields: [name]
  }
}

view: of_service_kpi_targets_dtl {
  derived_table: {
    sql: with kpi_tgt as (
        select ori.*, null as regionarray, null as regionstr  FROM `ONEFORCE.OF_SERVICE_KPI_TARGETS` ori
        union all
        select a.*, b as regionstr
        from  (SELECT *, 'NAM;EAS;SAS;LAT;EUA' regionarray
              FROM `ONEFORCE.OF_SERVICE_KPI_TARGETS`) as a,
        unnest(split(regionarray,";")) b
        where a.region = 'Global' and a.isdeleted = 'false' and active = 'true')

      select kpi_tgt.active, kpi_tgt.channel, kpi_tgt.createdbyId, kpi_tgt.createddate,
      kpi_tgt.start_date,
      kpi_tgt.end_date,
      kpi_tgt.IsDeleted,
      kpi_tgt.KPI_Type,
      kpi_tgt.ONEForce_Id,
      kpi_tgt.KPI_Value,
      kpi_tgt.KPI,
      kpi_tgt.LastModifiedbyId,
      kpi_tgt.LastModifiedDate,
      kpi_tgt.Name,
      kpi_tgt.Units,
      coalesce(kpi_tgt.regionstr, kpi_tgt.Region) as region,
      kpi_tgt.regionstr,
      kpi_tgt.regionarray,
      kpi_tgt.ownerid,
      kpi_tgt.name||'-'||coalesce(kpi_tgt.regionstr, kpi_tgt.Region) as primary_key,

      from kpi_tgt
      where  ( kpi_tgt.regionarray is null or ( kpi_tgt.regionarray is not null
      and not exists (select 1 from `ONEFORCE.OF_SERVICE_KPI_TARGETS` d
      where d.region = kpi_tgt.regionstr and d.kpi = kpi_tgt.kpi and d.kpi_type = kpi_tgt.kpi_type and d.channel = kpi_tgt.channel
      and kpi_tgt.end_date >= d.Start_Date and kpi_tgt.start_date <= d.end_date ) ))
      ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: active {
    type: string
    sql: ${TABLE}.active ;;
  }

  dimension: channel {
    type: string
    sql: ${TABLE}.channel ;;
  }

  dimension: createdby_id {
    type: string
    sql: ${TABLE}.createdbyId ;;
  }

  dimension_group: createddate {
    type: time
    datatype: datetime
    sql: ${TABLE}.createddate ;;
  }

  dimension: start_date {
    type: date
    datatype: date
    sql: ${TABLE}.start_date ;;
  }

  dimension: end_date {
    type: date
    datatype: date
    sql: ${TABLE}.end_date ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: kpi_type {
    type: string
    sql: ${TABLE}.KPI_Type ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_Id ;;
  }

  dimension: kpi_value {
    type: number
    sql: case when ${units}="Hrs" then ${kpi_value_org}*60
      else ${kpi_value_org} end;;
  }

  dimension: kpi_value_org {
    type: number
    sql: ${TABLE}.KPI_Value ;;
    hidden: yes
  }

  dimension: kpi {
    type: string
    sql: ${TABLE}.KPI ;;
  }

  dimension: last_modifiedby_id {
    type: string
    sql: ${TABLE}.LastModifiedbyId ;;
  }

  dimension_group: last_modified_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: units {
    type: string
    sql: ${TABLE}.Units ;;
  }

  dimension: region {
    type: string
    sql: ${TABLE}.region ;;
  }

  dimension: target_region {
    type: string
    sql: case when  ${region}="EUA" THEN "LONHQ"
          when  ${region}="NAM" then "RICHQ"
          when  ${region}="SAS" then "SINHQ"
          when  ${region}="LAT" then "SAOHQ"
          when  ${region}="EAS" then "HKGHQ"
          else "Global"
          end;;
  }

  dimension: regionstr {
    type: string
    sql: ${TABLE}.regionstr ;;
  }

  dimension: regionarray {
    type: string
    sql: ${TABLE}.regionarray ;;
  }

  dimension: ownerid {
    type: string
    sql: ${TABLE}.ownerid ;;
  }

  dimension: primary_key {
    type: string
    sql: ${TABLE}.primary_key ;;
    primary_key: yes
  }

  set: detail {
    fields: [
      active,
      channel,
      createdby_id,
      createddate_time,
      start_date,
      end_date,
      is_deleted,
      kpi_type,
      oneforce_id,
      kpi_value,
      kpi,
      last_modifiedby_id,
      last_modified_date_time,
      name,
      units,
      region,
      regionstr,
      regionarray,
      ownerid,
      primary_key
    ]
  }
}

view: of_sstm_country_split_join_with_customer_group {
  sql_table_name: `ONEFORCE.OF_SSTM_country_split_join_with_customer_group`
    ;;

  dimension: cntr_cust_tp_cd {
    type: string
    sql: ${TABLE}.CNTR_CUST_TP_CD ;;
  }

  dimension: cust_grp_id_of_table {
    type: string
    sql: ${TABLE}.CUST_GRP_ID_OF_TABLE ;;
  }

  dimension: cust_grp_id_sstm_table {
    type: string
    sql: ${TABLE}.CUST_GRP_ID_SSTM_TABLE ;;
  }

  dimension: cust_grp_nm {
    type: string
    sql: ${TABLE}.CUST_GRP_NM ;;
  }

  dimension: delt_flg {
    type: string
    sql: ${TABLE}.DELT_FLG ;;
  }

  dimension: individual_or_group {
    type: string
    sql: ${TABLE}.Individual_or_Group ;;
  }

  dimension: ka_order {
    type: number
    sql: ${TABLE}.KA_Order ;;
  }

  dimension: key_acct_cnt_cd_or_global_child_country_code {
    type: string
    sql: ${TABLE}.KEY_ACCT_CNT_CD_OR_GLOBAL_CHILD_COUNTRY_CODE ;;
  }

  dimension: key_acct_rgn_cd_or_global_child_rgn_cd {
    type: string
    sql: ${TABLE}.KEY_ACCT_RGN_CD_OR_GLOBAL_CHILD_RGN_CD ;;
  }

  dimension: key_acct_tp_cd {
    type: string
    sql: ${TABLE}.KEY_ACCT_TP_CD ;;
  }

  dimension: oneforce_id_sstm_table {
    type: string
    sql: ${TABLE}.ONEForce_ID_SSTM_TABLE ;;
  }

  dimension: sales_group {
    type: string
    sql: ${TABLE}.sales_group ;;
  }

  dimension: sales_group_email {
    type: string
    sql: ${TABLE}.SalesGroup_Email ;;
  }

  dimension: sales_group_name {
    type: string
    sql: ${TABLE}.SalesGroup_Name ;;
  }

  dimension: sales_or_service {
    type: string
    sql: ${TABLE}.Sales_or_Service ;;
  }

  dimension: sales_person {
    type: string
    sql: ${TABLE}.Sales_Person ;;
  }

  dimension: sales_person_country {
    type: string
    sql: ${TABLE}.SalesPerson_Country ;;
  }

  dimension: sales_person_country_code {
    type: string
    sql: ${TABLE}.SalesPerson_CountryCode ;;
  }

  dimension: sales_person_email {
    type: string
    sql: ${TABLE}.SalesPerson_Email ;;
  }

  dimension: sales_person_first_name {
    type: string
    sql: ${TABLE}.SalesPerson_FirstName ;;
  }

  dimension: sales_person_is_active {
    type: string
    sql: ${TABLE}.SalesPerson_IsActive ;;
  }

  dimension: sales_person_last_name {
    type: string
    sql: ${TABLE}.SalesPerson_LastName ;;
  }

  dimension: sales_person_office_code {
    type: string
    sql: ${TABLE}.SalesPerson_OfficeCode ;;
  }

  dimension: sales_person_rhq {
    type: string
    sql: ${TABLE}.SalesPerson_RHQ ;;
  }

  dimension: sales_person_role_name {
    type: string
    sql: ${TABLE}.SalesPerson_RoleName ;;
  }

  dimension: service_scope {
    type: string
    sql: ${TABLE}.Service_Scope ;;
  }

  dimension: service_scope_group {
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: sstm_country_code {
    type: string
    sql: ${TABLE}.SSTM_Country_Code ;;
  }

  dimension: sstm_country_name {
    type: string
    sql: ${TABLE}.SSTM_CountryName ;;
  }

  dimension: sstm_exception {
    type: string
    sql: ${TABLE}.SSTM_Exception ;;
  }

  dimension: sstm_inactive {
    type: string
    sql: ${TABLE}.SSTM_Inactive ;;
  }

  dimension: sstm_rhq {
    type: string
    sql: ${TABLE}.SSTM_RHQ ;;
  }

  dimension: sstm_status {
    type: string
    sql: ${TABLE}.SSTM_Status ;;
  }

  dimension: team_role {
    type: string
    sql: ${TABLE}.Team_Role ;;
  }

  dimension: team_role_order {
    type: number
    sql: ${TABLE}.TeamRole_Order ;;
  }

  measure: count {
    type: count
    drill_fields: [sales_group_name, sales_person_first_name, sstm_country_name, sales_person_last_name, sales_person_role_name]
  }
}

view: of_sub_trd {
  sql_table_name: `ONEFORCE.OF_SUB_TRD`
    ;;

  dimension: sub_trade_code {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.Sub_Trade_Code ;;
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: sub_trade_name {
    type: string
    sql: ${TABLE}.Sub_Trade_Name ;;
  }

  dimension: trade_code {
    type: string
    sql: ${TABLE}.Trade_Code ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [sub_trade_name]
  }

  set: primary_key {
    fields: [sub_trade_code, count]
  }
}

view: of_svc_contract {
  # sql_table_name: @{table_svc_contract}
  #   ;;
  derived_table: {
    sql: select *,
      CASE WHEN (SUBSTR(sc_rfa_no,1,2)='KT'  OR
                          REGEXP_CONTAINS(sc_rfa_no, r'^R[0-9JQ][A-Za-z][0-9]{8}$') OR
                          REGEXP_CONTAINS(sc_rfa_no, r'^S[0-9JQ][A-Za-z][0-9]{7}$') OR
                          REGEXP_CONTAINS(sc_rfa_no, r'^R[0-9]{8}[A-Za-z][0-9JQ]$') OR
                          REGEXP_CONTAINS(sc_rfa_no, r'^S[0-9]{7}[A-Za-z][0-9JQ]$') )
              AND sc_rfa_typ IN ('S','R') THEN 0 ELSE 1 END as is_non_oq_contract,
      sum(CASE WHEN (SUBSTR(sc_rfa_no,1,2)='KT'  OR
                          REGEXP_CONTAINS(sc_rfa_no, r'^R[0-9JQ][A-Za-z][0-9]{8}$') OR
                          REGEXP_CONTAINS(sc_rfa_no, r'^S[0-9JQ][A-Za-z][0-9]{7}$') OR
                          REGEXP_CONTAINS(sc_rfa_no, r'^R[0-9]{8}[A-Za-z][0-9JQ]$') OR
                          REGEXP_CONTAINS(sc_rfa_no, r'^S[0-9]{7}[A-Za-z][0-9JQ]$') )
              AND sc_rfa_typ IN ('S','R') THEN 0 ELSE 1 END) OVER (PARTITION BY CUST_CD) as number_non_oq_contract
            FROM @{table_svc_contract} ;;
    interval_trigger: "24 hours"
  }
#DCN-1017, 27th June 2023
  dimension: is_ONE_Quote {
    label: "Is ONE Quote?"
    type: yesno
    sql: ${number_non_oq_contract} = 0 ;;
  }

  dimension: is_non_oq_contract {
    label: "Is Non-ONEQuote Contract"
    type: number
    sql: ${TABLE}.is_non_oq_contract ;;
  }

  dimension: number_non_oq_contract {
    label: "Number of Non-ONEQuote contracts"
    type: number
    sql: ${TABLE}.number_non_oq_contract ;;
  }
  dimension: sc_rfa_no {
    #hidden: yes
    label: "SVC / RFA No."  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.SC_RFA_NO ;;
    link: {
      label: "View SVC/RFA No"
      #url: "https://one-line--ofuat.lightning.force.com/lightning/r/Contract/{{ oneforce_id }}/view"
      url: "https://one-line.lightning.force.com/lightning/r/Contract/{{ oneforce_id }}/view"
      icon_url: "https://www.salesforce.com/content/dam/sfdc-docs/www/logos/logo-salesforce.svg"
    }
    link: { # -- Arul OPUS Direct Link -- Start -- Released 28-Jul-2021
      label: "{% if  of_svc_contract.sc_rfa_typ._value == 'R' %}
      View RFA
      {% else %}
      View Service Contract
      {% endif %}"
      url: "{% if  of_svc_contract.sc_rfa_typ._value == 'R' %}
      https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_PRI_2019.do%3Fpid%3DESM_PRI_M012%26MENU%3DY%26pgmNo%3DESM_PRI_2019%26parentPgmNo%3DESM_PRI_M001%26main_page%3Dtrue%26mainMenuLinkFlag%3Dtrue%26menuflag%3Dtrue%26mainPage%3Dtrue%26s_rfa_no%3D{{ value }}
      {% else %}
      https://cntr.one-line.com/opuscntr/dologin.jsp?relayState=%2Fopuscntr%2FESM_PRI_0004.do%3Fpid%3DESM_PRI_M006%26MENU%3DY%26pgmNo%3DESM_PRI_0004%26parentPgmNo%3DESM_PRI_M001%26main_page%3Dtrue%26mainMenuLinkFlag%3Dtrue%26menuflag%3Dtrue%26mainPage%3Dtrue%26sc_no_s%3D{{ value }}
      {% endif %}"
      icon_url: "https://cntr.one-line.com/opuscntr/img/favicon.ico" # -- Arul OPUS Direct Link -- End -- Released 28-Jul-2021
    }
  }

  dimension_group: cre_dt {
    label: "Created Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CRE_DT ;;
    html: {{ rendered_value | date: "%b %d, %y" }} ;;
  }

  dimension: ctrt_dur_tp_cd {
    label: "Contract Period Type" # programmatically added by LookML modifier
    type: string
    sql: # -- Arul OPUS Direct Link -- Start 28-- Released Jul-2021
      CASE
        WHEN ${TABLE}.CTRT_DUR_TP_CD  = 'L' THEN 'Long'
        WHEN ${TABLE}.CTRT_DUR_TP_CD  = 'M' THEN 'Medium'
        WHEN ${TABLE}.CTRT_DUR_TP_CD  = 'S' THEN 'Short'
        ELSE ${TABLE}.CTRT_DUR_TP_CD
    END
    ;; # -- Arul OPUS Direct Link -- End 28-- Released Jul-2021
  }

  dimension: period_typ_cd {
    hidden: yes
    type: string
    sql: ${TABLE}.CTRT_DUR_TP_CD ;;
  }

  dimension_group: ctrt_eff_dt {
    label: "StartDate"  # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CTRT_EFF_DT ;;
    html: {{ rendered_value | date: "%b %d, %y" }} ;;
  }

  dimension_group: ctrt_exp_dt {
    label: "EndDate"  # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CTRT_EXP_DT ;;
  }

  #Dashboard mergin ex <start>
  dimension: ctrt_eff_dt_in_date {
    label: "Contract Effective Date"
    type: date
    sql: ${ctrt_eff_dt_date} ;;
  }

  dimension: ctrt_exp_dt_in_date {
    label: "Contract Expiry Date"
    type: date
    sql: ${ctrt_exp_dt_date} ;;
  }

  #Dashboard mergin ex <end>


  dimension_group: to_expiry {
    label: "Days to expire"
    type: duration
    sql_start: CURRENT_DATE() ;;
    sql_end:${ctrt_exp_dt_date};;
  }

  dimension: expiry_indicator {
    type: string
    sql:
      CASE WHEN ${days_to_expiry} is null then null
      WHEN ${days_to_expiry} < 0 THEN 'Expired'
      WHEN ${days_to_expiry} < 7 THEN '7 Days before expiration'
      WHEN ${days_to_expiry} < 14 THEN '14 Days before expiration'
      WHEN ${days_to_expiry} < 21 THEN '21 Days before expiration'
      ELSE 'Active'
      END
  ;;
  }

  dimension: expiry_indicator2_ord {
    type: number
    sql:
      CASE
      WHEN ${days_to_expiry} is null then 5
      WHEN ${days_to_expiry} < 0   THEN 1
      WHEN ${days_to_expiry} <= 30 THEN 2
      WHEN ${days_to_expiry} <= 60 THEN 3
      WHEN ${days_to_expiry} <= 90 THEN 4
      ELSE 5
      END
  ;;
  }

  dimension: expiry_indicator2 {
    order_by_field: expiry_indicator2_ord
    type: string
    sql:
      CASE
      WHEN ${days_to_expiry} is null THEN '> 90'
      WHEN ${days_to_expiry} < 0     THEN 'Expired'
      WHEN ${days_to_expiry} <= 30   THEN '0 - 30'
      WHEN ${days_to_expiry} <= 60   THEN '31 - 60'
      WHEN ${days_to_expiry} <= 90   THEN '61 - 90'
                                     ELSE '> 90'
      END
  ;;
  }

  dimension: cust_cd {
    label: "Account.Customer Code " # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CUST_CD ;;
    suggest_persist_for: "4 hour"
  }

  dimension: gamt_flg {
    label: "Exempt Flag"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.GAMT_FLG ;;
  }

  dimension: ofc_cd {
    view_label: "Office Information"
    label: "Request Office "  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.OFC_CD ;;
  }

  dimension: oneforce_id {
    hidden: yes
    label: "ONEForce Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: sc_rfa_typ {
    label: "Contract Type Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_TYP ;;
  }

  dimension: sc_rfa_typ_dscr {
    label: "Contract Type (RFA vs S/C)" # programmatically added by LookML modifier
    type: string
    #sql: case ${TABLE}.SC_RFA_TYP ;;
    case: {
      when: {label:"RFA"    sql: ${TABLE}.SC_RFA_TYP = 'R';; }
      when: {label:"S/C"    sql: ${TABLE}.SC_RFA_TYP = 'S';; }
      when: {label:"Tariff" sql: ${TABLE}.SC_RFA_TYP = 'T';; }
      else: "Other"
    }
  }

  dimension: srep_cd {
    label: "Sales Rep Code "  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_CD ;;
  }

  dimension: srep_eml {
    label: "Sales Rep Email " # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_EML ;;
  }

  dimension: srep_nm {
    label: "Sales Rep Name "  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_NM ;;
  }

  dimension: sts_cd {
    label: "Status" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.STS_CD ;;
  }

  dimension: tgr_src_flg {
    label: "Source of Quote"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.TGR_SRC_FLG ;;
  }

  dimension: trf_ctrt_flg {
    label: "Tariff Flag"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.TRF_CTRT_FLG ;;
  }

  # dimension: no_of_oq_contracts {
  #   label: "Number of OQ contracts"
  #   type: number
  #   sql: SUM(${is_ONE_Quote}) OVER (PARTITION BY ${cust_cd}) ;;
  # }

  dimension: via_ONE_Quote {
    label: "Via ONE Quote"
    type: string
    sql:
    case
      when LEFT(${TABLE}.SC_RFA_NO, 3) = "KTR" THEN "Y"
      when regexp_contains(substr(${TABLE}.SC_RFA_NO,1,3) , r'^[RS][1234567890JQ][ABCDEFGHIJ]$') THEN "Y"
      ELSE "N"
      END
    ;;
  }

  dimension: via_ONE_Quote_yesno {
    label: "Via ONE Quote (Yes/No)"
    type: string
    sql:  case ${via_ONE_Quote} when 'Y' then 'Yes' else  'No' end ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [sc_rfa_no, oneforce_id, count]
  }
}

view: of_svc_contract_dtl {
  sql_table_name: @{table_svc_contract_dtl}
    ;;

  dimension: oneforce_id {
    hidden: yes
    label: "ONEForce Id"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension_group: ctrt_eff_dt {
    label: "Start Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CTRT_EFF_DT ;;
  }

  dimension_group: ctrt_exp_dt {
    label: "End Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CTRT_EXP_DT ;;
  }

  dimension: sc_rfa_no {
    label: "SVC / RFA No."  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SC_RFA_NO ;;
  }

  dimension: scp_ofc_cd {
    view_label: "Office Information"
    label: "Service Scope Office" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SCP_OFC_CD ;;
  }

  dimension: scp_srep_cd {
    label: "Service Scope Sales " # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SCP_SREP_CD ;;
  }

  dimension: scp_sts_cd {
    label: "Status" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SCP_STS_CD ;;
  }

  dimension: srep_eml {
    label: "Sales Rep Email"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_EML ;;
  }

  dimension: srep_nm {
    label: "Sales Rep Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SREP_NM ;;
  }

  dimension: svc_scp_cd {
    label: "Service Scope Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.SVC_SCP_CD ;;
  }

  dimension: svc_scp_mqc_qty {
    label: "MQC Quantity" # programmatically added by LookML modifier
    type: number
    sql: ${TABLE}.SVC_SCP_MQC_QTY ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [oneforce_id, count]
  }
}

view: of_svc_scp {
  sql_table_name: @{table_svc_scp}
    ;;

  dimension: service_scope_code {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.Service_Scope_Code ;;
    suggest_persist_for: "24 hour"
  }

  dimension: bound_code {
    type: string
    sql: ${TABLE}.Bound_Code ;;
  }

  dimension: conf_flag {
    type: string
    sql: ${TABLE}.Conf_Flag ;;
  }

  dimension: dominant_flag {
    label: "DOM/N-DOM"
    type: string
    sql: ${TABLE}.Dominant_Flag ;;
  }

  dimension: fmc_file_flag {
    type: string
    sql: ${TABLE}.FMC_File_Flag ;;
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: oneforce_id {
    hidden: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: service_scope_code_and_name {
    label: "Service Scope Code & Name"
    type: string
    sql: concat(${service_scope_code}, " - ", ${service_scope_name}) ;;
    suggest_persist_for: "24 hour"
  }

  dimension: service_scope_group_code {
    type: string
    sql: ${TABLE}.Service_Scope_Group_Code;;
    drill_fields: [service_scope_code]
    suggest_persist_for: "24 hour"
    # CASE
    #   WHEN ${TABLE}.Service_Scope_Group_Code IS NULL AND ${of_consolidated.record_type} = 'Plan' THEN ${of_consolidated.trd_cd}
    #   ELSE ${TABLE}.Service_Scope_Group_Code
    # END;;
  }

  dimension: service_scope_name {
    type: string
    sql: ${TABLE}.Service_Scope_Name ;;
    suggest_persist_for: "24 hour"
  }


  #NA dashboard DCN-741
  dimension: na_budget_trade_type_order {
    type: number
    sql:
      CASE WHEN ${TABLE}.Service_Scope_Code IN ('LAS','LWS') THEN 4
           WHEN ${TABLE}.Service_Scope_Group_Code||'|'||${TABLE}.Dominant_Flag = 'TP|DOM'   THEN 1
           WHEN ${TABLE}.Service_Scope_Group_Code||'|'||${TABLE}.Dominant_Flag = 'TP|N-DOM' THEN 2
           WHEN ${TABLE}.Service_Scope_Group_Code||'|'||${TABLE}.Dominant_Flag = 'TA|N-DOM' THEN 3
           ELSE 5 END  ;;
    suggest_persist_for: "24 hour"
  }

  dimension: na_budget_trade_type {
    type: string
    order_by_field: na_budget_trade_type_order
    sql:
      CASE WHEN ${TABLE}.Service_Scope_Code IN ('LAS','LWS') THEN 'Latin'
           WHEN ${TABLE}.Service_Scope_Group_Code||'|'||${TABLE}.Dominant_Flag = 'TP|DOM'   THEN 'TP Domi.'
           WHEN ${TABLE}.Service_Scope_Group_Code||'|'||${TABLE}.Dominant_Flag = 'TP|N-DOM' THEN 'TP Non Domi.'
           WHEN ${TABLE}.Service_Scope_Group_Code||'|'||${TABLE}.Dominant_Flag = 'TA|N-DOM' THEN 'TA Non Domi.'
           ELSE NULL END  ;;
    suggest_persist_for: "24 hour"
  }
  #NA dashboard start

  dimension: is_non_oth {
    type: string
    sql: CASE WHEN ${TABLE}.Service_Scope_Code = 'OTH' THEN 'OTH' ELSE (CASE WHEN ${TABLE}.Service_Scope_Code is not null then 'NON-OTH' else NULL end) END  ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [service_scope_name]
  }

  set: primary_key {
    fields: [service_scope_code, count]
  }
}

view: of_svc_scp_grp {
  #sql_table_name: `ONEFORCE.OF_SVC_SCP_GRP`
  derived_table: {
    sql: select Inactive,
                Service_Scope_Group_Code,
                Service_Scope_Group_Name,
                concat(Service_Scope_Group_Code, " - ", Service_Scope_Group_Name) as Service_Scope_Group_Code_and_Name
    from `ONEFORCE.OF_SVC_SCP_GRP`
    ;;
  }

  dimension: service_scope_group_code {
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.Service_Scope_Group_Code ;;
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: service_scope_group_name {
    type: string
    sql: ${TABLE}.Service_Scope_Group_Name ;;
  }

  dimension: service_scope_group_code_and_name {
    label: "Service Scope Group Code & Name"
    type: string
    #sql: concat(${service_scope_group_code}, " - ", ${service_scope_group_name}) ;;
    sql: ${TABLE}.Service_Scope_Group_Code_and_Name ;;
    suggestions: ["OT - OTHER TRADE",
      "NE - ASIA NORTH EUROPE TRADE",
      "LN - LATIN AMERICA NORTH TRADE",
      "LE - LATIN AMERICA EAST TRADE",
      "OC - OCEANIA TRADE",
      "FE - ASIA EAST AND SOUTH AFRICA TRADE",
      "LW - LATIN AMERICA WEST TRADE",
      "TA - TRANS ATLANTIC TRADE",
      "TP - TRANS PACIFIC TRADE",
      "EF - EUROPE AFRICA TRADE",
      "FW - ASIA WEST AFRICA TRADE",
      "EA - INTRA ASIA TRADE",
      "ME - ASIA MEDITERRANEAN TRADE",
      "WA - WEST ASIA TRADE"]
    suggest_persist_for: "24 hour"
  }

  dimension: trade_group {
    type: string
    sql:
      CASE
        WHEN ${service_scope_group_code} = 'EA' THEN 'AS/OC'
        WHEN ${service_scope_group_code} = 'OC' THEN 'AS/OC'
        WHEN ${service_scope_group_code} = 'WA' THEN 'AS/OC'
        WHEN ${service_scope_group_code} = 'ME' THEN 'Asia / MED'
        WHEN ${service_scope_group_code} = 'NE' THEN 'Asia / NE'
        WHEN ${service_scope_group_code} = 'LN' THEN 'LA/AF'
        WHEN ${service_scope_group_code} = 'FW' THEN 'LA/AF'
        WHEN ${service_scope_group_code} = 'EF' THEN 'LA/AF'
        WHEN ${service_scope_group_code} = 'FE' THEN 'LA/AF'
        WHEN ${service_scope_group_code} = 'LW' THEN 'LA/AF'
        WHEN ${service_scope_group_code} = 'LE' THEN 'LA/AF'
        WHEN ${service_scope_group_code} = 'OT' THEN 'OT'
        WHEN ${service_scope_group_code} = 'TA' THEN 'TAS'
        WHEN ${service_scope_group_code} = 'TP' THEN 'TP'
      END
    ;;
  }

  dimension: trade_group_and_dom_flag {
    type: string
    sql: concat(${trade_group}, " - ", ${of_svc_scp.dominant_flag}) ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [service_scope_group_name]
  }

  set: primary_key {
    fields: [service_scope_group_code, count]
  }
  #comments by jack 2021.6.1.1
  #comments by jack 2021.6.1.2
}

view: of_svc_scp_grp2 {

  sql_table_name: `ONEFORCE.OF_SVC_SCP_GRP`    ;;

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: service_scope_group_code {
    primary_key: yes
    type: string
    sql: ${TABLE}.Service_Scope_Group_Code ;;
  }

  dimension: service_scope_group_name {
    type: string
    sql: ${TABLE}.Service_Scope_Group_Name ;;
  }

  dimension: service_scope_group_code_and_name {
    label: "Service Scope Group Code & Name"
    type: string
    sql: concat(${service_scope_group_code}, " - ", ${service_scope_group_name}) ;;
    #sql: ${TABLE}.Service_Scope_Group_Code_and_Name ;;
    suggestions: ["OT - OTHER TRADE",
      "NE - ASIA NORTH EUROPE TRADE",
      "LN - LATIN AMERICA NORTH TRADE",
      "LE - LATIN AMERICA EAST TRADE",
      "OC - OCEANIA TRADE",
      "FE - ASIA EAST AND SOUTH AFRICA TRADE",
      "LW - LATIN AMERICA WEST TRADE",
      "TA - TRANS ATLANTIC TRADE",
      "TP - TRANS PACIFIC TRADE",
      "EF - EUROPE AFRICA TRADE",
      "FW - ASIA WEST AFRICA TRADE",
      "EA - INTRA ASIA TRADE",
      "ME - ASIA MEDITERRANEAN TRADE",
      "WA - WEST ASIA TRADE"]
    suggest_persist_for: "24 hour"
  }


}

view: of_svc_scp_grp_cat {
  derived_table: {
    sql:  SELECT 'AE'   as group_cat, 2 as group_cat_ord, 'ME' as svc_scp_grp union all
          SELECT 'AE'   as group_cat, 2 as group_cat_ord, 'NE' as svc_scp_grp union all
          SELECT 'AFLA' as group_cat, 4 as group_cat_ord, 'EF' as svc_scp_grp union all
          SELECT 'AFLA' as group_cat, 4 as group_cat_ord, 'FE' as svc_scp_grp union all
          SELECT 'AFLA' as group_cat, 4 as group_cat_ord, 'FW' as svc_scp_grp union all
          SELECT 'AFLA' as group_cat, 4 as group_cat_ord, 'LE' as svc_scp_grp union all
          SELECT 'AFLA' as group_cat, 4 as group_cat_ord, 'LN' as svc_scp_grp union all
          SELECT 'AFLA' as group_cat, 4 as group_cat_ord, 'LW' as svc_scp_grp union all
          SELECT 'ASOC' as group_cat, 3 as group_cat_ord, 'EA' as svc_scp_grp union all
          SELECT 'ASOC' as group_cat, 3 as group_cat_ord, 'OC' as svc_scp_grp union all
          SELECT 'ASOC' as group_cat, 3 as group_cat_ord, 'WA' as svc_scp_grp union all
          SELECT 'TPTA' as group_cat, 1 as group_cat_ord, 'TA' as svc_scp_grp union all
          SELECT 'TPTA' as group_cat, 1 as group_cat_ord, 'TP' as svc_scp_grp
       ;;

    persist_for: "24 hours"
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: group_cat_ord {
    type: string
    sql: ${TABLE}.group_cat_ord ;;
  }

  dimension: group_cat {
    label: "Trade Group"
    type: string
    order_by_field: group_cat_ord
    sql: ${TABLE}.group_cat ;;
  }

  dimension: svc_scp_grp {
    primary_key: yes
    type: string
    sql: ${TABLE}.svc_scp_grp ;;
    hidden: yes
  }

  set: detail {
    fields: [group_cat, svc_scp_grp]
  }
}

view: of_svc_scp_lane {
  sql_table_name: @{table_svc_scp_lane}
    ;;

  dimension: primary_key {
    primary_key: yes
    hidden: yes
    type: string
    sql: concat(${service_lane_code}, ${service_scope_code}) ;;
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: oneforce_id {
    hidden: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: service_lane_code {
    label: "Service Lane (Rev)"
    type: string
    sql: ${TABLE}.Service_Lane_Code ;;
    suggest_persist_for: "24 hour"
  }

  dimension: service_scope_code {
    ##hidden:yes## by Zoe Cheung
    type: string
    sql: ${TABLE}.Service_Scope_Code ;;
    suggest_persist_for: "24 hour"
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [primary_key, service_lane_code, service_scope_code, count]
  }
}

view: of_svc_scp_lmt {
  sql_table_name: @{table_svc_scp_lmt}
    ;;

  dimension: primary_key {
    primary_key: yes
    hidden: yes
    type: string
    sql: concat(${origin_or_destination_flag}, ${region_code}, ${service_scope_code}) ;;
  }

  dimension: inactive {
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: oneforce_id {
    hidden: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: origin_or_destination_flag {
    type: string
    sql: ${TABLE}.Origin_Or_Destination_Flag ;;
  }

  dimension: region_code {
    type: string
    sql: ${TABLE}.Region_Code ;;
  }

  dimension: scope_indicator {
    type: string
    sql: ${TABLE}.Scope_Indicator ;;
  }

  dimension: service_scope_code {
    type: string
    sql: ${TABLE}.Service_Scope_Code ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: []
  }

  set: primary_key {
    fields: [primary_key, origin_or_destination_flag, region_code, service_scope_code, count]
  }
}

view: of_task {

  derived_table: {
    sql: select b.name as recordtypid_name, a.*
         from `ONEFORCE.OF_TASK` as a
         left join `ONEFORCE.OF_RECORD_TYPE` as b on a.recordtypeid = b.oneforce_id
    ;;
  }
  #sql_table_name: `ONEFORCE.OF_TASK`

  parameter: Sales_Actv_Partpn {
    label: "Sales Activity Participation"
    type: unquoted
    allowed_value: {
      label: "Created-by"
      value: "Creator"
    }
    allowed_value: {
      label: "Assigned-to"
      value: "Assignee"
    }
    allowed_value: {
      label: "Either Created-by or Assigned-to"
      value: "Either"
    }
    allowed_value: {
      label: "Identical Created-by and Assigned-to"
      value: "Parent"
    }
    default_value: "Creator"
  }

  dimension: recordtypid_name {
    type: string
    sql: ${TABLE}.recordtypid_name ;;
  }

  dimension: account_id {
    type: string
    sql: ${TABLE}.AccountId ;;
  }

  dimension_group: activity {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ActivityDate ;;
  }

  dimension: ActivityStartDateTime {
    type: date_raw
    hidden: no
    sql: date_trunc(${TABLE}.ActivityDate,day) ;;
  }


  dimension: activity_type {
    type: string
    sql: ${TABLE}.Activity_Type ;;
  }

  dimension: call_duration {
    type: string
    sql: ${TABLE}.Call_Duration ;;
  }

  dimension: category {
    type: string
    sql: ${TABLE}.Category ;;
  }

  dimension_group: completed_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: TIMESTAMP(${TABLE}.CompletedDateTime) ;;
  }

  dimension: completed_Task_Date {
    hidden: yes
    type: date_raw
    sql:  CASE WHEN ${TABLE}.Completed_On IS NULL THEN current_date() else ${TABLE}.Completed_On end ;;
  }

  dimension_group: completed_Task {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: date
    sql: ${TABLE}.Completed_On ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension: created_Task_date {
    type: date_raw
    hidden: yes
    sql: CASE WHEN ${TABLE}.CreatedDate IS NULL THEN current_date() else ${TABLE}.CreatedDate end ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql:TIMESTAMP(${TABLE}.CreatedDate) ;;
  }



  dimension: direction {
    type: string
    sql: ${TABLE}.Direction ;;
  }

  dimension_group: edw_upd_dt {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.EDW_UPD_DT ;;
  }

  dimension: event_priority {
    type: string
    sql: ${TABLE}.Event_Priority ;;
  }

  dimension: is_archived {
    type: string
    sql: ${TABLE}.IsArchived ;;
  }

  dimension: is_closed {
    type: string
    sql: ${TABLE}.IsClosed ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: is_recurrence {
    type: string
    sql: ${TABLE}.IsRecurrence ;;
  }

  dimension: is_reminder_set {
    type: string
    sql: ${TABLE}.IsReminderSet ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: note_count {
    type: number
    sql: ${TABLE}.Note_Count ;;
  }

  dimension: oneforce_id {
    type: string
    primary_key: yes
    sql: ${TABLE}.ONEForce_ID ;;
    html:
    <p><a href="https://one-line.lightning.force.com/lightning/r/Task/{{ of_task.oneforce_id._value }}/view" target="_blank">{{rendered_value}}</a></p>
    ;;
  }

  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension: participant {
    description: "Task Creator and Assignee"
    type: string
    sql: concat(${created_by_id},",",${owner_id}) ;;
  }

  dimension: phone_number {
    type: string
    sql: ${TABLE}.Phone_Number ;;
  }

  dimension: priority {
    type: string
    sql: ${TABLE}.Priority ;;
  }

  dimension: record_type_id {
    type: string
    sql: ${TABLE}.RecordTypeId ;;
  }

  dimension: recurrence_activity_id {
    type: string
    sql: ${TABLE}.RecurrenceActivityId ;;
  }

  dimension: recurrence_day_of_month {
    type: number
    sql: ${TABLE}.RecurrenceDayOfMonth ;;
  }

  dimension: recurrence_day_of_week_mask {
    type: number
    sql: ${TABLE}.RecurrenceDayOfWeekMask ;;
  }

  dimension_group: recurrence_end_date_only {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: date
    sql: ${TABLE}.RecurrenceEndDateOnly ;;
  }

  dimension: recurrence_instance {
    type: string
    sql: ${TABLE}.RecurrenceInstance ;;
  }

  dimension: recurrence_interval {
    type: number
    sql: ${TABLE}.RecurrenceInterval ;;
  }

  dimension: recurrence_month_of_year {
    type: string
    sql: ${TABLE}.RecurrenceMonthOfYear ;;
  }

  dimension: recurrence_regenerated_type {
    type: string
    sql: ${TABLE}.RecurrenceRegeneratedType ;;
  }

  dimension_group: recurrence_start_date_only {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: date
    sql: ${TABLE}.RecurrenceStartDateOnly ;;
  }

  dimension: recurrence_time_zone_sid_key {
    type: string
    sql: ${TABLE}.RecurrenceTimeZoneSidKey ;;
  }

  dimension: recurrence_type {
    type: string
    sql: ${TABLE}.RecurrenceType ;;
  }

  dimension_group: reminder_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.ReminderDateTime ;;
  }

  dimension: service_scope {
    type: string
    sql: ${TABLE}.Service_Scope ;;
  }

  dimension: service_scope_group {
    type: string
    sql: ${TABLE}.Service_Scope_Group ;;
  }

  dimension: status {
    type: string
    sql: ${TABLE}.Status ;;
  }

  dimension: subject {
    type: string
    sql: ${TABLE}.Subject ;;
    html:
    <p><a href="https://one-line.lightning.force.com/lightning/r/Task/{{ of_task.oneforce_id._value }}/view" target="_blank">{{rendered_value}}</a></p>
    ;;

  }

  dimension: task_subtype {
    type: string
    sql: ${TABLE}.TaskSubtype ;;
  }

  dimension: what_id {
    type: string
    sql: ${TABLE}.WhatId ;;
  }

  dimension: who_id {
    type: string
    sql: ${TABLE}.WhoId ;;
  }


########################################################################################################
### Created Dimensions #############################
########################################################################################################
  dimension: Grouped_status{
    label: "Grouped Task Status"
    type: string
    sql: case when ${is_deleted} = "false" and ${status} in ("Open","Not Started") then "Open Tasks"
              when ${is_deleted} = "false" and ${status} = "Completed" then "Completed Tasks"
              else "Cancelled Tasks" end;;
  }

  dimension: TaskDuration {
    type: string
    label: " Task Duration Grouped"
    sql: case
         when abs(date_diff(date ${completed_Task_Date},date (coalesce(${ActivityStartDateTime},${created_date})),day)) between 0 and 7 then "Within 7 days"
         when abs(date_diff(date ${completed_Task_Date},date (coalesce(${ActivityStartDateTime},${created_date})),day)) > 7 then "Exceeds 7 days"
         else "Others" end;;
  }

  dimension: TaskGrpStsDur {
    label: "Task Group Status & Duration"
    type: string
    sql: concat(replace(${Grouped_status}," Tasks",""), " - ", ${TaskDuration}) ;;
  }

  dimension: TaskDurationDays {
    label: "Task Duration (days)"
    type: number
    sql: date_diff(date ${completed_Task_Date},date (coalesce(${ActivityStartDateTime},${created_date})),day);;
    #sql:date_diff(date ${completed_Task_Date},date ${created_date},day);;
  }

  dimension: Note_Validation {
    type: string
    sql: case when ${note_count} > 0 then "With Note"
      else "Without Note" end;;
  }

  dimension: is_parent {
    type: yesno
    sql: ${created_by_id} = ${owner_id} ;;
  }

  measure: createdby_count {
    type: count_distinct
    sql: ${created_by_id} ;;
    #filters: [is_salesuser: "yes"]
  }

  set: detail {
    fields: [
      of_sales_week_master2.sales_week,
      oneforce_id,
      created_date,
      activity_date,
      completed_date_date,
      status,
      of_user.full_name,
      of_user.office_code,
      task_v_customer_opus_n_prospect.cust_cd,
      task_v_customer_opus_n_prospect.name,
      subject,
      priority,
      activity_type
    ]
  }

  set: call_detail {
    fields: [
      of_sales_week_master2.sales_week,
      oneforce_id,
      created_date,
      activity_date,
      call_duration,
      of_user.full_name,
      of_user.office_code,
      task_v_customer_opus_n_prospect.cust_cd,
      task_v_customer_opus_n_prospect.name,
      subject,
      priority
    ]
  }
  dimension: Task_Tab_Link {
    type: string
    sql:  CONCAT(1,2);;
    html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
        <nav style="font-size: 18px;">
        <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/464?&Fiscal%20Year={{ _filters['of_sales_week_master2.fiscal_year'] | url_encode }}&Calendar%20Year={{ _filters['task_of_calendar.calendar_year'] | url_encode }}&Calendar%20Month={{ _filters['task_of_calendar.calendar_year_month'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master2.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master2.sales_week'] | url_encode }}&Sales%20User%20Region={{ _filters['of_user.regional_head_office_short_nm'] | url_encode }}&Sales%20User%20Country={{ _filters['of_user.office_Country_Code'] | url_encode }}&Sales%20User%20Office={{ _filters['of_user.office_code_number'] | url_encode }}&Sales%20User={{ _filters['of_user.full_name'] | url_encode }}&Sales%20Manager={{ _filters['of_user_manager.full_name'] | url_encode }}&US%20Sub-Region%20(Yes/No)={{ _filters['of_user.US_Spcl_Grouping'] | url_encode }}&Customer={{ _filters['task_v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Status={{ _filters['of_task.TaskGrpStsDur'] | url_encode }}&Event%20Start%20Date={{ _filters['of_task.created_date'] | url_encode }}" target="_blank" > Event </a>
        <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed; " href="https://oneline.cloud.looker.com/embed/dashboards-next/490?&Fiscal%20Year={{ _filters['of_sales_week_master2.fiscal_year'] | url_encode }}&Calendar%20Year={{ _filters['task_of_calendar.calendar_year'] | url_encode }}&Calendar%20Month={{ _filters['task_of_calendar.calendar_year_month'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master2.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master2.sales_week'] | url_encode }}&Sales%20User%20Region={{ _filters['of_user.regional_head_office_short_nm'] | url_encode }}&Sales%20User%20Country={{ _filters['of_user.office_Country_Code'] | url_encode }}&Sales%20User%20Office={{ _filters['of_user.office_code_number'] | url_encode }}&Sales%20User={{ _filters['of_user.full_name'] | url_encode }}&Sales%20Manager={{ _filters['of_user_manager.full_name'] | url_encode }}&US%20Sub-Region%20(Yes/No)={{ _filters['of_user.US_Spcl_Grouping'] | url_encode }}&Customer={{ _filters['task_v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Status={{ _filters['of_task.TaskGrpStsDur'] | url_encode }}&Task%20Create%20Date={{ _filters['of_task.created_date'] | url_encode }}" target="_blank"  > Task </a>
        <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/512?&Fiscal%20Year={{ _filters['of_sales_week_master2.fiscal_year'] | url_encode }}&Calendar%20Year={{ _filters['task_of_calendar.calendar_year'] | url_encode }}&Calendar%20Month={{ _filters['task_of_calendar.calendar_year_month'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master2.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master2.sales_week'] | url_encode }}&Sales%20User%20Region={{ _filters['of_user.regional_head_office_short_nm'] | url_encode }}&Sales%20User%20Country={{ _filters['of_user.office_Country_Code'] | url_encode }}&Sales%20User%20Office={{ _filters['of_user.office_code_number'] | url_encode }}&Sales%20User={{ _filters['of_user.full_name'] | url_encode }}&Sales%20Manager={{ _filters['of_user_manager.full_name'] | url_encode }}&US%20Sub-Region%20(Yes/No)={{ _filters['of_user.US_Spcl_Grouping'] | url_encode }}&Customer={{ _filters['task_v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Call%20Create%20Date={{ _filters['of_task.created_date'] | url_encode }}" target="_blank" > Log a Call </a>
        </nav>
        </div>
  ;;
  }

  dimension: LogCall_Tab_Link {
    type: string
    sql:  CONCAT(1,2);;
    html: <div style="border-radius: 5px; padding: 5px 10px; background: #808080; height: 60px; color: red;">
        <nav style="font-size: 18px;">
        <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/464?&Fiscal%20Year={{ _filters['of_sales_week_master2.fiscal_year'] | url_encode }}&Calendar%20Year={{ _filters['task_of_calendar.calendar_year'] | url_encode }}&Calendar%20Month={{ _filters['task_of_calendar.calendar_year_month'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master2.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master2.sales_week'] | url_encode }}&Sales%20User%20Region={{ _filters['of_user.regional_head_office_short_nm'] | url_encode }}&Sales%20User%20Country={{ _filters['of_user.office_Country_Code'] | url_encode }}&Sales%20User%20Office={{ _filters['of_user.office_code_number'] | url_encode }}&Sales%20User={{ _filters['of_user.full_name'] | url_encode }}&Sales%20Manager={{ _filters['of_user_manager.full_name'] | url_encode }}&US%20Sub-Region%20(Yes/No)={{ _filters['of_user.US_Spcl_Grouping'] | url_encode }}&Customer={{ _filters['task_v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Event%20Start%20Date={{ _filters['of_task.created_date'] | url_encode }}" target="_blank" > Event </a>
        <a style="color: #efefef; padding: 5px 15px; float: left; line-height: 40px;" href="https://oneline.cloud.looker.com/embed/dashboards-next/490?&Fiscal%20Year={{ _filters['of_sales_week_master2.fiscal_year'] | url_encode }}&Calendar%20Year={{ _filters['task_of_calendar.calendar_year'] | url_encode }}&Calendar%20Month={{ _filters['task_of_calendar.calendar_year_month'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master2.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master2.sales_week'] | url_encode }}&Sales%20User%20Region={{ _filters['of_user.regional_head_office_short_nm'] | url_encode }}&Sales%20User%20Country={{ _filters['of_user.office_Country_Code'] | url_encode }}&Sales%20User%20Office={{ _filters['of_user.office_code_number'] | url_encode }}&Sales%20User={{ _filters['of_user.full_name'] | url_encode }}&Sales%20Manager={{ _filters['of_user_manager.full_name'] | url_encode }}&US%20Sub-Region%20(Yes/No)={{ _filters['of_user.US_Spcl_Grouping'] | url_encode }}&Customer={{ _filters['task_v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Task%20Create%20Date={{ _filters['of_task.created_date'] | url_encode }}" target="_blank"  > Task </a>
        <a style="color: #FFFFFF; padding: 5px 15px; float: left; line-height: 40px;font-weight: bold; cursor: not-allowed; " href="https://oneline.cloud.looker.com/embed/dashboards-next/512?&Fiscal%20Year={{ _filters['of_sales_week_master2.fiscal_year'] | url_encode }}&Calendar%20Year={{ _filters['task_of_calendar.calendar_year'] | url_encode }}&Calendar%20Month={{ _filters['task_of_calendar.calendar_year_month'] | url_encode }}&Sales%20Month={{ _filters['of_sales_week_master2.sales_month'] | url_encode }}&Sales%20Week={{ _filters['of_sales_week_master2.sales_week'] | url_encode }}&Sales%20User%20Region={{ _filters['of_user.regional_head_office_short_nm'] | url_encode }}&Sales%20User%20Country={{ _filters['of_user.office_Country_Code'] | url_encode }}&Sales%20User%20Office={{ _filters['of_user.office_code_number'] | url_encode }}&Sales%20User={{ _filters['of_user.full_name'] | url_encode }}&Sales%20Manager={{ _filters['of_user_manager.full_name'] | url_encode }}&US%20Sub-Region%20(Yes/No)={{ _filters['of_user.US_Spcl_Grouping'] | url_encode }}&Customer={{ _filters['task_v_customer_opus_n_prospect.customer_cd_and_name'] | url_encode }}&Call%Create%20Date={{ _filters['of_task.created_date'] | url_encode }}" target="_blank" > Log a Call </a>
        </nav>
        </div>
  ;;
  }

  filter: is_trendline_table {
    type: string
    default_value: "No"
  }

  measure: completed_exd7_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Completed Tasks", TaskDuration: "Exceeds 7 days"]
    filters: [Grouped_status: "Completed Tasks", TaskDuration: "Exceeds 7 days"]
    html:  {% assign word = _filters['of_task.is_trendline_table'] | split: "," %}
           {% if word[0] == "Yes" %}  {{ rendered_value }}
           {% else %} {{ rendered_value }} ({{ completed_exd7_percent._rendered_value }}) of {{ total_open_completed._rendered_value }}
           {% endif %};;
  }
  measure: completed_win7_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Completed Tasks", TaskDuration: "Within 7 days"]
    filters: [Grouped_status: "Completed Tasks", TaskDuration: "Within 7 days"]
    html: {% assign word = _filters['of_task.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %}  {{ rendered_value }} ({{ completed_win7_percent._rendered_value }}) of {{ total_open_completed._rendered_value }}
          {% endif %};;
  }
  measure: completed_othr_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Completed Tasks", TaskDuration: "Within 7 days"]
    filters: [Grouped_status: "Completed Tasks", TaskDuration: "-Within 7 days, -Exceeds 7 days"]
    html: {% assign word = _filters['of_task.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %}  {{ rendered_value }} ({{ completed_othr_percent._rendered_value }}) of {{ total_open_completed._rendered_value }}
          {% endif %};;
  }
  measure: open_exd7_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Tasks", TaskDuration: "Exceeds 7 days"]
    filters: [Grouped_status: "Open Tasks", TaskDuration: "Exceeds 7 days"]
    html: {% assign word = _filters['of_task.is_trendline_table'] | split: "," %}
          {% if word[0] == "Yes" %}  {{ rendered_value }}
          {% else %} {{ rendered_value }} ({{ open_exd7_percent._rendered_value }}) of {{ total_open_completed._rendered_value }}
          {% endif %};;
  }
  measure: open_win7_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Tasks", TaskDuration: "Within 7 days"]
    filters: [Grouped_status: "Open Tasks", TaskDuration: "Within 7 days"]
    html:  {% assign word = _filters['of_task.is_trendline_table'] | split: "," %}
           {% if word[0] == "Yes" %}  {{ rendered_value }}
           {% else %} {{ rendered_value }} ({{ open_win7_percent._rendered_value }}) of {{ total_open_completed._rendered_value }}
           {% endif %};;
  }
  measure: open_othr_count {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Tasks", TaskDuration: "Within 7 days"]
    filters: [Grouped_status: "Open Tasks", TaskDuration: "-Exceeds 7 days, -Within 7 days"]
    html:  {% assign word = _filters['of_task.is_trendline_table'] | split: "," %}
           {% if word[0] == "Yes" %}  {{ rendered_value }}
           {% else %} {{ rendered_value }} ({{ open_othr_percent._rendered_value }}) of {{ total_open_completed._rendered_value }}
           {% endif %};;
  }
  measure: total_open_completed {
    description: "include open,scheduled and completed"
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Tasks, Completed Tasks"]
    filters: [Grouped_status: "Open Tasks, Completed Tasks"]
  }
  measure: total_completed {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Completed Tasks"]
    filters: [Grouped_status: "Completed Tasks"]
  }

  measure: total_open {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Tasks"]
    filters: [Grouped_status: "Open Tasks"]
  }

  measure: total_completed_participation {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    filters: [Grouped_status: "Completed Tasks"]
  }


  measure: total_open_participation {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    filters: [Grouped_status: "Open Tasks"]
  }
  measure: total_created {
    description: "include open,scheduled, cancelled and completed"
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Tasks, Completed Tasks, Cancelled Tasks"]
    filters: [Grouped_status: "Open Tasks, Completed Tasks, Cancelled Tasks"]
  }
  measure: completed_exd7_percent {
    type:  number
    sql:  ${completed_exd7_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: completed_win7_percent {
    type:  number
    sql:  ${completed_win7_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: completed_othr_percent {
    type:  number
    sql:  ${completed_othr_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: open_exd7_percent {
    type:  number
    sql:  ${open_exd7_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: open_win7_percent {
    type:  number
    sql:  ${open_win7_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: open_othr_percent {
    type:  number
    sql:  ${open_othr_count}/(CASE WHEN ${total_open_completed} = 0 THEN 1 ELSE ${total_open_completed} END) *100;;
    value_format: "0.0\%"
  }
  measure: total_call {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [call_detail*]
    #filters: [is_parent: "yes",task_subtype: "Call",is_deleted: "false", status: "-Cancelled"]
    filters: [task_subtype: "Call",is_deleted: "false", status: "-Cancelled"]
  }

  measure: total_call_incoming {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [call_detail*]
    #filters: [is_parent: "yes",task_subtype: "Call",is_deleted: "false", status: "-Cancelled"]
    filters: [task_subtype: "Call",is_deleted: "false", status: "-Cancelled", direction: "Incoming"]
  }

  measure: total_call_outgoing {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [call_detail*]
    #filters: [is_parent: "yes",task_subtype: "Call",is_deleted: "false", status: "-Cancelled"]
    filters: [task_subtype: "Call",is_deleted: "false", status: "-Cancelled", direction: "Outgoing"]
  }


  measure: task_month_count {
    type: count_distinct
    sql: CASE
         WHEN {% parameter task_timeframe_picker %} = 'Week'  THEN cast(${created_week}  as string)
         WHEN {% parameter task_timeframe_picker %} = 'Month' THEN cast(${created_month} as string)
         WHEN {% parameter task_timeframe_picker %} = 'Year'  THEN cast(${created_year}  as string)
         ELSE NULL
         END ;;
  }

  parameter: task_timeframe_picker {
    label: "Task Created Date Granularity"
    type: string
    allowed_value: { value: "Week" }
    allowed_value: { value: "Month" }
    allowed_value: { value: "Year" }
    suggest_persist_for: "24 hour"
  }

  #add by Helen for Sales Event Monitor #
  dimension: task_timeframe_dynamic {
    label: "{% parameter task_timeframe_picker %}"
    type: string
    sql:
       CASE
         WHEN {% parameter task_timeframe_picker %} = 'Week'  THEN cast(${created_week} as string)
         WHEN {% parameter task_timeframe_picker %} = 'Month' THEN cast(${created_month} as string)
         WHEN {% parameter task_timeframe_picker %} = 'Year'  THEN cast(${created_year} as string)
                 ELSE NULL
       END ;;
    suggest_persist_for: "24 hour"
  }

  dimension:  task_timeframe_filter_value {
    label: "task timeframe filter value"
    type: string
    sql:
       CASE
         WHEN {% parameter task_timeframe_picker %} = 'Week'  THEN "Week"
         WHEN {% parameter task_timeframe_picker %} = 'Month' THEN "Month"
         WHEN {% parameter task_timeframe_picker %} = 'Year'  THEN "Year"
                 ELSE NULL
       END ;;

  }

# </HW>

  # Sales Process Landing Page ----- Start -------
  measure: total_completed1 {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Completed Tasks"]
    filters: [Grouped_status: "Completed Tasks"]
  }

  measure: total_open1 {
    type: count_distinct
    sql: ${oneforce_id} ;;
    drill_fields: [detail*]
    #filters: [is_parent: "yes", Grouped_status: "Open Tasks"]
    filters: [Grouped_status: "Open Tasks"]
  }
  measure: total_call_incoming1 {
    type: count_distinct
    label: "Incoming"
    sql: ${oneforce_id} ;;
    drill_fields: [call_detail*]
    #filters: [is_parent: "yes",task_subtype: "Call",is_deleted: "false", status: "-Cancelled"]
    filters: [task_subtype: "Call",is_deleted: "false", status: "-Cancelled", direction: "Incoming"]
  }

  measure: total_call_outgoing1 {
    type: count_distinct
    label: "Outgoing"
    sql: ${oneforce_id} ;;
    drill_fields: [call_detail*]
    #filters: [is_parent: "yes",task_subtype: "Call",is_deleted: "false", status: "-Cancelled"]
    filters: [task_subtype: "Call",is_deleted: "false", status: "-Cancelled", direction: "Outgoing"]
  }
  # Sales Process Landing Page ----- End -------

########################################################################################################
### End Created Dimensions #############################
########################################################################################################

  measure: count {
    type: count
    drill_fields: []
  }

# <HW>
# </HW>
}

view: of_trade {
  sql_table_name: `ONEFORCE.OF_TRADE`
    ;;

  dimension: trade_code {
    label: "Trade Code" # programmatically added by LookML modifier
    hidden: yes
    primary_key: yes
    type: string
    sql: ${TABLE}.Trade_Code ;;
  }

  dimension: admin_office_code {
    label: "Admin Office Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Admin_Office_Code ;;
  }

  dimension_group: cre_dt {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.CRE_DT ;;
  }

  dimension: cre_usr_id {
    type: string
    sql: ${TABLE}.CRE_USR_ID ;;
  }

  dimension_group: eff {
    label: "Eff Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Eff_Date ;;
  }

  dimension_group: exp {
    label: "Exp Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Exp_Date ;;
  }

  dimension: from_continent_code {
    label: "From Continent Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.From_Continent_Code ;;
  }

  dimension: inactive {
    label: "Inactive" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: to_continent_code {
    label: "To Continent Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.To_Continent_Code ;;
  }

  dimension: trade_name {
    label: "Trade Name" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Trade_Name ;;
  }

  dimension_group: upd_dt {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.UPD_DT ;;
  }

  dimension: upd_usr_id {
    type: string
    sql: ${TABLE}.UPD_USR_ID ;;
  }

  dimension: vessel_typ_code {
    label: "Vessel Typ Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Vessel_Typ_Code ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [trade_name]
  }

  set: primary_key {
    fields: [trade_code, count]
  }
}

view: of_trailheadapp_trailhead_user_data {
  sql_table_name: `ONEFORCE.OF_TRAILHEADAPP_TRAILHEAD_USER_DATA`
    ;;

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension_group: last_referenced {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastReferencedDate ;;
  }

  dimension_group: last_viewed {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastViewedDate ;;
  }

  dimension: name {
    type: string
    sql: ${TABLE}.Name ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension_group: system_modstamp {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.SystemModstamp ;;
  }

  dimension: trailheadapp__avatar {
    type: string
    sql: ${TABLE}.trailheadapp__Avatar ;;
  }

  dimension: trailheadapp__external_id {
    type: string
    sql: ${TABLE}.trailheadapp__External_Id ;;
  }

  dimension: trailheadapp__profile_url {
    type: string
    sql: ${TABLE}.trailheadapp__Profile_URL ;;
  }

  dimension: trailheadapp__profile_visibility {
    type: string
    sql: ${TABLE}.trailheadapp__Profile_Visibility ;;
  }

  dimension: trailheadapp__rank {
    type: string
    sql: ${TABLE}.trailheadapp__Rank ;;
  }

  dimension: trailheadapp__total_points {
    type: number
    sql: ${TABLE}.trailheadapp__Total_Points ;;
  }

  dimension: trailheadapp__user {
    type: string
    sql: ${TABLE}.trailheadapp__User ;;
  }

  measure: count {
    type: count
    drill_fields: [name]
  }
}

view: of_trailheadapp_user_trailmix {
  derived_table: {
    sql:
    WITH user_trailmix AS (
    SELECT distinct
    CreatedById,
    CreatedDate,
    ONEForce_ID,
    Name,
    trailheadapp__Assigned_At,
    trailheadapp__Completed_At,
    trailheadapp__Due_At,
    trailheadapp__Last_Attempted_At,
    trailheadapp__First_Attempted_At,
    trailheadapp__Status,
    trailheadapp__Trailmix,
    trailheadapp__User
    FROM `ONEFORCE.OF_TRAILHEADAPP_USER_TRAILMIX`
    WHERE IsDeleted = 'false'
),
trailmix AS (
    SELECT distinct
    CreatedDate,
    CreatedById,
    ONEForce_ID,
    Name,
    OwnerId,
    trailheadapp__Archived,
    trailheadapp__Created_By_Profile,
    trailheadapp__URL
    FROM `ONEFORCE.OF_TRAILHEADAPP_TRAILMIX`
    WHERE IsDeleted = 'false'
    AND trailheadapp__URL like 'https://one-line.my.trailhead.com%'
),
badge AS (
    SELECT distinct
    CreatedById,
    CreatedDate,
    ONEForce_ID,
    Name,
    OwnerId,
    trailheadapp__Archived,
    trailheadapp__Created_At,
    trailheadapp__Description,
    trailheadapp__URL,
    Trailmix
    FROM `ONEFORCE.OF_TRAILHEADAPP_BADGE`
    WHERE IsDeleted = 'false'
    AND Trailmix is not null
),
user_badge AS (
    SELECT distinct
    CreatedById,
    CreatedDate,
    ONEForce_ID,
    Name,
    trailheadapp__Assigned_Date,
    trailheadapp__Assigned_to_Complete,
    trailheadapp__Badge,
    trailheadapp__Due_Date,
    trailheadapp__Finished_Date,
    trailheadapp__Last_Attempted_Date,
    trailheadapp__Status,
    trailheadapp__URL,
    trailheadapp__User,
    IsDeleted
    FROM `ONEFORCE.OF_TRAILHEADAPP_USER_BADGE`
    WHERE IsDeleted = 'false'
),
user AS (
    SELECT distinct
    ONEForce_ID,
    FirstName,
    LastName,
    Email,
    Username,
    UserRoleId,
    User_Role_Name,
    Title,
    ProfileId,
    Profile_Name,
    OfficeType,
    Country,
    Office_Code,
    Office_Code_Number,
    City,
    ManagerId,
    LastLoginDate,
    Suppressed_in_CRM_Usage_KPI_Dashboard
    FROM `ONEFORCE.OF_USER`
    WHERE IsActive = 'true'
),
user_badge_aggre AS (
  SELECT
  ut_tm_id,
  ut_usr_id,
  ttl_bdg,
  not_strt_bdg,
  in_prgr_bdg,
  cmplt_bdg,
  latest_bdg_lst_atmpt_dt,
  latest_bdg_fnsh_dt,
  CASE WHEN cmplt_bdg = ttl_bdg THEN "Completed"
       WHEN cmplt_bdg != ttl_bdg and (cmplt_bdg > 0 or in_prgr_bdg > 0) THEN "In-Progress"
  ELSE "Not Started" END as ut_stt_nw
  FROM (
      SELECT
      user_trailmix.trailheadapp__Trailmix as ut_tm_id,
      user_trailmix.trailheadapp__User as ut_usr_id,
      COUNT(badge.ONEForce_ID ) as ttl_bdg,
      SUM(CASE WHEN (user_badge.trailheadapp__Status = 'Assigned' OR user_badge.trailheadapp__Status is null) THEN 1 ELSE NULL END) as not_strt_bdg,
      COUNT(CASE WHEN (user_badge.trailheadapp__Status = 'In-Progress') THEN user_badge.ONEForce_ID  ELSE NULL END) as in_prgr_bdg,
      COUNT(CASE WHEN (user_badge.trailheadapp__Status = 'Completed') THEN user_badge.ONEForce_ID  ELSE NULL END) as cmplt_bdg,
      MAX(user_badge.trailheadapp__Last_Attempted_Date) as latest_bdg_lst_atmpt_dt,
      MAX(user_badge.trailheadapp__Finished_Date) as latest_bdg_fnsh_dt
      FROM user_trailmix
      INNER JOIN trailmix
      ON user_trailmix.trailheadapp__Trailmix = trailmix.ONEForce_ID
      INNER JOIN badge
      ON trailmix.ONEForce_ID = badge.Trailmix
      LEFT JOIN user_badge
      ON badge.ONEForce_ID = user_badge.trailheadapp__Badge and user_trailmix.trailheadapp__User = user_badge.trailheadapp__User
      GROUP BY 1, 2
      )
  ),
badge_overall_status AS (
  SELECT
  bdg_id,
  ttl_usr,
  cmplt_bdg,
  CASE WHEN cmplt_bdg = ttl_usr THEN "Completed"
  ELSE "In-Progress" END as bdg_ovrll_stt
  FROM (
      SELECT
      badge.ONEForce_ID as bdg_id,
      COUNT(distinct user_trailmix.trailheadapp__User) as ttl_usr,
      COUNT(CASE WHEN (user_badge.trailheadapp__Status = 'Completed') THEN user_badge.ONEForce_ID  ELSE NULL END) as cmplt_bdg
      FROM user_trailmix
      INNER JOIN trailmix
      ON user_trailmix.trailheadapp__Trailmix = trailmix.ONEForce_ID
      INNER JOIN badge
      ON trailmix.ONEForce_ID = badge.Trailmix
      LEFT JOIN user_badge
      ON badge.ONEForce_ID = user_badge.trailheadapp__Badge and user_trailmix.trailheadapp__User = user_badge.trailheadapp__User
      GROUP BY 1
      )
  ),
Responsible_location_cnt AS (
 SELECT DISTINCT Country_Code,
           Region_Code,
           Region_Abbrev as RHQ,
           CASE WHEN OfficeHierarchy.Country_Name is not NULL
                THEN UPPER(OfficeHierarchy.Country_Name)
           ELSE UPPER(TrailheadCountry.Country_Name) END as Country_Name
    FROM `ONEFORCE.OF_TRAILHEAD_COUNTRY` TrailheadCountry
    LEFT JOIN
    (SELECT
      CASE WHEN Country_Name = "IVORY COAST" THEN "CI"
           WHEN Country_Name = "TANZANIA" THEN "TZ"
           WHEN Country_Name = "CZECH" THEN "CZ"
           WHEN Country_Name = "RUSSIA" THEN "RU"
      ELSE Country END AS Country,
      Regional_Head_Office,
      Country_Name,
      ONEForce_Id
      FROM `ONEFORCE.OF_OFFICE_HIERARCHY`) OfficeHierarchy
    ON TrailheadCountry.Country_Code = OfficeHierarchy.Country
    ),
Responsible_location_rgn AS (SELECT DISTINCT
           Region_Code,
           Region_Abbrev as RHQ
    FROM `ONEFORCE.OF_TRAILHEAD_COUNTRY` TrailheadCountry
    ),
Base_location AS (
    SELECT DISTINCT
    Country,
    UPPER(Country_Name) as Country_Name,
    Office_Code,
    CASE WHEN Office_Code = "SINHO" THEN "SINHO"
        WHEN Office_Code = "HKGHQ" THEN "HKGHQ"
        WHEN Office_Code = "LONHQ" THEN "LONHQ"
        WHEN Office_Code = "RICHQ" THEN "RICHQ"
        WHEN Office_Code = "SAOHQ" THEN "SAOHQ"
        WHEN Office_Code = "SINHQ" THEN "SINHQ"
        WHEN Office_Code = "zzUnclaimed - Office" THEN "UNCLAIMED"
    ELSE substr(Regional_Head_Office , -5) END as RHQ
    FROM `ONEFORCE.OF_OFFICE_HIERARCHY`)



      SELECT distinct
      --User Trailmix
      user_trailmix.CreatedDate as ut_cre_dt,
      user_trailmix.ONEForce_ID as ut_id,
      user_trailmix.Name as ut_nm,
      user_trailmix.trailheadapp__Assigned_At as ut_asgn_dt,
      user_trailmix.trailheadapp__Completed_At as ut_cmplt_dt,
      user_trailmix.trailheadapp__Due_At as ut_due_dt,
      user_trailmix.trailheadapp__Last_Attempted_At as ut_last_atpt_dt,
      user_trailmix.trailheadapp__Status as ut_stt,
      user_trailmix.trailheadapp__Trailmix as ut_tm_id,
      user_trailmix.trailheadapp__User as ut_usr_id,
      --Trailmix
      trailmix.CreatedDate as t_cre_dt,
      trailmix.Name as t_nm,
      trailmix.OwnerId as t_own_id,
      trailmix.trailheadapp__Created_By_Profile as t_cre_prfl_id,
      trailmix.trailheadapp__URL as t_url,
      --Badge
      badge.ONEForce_ID as b_id,
      badge.CreatedById as b_cre_by,
      badge.CreatedDate as b_cre_dt,
      badge.Name as b_nm,
      badge.OwnerId as b_own_id,
      badge.trailheadapp__URL as b_url,
      --User Badge
      user_badge.CreatedById as ub_cre_by,
      user_badge.CreatedDate as ub_cre_dt,
      user_badge.ONEForce_ID as ub_id,
      user_badge.Name as ub_nm,
      user_badge.trailheadapp__Assigned_Date as ub_asgn_dt,
      user_badge.trailheadapp__Due_Date as ub_due_dt,
      user_badge.trailheadapp__Finished_Date as ub_fnsh_dt,
      user_badge.trailheadapp__Last_Attempted_Date as ub_last_atpt_dt,
      user_badge.trailheadapp__Assigned_to_Complete as ub_asgn_to_cmplt,
      user_badge.trailheadapp__Badge as ub_b_id,
      CASE WHEN user_badge.trailheadapp__Status = "Assigned" OR user_badge.trailheadapp__Status is null THEN "Not Started"
      ELSE user_badge.trailheadapp__Status END as ub_stt,
      user_badge.trailheadapp__User as ub_usr_id,
      user_badge.trailheadapp__URL as ub_url,
      --User
      user.FirstName as u_frst_nm,
      user.LastName as u_lst_nm,
      user.Email as u_eml,
      user.Username as u_usr_nm,
      user.UserRoleId as u_rl_id,
      user.User_Role_Name as u_rl_nm,
      user.Title as u_ttl,
      user.ProfileId as u_prfl_id,
      user.Profile_Name as u_prfl_nm,
      user.OfficeType as u_ofc_tp,
      user.Country as u_cnt,
      user.Office_Code as u_ofc,
      user.Office_Code_Number as u_ofc_cd_no,
      user.City as u_city,
      user.ManagerId as u_mng_id,
      user.LastLoginDate as u_lst_lg_dt,
      user.Suppressed_in_CRM_Usage_KPI_Dashboard as u_is_crm_usr,
      --User Badge Aggregation
      user_badge_aggre.ttl_bdg,
      user_badge_aggre.not_strt_bdg,
      user_badge_aggre.in_prgr_bdg,
      user_badge_aggre.cmplt_bdg,
      user_badge_aggre.latest_bdg_lst_atmpt_dt,
      CASE WHEN user_badge_aggre.ut_stt_nw = "Completed" THEN user_badge_aggre.latest_bdg_fnsh_dt ELSE null END as latest_bdg_fnsh_dt,
      user_badge_aggre.ut_stt_nw,
      --Badge Overall Status
      badge_overall_status.bdg_id,
      badge_overall_status.ttl_usr as bdg_ttl_usr,
      badge_overall_status.cmplt_bdg as bdg_ttl_cmplt_usr,
      badge_overall_status.bdg_ovrll_stt,
      --Location
      CASE  WHEN user.Office_Code_Number = "SINHO" THEN "SINGAPORE"
      WHEN user.Office_Code_Number = "HKGHQ" THEN "HONG KONG"
      WHEN user.Office_Code_Number = "LONHQ" THEN "UNITED KINGDOM"
      WHEN user.Office_Code_Number = "RICHQ" THEN "UNITED STATES"
      WHEN user.Office_Code_Number = "SAOHQ" THEN "BRAZIL"
      WHEN user.Office_Code_Number = "SINHQ" THEN "SINGAPORE"
      WHEN Responsible_location_cnt.Country_Name IS NOT NULL
      THEN Responsible_location_cnt.Country_Name
      ELSE Base_location.Country_Name END as Responsible_Country,
      CASE WHEN Responsible_location_rgn.RHQ is not null THEN Responsible_location_rgn.RHQ
      WHEN Responsible_location_cnt.RHQ is not null THEN Responsible_location_cnt.RHQ
      ELSE Base_location.RHQ END as Responsible_RHQ
      FROM user_trailmix
      INNER JOIN trailmix
      ON user_trailmix.trailheadapp__Trailmix = trailmix.ONEForce_ID
      INNER JOIN badge
      ON trailmix.ONEForce_ID = badge.Trailmix
      LEFT JOIN user_badge
      ON badge.ONEForce_ID = user_badge.trailheadapp__Badge and user_trailmix.trailheadapp__User = user_badge.trailheadapp__User
      INNER JOIN user
      ON user_trailmix.trailheadapp__User = user.ONEForce_ID
      LEFT JOIN user_badge_aggre
      ON user_trailmix.trailheadapp__User = user_badge_aggre.ut_usr_id AND user_trailmix.trailheadapp__Trailmix = user_badge_aggre.ut_tm_id
      LEFT JOIN badge_overall_status
      ON badge.ONEForce_ID = badge_overall_status.bdg_id
      LEFT JOIN Responsible_location_cnt
      ON LEFT(user.User_Role_Name,2) = Responsible_location_cnt.Country_Code
      LEFT JOIN Responsible_location_rgn
      ON LEFT(user.User_Role_Name,3) = Responsible_location_rgn.Region_Code
      LEFT JOIN Base_location
      ON user.Office_Code_Number = Base_location.Office_Code

      ;;
  }

#####------- USER TRAILMIX ------------------------------------------------------#####
  dimension_group: ut_cre_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Assignment Creation"
    view_label: "User Trailmix"
    datatype: datetime
    sql: ${TABLE}.ut_cre_dt ;;
  }

  dimension: ut_nm {
    type: string
    label: "User Trailmix ID"
    view_label: "User Trailmix"
    sql: ${TABLE}.ut_nm ;;
  }
  dimension: unique_key {
    type: string
    sql: ${ut_id}||${b_id} ;;
    primary_key: yes
    hidden: yes
  }
  dimension: ut_id {
    type: string
    label: "User Trailmix OF ID"
    view_label: "User Trailmix"
    sql: ${TABLE}.ut_id ;;
  }

  dimension: ut_tm_id {
    type: string
    label: "Trailmix ID"
    view_label: "User Trailmix"
    sql: ${TABLE}.ut_tm_id ;;
  }

  dimension: ut_usr_id {
    label: "User ID"
    view_label: "User Trailmix"
    type: string
    sql: ${TABLE}.ut_usr_id ;;
  }

  measure: trailhead_users_count {
    type: count_distinct
    label: "Total of Trailhead Users"
    view_label: "User Trailmix"
    sql: ${ut_usr_id} ;;
  }

  measure: trailhead_trailmixes_count {
    type: count_distinct
    label: "Total of Trailhead Trailmixes"
    view_label: "User Trailmix"
    sql: ${ut_tm_id} ;;
  }

  dimension_group: ut_asgn_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Assignment"
    view_label: "User Trailmix"
    datatype: datetime
    sql: ${TABLE}.ut_asgn_dt ;;
  }

  dimension_group: ut_cmplt_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Completion"
    view_label: "User Trailmix"
    datatype: datetime
    sql: ${TABLE}.ut_cmplt_dt ;;
    hidden: yes
  }

  dimension_group: ut_due_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Due"
    view_label: "User Trailmix"
    datatype: datetime
    sql: ${TABLE}.ut_due_dt ;;
  }

  dimension_group: ut_last_atpt_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Last Attempted"
    view_label: "User Trailmix"
    datatype: datetime
    sql: ${TABLE}.ut_last_atpt_dt ;;
    hidden: yes
  }

  measure: count {
    label: "Total of User Trailmixes"
    view_label: "User Trailmix"
    type: count_distinct
    sql: ${ut_id} ;;
    drill_fields: [user_trailmix_detail*]
  }

#### Add Time Granularity ####
  parameter: Trailmix_Switch {
    label: "Trailmix Trend (measure)"
    view_label: "Parameter"
    type: unquoted
    allowed_value: {
      label: "Trailmix Creation"
      value: "Creation"
    }
    allowed_value: {
      label: "Learner Progress Status"
      value: "Status"
    }

    default_value: "Status"
  }

  measure: switch_count {
    view_label: "User Trailmix"
    label: "{% if Trailmix_Switch._parameter_value == 'Status' %} Trailmix Users Count
    {% else %} Trailmix Creation Count {% endif %}"
    type: count_distinct
    sql: CASE WHEN "{% parameter Trailmix_Switch %}" = "Status" THEN ${ut_id} ELSE ${ut_tm_id} END ;;
    sql_distinct_key: CASE WHEN "{% parameter Trailmix_Switch %}" = "Status" THEN ${ut_id} ELSE ${ut_tm_id} END ;;
    drill_fields: [user_trailmix_detail*]
  }

  dimension_group: Standard_Date {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Standard Date"
    view_label: "Dynamic Dimension"
    datatype: datetime
    sql: CASE WHEN "{% parameter Trailmix_Switch %}" = "Status" THEN
            (CASE WHEN ${ut_stt} = 'Not Started' THEN ${ut_asgn_dt_raw}
                 WHEN ${ut_stt} = 'In-Progress' THEN ${latest_bdg_lst_atmpt_dt_raw}
                 WHEN ${ut_stt} = 'Completed' THEN ${latest_bdg_fnsh_dt_raw}
              ELSE NULL
              END
            )
          ELSE ${t_cre_dt_raw}
          END
            ;;
  }
  dimension: standard_date_dynamic {
    type: date
    datatype: datetime
    view_label: "Dynamic Dimension"
    label: "Standard Date Dynamic"
    sql:
    CASE
    WHEN {% parameter timeframe_picker %} = 'Day' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Standard_Date_raw}),'{{_query._query_timezone}}'),DAY)
    WHEN {% parameter timeframe_picker %} = 'Week' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Standard_Date_raw}),'{{_query._query_timezone}}'), WEEK(MONDAY))
    WHEN {% parameter timeframe_picker %} = 'Month' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Standard_Date_raw}),'{{_query._query_timezone}}'),MONTH)
    WHEN {% parameter timeframe_picker %} = 'Quarter' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Standard_Date_raw}),'{{_query._query_timezone}}'),QUARTER)
    WHEN {% parameter timeframe_picker %} = 'Year' THEN DATETIME_TRUNC(DATETIME(TIMESTAMP(${Standard_Date_raw}),'{{_query._query_timezone}}'),YEAR)
    ELSE NULL
    END ;;
    convert_tz: no
  }

  parameter: timeframe_picker {
    view_label: "Parameter"
    label: "Date Granularity"
    type: string
    allowed_value: { value: "Day" }
    allowed_value: { value: "Week" }
    allowed_value: { value: "Month" }
    allowed_value: { value: "Quarter" }
    allowed_value: { value: "Year" }
    default_value: "Month"
  }

  #Fields below are created for Trailmix Aging Chart:
  dimension_group: created_date_to_current_date {
    view_label: "User Trailmix"
    label: "Created Date to Current"
    type: duration
    intervals: [hour, day, week]
    sql_start: ${ut_cre_dt_raw} ;;
    sql_end: current_date('{{_query._query_timezone}}') ;;
  }

  dimension_group: due_date_to_current_date {
    view_label: "User Trailmix"
    label: "Due Date to Current"
    type: duration
    intervals: [hour, day, week]
    sql_start: ${ut_due_dt_raw};;
    sql_end: current_date('{{_query._query_timezone}}') ;;
  }

  dimension: Status_for_Overdue{
    view_label: "Dynamic Dimension"
    label: "Status for Overdue"
    type: string
    sql:  CASE WHEN "{% parameter Trailmix_Switch %}" = "Status" THEN
            (CASE WHEN ${ut_stt} = "Completed" THEN  "Completed"
                  WHEN ${days_due_date_to_current_date} > 0 THEN "Overdue"
             ELSE ${ut_stt}
             END
            )
          ELSE ''
          END
          ;;
    order_by_field: status_order
  }

  dimension: status_order {
    type: string
    hidden: yes
    sql: CASE WHEN ${Status_for_Overdue} = "Not Started" THEN '1'
              WHEN ${Status_for_Overdue} = "In-Progress" THEN '2'
              WHEN ${Status_for_Overdue} = "Completed" THEN '3'
              WHEN ${Status_for_Overdue} = "Overdue" THEN '4'
              ELSE null END
    ;;
  }

  dimension: trail_aging {
    view_label: "User Trailmix"
    label: "Trail Aging"
    type: string
    sql: CASE WHEN ${days_created_date_to_current_date} <= 10 THEN '1-10 days'
              WHEN ${days_created_date_to_current_date} > 10 AND ${days_created_date_to_current_date} <= 30 THEN '11-30 days'
              WHEN ${days_created_date_to_current_date} > 30 AND ${days_created_date_to_current_date} <= 60 THEN '31-60 days'
              WHEN ${days_created_date_to_current_date} > 60 THEN '> 60 days' END
              ;;
  }

  set: user_trailmix_detail {
    fields: [
      ut_tm_id,
      t_nm,
      of_trailheadapp_trailmix.created_by_name,
      t_url,
      ut_usr_id,
      u_frst_nm,
      u_lst_nm,
      u_usr_nm,
      u_ttl,
      u_prfl_nm,
      u_rl_nm,
      u_ofc,
      u_bs_ofc_cd,
      u_ofc_tp,
      u_cnt,
      u_mng_nm,
      u_lst_lg_dt_date,
      Responsible_Country,
      Responsible_RHQ,
      ut_stt,
      ut_cre_dt_date,
      ut_asgn_dt_date,
      latest_bdg_lst_atmpt_dt_date,
      latest_bdg_fnsh_dt_date
    ]
  }
  ##### Add due filter #####
  dimension_group: current_date_to_due_date {
    view_label: "User Trailmix"
    label: "Number of days to due date"
    type: duration
    intervals: [hour, day, week]
    sql_start: current_date('{{_query._query_timezone}}');;
    sql_end: ${ut_due_dt_raw};;
  }

  dimension: due_in_next {
    view_label: "User Trailmix"
    label: "Due in next"
    type: string
    sql: CASE WHEN ${days_current_date_to_due_date} is null THEN "Not included"
              WHEN ${days_current_date_to_due_date} < 0 THEN "Not included"
              WHEN ${days_current_date_to_due_date} > 30 THEN "Not included"
              WHEN ${days_current_date_to_due_date} <= 7 THEN '7 days - 14 days - 30 days'
              WHEN ${days_due_date_to_current_date} <= 14 THEN '14 days - 30 days'
              WHEN ${days_due_date_to_current_date} <= 30 THEN '30 days'
              ELSE NULL END;;
  }

  parameter: due_in_next_param {
    view_label: "Parameter"
    label: "Due in next parameter"
    allowed_value:{
      label: "All"
      value: " "
    }
    allowed_value: {
      label: "7 days"
      value: "7 days"
    }
    allowed_value: {
      label: "14 days"
      value: "14 days"
    }
    allowed_value: {
      label: "30 days"
      value: "30 days"
    }
  }

  dimension: due_in_next_condition {
    view_label: "User Trailmix"
    label: "Due in next condition"
    type: number
    sql: CASE WHEN CONTAINS_SUBSTR(${due_in_next},{% parameter due_in_next_param %}) THEN 1 ELSE 0 END;;
  }

#####------- TRAILMIX ------------------------------------------------------#####
  dimension_group: t_cre_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Trailmix Creation"
    view_label: "Trailmix"
    datatype: datetime
    sql: ${TABLE}.t_cre_dt ;;
  }
  dimension: t_cre_by_nm {
    type: string
    label: "Trailmix Creator Name"
    view_label: "Trailmix"
    sql: ${created_by_name.name} ;;
  }
  dimension: t_nm {
    type: string
    label: "Trailmix Name"
    view_label: "Trailmix"
    sql: ${TABLE}.t_nm ;;
  }
  dimension: t_own_id {
    type: string
    label: "Trailmix Owner Id"
    view_label: "Trailmix"
    sql: ${TABLE}.t_own_id ;;
  }
  dimension: t_cre_prfl_id {
    type: string
    label: "Created by Profile Id"
    view_label: "Trailmix"
    sql: ${TABLE}.t_cre_prfl_id ;;
  }
  dimension: t_url {
    type: string
    label: "Trailmix URL"
    view_label: "Trailmix"
    sql: ${TABLE}.t_url ;;
    link: {
      label: "Navigate to trailmix"
      url: "{{of_trailheadapp_user_trailmix.t_url._rendered_value}}"
    }
  }

#####------- BADGE -----------------------------------------------------#####
  dimension: b_id {
    type: string
    label: "Module OF ID"
    view_label: "Badge"
    sql: ${TABLE}.b_id ;;
  }
  dimension_group: b_cre_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Module Creation"
    view_label: "Badge"
    datatype: datetime
    sql: ${TABLE}.b_cre_dt ;;
  }
  dimension: b_cre_by {
    type: string
    label: "Module Created By"
    view_label: "Badge"
    sql: ${TABLE}.b_cre_by ;;
  }
  dimension: b_nm {
    type: string
    label: "Module Name"
    view_label: "Badge"
    sql: ${TABLE}.b_nm ;;
  }
  dimension: b_own_id {
    type: string
    label: "Module Owner Id"
    view_label: "Badge"
    sql: ${TABLE}.b_own_id ;;
  }
  dimension: b_url {
    type: string
    label: "Module URL"
    view_label: "Badge"
    sql: ${TABLE}.b_url ;;
    link: {
      label: "Navigate to Module"
      url: "{{of_trailheadapp_user_trailmix.b_url._rendered_value}}"
    }
  }

#####------- USER BADGE ------------------------------------------------#####
  dimension_group: ub_cre_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "User Badge Creation"
    view_label: "User Badge"
    datatype: datetime
    sql: ${TABLE}.ub_cre_dt ;;
  }
  dimension: ub_cre_by {
    type: string
    label: "User Badge Created By"
    view_label: "User Badge"
    sql: ${TABLE}.ub_cre_by ;;
  }
  dimension: ub_id {
    type: string
    label: "User Badge OF ID"
    view_label: "User Badge"
    sql: ${TABLE}.ub_id ;;
  }
  dimension: ub_nm {
    type: string
    label: "User Badge Name"
    view_label: "User Badge"
    sql: ${TABLE}.ub_nm ;;
  }
  dimension_group: ub_asgn_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "User Badge Assignment"
    view_label: "User Badge"
    datatype: datetime
    sql: ${TABLE}.ub_asgn_dt ;;
  }
  dimension_group: ub_due_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "User Badge Due"
    view_label: "User Badge"
    datatype: datetime
    sql: ${TABLE}.ub_due_dt ;;
  }
  dimension_group: ub_fnsh_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "User Badge Finish"
    view_label: "User Badge"
    datatype: datetime
    sql: ${TABLE}.ub_fnsh_dt ;;
  }
  dimension_group: ub_last_atpt_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "User Badge Last Attempted"
    view_label: "User Badge"
    datatype: datetime
    sql: ${TABLE}.ub_last_atpt_dt ;;
  }
  dimension: ub_asgn_to_cmplt {
    view_label: "User Badge"
    label: "Number of days from assigned to complete"
    type: number
    sql: ${TABLE}.ub_asgn_to_cmplt ;;
  }
  dimension: ub_b_id {
    type: string
    label: "Badge Id"
    view_label: "User Badge"
    sql: ${TABLE}.ub_b_id ;;
  }
  dimension: ub_stt {
    type: string
    label: "User Badge Status"
    view_label: "User Badge"
    sql: ${TABLE}.ub_stt ;;
    order_by_field: ub_status_order
  }
  dimension: ub_status_order {
    type: string
    hidden: yes
    sql: CASE WHEN ${ub_stt} = "Not Started" THEN '1'
              WHEN ${ub_stt} = "In-Progress" THEN '2'
              WHEN ${ub_stt} = "Completed" THEN '3'
              ELSE null END
    ;;
  }
  dimension: ub_1 {
    type: number
    sql: 1 ;;
    hidden: yes
  }
  measure: ub_status_count {
    label: "Status Count"
    view_label: "User Badge"
    type: sum
    sql: ${ub_1} ;;
    drill_fields: [user_badge_detail*]
  }
  measure: ub_not_started_count {
    label: "Not Started Count"
    view_label: "User Badge"
    type: sum
    sql: ${ub_1} ;;
    filters: [ub_stt: "Not Started"]
    drill_fields: [user_badge_detail*]
  }
  measure: ub_in_progress_count {
    label: "In-Progress Count"
    view_label: "User Badge"
    type: sum
    sql: ${ub_1} ;;
    filters: [ub_stt: "In-Progress"]
    drill_fields: [user_badge_detail*]
  }
  measure: ub_completed_count {
    label: "Completed Count"
    view_label: "User Badge"
    type: sum
    sql: ${ub_1} ;;
    filters: [ub_stt: "Completed"]
    drill_fields: [user_badge_detail*]
  }
  dimension: ub_usr_id {
    type: string
    label: "User Id"
    view_label: "User Badge"
    sql: ${TABLE}.ub_usr_id ;;
  }
  dimension: ub_url {
    type: string
    label: "User Badge URL"
    view_label: "User Badge"
    sql: ${TABLE}.ub_url ;;
    link: {
      label: "Navigate to user's module"
      url: "{{of_trailheadapp_user_trailmix.ub_url._rendered_value}}"
    }
  }
  measure: ub_count {
    type: count_distinct
    label: "Total of User Badges"
    view_label: "User Badge"
    sql: ${ub_id} ;;
    drill_fields: [user_badge_detail*]
  }

  set: user_badge_detail {
    fields: [
      ut_tm_id,
      t_nm,
      ut_usr_id,
      u_frst_nm,
      u_lst_nm,
      u_usr_nm,
      u_ttl,
      u_prfl_nm,
      u_rl_nm,
      u_mng_nm,
      u_ofc,
      u_bs_ofc_cd,
      u_ofc_tp,
      u_cnt,
      u_lst_lg_dt_date,
      Responsible_Country,
      Responsible_RHQ,
      ub_b_id,
      b_nm,
      b_url,
      ub_stt,
      ub_cre_dt_date,
      ub_asgn_dt_date,
      ub_last_atpt_dt_date,
      ub_fnsh_dt_date
    ]
  }

#####------- USER ------------------------------------------------------#####
  dimension: u_frst_nm {
    type: string
    label: "First Name"
    view_label: "User"
    sql: ${TABLE}.u_frst_nm ;;
  }
  dimension: u_lst_nm {
    type: string
    label: "Last Name"
    view_label: "User"
    sql: ${TABLE}.u_lst_nm ;;
  }
  dimension: u_fll_nm {
    label: "Full Name"
    view_label: "User"
    type: string
    sql: concat(${u_frst_nm}," ",${u_lst_nm}) ;;
  }
  dimension: u_sls_prsn {
    label: "Sales Person"
    view_label: "User"
    type: string
    sql: ${u_fll_nm} ;;
  }
  dimension: u_eml {
    type: string
    label: "Email"
    view_label: "User"
    sql: ${TABLE}.u_eml ;;
  }
  dimension: u_usr_nm {
    type: string
    label: "Email"
    view_label: "User"
    sql: ${TABLE}.u_usr_nm ;;
  }
  dimension: u_rl_id {
    type: string
    label: "User Role Id"
    view_label: "User"
    sql: ${TABLE}.u_rl_id ;;
  }
  dimension: u_rl_nm {
    type: string
    label: "Role"
    view_label: "User"
    sql: ${TABLE}.u_rl_nm ;;
  }
  dimension: u_ttl {
    type: string
    label: "Title"
    view_label: "User"
    sql: ${TABLE}.u_ttl ;;
  }
  dimension: u_prfl_id {
    type: string
    label: "User Profile Id"
    view_label: "User"
    sql: ${TABLE}.u_prfl_id ;;
  }
  dimension: u_prfl_nm {
    type: string
    label: "Profile"
    view_label: "User"
    sql: CASE WHEN ${TABLE}.u_prfl_nm = "Sales Executive"
                OR ${TABLE}.u_prfl_nm = "Third Party Agent"
                OR ${TABLE}.u_prfl_nm = "Trade Marketing"
                OR ${TABLE}.u_prfl_nm = "Customer Care Agent"
                OR ${TABLE}.u_prfl_nm = "Customer Care Supervisor"
                OR ${TABLE}.u_prfl_nm = "TPA (Service Cloud) CCS"
                OR ${TABLE}.u_prfl_nm = "TPA (Service Cloud) CCA"
              THEN ${TABLE}.u_prfl_nm
              ELSE "Others"
          END
          ;;
  }
  dimension: sales_service_profile {
    type: string
    view_label: "User"
    label: "Is Sales or Service profile?"
    sql: CASE WHEN ${u_prfl_nm} = 'Sales Executive'
                OR ${u_prfl_nm} = 'Trade Marketing'
                OR ${u_prfl_nm} = 'Third Party Agent' THEN 'Sales Cloud'
              WHEN ${u_prfl_nm} = 'Customer Care Agent'
                OR ${u_prfl_nm} = 'Customer Care Supervisor'
                OR ${u_prfl_nm} = 'TPA (Service Cloud) CCA'
                OR ${u_prfl_nm} = 'TPA (Service Cloud) CCS' THEN 'Service Cloud'
              ELSE null END;;
  }
  dimension: u_ofc_tp {
    type: string
    label: "Office Type"
    view_label: "User"
    sql: ${TABLE}.u_ofc_tp ;;
  }
  dimension: u_cnt {
    type: string
    label: "Country"
    view_label: "User"
    sql: ${TABLE}.u_cnt ;;
  }
  dimension: u_ofc_cd_no {
    type: string
    label: "Office Code"
    view_label: "User"
    sql: ${TABLE}.u_ofc_cd_no ;;
  }
  dimension: u_ofc {
    type: string
    label: "Office"
    view_label: "User"
    sql: ${TABLE}.u_ofc ;;
  }
  dimension: u_city {
    type: string
    label: "City"
    view_label: "User"
    sql: ${TABLE}.u_city ;;
  }
  dimension: u_mng_id {
    type: string
    label: "Manager Id"
    view_label: "User"
    sql: ${TABLE}.u_mng_id ;;
  }
  dimension: u_mng_nm {
    view_label: "User"
    label: "Manager Name"
    type: string
    sql: ${manager.full_name} ;;
  }
  dimension_group: u_lst_lg_dt {
    label: "Last Login"
    view_label: "User"
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    datatype: datetime
    sql: ${TABLE}.u_lst_lg_dt ;;
  }
  dimension: u_is_crm_usr {
    type: string
    label: "Learner is suppressed ?"
    view_label: "User"
    sql: CASE WHEN ${TABLE}.u_is_crm_usr = 'true' THEN 'Yes' ELSE 'No' END ;;
  }
  dimension: u_bs_ofc_cd {
    label: "Base Office Code"
    view_label: "User"
    sql:  CASE WHEN ${u_ofc_cd_no} = "ffice" THEN UPPER("Unclaimed")
          ELSE UPPER(${u_ofc_cd_no})
          END
          ;;
  }
  dimension: Responsible_Country {
    label: "Responsible Country"
    view_label: "User"
    sql: ${TABLE}.Responsible_Country;;
  }

  dimension: Responsible_Office {
    label: "Responsible Office"
    view_label: "User"
    sql: ${u_bs_ofc_cd};;
  }

  dimension: Responsible_RHQ {
    label: "Responsible Region"
    view_label: "User"
    sql: ${TABLE}.Responsible_RHQ
      ;;
  }
  parameter: Service_Trailmix_Dynamic_Param {
    view_label: "Parameter"
    label: "Service Trailmix Dynamic Param"
    allowed_value: {
      label: "RHQ"
      value: "Responsible Region"
    }
    allowed_value: {
      label: "Country"
      value: "Responsible Country"
    }
    allowed_value: {
      label: "Office"
      value: "Responsible Office"
    }
    allowed_value: {
      label: "Office Type"
      value: "Office Type"
    }
    allowed_value: {
      label: "Profile"
      value: "Profile"
    }
    allowed_value: {
      label: "Team"
      value: "Team"
    }
    allowed_value: {
      label: "Learner"
      value: "User"
    }
    allowed_value: {
      label: "Trailmix"
      value: "Trailmix"
    }
  }
  dimension: Service_Trailmix_Dynamic {
    view_label: "Dynamic Dimension"
    label: "Service Trailmix Dynamic"
    sql: CASE
          WHEN {% parameter Service_Trailmix_Dynamic_Param %} = "Responsible Region" THEN ${Responsible_RHQ}
          WHEN {% parameter Service_Trailmix_Dynamic_Param %} = "Responsible Country" THEN ${Responsible_Country}
          WHEN {% parameter Service_Trailmix_Dynamic_Param %} = "Responsible Office" THEN ${Responsible_Office}
          WHEN {% parameter Service_Trailmix_Dynamic_Param %} = "Office Type" THEN ${u_ofc_tp}
          WHEN {% parameter Service_Trailmix_Dynamic_Param %} = "Profile" THEN ${u_prfl_nm}
          WHEN {% parameter Service_Trailmix_Dynamic_Param %} = "Team" THEN ${team.name}
          WHEN {% parameter Service_Trailmix_Dynamic_Param %} = "User" THEN ${u_fll_nm}
          WHEN {% parameter Service_Trailmix_Dynamic_Param %} = "Trailmix" THEN ${t_nm}
        ELSE "Global"
        END
    ;;
  }

#####------- USER BADGE AGGREGATION --------------------------------------#####
  dimension: ut_stt {
    type: string
    label: "Trailmix Status"
    view_label: "User Trailmix Aggregation"
    sql: ${TABLE}.ut_stt_nw ;;
  }
  dimension_group: latest_bdg_lst_atmpt_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Last Attempted"
    view_label: "User Trailmix Aggregation"
    datatype: datetime
    sql: ${TABLE}.latest_bdg_lst_atmpt_dt ;;
  }
  dimension_group: latest_bdg_fnsh_dt {
    type: time
    timeframes: [raw, date, week, month, quarter, year]
    label: "Completion"
    view_label: "User Trailmix Aggregation"
    datatype: datetime
    sql: ${TABLE}.latest_bdg_fnsh_dt ;;
  }
  dimension: ttl_bdg {
    type: number
    label: "Total badges"
    view_label: "User Trailmix Aggregation"
    sql: ${TABLE}.ttl_bdg ;;
  }
  dimension: not_strt_bdg {
    type: number
    label: "Not started badges"
    view_label: "User Trailmix Aggregation"
    sql: ${TABLE}.not_strt_bdg ;;
  }
  dimension: in_prgr_bdg {
    type: number
    label: "In-Progress badges"
    view_label: "User Trailmix Aggregation"
    sql: ${TABLE}.in_prgr_bdg ;;
  }
  dimension: cmplt_bdg {
    type: number
    label: "Completed badges"
    view_label: "User Trailmix Aggregation"
    sql: ${TABLE}.cmplt_bdg ;;
  }
  dimension: cmplt_b_nm {
    type: string
    sql: CASE WHEN ${ub_stt} = "Completed" THEN ${b_nm} ELSE null END ;;
    hidden: yes
  }
  measure: badge_name_concatenation {
    type: list
    view_label: "User Trailmix Aggregation"
    label: "List of completed modules"
    list_field: cmplt_b_nm
  }

#####------- BADGE OVERALL STATUS --------------------------------------#####
  dimension: bdg_ttl_usr {
    type: number
    label: "Total users"
    view_label: "Badge Overall"
    sql: ${TABLE}.bdg_ttl_usr ;;
  }
  dimension: bdg_ttl_cmplt_usr {
    type: number
    label: "Total completed users"
    view_label: "Badge Overall"
    sql: ${TABLE}.bdg_ttl_cmplt_usr ;;
  }
  dimension: bdg_ovrll_stt {
    type: string
    label: "Badge Overall Status"
    view_label: "Badge Overall"
    sql: ${TABLE}.bdg_ovrll_stt ;;
  }
}

view: of_user {
  sql_table_name:  `ONEFORCE.OF_USER`
    ;;

  dimension: oneforce_id {
    label: "ONEForce Id"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: city {
    label: "City" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.City ;;
  }

  dimension: country {
    label: "Country"  # programmatically added by LookML modifier
    type: string
    #map_layer_name: countries
    sql: ${TABLE}.Country ;;
  }

  dimension: crm_trainer {
    label: "CRM Trainer"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.CRM_Trainer ;;
  }

  dimension: email {
    #hidden: yes
    label: "Email"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Email ;;
  }

  dimension: first_name {
    label: "FirstName"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.FirstName ;;
  }

  dimension: full_name {
    type: string
    sql: concat(${first_name}," ",${last_name}) ;;
  }


  dimension: full_name1 {
    type: string
    label: "GAM"
    sql: concat(${first_name}," ",${last_name}) ;;
  }

  # NA landing page
  dimension: sales_person {
    label: "Sales Peson"
    type: string
    sql: ${full_name} ;;

  }

  dimension: last_name {
    label: "LastName" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.LastName ;;
  }

  dimension: manager_id {
    label: "ManagerId"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ManagerId ;;
  }

  dimension: office_code {
    view_label: "Office Information"
    label: "{{_view._name}}: Office Code"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Office_Code ;;
  }

  dimension: office_Country_Code {
    view_label: "Office Information"
    label: "{{ _view._name }}: Office Country Name"  # programmatically added by LookML modifier
    type: string
    sql: CASE TRIM( SUBSTR( ${TABLE}.Office_Code, INSTR( ${TABLE}.Office_Code, '-', -1 )+1 ) )
           WHEN 'TSNBB' then 'China North'
           WHEN 'SJWBB' then 'China North'
           WHEN 'DLCBB' then 'China North'
           WHEN 'SHABB' then 'China Central'
           WHEN 'LYGBB' then 'China North'
           WHEN 'NKGBB' then 'China Central'
           WHEN 'SZHBB' then 'China Central'
           WHEN 'HGHBB' then 'China Central'
           WHEN 'JIXBB' then 'China Central'
           WHEN 'NBOBB' then 'China Central'
           WHEN 'HFEBB' then 'China Central'
           WHEN 'FOCBB' then 'HK & China South'
           WHEN 'XMNBB' then 'HK & China South'
           WHEN 'TAOBB' then 'China North'
           WHEN 'CGOBB' then 'China North'
           WHEN 'WUHBB' then 'China Central'
           WHEN 'CANBB' then 'HK & China South'
           WHEN 'SWABA' then 'HK & China South'
           WHEN 'SZPBB' then 'HK & China South'
           WHEN 'ZHOBB' then 'HK & China South'
           WHEN 'ZHUBB' then 'HK & China South'
           WHEN 'CKGBB' then 'China Central'
           WHEN 'CTUBB' then 'China Central'
           WHEN 'SIABB' then 'China North'
           WHEN 'HKGBB' then 'HK & China South'
           WHEN 'HKGHQ' then 'HK & China South'
           WHEN 'MACBA' then 'HK & China South'
        ELSE
          TRIM( SUBSTR (${TABLE}.Office_Code, 1, STRPOS(${TABLE}.Office_Code, '-') -2))
        END ;;

  }

  # TO BE REPLACED BY OF 2.0
  dimension: office_code_number {
    view_label: "Office Information"
    label: "{{ _view._name }}: Office Code Number"
    type: string
    sql: LTRIM(RTRIM(SUBSTR(${office_code}, LENGTH(${office_code}) - 5, 6)))  ;;
  }
  # END TO BE REPLACED BY OF 2.0

  dimension: parent_office {
    view_label: "Office Information"
    label: "{{ _view._name }}: Parent Office"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Parent_Office ;;
  }

  dimension: profile_id {
    label: "ProfileId"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ProfileId ;;
  }


  dimension: regional_head_office {
    view_label: "Office Information"
    label: "{{ _view._name }}: Regional Head Office" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Regional_Head_Office ;;
  }

  # Sales Process Landing Page ----- Start -------
  dimension: regional_head_office1 {
    view_label: "Office Information"
    label: "{{ _view._name }}: Regional Head Office" # programmatically added by LookML modifier
    type: string
    sql: case when ${regional_head_office}='Brazil - Sao Paulo - SAOHQ' then 'LAM'
          when ${regional_head_office}='Singapore - Singapore - SINHQ' then 'SAS'
          when ${regional_head_office}='United Kingdom - London - LONHQ' then 'EUA'
          when ${regional_head_office}='Hong Kong - Hong Kong - HKGHQ' then 'EAS'
          when ${regional_head_office}='United States - Richmond - RICHQ' then 'NAM'
          when ${regional_head_office}='Unclaimed - RHQ' then 'Nil'
          when ${regional_head_office}='Singapore - Singapore - SINHO' then 'SINHO' else Null End
          ;;
  }

  dimension: regional_head_office_order {
    view_label: "Office Information"
    label: "{{ _view._name }}: Regional Head Office Order" # programmatically added by LookML modifier
    type: string
    sql: case when ${regional_head_office1}='LAM : SAOHQ' then '1'
          when ${regional_head_office1}='SAS : SINHQ' then '2'
          when ${regional_head_office1}='EUA : LONHQ' then '3'
          when ${regional_head_office1}='EAS : HKGHQ' then '4'
          when ${regional_head_office1}='NAM : RICHQ' then '5'
          when ${regional_head_office1}='SINHO' then '6' else Null End
          ;;
  }
  # Sales Process Landing Page ----- End -------

  dimension: suppressed_in_crm_usage_kpi_dashboard {
    label: "Suppressed in CRM Usage KPI Dashboard"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Suppressed_in_CRM_Usage_KPI_Dashboard ;;
  }

  dimension: title {
    label: "Title"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Title ;;
  }

  dimension: user_role_id {
    label: "UserRoleId" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.UserRoleId ;;
  }

  dimension: username {
    label: "Username" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Username ;;
  }

  ## NA dasboard DCN-741 ##
  dimension: username_ofqa {
    label: "Username-OFQA" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Username || '.ofqa' ;;
  }

  dimension: srep_group {
    type: string
    sql: case when Initcap(${full_name}) in
            ( "Akie Crabdree", "Ayako Sheinkopf", "Ayumi Soobratty","Kaori Usui",
              "Kenichi Nemoto","Masahiro Yamanaka", "Masami Rusting","Masanao Shimazu",
              "Mizuki Ro","Shuntaro Honzawa", "Teruyo Okumura","Tetsuo Sonobe",
              "Yasushi Suzuki","Yoshihiro Nomura","Yuki Ishii","Maria Bodnar",
              "Karen Usui" ) then "JPN"
              when Initcap(${full_name}) in
            ( "George Douglass", "Katie Brown", "Kevin Rodriguez", "Rob Rawson",
              "Wilma McCord", "Tim Walsh", "Tom Smart", "Mark Kendall" ) then "GKA"
              when upper(trim(${office_code_number})) in ("CHIBB") then "CRO"
              when upper(trim(${office_code_number})) in ("NYCBB", "TORBB") then "ERO"
              when upper(trim(${office_code_number})) in ("ATLBB") then "SRO"
              when upper(trim(${office_code_number})) in ("BOIBB", "LAXBB", "SEABB", "VANBB") then "WRO"
          else
            "Others"
          end ;;
  }

  parameter: US_Spcl_Grouping {
    label: "US special Grouping (Yes/No)"
    type: unquoted
    allowed_value: {
      label: "Yes"
      value: "Yes"
    }
    allowed_value: {
      label: "No"
      value: "No"
    }
    default_value: "no"
  }

  dimension: user_office {
    type: string
    label: "{% if US_Spcl_Grouping._parameter_value == 'Yes' %} US Special Grouping
    {% else %} Office
    {% endif %}"
    sql:  {% if US_Spcl_Grouping._parameter_value == "Yes" %} ${srep_group}
            {% else %} ${office_code_number}
            {% endif %}
      ;;
  }

  dimension: user_role_name {
    label: "User Role Name"
    type: string
    sql: ${TABLE}.User_Role_Name ;;
  }

  dimension: profile_name {
    label: "Profile Name" ##added for service cloud 2.O KPI dashboards
    type: string
    sql: ${TABLE}.profile_name ;;
  }

  dimension: is_salesuser {
    type: yesno
    sql: lower(trim(${profile_name})) in ("third party agent", "sales executive") ;;
  }

  dimension: regional_head_office_short_nm {
    view_label: "Office Information"
    label: "{{ _view._name }}: Regional Head Office Short Name" # programmatically added by LookML modifier
    type: string
    sql: case when ${TABLE}.Regional_Head_Office is not null then trim(substr(${TABLE}.Regional_Head_Office, instr(${TABLE}.Regional_Head_Office,'-')+1))
      else "Unclaimed Region" end;;
  }

  dimension: regional_head_office_5char {
    view_label: "Office Information"
    # label: "{{ _view._name }}: Regional Head Office Short Name" # programmatically added by LookML modifier
    label: "{% if    _explore._name ==  \"dashboard_performance\" %}Region{%
    else                                 %}{{ _view._name }}: Region code{%
    endif %}"
    type: string
    sql: case when ${TABLE}.Regional_Head_Office is not null then RIGHT(${TABLE}.Regional_Head_Office, 5)
      else "Unclaimed Region" end;;
  }

  #added for service cloud 2.O KPI dashboards Starts
  dimension: name {
    label: "{{ _view._name }}: Name"
    type: string
    sql: CASE WHEN ${first_name} IS NULL THEN ${last_name} WHEN ${last_name} IS NULL THEN ${first_name} ELSE  concat(${first_name}," ",${last_name}) END;;
  }

  dimension: office_code_new {
    # label: "{{ _view._name }}: Office Code"
    label: "{% if    _explore._name ==  \"dashboard_performance\" %}Office Code{%
    else                                 %}{{ _view._name }}: Office Code{%
    endif %}"
    type: string
    sql: ${TABLE}.Office_Code_Number  ;;
  }

  dimension: profile_name_service {
    label: "Profile Name for Service"
    type: string
    sql: CASE
          WHEN ${TABLE}.profile_name='Customer Care Agent' THEN 'CCA'
          WHEN ${TABLE}.profile_name= 'Customer Care Supervisor' THEN 'CCS'
          WHEN ${TABLE}.profile_name IN ('Sales Executive','TPA (Service Cloud) CCS','TPA (Service Cloud) CCA') THEN ${TABLE}.profile_name
          ELSE "Others" END ;;
  }
  #added for service cloud 2.O KPI dashboards Ends
  dimension: sales_service_user_profile {
    label: "Sales or Service User Profile"
    type: string
    sql: CASE
          WHEN {% parameter Profile_Param %} = "Service" and  ${TABLE}.profile_name IN ('Customer Care Agent', 'Customer Care Supervisor', 'Sales Executive', 'TPA (Service Cloud) CCS', 'TPA (Service Cloud) CCA') THEN 'Yes'
          WHEN {% parameter Profile_Param %} = "Sales" and ${TABLE}.profile_name IN ('Third Party Agent', 'Sales Executive') THEN 'Yes'
          WHEN {% parameter Profile_Param %} = "All" THEN 'Yes'
          ELSE 'No' END;;
  }

  parameter: Profile_Param {
    type: string
    allowed_value: {
      label: "Service"
      value: "Service"
    }
    allowed_value: {
      label: "Sales"
      value: "Sales"
    }
    allowed_value: {
      label: "All"
      value: "All"
    }
  }

  dimension_group: createddate {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: timestamp(${TABLE}.createddate) ;;
  }

  dimension_group: lastlogindate {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: timestamp(${TABLE}.LastLoginDate) ;;
  }

  dimension_group: lastmodifieddate {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: timestamp(${TABLE}.lastmodifieddate) ;;
  }

  dimension: isactive {
    type: string
    sql: ${TABLE}.isactive ;;
  }

  dimension: isactive_y_n {
    type: string
    sql: case when ${isactive} = 'true' then 'Yes' else 'No' end ;;
  }


  ## ADDITIONAL FIELDS UNDER OF 2.0 ##
  #dimension: user_role_name {
  #  type: string
  #  sql: ${TABLE}.User_Role_Name ;;
  #}
#
  #dimension: amazon_connect_username {
  #  type: string
  #  sql: ${TABLE}.Amazon_Connect_Username ;;
  #}
#
  #dimension: email_2 {
  #  type: string
  #  sql: ${TABLE}.Email_2 ;;
  #}
#
  #dimension: exclude_from_reporting {
  #  type: string
  #  sql: ${TABLE}.Exclude_from_Reporting ;;
  #}
#
  #dimension: face_to_face_target {
  #  type: string
  #  sql: ${TABLE}.Face_to_Face_Target ;;
  #}

  #dimension: frozen_user {
  #  type: string
  #  sql: ${TABLE}.Frozen_User ;;
  #}
#
  #dimension: head_office {
  #label: "Head Office" #added for service cloud 2.O KPI dashboards
  #  type: string
  #  sql: ${TABLE}.Head_Office ;;
  #}
#
  #dimension: home_phone {
  #  type: string
  #  sql: ${TABLE}.Home_Phone ;;
  #}
#
  #dimension: looker_group_id {
  #  type: string
  #  sql: ${TABLE}.Looker_Group_Id ;;
  #}
#
  #dimension: office_code_number {
  #   view_label: "Office Information"
  #   label: "{{ _view._name }}: Office Code Number"
  #   type: string
  #   sql: ${TABLE}.Office_Code_Number ;;
  # }
#
  # dimension: other_phone {
  #   type: string
  #   sql: ${TABLE}.Other_Phone ;;
  # }
#
  # dimension: phone_call_target {
  #   type: string
  #   sql: ${TABLE}.Phone_Call_Target ;;
  # }
#
  # dimension: pilot_user {
  #   type: string
  #   sql: ${TABLE}.Pilot_User ;;
  # }
#
  # dimension: primary_role {
  #   type: string
  #   sql: ${TABLE}.Primary_Role ;;
  # }
#
  # dimension: team_codes {
  #   type: string
  #   sql: ${TABLE}.Team_Codes ;;
  # }
#
  # dimension: team_name {
  #   type: string
  #   sql: ${TABLE}.Team_Name ;;
  #}
#
  #dimension: tpa_user {
  #  type: string
  #  sql: ${TABLE}.TPA_user ;;
  #}
#
  #dimension: is_dummy {
  #  type: string
  #  sql: ${TABLE}.IsDummy ;;
  #}
#
  #dimension: created_date {
  #  type: string
  #  sql: ${TABLE}.CreatedDate ;;
  #}
#
  #dimension: last_modified_date {
  #  type: string
  #  sql: ${TABLE}.LastModifiedDate ;;
  #}
#
  #dimension: is_active {
  #  type: string
  #  sql: ${TABLE}.IsActive ;;
  #}
#
  #set: detail {
  #  fields: [
  #    country,
  #    office_code,
  #    regional_head_office,
  #    parent_office,
  #    user_role_id,
  #    user_role_name,
  #    profile_id,
  #    profile_name,
  #    city,
  #    crm_trainer,
  #    suppressed_in_crm_usage_kpi_dashboard,
  #    username,
  #    first_name,
  #    email,
  #    last_name,
  #    manager_id,
  #    title,
  #    oneforce_id,
  #    amazon_connect_username,
  #    email_2,
  #    exclude_from_reporting,
  #    face_to_face_target,
  #    frozen_user,
  #    head_office,
  #    home_phone,
  #    looker_group_id,
  #    office_code_number,
  #    other_phone,
  #    phone_call_target,
  #    pilot_user,
  #    primary_role,
  #    team_codes,
  #    team_name,
  #    tpa_user,
  #    is_dummy,
  #   created_date,
  #   last_modified_date,
  #   is_active
  # ]
  #}

  ## END FIELDS FOR OF 2.0

#DCN-552 start

  dimension: tpa_user {
    label: "Is TPA User"
    type: string
    sql: ${TABLE}.TPA_user ;;
  }

  dimension: email_2 {
    hidden: yes
    label: "Email 2"
    type: string
    sql: ${TABLE}.Email_2 ;;
  }

  dimension: email_4_join_with_cust  {
    hidden: yes
    type: string
    sql: CASE WHEN ${TABLE}.TPA_user = 'true' THEN ${TABLE}.Email_2 ELSE ${TABLE}.Email END   ;;
  }

#DCN-552 end

#NA-DASHBOARD <<start>>

  dimension: sub_region  {
    label: "Sub Region"
    type: string
    #sql:  'ERO'  ;;
    #sql: ${srep_group} ;;
    sql:  ${TABLE}.Sub_Region ;;
  }


#NA-DASHBOARD <<end>>

  measure: count {
    #hidden: yes
    type: count
    drill_fields: [first_name, username, last_name]
  }

  measure: salesuser_count {
    type: number
    sql: COUNT (DISTINCT CASE WHEN lower(trim(${profile_name})) = "sales executive" THEN ${oneforce_id} END) ;;
    drill_fields: [first_name, username, last_name]
  }

  measure: user_count {
    type: number
    sql: COUNT (distinct ${oneforce_id} ) ;;
    drill_fields: [drillfields*]
  }


  set: primary_key {
    fields: [oneforce_id, count]
  }

  dimension: officetype {
    label: "Office Type"
    type: string
    sql: IFNULL(${TABLE}.OfficeType,'Others') ;;
  }

  dimension: regional_head_office_new {
    type: string
    label: "RHQ"
    sql: case
          when ${regional_head_office}='Brazil - Sao Paulo - SAOHQ' THEN 'SAOHQ'
          when ${regional_head_office}='Hong Kong - Hong Kong - HKGHQ' THEN 'HKGHQ'
          when ${regional_head_office}='United Kingdom - London - LONHQ' THEN 'LONHQ'
          when ${regional_head_office}='United States - Richmond - RICHQ' THEN 'RICHQ'
          when ${regional_head_office}='Singapore - Singapore - SINHQ' THEN 'SINHQ'
            else "Unclaimed" end;;
  }

  dimension: tmym_profile {
    type: string
    label: "TM/YM Label"
    sql: ${TABLE}.TMYM_Profile ;;
  }

  dimension: user_role_name_for_trade_marketing {
    label: "User Role Name For Trade Marketing"
    type: string
    sql: case when ${user_role_name} = 'Trade Marketing' then
            case when left(${tmym_profile}, 2) = 'TM' then concat(${user_role_name}, SUBSTRING(${tmym_profile}, 3, LENGTH(${tmym_profile})))
                when left(${tmym_profile}, 2) = 'YM' then 'Yield Management'
                else ${user_role_name} end
         else ${user_role_name} end ;;
  }


  set: drillfields {
    fields: [
      profile_name_service,
      of_lkr_dbpfmc.user_types,
      regional_head_office,
      country,
      office_code,
      of_lkr_db.category,
      user_role_name,
      officetype,
      username,
    ]
  }


  dimension: Geography_dynamic {

    type: string
    label: "Geography Dynamic Adoption DB"
    drill_fields: [drillfields*]
    sql: CASE
          WHEN {% parameter DB_Param %} = "RHQ" THEN ${regional_head_office_new}
          WHEN {% parameter DB_Param %} = "Country" THEN ${country}
          WHEN {% parameter DB_Param %} = "Office Code" THEN ${office_code}
          WHEN {% parameter DB_Param %} = "User Role" THEN ${user_role_name}
          WHEN {% parameter DB_Param %} = "Agent Role" THEN ${profile_name_service}
          WHEN {% parameter DB_Param %} = "Office Type" THEN ${officetype}
          ELSE "Global" END;;
  }

  # Sales Process Landing Page ----- Start -------
  dimension: Geography_dynamic1 {
    type: string
    label: "Geography Dynamic Adoption DB"
    sql: CASE
          WHEN {% parameter DB_Param %} = "RHQ" THEN ${regional_head_office1}
          WHEN {% parameter DB_Param %} = "Country" THEN ${country}
          WHEN {% parameter DB_Param %} = "Office Code" THEN ${office_code}
          WHEN {% parameter DB_Param %} = "User Role" THEN ${user_role_name}
          WHEN {% parameter DB_Param %} = "Agent Role" THEN ${profile_name_service}
          WHEN {% parameter DB_Param %} = "Office Type" THEN ${officetype}
          ELSE "Global" END;;
  }
  # Sales Process Landing Page ----- End -------

  parameter: DB_Param {
    type: string
    label: "Dashboard Parameter"

    allowed_value: {
      label: "Global"
      value: "Global"
    }

    allowed_value: {
      label: "RHQ"
      value: "RHQ"
    }
    allowed_value: {
      label: "Country"
      value: "Country"
    }
    allowed_value: {
      label: "Office Code"
      value: "Office Code"
    }
    allowed_value: {
      label: "User Role"
      value: "User Role"
    }

    allowed_value: {
      label: "Agent Role"
      value: "Agent Role"
    }
    allowed_value: {
      label: "Office Type"
      value: "Office Type"
    }
  }


  # Dashboard Adoption----- Start -------
  dimension: Geography_dynamic2 {
    type: string
    label: "Geography Dynamic Adoption DB"
    sql: CASE
          WHEN {% parameter DB_Param2 %} = "RHQ" THEN ${regional_head_office_5char}
          WHEN {% parameter DB_Param2%} = "Country" THEN ${country}
          WHEN {% parameter DB_Param2 %} = "Office" THEN ${office_code}
          WHEN {% parameter DB_Param2 %} = "User Role" THEN ${user_role_name}
          WHEN {% parameter DB_Param2 %} = "User Profile" THEN ${profile_name}
          WHEN {% parameter DB_Param2 %} = "Office Type" THEN ${officetype}
          ELSE "Global" END;;
  }
  # Sales Process Landing Page ----- End -------

  parameter: DB_Param2 {
    type: string
    label: "Dashboard Parameter"

    allowed_value: {
      label: "Global"
      value: "Global"
    }

    allowed_value: {
      label: "RHQ"
      value: "RHQ"
    }
    allowed_value: {
      label: "Country"
      value: "Country"
    }
    allowed_value: {
      label: "Office"
      value: "Office"
    }
    allowed_value: {
      label: "User Role"
      value: "User Role"
    }

    allowed_value: {
      label: "User Profile"
      value: "User Profile"
    }
    allowed_value: {
      label: "Office Type"
      value: "Office Type"
    }
  }

}

view: of_user2 {
  derived_table: {
    sql: SELECT
        u.City
      , u.Country
      , u.CreatedDate
      , u.CRM_Trainer
      , u.Email
      , u.Email_2
      , u.Exclude_from_Reporting
      , u.Face_to_Face_Target
      , u.FirstName
      , u.Frozen_User
      , u.Head_Office
      , u.Home_Phone
      , u.IsActive
      , u.LastLoginDate
      , u.LastModifiedDate
      , u.LastName
      , u.Looker_Group_Id
      , u.ManagerId
      , u.Office_Code
      , u.Office_Code_Number
      , u.OfficeType
      , u.ONEForce_ID
      , u.Other_Phone
      , u.Parent_Office
      , u.Phone_Call_Target
      , u.Pilot_User
      , u.Primary_Role
      , u.Profile_Name
      , u.ProfileId
      , u.Regional_Head_Office
      , u.Sub_Region
      , u.Suppressed_in_CRM_Usage_KPI_Dashboard
      , u.Team_Codes
      , u.Team_Name
      , u.Title
      , u.TPA_user
      , u.User_Role_Name
      , u.Username
      , u.UserRoleId
      , u.firstname ||' '|| u.lastname as full_name
      , mgr.firstname ||' '|| mgr.lastname as mgr_full_name
      , 1 as dummy
      FROM `ONEFORCE.OF_USER` u
      LEFT JOIN `ONEFORCE.OF_USER` mgr ON (u.ManagerId = mgr.ONEForce_ID)
      ;;
  }

  ## custom dimension, param and filters start

  dimension: mgr_full_name {
    label: "{% if    _view._name ==  \"cust_owner\" %}Sales Manager{%
    elsif _view._name ==  \"gam\"        %}GAM's Manager{%
    elsif _view._name ==  \"ram_usr\"    %}RAM's Manager{%
    else                                 %}Manager Full Name{%
    endif %}"
    type: string
    sql: ${TABLE}.mgr_full_name ;;
  }

#DCN-1055
  dimension: full_name_contains_null {
    label: "{% if    _view._name ==  \"cust_owner\" %}Sales Person{%
    elsif _view._name ==  \"gam\"        %}GAM{%
    elsif _view._name ==  \"ram_usr\"    %}RAM{%
    elsif _view._name ==  \"ckam_usr\"   %}CKAM{%
    else                                 %}Full Name{%
    endif %}"
    type: string
    sql: CASE WHEN ${TABLE}.full_name is null THEN "NULL" ELSE ${TABLE}.full_name;;
  }
  dimension: full_name {
    label: "{% if    _view._name ==  \"cust_owner\" %}Sales Person{%
    elsif _view._name ==  \"gam\"        %}GAM{%
    elsif _view._name ==  \"ram_usr\"    %}RAM{%
    elsif _view._name ==  \"ckam_usr\"   %}CKAM{%
    else                                 %}Full Name{%
    endif %}"
    type: string
    sql: ${TABLE}.full_name ;;
  }

  dimension: dummy {
    type: number
    sql: ${TABLE}.dummy ;;
  }



  ## custom dimension, param and filters end

  dimension: city {
    type: string
    sql: ${TABLE}.City ;;
  }

  dimension: country {
    label: "{% if    _view._name ==  \"gam\"%}GAM Country Code {%
    elsif _view._name ==  \"ckam_usr\"%}C-KAM Country Code {%
    endif %}"
    type: string
    sql: ${TABLE}.Country ;;
  }

  dimension_group: created_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: crm_trainer {
    type: string
    sql: ${TABLE}.CRM_Trainer ;;
  }

  dimension: email {
    type: string
    sql: ${TABLE}.Email ;;
  }

  dimension: email_2 {
    type: string
    sql: ${TABLE}.Email_2 ;;
  }

  dimension: exclude_from_reporting {
    type: string
    sql: ${TABLE}.Exclude_from_Reporting ;;
  }

  dimension: face_to_face_target {
    type: string
    sql: ${TABLE}.Face_to_Face_Target ;;
  }

  dimension: first_name {
    type: string
    sql: ${TABLE}.FirstName ;;
  }

  dimension: frozen_user {
    type: string
    sql: ${TABLE}.Frozen_User ;;
  }

  dimension: head_office {
    type: string
    sql: ${TABLE}.Head_Office ;;
  }

  dimension: home_phone {
    type: string
    sql: ${TABLE}.Home_Phone ;;
  }

  dimension: is_active {
    type: string
    sql: ${TABLE}.IsActive ;;
  }

  dimension_group: last_login_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.LastLoginDate ;;
  }

  dimension_group: last_modified_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: last_name {
    type: string
    sql: ${TABLE}.LastName ;;
  }

  dimension: looker_group_id {
    type: string
    sql: ${TABLE}.Looker_Group_Id ;;
  }

  dimension: manager_id {
    type: string
    sql: ${TABLE}.ManagerId ;;
  }

  dimension: office_code {
    type: string
    sql: ${TABLE}.Office_Code ;;
  }

  dimension: office_code_number {
    label: "{% if    _view._name ==  \"ckam_usr\" %}C-KAM Office Code{%
    elsif _view._name ==  \"gam\"  %}GAM Office Code{%
    endif %}"
    type: string
    sql: ${TABLE}.Office_Code_Number ;;
  }

  dimension: office_type {
    type: string
    sql: ${TABLE}.OfficeType ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: other_phone {
    type: string
    sql: ${TABLE}.Other_Phone ;;
  }

  dimension: parent_office {
    type: string
    sql: ${TABLE}.Parent_Office ;;
  }

  dimension: phone_call_target {
    type: string
    sql: ${TABLE}.Phone_Call_Target ;;
  }

  dimension: pilot_user {
    type: string
    sql: ${TABLE}.Pilot_User ;;
  }

  dimension: primary_role {
    type: string
    sql: ${TABLE}.Primary_Role ;;
  }

  dimension: profile_name {
    type: string
    sql: ${TABLE}.Profile_Name ;;
  }

  dimension: profile_id {
    type: string
    sql: ${TABLE}.ProfileId ;;
  }

  dimension: regional_head_office {
    type: string
    sql: ${TABLE}.Regional_Head_Office ;;
  }

  dimension: rhq_code {
    type: string
    sql: SUBSTR(regional_head_office, INSTR(${regional_head_office}, '-', -1) +2 , 99)  ;;
  }

  dimension: sub_region {
    type: string
    sql: ${TABLE}.Sub_Region ;;
  }

  dimension: suppressed_in_crm_usage_kpi_dashboard {
    type: string
    sql: ${TABLE}.Suppressed_in_CRM_Usage_KPI_Dashboard ;;
  }

  dimension: team_codes {
    type: string
    sql: ${TABLE}.Team_Codes ;;
  }

  dimension: team_name {
    type: string
    sql: ${TABLE}.Team_Name ;;
  }

  dimension: title {
    type: string
    sql: ${TABLE}.Title ;;
  }

  dimension: tpa_user {
    type: string
    sql: ${TABLE}.TPA_user ;;
  }

  dimension: user_role_name {
    type: string
    sql: ${TABLE}.User_Role_Name ;;
  }

  dimension: username {
    label: "{% if     _view._name ==  \"ckam_usr\" %}C-KAM Email Address{%
    elsif _view._name ==  \"gam\"  %}GAM Email Address{%
    endif %}"
    type: string
    sql: ${TABLE}.Username ;;
  }

  dimension: user_role_id {
    type: string
    sql: ${TABLE}.UserRoleId ;;
  }


}

view: of_user_email {
  derived_table: {
    sql: SELECT distinct oneforce_id, email
      FROM ${of_user.SQL_TABLE_NAME}
      UNION ALL
      SELECT oneforce_id, email_2 as email
      FROM ${of_user.SQL_TABLE_NAME}
      where email_2 is not null
       ;;
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.oneforce_id ;;
  }

  dimension: email {
    type: string
    sql: ${TABLE}.email ;;
  }

  set: detail {
    fields: [oneforce_id, email]
  }
}

view: of_voice_call {
  sql_table_name: `ONEFORCE.OF_VOICE_CALL`
    ;;

  dimension: call_disposition {
    type: string
    sql: ${TABLE}.CallDisposition ;;
  }

  dimension: call_duration_in_seconds {
    type: number
    sql: ${TABLE}.CallDurationInSeconds ;;
  }

  dimension_group: call_end_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.CallEndDateTime ;;
  }

  dimension_group: call_start_date {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.CallStartDateTime ;;
  }

  dimension: call_type {
    type: string
    sql: ${TABLE}.CallType ;;
  }

  dimension: created_by_id {
    type: string
    sql: ${TABLE}.CreatedById ;;
  }

  dimension_group: created {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.CreatedDate ;;
  }

  dimension: from_phone_number {
    type: string
    sql: ${TABLE}.FromPhoneNumber ;;
  }

  dimension: is_deleted {
    type: string
    sql: ${TABLE}.IsDeleted ;;
  }

  dimension: is_recorded {
    type: string
    sql: ${TABLE}.IsRecorded ;;
  }

  dimension: last_modified_by_id {
    type: string
    sql: ${TABLE}.LastModifiedById ;;
  }

  dimension_group: last_modified {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.LastModifiedDate ;;
  }

  dimension: oneforce_id {
    type: string
    sql: ${TABLE}.ONEForce_Id ;;
  }

  dimension: owner_id {
    type: string
    sql: ${TABLE}.OwnerId ;;
  }

  dimension_group: system_modstamp {
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    datatype: datetime
    sql: ${TABLE}.SystemModstamp ;;
  }

  dimension: to_phone_number {
    type: string
    sql: ${TABLE}.ToPhoneNumber ;;
  }

  dimension: vendor_call_key {
    type: string
    sql: ${TABLE}.VendorCallKey ;;
  }

  dimension: vendor_type {
    type: string
    sql: ${TABLE}.VendorType ;;
  }

  measure: count {
    type: count
    drill_fields: []
  }
}

view: of_vsl_svc_lane {
  sql_table_name: @{table_vsl_svc_lane}
    ;;

  dimension: service_lane_code {
    #hidden: yes
    hidden: no # NA dashboard
    label: "Service Lane Code"  # programmatically added by LookML modifier
    primary_key: yes
    type: string
    sql: ${TABLE}.Service_Lane_Code ;;
  }

  dimension: company_code {
    label: "Company Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Company_Code ;;
  }

  dimension_group: eff {
    label: "Eff Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Eff_Date ;;
  }

  dimension_group: exp {
    label: "Exp Date" # programmatically added by LookML modifier
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}.Exp_Date ;;
  }

  dimension: feeder_truck_flag {
    label: "Feeder Truck Flag"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Feeder_Truck_Flag ;;
  }

  dimension: inactive {
    label: "Inactive" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Inactive ;;
  }

  dimension: lane_srvc_typ_code {
    label: "Lane Srvc Typ Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Lane_Srvc_Typ_Code ;;
  }

  dimension: oneforce_id {
    hidden: yes
    label: "ONEForce Id"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.ONEForce_ID ;;
  }

  dimension: service_lane_name {
    label: "Service Lane Name"  # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Service_Lane_Name ;;
  }

  dimension: vsl_typ_code {
    label: "Vsl Typ Code" # programmatically added by LookML modifier
    type: string
    sql: ${TABLE}.Vsl_Typ_Code ;;
  }

  measure: count {
    hidden: yes
    type: count
    drill_fields: [service_lane_name]
  }

  set: primary_key {
    fields: [service_lane_code, count]
  }
}

view: of_yard {
  sql_table_name: `ONEFORCE.OF_YARD`  ;;

  dimension: yd_cd {
    type: string
    sql: ${TABLE}.YD_CD ;;
  }

  dimension: yd_nm {
    type: string
    sql: ${TABLE}.YD_NM ;;
  }

  dimension: loc_cd {
    type: string
    sql: ${TABLE}.LOC_CD ;;
  }

  dimension: n1_st_vndr_cnt_cd {
    type: string
    sql: ${TABLE}.N1ST_VNDR_CNT_CD ;;
  }

  dimension: n1_st_vndr_seq {
    type: number
    sql: ${TABLE}.N1ST_VNDR_SEQ ;;
  }

  dimension: ofc_cd {
    type: string
    sql: ${TABLE}.OFC_CD ;;
  }

  dimension: yd_chr_cd {
    type: string
    sql: ${TABLE}.YD_CHR_CD ;;
  }

  dimension: yd_fcty_tp_mrn_tml_flg {
    type: string
    sql: ${TABLE}.YD_FCTY_TP_MRN_TML_FLG ;;
  }

  dimension: yd_fcty_tp_cy_flg {
    type: string
    sql: ${TABLE}.YD_FCTY_TP_CY_FLG ;;
  }

  dimension: yd_fcty_tp_cfs_flg {
    type: string
    sql: ${TABLE}.YD_FCTY_TP_CFS_FLG ;;
  }

  dimension: yd_fcty_tp_rail_rmp_flg {
    type: string
    sql: ${TABLE}.YD_FCTY_TP_RAIL_RMP_FLG ;;
  }

  dimension: yd_oshp_cd {
    type: string
    sql: ${TABLE}.YD_OSHP_CD ;;
  }

  dimension: bd_yd_flg {
    type: string
    sql: ${TABLE}.BD_YD_FLG ;;
  }

  dimension: onf_hir_yd_flg {
    type: string
    sql: ${TABLE}.ONF_HIR_YD_FLG ;;
  }

  dimension: rep_zn_cd {
    type: string
    sql: ${TABLE}.REP_ZN_CD ;;
  }

  dimension: yd_addr {
    type: string
    sql: ${TABLE}.YD_ADDR ;;
  }

  dimension: zip_cd {
    type: string
    sql: ${TABLE}.ZIP_CD ;;
  }

  dimension: intl_phn_no {
    type: string
    sql: ${TABLE}.INTL_PHN_NO ;;
  }

  dimension: phn_no {
    type: string
    sql: ${TABLE}.PHN_NO ;;
  }

  dimension: fax_no {
    type: string
    sql: ${TABLE}.FAX_NO ;;
  }

  dimension: yd_pic_nm {
    type: string
    sql: ${TABLE}.YD_PIC_NM ;;
  }

  dimension: yd_ceo_nm {
    type: string
    sql: ${TABLE}.YD_CEO_NM ;;
  }

  dimension: gate_opn_hrmnt {
    type: string
    sql: ${TABLE}.GATE_OPN_HRMNT ;;
  }

  dimension: gate_clz_hrmnt {
    type: string
    sql: ${TABLE}.GATE_CLZ_HRMNT ;;
  }

  dimension: hol_gate_opn_hrmnt {
    type: string
    sql: ${TABLE}.HOL_GATE_OPN_HRMNT ;;
  }

  dimension: hol_gate_clz_hrmnt {
    type: string
    sql: ${TABLE}.HOL_GATE_CLZ_HRMNT ;;
  }

  dimension: sun_gate_opn_hrmnt {
    type: string
    sql: ${TABLE}.SUN_GATE_OPN_HRMNT ;;
  }

  dimension: sun_gate_clz_hrmnt {
    type: string
    sql: ${TABLE}.SUN_GATE_CLZ_HRMNT ;;
  }

  dimension: sat_gate_opn_hrmnt {
    type: string
    sql: ${TABLE}.SAT_GATE_OPN_HRMNT ;;
  }

  dimension: sat_gate_clz_hrmnt {
    type: string
    sql: ${TABLE}.SAT_GATE_CLZ_HRMNT ;;
  }

  dimension: yd_cgo_clz_hrmnt_msg {
    type: string
    sql: ${TABLE}.YD_CGO_CLZ_HRMNT_MSG ;;
  }

  dimension: yd_rmk {
    type: string
    sql: ${TABLE}.YD_RMK ;;
  }

  dimension: brth_no {
    type: string
    sql: ${TABLE}.BRTH_NO ;;
  }

  dimension: yd_brth_len {
    type: number
    sql: ${TABLE}.YD_BRTH_LEN ;;
  }

  dimension: yd_brth_alng_sd_desc {
    type: string
    sql: ${TABLE}.YD_BRTH_ALNG_SD_DESC ;;
  }

  dimension: yd_brth_dpth_chnl_knt {
    type: number
    sql: ${TABLE}.YD_BRTH_DPTH_CHNL_KNT ;;
  }

  dimension: yd_ttl_spc {
    type: number
    sql: ${TABLE}.YD_TTL_SPC ;;
  }

  dimension: yd_act_spc {
    type: number
    sql: ${TABLE}.YD_ACT_SPC ;;
  }

  dimension: yd_co_spc {
    type: number
    sql: ${TABLE}.YD_CO_SPC ;;
  }

  dimension: yd_hndl_capa {
    type: number
    sql: ${TABLE}.YD_HNDL_CAPA ;;
  }

  dimension: yd_rf_rcpt_440_v_knt {
    type: number
    sql: ${TABLE}.YD_RF_RCPT_440V_KNT ;;
  }

  dimension: yd_rf_rcpt_220_v_knt {
    type: number
    sql: ${TABLE}.YD_RF_RCPT_220V_KNT ;;
  }

  dimension: yd_rf_rcpt_dul_knt {
    type: number
    sql: ${TABLE}.YD_RF_RCPT_DUL_KNT ;;
  }

  dimension: yd_op_sys_cd {
    type: string
    sql: ${TABLE}.YD_OP_SYS_CD ;;
  }

  dimension: yd_inrl_flg {
    type: string
    sql: ${TABLE}.YD_INRL_FLG ;;
  }

  dimension: yd_cfs_spc {
    type: number
    sql: ${TABLE}.YD_CFS_SPC ;;
  }

  dimension: mnr_shop_flg {
    type: string
    sql: ${TABLE}.MNR_SHOP_FLG ;;
  }

  dimension: yd_hndl_yr {
    type: string
    sql: ${TABLE}.YD_HNDL_YR ;;
  }

  dimension: yd_ttl_vol_teu_knt {
    type: number
    sql: ${TABLE}.YD_TTL_VOL_TEU_KNT ;;
  }

  dimension: yd_ttl_vol_bx_knt {
    type: number
    sql: ${TABLE}.YD_TTL_VOL_BX_KNT ;;
  }

  dimension: yd_co_vol_teu_knt {
    type: number
    sql: ${TABLE}.YD_CO_VOL_TEU_KNT ;;
  }

  dimension: yd_co_vol_bx_knt {
    type: number
    sql: ${TABLE}.YD_CO_VOL_BX_KNT ;;
  }

  dimension: yd_pst_pgc_knt {
    type: number
    sql: ${TABLE}.YD_PST_PGC_KNT ;;
  }

  dimension: yd_pgc_knt {
    type: number
    sql: ${TABLE}.YD_PGC_KNT ;;
  }

  dimension: trstr_knt {
    type: number
    sql: ${TABLE}.TRSTR_KNT ;;
  }

  dimension: frk_knt {
    type: number
    sql: ${TABLE}.FRK_KNT ;;
  }

  dimension: yd_strdl_crr_knt {
    type: number
    sql: ${TABLE}.YD_STRDL_CRR_KNT ;;
  }

  dimension: yd_trct_knt {
    type: number
    sql: ${TABLE}.YD_TRCT_KNT ;;
  }

  dimension: yd_top_lft_knt {
    type: number
    sql: ${TABLE}.YD_TOP_LFT_KNT ;;
  }

  dimension: tml_chss_knt {
    type: number
    sql: ${TABLE}.TML_CHSS_KNT ;;
  }

  dimension: eir_svc_flg {
    type: string
    sql: ${TABLE}.EIR_SVC_FLG ;;
  }

  dimension: tml_prod_knt {
    type: number
    sql: ${TABLE}.TML_PROD_KNT ;;
  }

  dimension: yd_cstms_no {
    type: string
    sql: ${TABLE}.YD_CSTMS_NO ;;
  }

  dimension: yd_fcty_tp_psdo_yd_flg {
    type: string
    sql: ${TABLE}.YD_FCTY_TP_PSDO_YD_FLG ;;
  }

  dimension: yd_eml {
    type: string
    sql: ${TABLE}.YD_EML ;;
  }

  dimension: dem_ib_clt_flg {
    type: string
    sql: ${TABLE}.DEM_IB_CLT_FLG ;;
  }

  dimension: dem_ob_clt_flg {
    type: string
    sql: ${TABLE}.DEM_OB_CLT_FLG ;;
  }

  dimension: bkg_pod_yd_flg {
    type: string
    sql: ${TABLE}.BKG_POD_YD_FLG ;;
  }

  dimension: n2_nd_vndr_cnt_cd {
    type: string
    sql: ${TABLE}.N2ND_VNDR_CNT_CD ;;
  }

  dimension: n2_nd_vndr_seq {
    type: number
    sql: ${TABLE}.N2ND_VNDR_SEQ ;;
  }

  dimension: n3_rd_vndr_cnt_cd {
    type: string
    sql: ${TABLE}.N3RD_VNDR_CNT_CD ;;
  }

  dimension: n3_rd_vndr_seq {
    type: number
    sql: ${TABLE}.N3RD_VNDR_SEQ ;;
  }

  dimension: dmdt_ofc_cd {
    type: string
    sql: ${TABLE}.DMDT_OFC_CD ;;
  }

  dimension: yd_fcty_tp_brg_rmp_flg {
    type: string
    sql: ${TABLE}.YD_FCTY_TP_BRG_RMP_FLG ;;
  }

  dimension: bfr_ofc_cd {
    type: string
    sql: ${TABLE}.BFR_OFC_CD ;;
  }

  dimension: rf_avg_dwll_hrs {
    type: number
    sql: ${TABLE}.RF_AVG_DWLL_HRS ;;
  }

  dimension_group: bfr_ofc_cng_dt {
    type: time
    datatype: datetime
    sql: ${TABLE}.BFR_OFC_CNG_DT ;;
  }

  dimension: modi_yd_cd {
    type: string
    sql: ${TABLE}.MODI_YD_CD ;;
  }

  dimension: rep_yd_tp_cd {
    type: string
    sql: ${TABLE}.REP_YD_TP_CD ;;
  }

  dimension: rf_min_dwll_hrs {
    type: number
    sql: ${TABLE}.RF_MIN_DWLL_HRS ;;
  }

  dimension: rf_yd_ft_hrs {
    type: number
    sql: ${TABLE}.RF_YD_FT_HRS ;;
  }

  dimension: dry_avg_dwll_hrs {
    type: number
    sql: ${TABLE}.DRY_AVG_DWLL_HRS ;;
  }

  dimension: dry_min_dwll_hrs {
    type: number
    sql: ${TABLE}.DRY_MIN_DWLL_HRS ;;
  }

  dimension: dry_yd_ft_hrs {
    type: number
    sql: ${TABLE}.DRY_YD_FT_HRS ;;
  }

  dimension: yd_ctrl_ofc_addr {
    type: string
    sql: ${TABLE}.YD_CTRL_OFC_ADDR ;;
  }

  dimension: yd_ctrl_ofc_cty_nm {
    type: string
    sql: ${TABLE}.YD_CTRL_OFC_CTY_NM ;;
  }

  dimension: yd_ctrl_ofc_ste_cd {
    type: string
    sql: ${TABLE}.YD_CTRL_OFC_STE_CD ;;
  }

  dimension: yd_ctrl_ofc_zip_cd {
    type: string
    sql: ${TABLE}.YD_CTRL_OFC_ZIP_CD ;;
  }

  dimension: yd_loc_cty_nm {
    type: string
    sql: ${TABLE}.YD_LOC_CTY_NM ;;
  }

  dimension: yd_loc_ste_cd {
    type: string
    sql: ${TABLE}.YD_LOC_STE_CD ;;
  }

  dimension: hub_yd_flg {
    type: string
    sql: ${TABLE}.HUB_YD_FLG ;;
  }

  dimension: yd_locl_lang_nm {
    type: string
    sql: ${TABLE}.YD_LOCL_LANG_NM ;;
  }

  dimension: yd_locl_lang_addr {
    type: string
    sql: ${TABLE}.YD_LOCL_LANG_ADDR ;;
  }

  dimension: cre_usr_id {
    type: string
    sql: ${TABLE}.CRE_USR_ID ;;
  }

  dimension_group: cre_dt {
    type: time
    datatype: datetime
    sql: ${TABLE}.CRE_DT ;;
  }

  dimension: upd_usr_id {
    type: string
    sql: ${TABLE}.UPD_USR_ID ;;
  }

  dimension_group: upd_dt {
    type: time
    datatype: datetime
    sql: ${TABLE}.UPD_DT ;;
  }

  dimension: delt_flg {
    type: string
    sql: ${TABLE}.DELT_FLG ;;
  }

  dimension_group: eai_evnt_dt {
    type: time
    datatype: datetime
    sql: ${TABLE}.EAI_EVNT_DT ;;
  }

  dimension: eai_if_id {
    type: string
    sql: ${TABLE}.EAI_IF_ID ;;
  }

  dimension: eq_scc_cd {
    type: string
    sql: ${TABLE}.EQ_SCC_CD ;;
  }

  dimension: rail_arr_ntfc_flg {
    type: string
    sql: ${TABLE}.RAIL_ARR_NTFC_FLG ;;
  }

  dimension_group: edw_upd_dt {
    type: time
    datatype: datetime
    sql: ${TABLE}.EDW_UPD_DT ;;
  }

  dimension: yd_lat {
    type: number
    sql: ${TABLE}.YD_LAT ;;
  }

  dimension: yd_lon {
    type: number
    sql: ${TABLE}.YD_LON ;;
  }

  dimension: vsl_capa {
    type: number
    sql: ${TABLE}.VSL_CAPA ;;
  }

  dimension: yd_procu_cd {
    type: string
    sql: ${TABLE}.YD_PROCU_CD ;;
  }

  dimension: yd_bic_fcty_cd {
    type: string
    sql: ${TABLE}.YD_BIC_FCTY_CD ;;
  }

  dimension: yd_smdg_tml_cd {
    type: string
    sql: ${TABLE}.YD_SMDG_TML_CD ;;
  }


}

view: ram_mapping {
  derived_table: {
    sql:
    SELECT customer_group       as customer_grp_oneforce_id,
           CUST_GRP_ID          as customer_grp_id,
           rhq_code             as ram_usr_rhq_code,
           Sales_Person         as ram_usr_id,
           Regional_Head_Office as ram_regional_head_office
    FROM (
      SELECT
      s.customer_group,
      g.CUST_GRP_ID ,
      s.Sales_Person,
      u.Regional_Head_Office,
      case when u.Regional_Head_Office is null or u.Regional_Head_Office = 'Unclaimed - RHQ' then null else
         trim(substr(u.Regional_Head_Office, instr(u.Regional_Head_Office,'-', -1)+1)) end as rhq_code,
      u.Username,
      row_number() OVER (PARTITION BY s.customer_group, u.Regional_Head_Office ORDER BY s.LastModifiedDate DESC, s.CreatedDate DESC) as rn
      FROM `ONEFORCE.OF_SALES_TEAM_MEMBER` s
      INNER JOIN `ONEFORCE.OF_USER`           u on (s.Sales_Person   = u.ONEForce_ID)
      INNER JOIN `ONEFORCE.OF_CUSTOMER_GROUP` g on (s.customer_group = g.ONEForce_ID)
      WHERE s.team_role like 'Regional Account Manager (RAM)' and s.inactive = 'false'
    ) WHERE rn = 1 ;;

    persist_for: "1 hour"
  }


  dimension: customer_grp_oneforce_id {
    type: string
    sql: ${TABLE}.customer_grp_oneforce_id ;;
  }

  dimension: customer_grp_id {
    type: string
    sql: ${TABLE}.customer_grp_id ;;
  }

  dimension: ram_usr_rhq_code {
    type: string
    sql: ${TABLE}.ram_usr_rhq_code ;;
  }

  dimension: ram_regional_head_office {
    type: string
    sql: ${TABLE}.ram_regional_head_office ;;
  }

  dimension: ram_usr_id {
    type: string
    sql: ${TABLE}.ram_usr_id ;;
  }

}

view: tender_nomination {
  derived_table: {
    sql: select 'Current' tag, c.sales_week, c.fiscal_year, c.calendar_year, c.cust_grp_nm, c.cust_grp_id, c.tender_nm,
                 c.cont_start_dt,
                 c.cont_end_dt,
                 c.ckam,
                 case when g.key_acct_tp_cd = 'GKA' then 'GKA'
                      when g.key_acct_tp_cd = 'RKA' then 'RKA'
                      when g.key_acct_tp_cd = 'LKA' then 'LKA'
                      when g.key_acct_tp_cd = 'SME' then 'ONECare'
                      else 'ONECare' end as key_acct_tp_cd,
                 case when t.svc_scp_grp in ('NE','ME','AE') then 'AE'
                   when t.svc_scp_grp in ('LE','LN','LW','LA') then 'LA'
                   when t.svc_scp_grp in ('EF','FE','FW','AF') then 'AF'
                   when t.svc_scp_grp = 'TP' then 'TP'
                   when t.svc_scp_grp = 'TA' then 'TA'
                   when t.svc_scp_grp = 'WA' then 'WA'
                   when t.svc_scp_grp = 'OC' then 'OC'
                   when t.svc_scp_grp = 'EA' then 'EA'
                   else 'Others' end as trd_grp,
                 case when t.svc_scp_grp = 'TP' then 1
                  when t.svc_scp_grp = 'TA' then 2
                  when t.svc_scp_grp in ('NE','ME','AE')  then 3
                  when t.svc_scp_grp in ('LE','LN','LW','LA') then 4
                  when t.svc_scp_grp in ('EF','FE','FW','AF') then 5
                  when t.svc_scp_grp = 'EA' then 6
                  when t.svc_scp_grp = 'WA' then 7
                  when t.svc_scp_grp = 'OC' then 8
                  else 9 end as trd_grp_seq,
                coalesce(ofscp.service_scope_group_code,svc_grp.service_scope_group_code) as service_scope_group,
                coalesce(ofscp.service_scope_group_code_and_name,svc_grp.service_scope_group_code_and_name) as service_scope_group_code_and_name,
                t.dominant_flag,
                c.svc_cont_no,
                c.remarks,
                t.target
      from ${tender_contract_current.SQL_TABLE_NAME} c
      left join ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = c.cust_grp_id
      left join ${tender_target.SQL_TABLE_NAME} t  on c.cust_grp_id = t.cust_grp_id
      and c.svc_cont_no = t.svc_cont_no
      and c.calendar_year = t.year
      and c.cont_start_dt =  PARSE_DATE("%m/%d/%Y",t.eff_dt)
      and c.cont_end_dt =  PARSE_DATE("%m/%d/%Y",t.exp_dt)
      and t.record_type = 'Current'
      left join ${of_svc_scp_grp.SQL_TABLE_NAME} svc_grp on svc_grp.service_scope_group_code = t.svc_scp_grp
      left join (select ss.service_scope_code,
                        sg.service_scope_group_code_and_name,
                        sg.service_scope_group_code
                  from ${of_svc_scp.SQL_TABLE_NAME} ss
                  inner join ${of_svc_scp_grp.SQL_TABLE_NAME} sg on ss.service_scope_group_code = sg.service_scope_group_code
                  ) as ofscp on ofscp.service_scope_code = t.svc_scp
      where {% condition curr_cyear_fltr %} c.calendar_year {% endcondition %}
      and  {% condition key_acct_tp_fltr %} g.key_acct_tp_cd {% endcondition %}
      and  {% condition report_week_fltr %} sales_week {% endcondition %}
      and  {% condition scrfa_start_month_fltr %} c.scrfa_start_month {% endcondition %}
      and  {% condition scrfa_start_fyear_fltr %} c.fiscal_year {% endcondition %}
      and  {% condition dominant_flag_fltr %} t.dominant_flag {% endcondition %}
      and coalesce(c.visible,'C') = 'C'
      union all
      select 'Current' tag, c.sales_week, c.fiscal_year, c.calendar_year, c.cust_grp_nm, c.cust_grp_id, c.tender_nm,
                 c.cont_start_dt,
                 c.cont_end_dt,
                 c.ckam,
                 case when g.key_acct_tp_cd = 'GKA' then 'GKA'
                      when g.key_acct_tp_cd = 'RKA' then 'RKA'
                      when g.key_acct_tp_cd = 'LKA' then 'LKA'
                      when g.key_acct_tp_cd = 'SME' then 'ONECare'
                      else 'ONECare' end as key_acct_tp_cd,
                  t.trd_grp,
                 case when t.trd_grp = 'TP' then 1
                  when t.trd_grp = 'TA' then 2
                  when t.trd_grp in ('NE','ME','AE')  then 3
                  when t.trd_grp in ('LE','LN','LW','LA') then 4
                  when t.trd_grp in ('EF','FE','FW','AF') then 5
                  when t.trd_grp = 'EA' then 6
                  when t.trd_grp = 'WA' then 7
                  when t.trd_grp = 'OC' then 8
                  else 9 end as trd_grp_seq,
                  null as service_scope_group,
                  null as service_scope_group_code_and_name,
                  null as dominant_flag,
                c.svc_cont_no,
                c.remarks,
                0 as target
      from ${tender_contract_current.SQL_TABLE_NAME} c
      left join ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = c.cust_grp_id
      cross join  (select 'AE' trd_grp union all select 'LA' trd_grp union all
            select 'AF' trd_grp union all select 'TP' trd_grp union all
            select 'TA' trd_grp union all select 'WA' trd_grp union all
            select 'OC' trd_grp union all select 'EA' trd_grp ) t
      where {% condition curr_cyear_fltr %} c.calendar_year {% endcondition %}
      and  {% condition key_acct_tp_fltr %} key_acct_tp_cd {% endcondition %}
      and  {% condition report_week_fltr %} sales_week {% endcondition %}
      and  {% condition scrfa_start_month_fltr %} c.scrfa_start_month {% endcondition %}
      and  {% condition scrfa_start_fyear_fltr %} c.fiscal_year {% endcondition %}
      and  coalesce(c.visible, 'C') = 'Y' and c.svc_cont_no is null
      -- and upper(c.tender_nm) = 'BASF'
      union all
      select 'Previous' tag, c.sales_week, c.fiscal_year, c.calendar_year, c.cust_grp_nm, c.cust_grp_id, c.tender_nm,
              c.cont_start_dt,
              c.cont_end_dt,
              c.ckam,
              --case when coalesce(g.key_acct_tp_cd,'X') not in ('GKA','RKA','LKA','SME') then 'Others' else g.key_acct_tp_cd end as key_acct_tp_cd
              case when g.key_acct_tp_cd = 'GKA' then 'GKA'
                      when g.key_acct_tp_cd = 'RKA' then 'RKA'
                      when g.key_acct_tp_cd = 'LKA' then 'LKA'
                      when g.key_acct_tp_cd = 'SME' then 'ONECare'
                      else 'ONECare' end as key_acct_tp_cd,
              case when t.svc_scp_grp in ('NE','ME','AE') then 'AE'
                   when t.svc_scp_grp in ('LE','LN','LW','LA') then 'LA'
                   when t.svc_scp_grp in ('EF','FE','FW','AF') then 'AF'
                   when t.svc_scp_grp = 'TP' then 'TP'
                   when t.svc_scp_grp = 'TA' then 'TA'
                   when t.svc_scp_grp = 'WA' then 'WA'
                   when t.svc_scp_grp = 'OC' then 'OC'
                   when t.svc_scp_grp = 'EA' then 'EA'
                   else 'Others' end as trd_grp,
              case when t.svc_scp_grp = 'TP' then 1
                  when t.svc_scp_grp = 'TA' then 2
                  when t.svc_scp_grp in ('NE','ME','AE')  then 3
                  when t.svc_scp_grp in ('LE','LN','LW','LA') then 4
                  when t.svc_scp_grp in ('EF','FE','FW','AF') then 5
                  when t.svc_scp_grp = 'EA' then 6
                  when t.svc_scp_grp = 'WA' then 7
                  when t.svc_scp_grp = 'OC' then 8
                  else 9 end as trd_grp_seq,
              coalesce(ofscp.service_scope_group_code, svc_grp.service_scope_group_code) as service_scope_group_code,
              coalesce(ofscp.service_scope_group_code_and_name,svc_grp.service_scope_group_code_and_name) as service_scope_group_code_and_name,
              t.dominant_flag,
              c.svc_cont_no,
              c.remarks,
              t.target
      from ${tender_contract_previous.SQL_TABLE_NAME} c
      left join ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = c.cust_grp_id
      left join ${tender_target.SQL_TABLE_NAME} t
      on c.cust_grp_id = t.cust_grp_id
      and c.svc_cont_no = t.svc_cont_no
      and c.calendar_year = t.year
      and c.cont_start_dt =  PARSE_DATE("%m/%d/%Y",t.eff_dt)
      and c.cont_end_dt =  PARSE_DATE("%m/%d/%Y",t.exp_dt)
      and t.record_type = 'Previous'
      left join ${of_svc_scp_grp.SQL_TABLE_NAME} svc_grp on svc_grp.service_scope_group_code = t.svc_scp_grp
      left join  (select ss.service_scope_code,
                         sg.service_scope_group_code_and_name,
                         sg.service_scope_group_code
                  from ${of_svc_scp.SQL_TABLE_NAME} ss
                  inner join ${of_svc_scp_grp.SQL_TABLE_NAME} sg on ss.service_scope_group_code = sg.service_scope_group_code
                  ) as ofscp  on ofscp.service_scope_code = t.svc_scp
      where  c.calendar_year in (select min(cast(cast(calendar_year as int64)-1 as string)) from  ${of_sales_week_master.SQL_TABLE_NAME} ww where {% condition curr_cyear_fltr %} ww.calendar_year {% endcondition %})
      and  {% condition key_acct_tp_fltr %} key_acct_tp_cd {% endcondition %}
      and  {% condition report_week_fltr %} c.sales_week {% endcondition %}
      and  {% condition scrfa_start_month_fltr %} c.curr_scrfa_start_month {% endcondition %}
      and  {% condition scrfa_start_fyear_fltr %} c.fiscal_year {% endcondition %}
      and  {% condition dominant_flag_fltr %} t.dominant_flag {% endcondition %}
      union all
      select 'Actual' tag, w.sales_week, w.fiscal_year, w.calendar_year, aa.cust_grp_nm, consolidated_cnt_cust_grp_cd,  aa.tender_nm,
       aa.curr_start,
       aa.curr_end,
       aa.ckam,
       case when g.key_acct_tp_cd = 'GKA' then 'GKA'
            when g.key_acct_tp_cd = 'RKA' then 'RKA'
            when g.key_acct_tp_cd = 'LKA' then 'LKA'
            when g.key_acct_tp_cd = 'SME' then 'ONECare'
            else 'ONECare' end as key_acct_tp_cd,
       --case when coalesce(g.key_acct_tp_cd,'X') not in ('GKA','RKA','LKA','SME') then 'Others' else g.key_acct_tp_cd end as key_acct_tp_cd,
       case when a.svc_scp_grp_cd in ('NE','ME','AE') then 'AE'
                   when a.svc_scp_grp_cd in ('LE','LN','LW','LA') then 'LA'
                   when a.svc_scp_grp_cd in ('EF','FE','FW','AF') then 'AF'
                   when a.svc_scp_grp_cd = 'TP' then 'TP'
                   when a.svc_scp_grp_cd = 'TA' then 'TA'
                   when a.svc_scp_grp_cd = 'WA' then 'WA'
                   when a.svc_scp_grp_cd = 'OC' then 'OC'
                   when a.svc_scp_grp_cd = 'EA' then 'EA'
                   else 'Others' end as trd_grp,
       case when a.svc_scp_grp_cd = 'TP' then 1
                  when a.svc_scp_grp_cd = 'TA' then 2
                  when a.svc_scp_grp_cd in ('NE','ME','AE')  then 3
                  when a.svc_scp_grp_cd in ('LE','LN','LW','LA') then 4
                  when a.svc_scp_grp_cd in ('EF','FE','FW','AF') then 5
                  when a.svc_scp_grp_cd = 'EA' then 6
                  when a.svc_scp_grp_cd = 'WA' then 7
                  when a.svc_scp_grp_cd = 'OC' then 8
                  else 9 end as trd_grp_seq,
        sg.service_scope_group_code,
        sg.service_scope_group_code_and_name,
        a.dominant_flg,
        svc_cont_no,
        aa.remarks,
        coalesce(sum(a.teu/aa.calc_duration*aa.curr_cont_dur),0) as target
      from  ${of_consolidated.SQL_TABLE_NAME} a
      left join ${of_svc_scp.SQL_TABLE_NAME} ss on ss.service_scope_code = a.svc_scp_cd
      left join ${of_svc_scp_grp.SQL_TABLE_NAME} sg on sg.service_scope_group_code = ss.service_scope_group_code
      left join ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = consolidated_cnt_cust_grp_cd
      inner join ${of_sales_week_master.SQL_TABLE_NAME} w on a.week = cast(w.sales_week as int64)
      inner join (select  distinct p.cust_grp_id, p.cust_grp_nm, p.tender_nm, p.svc_cont_no as prev_svc_cont_no,
                          c.cont_start_dt as curr_start,c.cont_end_dt as curr_end, c.cont_dur_uplmt as curr_cont_dur,
                          date_sub(c.cont_start_dt, INTERVAL c.cont_dur_uplmt MONTH) est_teu_from,
                          date_sub(c.cont_end_dt, INTERVAL c.cont_dur_uplmt MONTH) est_teu_to,
                          case when date_sub(c.cont_end_dt, INTERVAL c.cont_dur_uplmt MONTH) > LAST_DAY(DATE_SUB(current_date(), INTERVAL 1 MONTH), MONTH) then
                            'pro-rata'
                          else
                            'full'
                          end as calc_method,
                          case when date_sub(c.cont_end_dt, INTERVAL c.cont_dur_uplmt MONTH) > LAST_DAY(DATE_SUB(current_date(), INTERVAL 1 MONTH), MONTH) then
                            date_diff(LAST_DAY(DATE_SUB(current_date(), INTERVAL 1 MONTH), MONTH),date_sub(c.cont_start_dt, INTERVAL c.cont_dur_uplmt MONTH),MONTH)+1
                          else
                            c.cont_dur_uplmt
                          end as calc_duration,
                          date_sub(c.cont_start_dt, INTERVAL c.cont_dur_uplmt MONTH) actual_teu_from,
                          case when date_sub(c.cont_end_dt, INTERVAL c.cont_dur_uplmt MONTH) > LAST_DAY(DATE_SUB(current_date(), INTERVAL 1 MONTH), MONTH) then
                            LAST_DAY(DATE_SUB(current_date(), INTERVAL 1 MONTH), MONTH)
                          else
                            date_sub(c.cont_end_dt, INTERVAL c.cont_dur_uplmt MONTH)
                          end as  actual_teu_to ,
                          cast (w.sales_week as int64) as sales_week_from,
                          cast (w2.sales_week as int64) as sales_week_to,
                          c.remarks,
                          c.ckam
                from ${tender_contract_previous.SQL_TABLE_NAME} p
                inner join ${tender_contract_current.SQL_TABLE_NAME} c
                            on p.cust_grp_id = c.cust_grp_id
                            and p.tender_nm = c.tender_nm
                            and c.manual_actual_flag = 'N'
                            and p.manual_actual_flag = 'N'
                            and coalesce(c.visible,'C') = 'C'
                            and cast(c.calendar_year as int64) = cast(p.calendar_year as int64) +1
                            and {% condition curr_cyear_fltr %} c.calendar_year {% endcondition %}
                            and {% condition report_week_fltr %} c.sales_week {% endcondition %}
                inner join ${of_sales_week_master.SQL_TABLE_NAME} w
                            on  date_sub(c.cont_start_dt, INTERVAL c.cont_dur_uplmt MONTH) between w.week_start_date and w.week_end_date
                inner join ${of_sales_week_master.SQL_TABLE_NAME} w2
                            on  case when date_sub(c.cont_end_dt, INTERVAL c.cont_dur_uplmt MONTH) > LAST_DAY(DATE_SUB(current_date(), INTERVAL 1 MONTH), MONTH) then
                                    LAST_DAY(DATE_SUB(current_date(), INTERVAL 1 MONTH), MONTH)
                                else
                                    date_sub(c.cont_end_dt, INTERVAL c.cont_dur_uplmt MONTH)
                                end between w2.week_start_date and w2.week_end_date
                where p.calendar_year in (select min(cast(cast(calendar_year as int64)-1 as string)) from  ${of_sales_week_master.SQL_TABLE_NAME} ww
                where {% condition curr_cyear_fltr %} ww.calendar_year {% endcondition %})
                and  {% condition report_week_fltr %} p.sales_week {% endcondition %}
                and  {% condition scrfa_start_month_fltr %} c.scrfa_start_month {% endcondition %}
                and  {% condition scrfa_start_fyear_fltr %} c.fiscal_year {% endcondition %}
                ) as aa
                on aa.cust_grp_id = consolidated_cnt_cust_grp_cd and aa.prev_svc_cont_no = a.svc_cont_no
      where a.record_type = 'Booking' -- change from Actual to Booking for DCN-621
      and  a.week between aa.sales_week_from and  aa.sales_week_to
      and  {% condition key_acct_tp_fltr %} key_acct_tp_cd {% endcondition %}
      and  {% condition dominant_flag_fltr %} ss.dominant_flag {% endcondition %}
      group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
      union all
      select distinct 'Actual' tag,  p.sales_week, p.fiscal_year, p.calendar_year, p.cust_grp_nm, p.cust_grp_id, p.tender_nm,
       c.cont_start_dt,
       c.cont_end_dt,
       c.ckam,
       case when g.key_acct_tp_cd = 'GKA' then 'GKA'
            when g.key_acct_tp_cd = 'RKA' then 'RKA'
            when g.key_acct_tp_cd = 'LKA' then 'LKA'
            when g.key_acct_tp_cd = 'SME' then 'ONECare'
            else 'ONECare' end as key_acct_tp_cd,
       case when a.svc_scp_grp in ('NE','ME','AE') then 'AE'
            when a.svc_scp_grp in ('LE','LN','LW','LA') then 'LA'
            when a.svc_scp_grp in ('EF','FE','FW','AF') then 'AF'
            when a.svc_scp_grp = 'TP' then 'TP'
            when a.svc_scp_grp = 'TA' then 'TA'
            when a.svc_scp_grp = 'WA' then 'WA'
            when a.svc_scp_grp = 'OC' then 'OC'
            when a.svc_scp_grp = 'EA' then 'EA'
            else 'Others' end as trd_grp,
       case when a.svc_scp_grp = 'TP' then 1
            when a.svc_scp_grp = 'TA' then 2
            when a.svc_scp_grp in ('NE','ME','AE')  then 3
            when a.svc_scp_grp in ('LE','LN','LW','LA') then 4
            when a.svc_scp_grp in ('EF','FE','FW','AF') then 5
            when a.svc_scp_grp = 'EA' then 6
            when a.svc_scp_grp = 'WA' then 7
            when a.svc_scp_grp = 'OC' then 8
            else 9 end as trd_grp_seq,
        coalesce(ofscp.service_scope_group_code, svc_grp.service_scope_group_code) as service_scope_group_code,
        coalesce(ofscp.service_scope_group_code_and_name, svc_grp.service_scope_group_code_and_name) as service_scope_group_code_and_name,
        a.dominant_flag,
        a.svc_cont_no,
        c.remarks,
        a.teu as target
      --  coalesce(sum(a.teu),0) as target
      from  ${v_tender_actual.SQL_TABLE_NAME} a
    inner join ${tender_contract_current.SQL_TABLE_NAME} c on c.cust_grp_id = a.cust_grp_id and c.tender_nm = a.tender_nm and c.manual_actual_flag = 'Y' and coalesce(c.visible,'C')= 'C'
    inner join ${tender_contract_previous.SQL_TABLE_NAME} p on p.cust_grp_id = c.cust_grp_id and p.tender_nm = c.tender_nm and p.manual_actual_flag = 'Y'  and coalesce(p.visible,'C')= 'C' and cast(c.calendar_year as int64) = cast(p.calendar_year as int64) +1
    left join ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = a.cust_grp_id
    left join ${of_svc_scp_grp.SQL_TABLE_NAME} svc_grp on svc_grp.service_scope_group_code = a.svc_scp_grp
    left join  (select ss.service_scope_code,
                         sg.service_scope_group_code_and_name,
                         sg.service_scope_group_code
                  from ${of_svc_scp.SQL_TABLE_NAME} ss
                  inner join ${of_svc_scp_grp.SQL_TABLE_NAME} sg on ss.service_scope_group_code = sg.service_scope_group_code
                  ) as ofscp
                on ofscp.service_scope_code = a.svc_scp
    where a.year in (select min(cast(cast(calendar_year as int64)-1 as string)) from  ${of_sales_week_master.SQL_TABLE_NAME} ww
       where {% condition curr_cyear_fltr %} ww.calendar_year {% endcondition %})
    and {% condition report_week_fltr %} c.sales_week {% endcondition %}
    and {% condition scrfa_start_month_fltr %} c.scrfa_start_month {% endcondition %}
    and {% condition scrfa_start_fyear_fltr %} c.fiscal_year {% endcondition %}
    and {% condition key_acct_tp_fltr %} key_acct_tp_cd {% endcondition %}
    and {% condition dominant_flag_fltr %} a.dominant_flag {% endcondition %}
      ;;
  }

  filter: curr_cyear_fltr {
    type: string
    suggest_dimension:tender_contract_calendar_2022.calendar_year
    suggest_explore:tender_contract_calendar_2022
  }

  filter: key_acct_tp_fltr {
    type: string
    #suggest_dimension: key_acct_tp_cd
    #suggest_explore: of_customer_group
    suggestions: ["GKA","RKA","LKA","ONECare"]
    #sql: SELECT DISTINCT (case when coalesce(key_acct_tp_cd,'X') not in ('GKA','RKA','LKA','SME') then 'Others' else key_acct_tp_cd end ) from ${of_customer_group.SQL_TABLE_NAME} ;;
  }

  filter: report_week_fltr {
    type: string
    suggest_dimension: tender_contract_calendar_2021.sales_week
    suggest_explore: tender_contract_calendar_2021
    #sql:  {% condition curr_cyear_fltr %} calendar_year {% endcondition %} ;;
  }

  filter: scrfa_start_month_fltr {
    type: string
    suggest_dimension: tender_contract_calendar_2022.sales_month
    suggest_explore: tender_contract_calendar_2022
    # sql:  {% condition curr_cyear_fltr %} tender_contract_month.sales_month {% endcondition %}) ;;
    #sql:  EXISTS (SELECT sales_month FROM ${of_sales_week_master.SQL_TABLE_NAME} WHERE sales_month like '2022%' ) ;;
  }

  filter: scrfa_start_fyear_fltr {
    type: string
    suggest_dimension: tender_contract_calendar_2022.fiscal_year
    suggest_explore: tender_contract_calendar_2022
    # sql:  {% condition curr_cyear_fltr %} tender_contract_month.sales_month {% endcondition %}) ;;
    #sql:  EXISTS (SELECT sales_month FROM ${of_sales_week_master.SQL_TABLE_NAME} WHERE sales_month like '2022%' ) ;;
  }

  # filter: svc_scp_grp_fltr {
  #   type: string
  #   suggest_explore: of_svc_scp_grp_picklist
  #   suggest_dimension: of_svc_scp_grp_picklist.service_scope_group_code_and_name
  # }

  filter: dominant_flag_fltr {
    type: string
    suggestions: ["DOM","N-DOM"]
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: tag {
    type: string
    sql: ${TABLE}.tag ;;
  }

  dimension: sales_week {
    type: string
    sql: ${TABLE}.sales_week ;;
  }

  dimension: fiscal_year {
    type: string
    sql: ${TABLE}.fiscal_year ;;
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.calendar_year ;;
  }

  dimension: cust_grp_nm {
    type: string
    sql: ${TABLE}.cust_grp_nm ;;
  }

  dimension: cust_grp_id {
    type: string
    sql: ${TABLE}.cust_grp_id ;;
  }

  dimension: tender_nm {
    type: string
    sql: ${TABLE}.tender_nm ;;
  }

  dimension: ckam {
    type: string
    sql: ${TABLE}.ckam ;;
  }

  dimension: key_acct_tp_cd {
    type: string
    sql: CASE WHEN ${TABLE}.key_acct_tp_cd = 'GKA' THEN 'GKA'
              WHEN ${TABLE}.key_acct_tp_cd = 'RKA' THEN 'RKA'
              WHEN ${TABLE}.key_acct_tp_cd = 'LKA' THEN 'LKA'
              WHEN ${TABLE}.key_acct_tp_cd = 'SME' THEN 'ONECare'
              ELSE  'ONECare'
         END;;
  }

  dimension: trd_grp {
    label: "Trade Group"
    type: string
    sql: ${TABLE}.trd_grp ;;
  }

  dimension: trd_grp_seq {
    label: "Trade Group Seq"
    type: number
    sql: ${TABLE}.trd_grp_seq ;;
  }

  dimension: dominant_flag {
    label: "DOM/N-DOM"
    type: string
    sql: ${TABLE}.dominant_flag ;;
  }

  dimension: service_scope_group {
    label: "Service Scope Group"
    type: string
    sql: ${TABLE}.service_scope_group ;;
  }

  dimension: service_scope_group_code_and_name {
    label: "Service Scope Group Name"
    type: string
    sql: ${TABLE}.service_scope_group_code_and_name ;;
    suggest_explore: of_svc_scp_grp_picklist
    suggest_dimension: of_svc_scp_grp_picklist.service_scope_group_code_and_name
  }

  dimension: svc_cont_no {
    type: string
    sql:  ${TABLE}.svc_cont_no ;;
  }

  dimension: cont_start_dt {
    type: string
    sql: ${TABLE}.cont_start_dt ;;
  }

  dimension: cont_end_dt {
    type: date
    sql: ${TABLE}.cont_end_dt ;;
  }

  dimension: target {
    type: number
    sql: ${TABLE}.target ;;
  }

  dimension: banner {
    type: string
    sql:  CONCAT('banner') ;;
    html: <p style="font-size:1.5vw;line-height:100%"> GCSM Tenders CY{{ _filters['tender_nomination.curr_cyear_fltr'] }} Nomination vs. CY{{ _filters['tender_nomination.curr_cyear_fltr'] | minus: 1 }} Annualized Lifting/Nomination </p>;;
  }

  measure: tender_count {
    type: count_distinct
    sql: ${tender_nm} ;;
    html:  <p style="font-size:1.5vw;">{{ rendered_value }}</p> ;;
    filters: [tag: "Current,Previous,Actual"]
    drill_fields: [tender_nm]
  }

  measure: tender_grp_count {
    type: count_distinct
    sql: ${cust_grp_id} ;;
    filters: [tag: "Current,Previous"]
  }

  measure: previous_target {
    label: " {% if curr_cyear_fltr._is_filtered %} CY{{ _filters['tender_nomination.curr_cyear_fltr'] | minus: 1 }} Nomination {% else %} Previous Nomination {% endif %} "
    type: sum
    sql: ${target} ;;
    filters: [tag: "Previous"]
    drill_fields: [detail*]
  }

  measure: current_target {
    label: " {% if curr_cyear_fltr._is_filtered %} CY{{ _filters['tender_nomination.curr_cyear_fltr'] }} Nomination {% else %} Current Nomination {% endif %} "
    #{% parameter parameter_name %}
    type: sum
    sql: ${target} ;;
    filters: [tag: "Current"]
    drill_fields: [detail*]
  }

  measure: current_target_bignum {
    type: sum
    sql: ${target} ;;
    html:  <p style="font-size:1.5vw;">{{ rendered_value }}</p> ;;
    filters: [tag: "Current"]
    drill_fields: [detail*]
  }

  measure: new_or_drop {
    type: string
    sql:  case
          when ${current_target} = 0 and ${previous_target} = 0 then "Nil"
          when ${current_target} = 0 then 'Loss'
          when ${previous_target} = 0 then 'New'
          --when ${previous_lifting} = 0 then 'New'
          else "Existing"
          end;;
  }

  measure: previous_lifting {
    label: " {% if curr_cyear_fltr._is_filtered %} CY{{ _filters['tender_nomination.curr_cyear_fltr'] | minus: 1 }} Lifting {% else %} Previous Lifting  {% endif %} "
    type: sum
    sql:  ${target} ;;
    filters: [tag: "Actual"]
    value_format_name: decimal_0
    drill_fields: [detail*]
  }

  measure: previous_lifting_diff{
    type: number
    sql: case when ${current_target}  <= 0 and ${previous_target} > 0 then 0-${previous_lifting}
              when ${previous_target} <= 0 and ${current_target}  > 0 then ${current_target}
              else ${current_target}-${previous_lifting} end ;;
    value_format: "0.0,\" K\""
    html: {% if value > 0 %}
         <p style="color: #009900;  font-size:1vw;">{{ rendered_value }}</p>
         {% elsif value < 0 %}
         <p style="color: #bd2521;  font-size:1vw;">{{ rendered_value }}</p>
         {% else %}
         <p style="color: #000000;  font-size:1vw;">{{ rendered_value }}</p>
         {% endif %} ;;
  }

  measure: previous_lifting_diff_percent_bignum{
    type: number
    sql:  ${previous_lifting_diff}/NULLIF(case when ${previous_lifting} = 0 then 1 else ${previous_lifting} end,0)  ;;
    value_format_name: percent_0
    html:
    {% if new_or_drop._value == "Loss" %}
    <p style="color: #bd2521;  font-size:1.5vw;">{{ new_or_drop._value }} ({{previous_lifting_diff._rendered_value}})</p>
    {% elsif new_or_drop._value == "New" %}
    <p style="color: #009900;  font-size:1.5vw;">{{ new_or_drop._value }} (+{{previous_lifting_diff._rendered_value}})</p>
    {% elsif new_or_drop._value == "Nil" %}
    <p style="color: #000000;  font-size:1.5vw;">{{ rendered_value }} ({{previous_lifting_diff._rendered_value}})</p>
    {% elsif value > 0 %}
    <p style="color: #009900;  font-size:1.5vw;">▲{{ rendered_value }} (+{{previous_lifting_diff._rendered_value}})</p>
    {% elsif value < 0 %}
    <p style="color: #bd2521;  font-size:1.5vw;">▼{{ rendered_value | remove_first: "-" }} ({{previous_lifting_diff._rendered_value}})</p>
    {% else %}
    <p style="color: #000000;  font-size:1.5vw;">{{ rendered_value }} ({{previous_lifting_diff._rendered_value}})</p>
    {% endif %} ;;
  }

  measure: previous_lifting_diff_percent_mtx{
    label: " {% if curr_cyear_fltr._is_filtered %} %△ CY{{ _filters['tender_nomination.curr_cyear_fltr'] | minus: 1 }} Lifting {% else %} %△ Previous Lifting  {% endif %} "
    type: number
    sql:  ${previous_lifting_diff}/NULLIF(case when ${previous_lifting} = 0 then 1 else ${previous_lifting} end,0)  ;;
    value_format_name: percent_0
    html:
    {% if new_or_drop._value == "Loss" %}
    <p style="color: #bd2521;">{{ new_or_drop._value }} ({{previous_lifting_diff._rendered_value}})</p>
    {% elsif new_or_drop._value == "New" %}
    <p style="color: #009900;">{{ new_or_drop._value }} (+{{previous_lifting_diff._rendered_value}})</p>
    {% elsif new_or_drop._value == "Nil" %}
    <p style="color: #000000;">{{ rendered_value }} ({{previous_lifting_diff._rendered_value}})</p>
    {% elsif value > 0 %}
    <p style="color: #009900;">▲{{ rendered_value }} (+{{previous_lifting_diff._rendered_value}})</p>
    {% elsif value < 0 %}
    <p style="color: #bd2521;">▼{{ rendered_value | remove_first: "-" }} ({{previous_lifting_diff._rendered_value}})</p>
    {% else %}
    <p style="color: #000000;">{{ rendered_value }} ({{previous_lifting_diff._rendered_value}})</p>
    {% endif %} ;;
  }


  measure: target_diff{
    type: number
    sql: ${current_target}-${previous_target};;
    value_format: "0.0,\" K\""
    #value_format: "0,000.0,\" K\";000.0, \"
    html: {% if value > 0 %}
         <p style="color: #009900; ">{{ rendered_value }}</p>
         {% elsif value < 0 %}
         <p style="color: #bd2521; ">{{ rendered_value }}</p>
         {% else %}
         <p style="color: #000000; ">{{ rendered_value }}</p>
         {% endif %} ;;
  }

  measure: target_diff_percent_bignum{
    type: number
    #sql:  case when ${previous_target} <= 0 then ${target_diff}/NULLIF(${target_diff},0)  else ${target_diff}/${previous_target} end;;
    sql:  ${target_diff}/NULLIF(case when ${previous_target} = 0 then 1 else ${previous_target} end,0) ;;
    value_format_name: percent_0
    html:
      {% if new_or_drop._value == "Loss" %}
       <p style="color: #bd2521; font-size:1.5vw; ">{{ new_or_drop._value }} ({{target_diff._rendered_value}})</p>
      {% elsif new_or_drop._value == "New" %}
       <p style="color: #009900; font-size:1.5vw; ">{{ new_or_drop._value }} (+{{target_diff._rendered_value}})</p>
      {% elsif new_or_drop._value == "Nil" %}
      <p style="color: #000000; font-size:1.5vw; ">{{ rendered_value }} ({{target_diff._rendered_value}})</p>
      {% elsif value > 0 %}
       <p style="color: #009900; font-size:1.5vw; ">▲{{ rendered_value }} (+{{target_diff._rendered_value}})</p>
      {% elsif value < 0 %}
       <p style="color: #bd2521; font-size:1.5vw; ">▼{{ rendered_value | remove_first: "-" }} ({{target_diff._rendered_value}})</p>
      {% else %}
       <p style="color: #000000; font-size:1.5vw; ">{{ rendered_value }} ({{target_diff._rendered_value}})</p>
      {% endif %} ;;
  }

  measure: target_diff_percent_mtx{
    label: " {% if curr_cyear_fltr._is_filtered %} %△ CY{{ _filters['tender_nomination.curr_cyear_fltr'] | minus: 1 }} Nomination {% else %} %△ Previous Nomination  {% endif %} "
    type: number
    #sql:  case when ${previous_target} <= 0 then ${target_diff}/NULLIF(${target_diff},0)  else ${target_diff}/${previous_target} end;;
    sql:  ${target_diff}/NULLIF(case when ${previous_target} = 0 then 1 else ${previous_target} end,0) ;;
    value_format_name: percent_0
    html:
      {% if new_or_drop._value == "Loss" %}
       <p style="color: #bd2521; ">{{ new_or_drop._value }} ({{target_diff._rendered_value}})</p>
      {% elsif new_or_drop._value == "New" %}
       <p style="color: #009900; ">{{ new_or_drop._value }} (+{{target_diff._rendered_value}})</p>
      {% elsif new_or_drop._value == "Nil" %}
       <p style="color: #000000; ">{{ rendered_value }} ({{target_diff._rendered_value}})</p>
      {% elsif value > 0 %}
       <p style="color: #009900; ">▲{{ rendered_value }} (+{{target_diff._rendered_value}})</p>
      {% elsif value < 0 %}
       <p style="color: #bd2521; ">▼{{ rendered_value | remove_first: "-" }} ({{target_diff._rendered_value}})</p>
      {% else %}
       <p style="color: #000000; ">{{ rendered_value }} ({{target_diff._rendered_value}})</p>
      {% endif %} ;;
  }

  measure: current_TPTA_target {
    label: "Current TP/TA Target"
    type: sum
    sql: {% if tender_nomination.tender_nm._is_filtered %} ${target} {% else %} 0 {% endif %} ;;
    filters: [tag: "Current", trd_grp: "TP,TA"]
  }

  measure: current_AE_target {
    label: "Current AE Target"
    type: sum
    sql: {% if tender_nomination.tender_nm._is_filtered %} ${target} {% else %} 0 {% endif %} ;;
    filters: [tag: "Current", trd_grp: "AE"]
  }

  measure: current_LAAF_target {
    label: "Current LA/AF Target"
    type: sum
    sql: {% if tender_nomination.tender_nm._is_filtered %} ${target} {% else %} 0 {% endif %} ;;
    filters: [tag: "Current", trd_grp: "LA,AF"]
  }

  measure: current_ASOC_target {
    label: "Current AS/OC Target"
    type: sum
    sql: {% if tender_nomination.tender_nm._is_filtered %} ${target} {% else %} 0 {% endif %} ;;
    filters: [tag: "Current", trd_grp: "EA,WA,OC"]
  }


  dimension: tender_nm_filter {
    type: string
    sql:  {% if tender_nomination.tender_nm._is_filtered  %} ${tender_nm} {% else %} "Multiple" {% endif %} ;;
    html: {% assign word = _filters['tender_nomination.tender_nm'] | split: "," %}
          {% if word[1] or value == "Multiple" %}
            <div style="font-size:1.5vw;"> Multiple </div>
          {% else %}
            <div style="font-size:1.5vw;"> {{rendered_value}} </div>
          {% endif %} ;;
  }

  dimension: cust_grp_nm_filter {
    type: string
    sql:  {% if tender_nomination.tender_nm._is_filtered %} ${cust_grp_nm} {% else %} "Multiple" {% endif %} ;;
    html: {% assign word = _filters['tender_nomination.tender_nm'] | split: "," %}
          {% if word[1] or value == "Multiple" %}
            <div style="font-size:1.5vw;"> Multiple </div>
          {% else %}
            <div style="font-size:1.5vw;"> {{rendered_value}} </div>
          {% endif %} ;;
  }

  dimension: cust_grp_id_filter {
    type: string
    sql:  {% if tender_nomination.tender_nm._is_filtered %} ${cust_grp_id} {% else %} "Multiple" {% endif %} ;;
    html: {% assign word = _filters['tender_nomination.tender_nm'] | split: "," %}
          {% if word[1] or value == "Multiple" %}
            <div style="font-size:1.5vw;"> Multiple </div>
          {% else %}
            <div style="font-size:1.5vw;"> {{rendered_value}} </div>
          {% endif %} ;;
  }

  dimension: svc_cont_concatn {
    type: string
    sql:  {% if tender_nomination.tender_nm._is_filtered %}
            (SELECT coalesce(string_agg(svc_cont_no,', '),'N/A')  from ${tender_contract_current.SQL_TABLE_NAME}
             where tender_nm = ${tender_nm}
              and calendar_year = ${calendar_year}
              and sales_week = ${sales_week}
            )
          {% else %} "Multiple" {% endif %}  ;;
    html:  {% assign word = _filters['tender_nomination.tender_nm'] | split: "," %}
           {% if word[1] or value == "Multiple" %}
             <div style="font-size:1.5vw;text-align:center;"> Multiple </div>
           {% elsif value == "N/A" %}
             <div style="font-size:1.5vw;text-align:center;"> N/A </div>
           {% else %}
             <div style="font-size:13pt;text-align:left;"> {{rendered_value}} </div>
           {% endif %} ;;
  }

  dimension: svc_cont_period {
    type: string
    sql:  {% if tender_nomination.tender_nm._is_filtered %}  concat(format_date("%Y/%m/%d", ${cont_start_dt}), " - ", format_date("%Y/%m/%d", ${cont_end_dt})) {% else %} "Multiple" {% endif %};;
    html: {% assign word = _filters['tender_nomination.tender_nm'] | split: "," %}
          {% if word[1] or value == "Multiple" %}
            <div style="font-size:1.5vw;text-align:center;"> Multiple </div>
          {% elsif value == " - " or tender_nomination.svc_cont_concatn._rendered_value == "N/A" %}
            <div style="font-size:1.5vw;text-align:center;"> N/A </div>
          {% else  %}
            <div style="font-size:13pt;text-align:center;"> {{ rendered_value }} </div>
          {% endif %} ;;
  }

  dimension: remarks {
    type: string
    sql:  {% if tender_nomination.tender_nm._is_filtered %} coalesce(${TABLE}.remarks, "N/A") {% else %} "Multiple" {% endif %}  ;;
    html: {% assign word = _filters['tender_nomination.tender_nm'] | split: "," %}
          {% if word[1] or value == "Multiple" %}
            <div style="font-size:1.5vw;text-align:center;"> Multiple </div>
          {% elsif value == 'N/A' %}
            <div style="font-size:1.5vw;text-align:center;"> N/A </div>
          {% else %}
            <div style="font-size:13pt;text-align:left;font-family:'Arial'"> {{rendered_value}} </div>
          {% endif %} ;;

  }


  set: detail {
    fields: [
      sales_week,
      calendar_year,
      cust_grp_id,
      tender_nm,
      trd_grp,
      service_scope_group,
      dominant_flag,
      svc_cont_no,
      target
    ]
  }
}

view: tender_target {
  #sql_table_name: `ONEFORCE.V_TENDER_TARGET`
  derived_table: {
    sql: select 'Previous' record_type,
                a.year,
                g.cust_grp_nm,
                a.cust_grp_id,
                a.svc_scp_grp,
                a.svc_scp,
                a.svc_cont_no,
                a.eff_dt ,
                a.exp_dt ,
                a.record_id,
                b.dominant_flag as dominant_flag,
                a.target
        from `ONEFORCE.V_TENDER_TARGET` as a
        left join `ONEFORCE.OF_SVC_SCP` as b on a.svc_scp = b.service_scope_code
        inner join ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = a.cust_grp_id
        union distinct
        select  --cast(extract (YEAR from tg.cont_start_dt) as string) as year,
                tg.record_type,
                coalesce(cast(a.SYear as string), Format_Date("%Y", cva_effective_date)) as year,
                g.cust_grp_nm,
                g.cust_grp_id as cust_grp_id,
                a.service_scope_group,
                a.service_scope,
                svc.sc_rfa_no,
                format_date("%m/%d/%Y", tg.cont_start_dt) ,
                format_date("%m/%d/%Y",tg.cont_end_dt) ,
                a.ONEForce_ID,
                coalesce(coalesce(a.dominant_flag, a.direction), scp.dominant_flag) as dominant_flg,
                sum(target) as weekly_average
        from  ${of_customer_target.SQL_TABLE_NAME} a
        inner join ${v_customer_opus_n_prospect.SQL_TABLE_NAME} v on a.customer = v.oneforce_id
        inner join ${of_customer_group.SQL_TABLE_NAME} g on g.cust_grp_id = v.cust_grp_id
        left  join ${of_svc_scp.SQL_TABLE_NAME} scp on scp.service_scope_code = a.service_scope
        left  join ${of_svc_contract.SQL_TABLE_NAME} svc on svc.oneforce_id = a.internal_contract_id
        inner join (select  distinct 'Current' record_type, cust_grp_id,  report_dt,  svc_cont_no,  calendar_year, cont_start_dt, cont_end_dt
                    from ${tender_contract_current.SQL_TABLE_NAME}
                    union all
                    select distinct  'Previous' record_type, cust_grp_id, report_dt, svc_cont_no, calendar_year, cont_start_dt, cont_end_dt
                    from ${tender_contract_previous.SQL_TABLE_NAME}
                  ) as tg on tg.cust_grp_id = v.cust_grp_id and svc.sc_rfa_no = tg.svc_cont_no
                  and cast(tg.calendar_year as int64) = coalesce(a.syear, extract(year from a.cva_effective_date)) --a.syear
        where not exists (select 1 from `ONEFORCE.V_TENDER_TARGET` aaa where aaa.svc_cont_no = svc.sc_rfa_no
        and coalesce(cast(a.SYear as string), Format_Date("%Y", cva_effective_date)) =  aaa.Year)
        group by 1,2,3,4,5,6,7,8,9,10,11;;

  }

  dimension: recordtype {
    label: "Target: Record Type"
    type: string
    sql: ${TABLE}.RECORD_TYPE ;;
  }

  dimension: cust_grp_id {
    label: "Target: Group Customer Code"
    type: string
    sql: ${TABLE}.CUST_GRP_ID ;;
  }

  dimension: cust_grp_nm {
    label: "Target: Group Customer Name"
    type: string
    sql: ${TABLE}.CUST_GRP_NM ;;
  }

  dimension: eff_dt {
    type: string
    sql: ${TABLE}.EFF_DT ;;
    hidden: yes
  }

  dimension: exp_dt {
    type: string
    sql: ${TABLE}.EXP_DT ;;
    hidden: yes
  }

  dimension: record_id {
    type: string
    sql: ${TABLE}.RECORD_ID ;;
    primary_key: yes
    hidden: yes
  }

  dimension: svc_cont_no {
    label: "Target: SC/RFA Number"
    type: string
    sql: ${TABLE}.SVC_CONT_NO ;;
  }

  dimension: svc_scp {
    label: "Target: Service Scope"
    type: string
    sql: ${TABLE}.SVC_SCP ;;
  }

  dimension: svc_scp_grp {
    label: "Target: Trade"
    type: string
    sql: ${TABLE}.SVC_SCP_GRP ;;
  }

  dimension: dominant_flag {
    label: "Target: DOM/N-DOM"
    type: string
    sql: ${TABLE}.dominant_flag ;;
  }


  dimension: target {
    label: "Target: TEU"
    type: number
    sql: ${TABLE}.TARGET ;;
  }

  dimension: year {
    type: string
    sql: ${TABLE}.YEAR ;;
    hidden: yes
  }

  measure: target_sum {
    label: "Target: Sum TEU"
    type: sum
    sql: ${target} ;;
  }

  measure: count {
    type: count
    drill_fields: []
    hidden: yes
  }
}

view: upload_other_cost {
  sql_table_name: `ONEFORCE.UPLOAD_VIP_COST`
    ;;

  dimension_group: cre_dt {
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.CRE_DT ;;
  }

  dimension: cust_grp_id {
    hidden: yes
    type: string
    sql: ${TABLE}.CUST_GRP_ID ;;
  }

  dimension: dmnt_flg {
    hidden: yes
    type: string
    sql: ${TABLE}.DMNT_FLG ;;
  }

  dimension: eff_yrmon {
    hidden: yes
    type: string
    sql: ${TABLE}.EFF_YRMON ;;
  }

  dimension: exp_yrmon {
    hidden: yes
    type: string
    sql: ${TABLE}.EXP_YRMON ;;
  }

  dimension: rc_flg {
    hidden: yes
    type: string
    sql: ${TABLE}.RC_FLG ;;
  }

  dimension: rev_period_yrqtr {
    hidden: yes
    type: string
    sql: ${TABLE}.REV_PERIOD_YRQTR ;;
  }

  dimension: svc_grp_cd {
    hidden: yes
    type: string
    sql: ${TABLE}.SVC_GRP_CD ;;
  }

  dimension_group: upd_dt {
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.UPD_DT ;;
  }

  dimension_group: val_fm_dt {
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.VAL_FM_DT ;;
  }

  dimension_group: val_to_dt {
    hidden: yes
    type: time
    timeframes: [
      raw,
      time,
      date,
      week,
      month,
      quarter,
      year
    ]
    sql: ${TABLE}.VAL_TO_DT ;;
  }

  dimension: vip_amt_per_teu_usd {
    hidden: yes
    type: number
    sql: ${TABLE}.VIP_AMT_PER_TEU_USD ;;
  }

  measure: count {
    type: count
    drill_fields: []
  }
}

view: user_count_n_login_hist {
  derived_table: {
    sql: WITH month_master as (
      SELECT
       Sales_Month as Calendar_Month
      ,Calendar_Quarter
      ,Calendar_Year
      ,parse_date('%Y%m', Sales_Month ) mth_start_date
      ,date_sub( date_add( parse_date('%Y%m', Sales_Month ),interval 1 month), interval 1 day)  mth_end_date
      ,CASE WHEN format_date('%Y%m', current_date() ) = Sales_Month THEN 'Current Month'
            WHEN Sales_Month between format_date('%Y%m', date_sub( date_trunc(current_date(),month), interval 3 month) ) and format_date('%Y%m', date_sub( date_trunc(current_date(),month), interval 1 month) ) THEN 'Last 3 complete months'
            ELSE 'Others' END as month_selection
      ,CASE WHEN format_date('%Y%m', current_date() ) = Sales_Month THEN 1 ELSE 0 END as program_control_current_month
      ,CASE WHEN format_date('%Y%m', date_sub( date_trunc(current_date(),month), interval 1 month) ) = Sales_Month THEN 'Yes' ELSE 'No' END as is_last_mth
      from `ONEFORCE.OF_SALES_WEEK_MASTER` w
      where parse_date('%Y%m', Sales_Month )  >= DATE_TRUNC( IFNULL( {% date_start date_filter %}, DATE '2000-01-01'), MONTH )
      and   date_sub( date_add( parse_date('%Y%m', Sales_Month ),interval 1 month), interval 1 day) <= LAST_DAY( DATE_SUB(IFNULL( {% date_end date_filter %}, DATE '2100-01-01' ), INTERVAL 1 DAY), MONTH )
      group by 1, 2, 3 )
      SELECT mth.Calendar_Month, mth.Calendar_Quarter, mth.Calendar_Year, mth.month_selection, mth.program_control_current_month, mth.is_last_mth,
             usr.ONEForce_Id as UserId, usr.Username, usr.IsActive, usr.CreatedDate as Usr_CreatedDate, usr.LastModifiedDate as Usr_LastModifiedDate,
             usrlastlogon.EverRecordedLastLogon,
             (CASE WHEN hist.UserId is null THEN usr.ONEForce_Id ELSE NULL END) as Not_Logged_UserId,
             hist.UserId Login_UserId, hist.Application, hist.LoginTime, hist.LoginType, hist.LoginUrl,
             usr.country as UserCountry,
             EXTRACT( YEAR from hist.LoginTime) ||'-'|| FORMAT("%02d", EXTRACT( WEEK from hist.LoginTime)) ||' '|| FORMAT_DATE( '%h %d', DATE_TRUNC ( hist.LoginTime, WEEK) ) ||'-'|| FORMAT_DATE( '%h %d', DATE_ADD ( DATE_TRUNC ( hist.LoginTime, WEEK), INTERVAL 6 DAY) ) LoginWeek
      FROM month_master as mth
      LEFT JOIN ${of_user.SQL_TABLE_NAME} as usr on (  EXTRACT(DATE from usr.CreatedDate) <= Mth_End_date  AND
                                                       EXTRACT(DATE from usr.CreatedDate) <= DATE_SUB( IFNULL( {% date_end date_filter %}, DATE '2100-01-01' ), INTERVAL 1 DAY)  AND
                                               ( ( usr.IsActive = 'true' ) OR
                                                 ( usr.IsActive = 'false'
                                                   and EXTRACT(DATE from usr.LastModifiedDate) >= Mth_Start_date
                                                   and EXTRACT(DATE from usr.LastModifiedDate) >= DATE_SUB(IFNULL( {% date_end date_filter %}, DATE '2100-01-01' ), INTERVAL 1 DAY)
                                                 )
                                               )
                                             )
      LEFT JOIN (SELECT UserId , max(LoginTime) EverRecordedLastLogon FROM  `ONEFORCE.OF_USER_LOGIN_HISTORY`
                 GROUP by UserId ) usrlastlogon  on (usr.ONEForce_ID  = usrlastlogon.UserId )
      LEFT JOIN `ONEFORCE.OF_USER_LOGIN_HISTORY` hist on ( usr.ONEForce_ID  = hist.UserId  AND
                                                           DATE(hist.Year,hist.Month,hist.Day) BETWEEN mth_start_date and mth_end_date AND
                                                           DATE(hist.Year,hist.Month,hist.Day) BETWEEN IFNULL( {% date_start date_filter %}, DATE '2000-01-01') and
                                                                                                       DATE_SUB( IFNULL( {% date_end date_filter %}, DATE '2100-01-01' ), INTERVAL 1 DAY)
                                                         )
      --WHERE mth.Calendar_Month in ('202112' )
      --and usr.country in ('CA','BE','TW','UK','AU','BR')
      --limit 50
       ;;
  }

#  parameter: param_month_from {
#    label: "Param Month From"
#    type: string
#    allowed_value: { value: "202112" }
#    allowed_value: { value: "202201" }
#    allowed_value: { value: "202202" }
#    allowed_value: { value: "202203" }
#    default_value: "202202"
#  }

  #parameter: param_month_to {
  #  label: "Param Month To"
  #  type: string
  #  allowed_value: { value: "202112" }
  #  allowed_value: { value: "202201" }
  #  allowed_value: { value: "202202" }
  #  allowed_value: { value: "202203" }
  #  default_value: "202203"
  #}

  #measure: count {
  #  type: count
  #  drill_fields: [detail*]
  #}

  filter: date_filter {
    datatype: date
    type: date
  }

  measure: count_login {
    label: "Login Count"
    type: count_distinct
    sql: ${TABLE}.LoginTime ;;
  }

  measure: login_time_min {
    label: "First Login Time"
    sql: FORMAT_DATETIME( "%F %T", MIN(${TABLE}.LoginTime) ) ;;
  }

  measure: login_time_max {
    label: "Last Login Time"
    sql: FORMAT_DATETIME( "%F %T", MAX(${TABLE}.LoginTime) ) ;;
  }

  measure: no_of_days_since_last_login {
    label: "No of Days Since Last Login (see foot note 1)"
    sql: DATE_DIFF( current_datetime(),  MAX(${TABLE}.LoginTime), DAY);;
    #sql: CASE WHEN MAX(${TABLE}.program_control_current_month) = 1
    #     THEN     DATE_DIFF( current_datetime(),  MAX(${TABLE}.LoginTime), DAY)
    #     ELSE NULL END;;
  }

  measure: count_active_usr {
    label: "Total"
    type: count_distinct
    sql: ${TABLE}.UserId ;;
    drill_fields: [of_user.country, of_user.office_code, of_user.full_name, of_user.username,
      of_user.profile_name, of_user.user_role_name, count_login,login_time_min,login_time_max,no_of_days_since_last_login]
  }

  measure: count_usr_logged {
    label: "Logged"
    type: count_distinct
    sql: ${TABLE}.Login_UserId ;;
    filters: [login_user_id: "-NULL"]
    drill_fields: [of_user_logged_in.country, of_user_logged_in.office_code, of_user_logged_in.full_name, of_user_logged_in.username,
      of_user_logged_in.profile_name, of_user_logged_in.user_role_name, count_login,login_time_min,login_time_max,no_of_days_since_last_login]
  }

  measure: count_usr_not_logged_sql {
    label: "Not Logged"
    type: number
    sql: ${count_active_usr} - ${count_usr_logged} ;;
    value_format: "#,##0"
    link: {
      label: "Show All {{rendered_value}}"
      url: "{{ notlogged_drills._link }}&f[user_count_n_login_hist.Zero_Login]=yes"
    }}


  measure: Zero_Login {
    type: yesno
    sql: ${count_login} = 0 ;;
  }

  measure:notlogged_drills {
    type: sum
    sql: 0;;
    drill_fields: [of_user.country, of_user.office_code, of_user.full_name, of_user.username,
      of_user.profile_name, of_user.user_role_name, count_login,login_time_min,login_time_max,no_of_days_since_last_login]
    hidden: yes
  }

  measure: count_usr_not_logged {
    label: "Not Logged(Active-Logged)"
    type: number
    sql: ${count_active_usr} - ${count_usr_logged}  ;;
    drill_fields: [of_user.country, of_user.office_code, of_user.full_name, of_user.username,
      of_user.profile_name, of_user.user_role_name, count_login,login_time_min,login_time_max,no_of_days_since_last_login]
    # filters: [not_login_user_id: "-NULL"] # filter is not support for number type of measure
    # drill_fields: [of_user_not_logged_in.full_name, of_user_not_logged_in.username,count_login,login_time_min,login_time_max]
  }

  #measure: count_usr_not_logged_overall {
  #  label: "Not Logged (overall)"
  #  type: count_distinct
  #  sql: ${TABLE}.UserId ;;
  #  # filters: [not_login_user_id: "-NULL"] # filter is not support for number type of measure
  ##  # drill_fields: [of_user_not_logged_in.full_name, of_user_not_logged_in.username,count_login,login_time_min,login_time_max]
  #  drill_fields: [of_user.full_name, of_user.username,count_login,login_time_min,login_time_max]
  #}

  measure: precentage_logged {
    label: "% of Logged"
    type: number
    sql: case when ${count_active_usr} = 0 then null else ${count_usr_logged} / ${count_active_usr} end ;;
    value_format: "0.0%"
    drill_fields: [of_user.country, of_user.office_code, of_user.full_name, of_user.username,
      of_user.profile_name, of_user.user_role_name, count_login,login_time_min,login_time_max,no_of_days_since_last_login]
  }

  dimension: calendar_month {
    type: string
    sql: ${TABLE}.Calendar_Month ;;
  }

  dimension: calendar_quarter {
    type: string
    sql: ${TABLE}.Calendar_Quarter ;;
  }

  dimension: calendar_year {
    type: string
    sql: ${TABLE}.Calendar_Year ;;
  }

  dimension: month_selection {
    type: string
    sql: ${TABLE}.month_selection ;;
  }

  dimension: program_control_current_month {
    type: number
    sql: ${TABLE}.program_control_current_month ;;
  }

  dimension: is_last_mth {
    type: string
    sql: ${TABLE}.is_last_mth ;;
  }

  dimension: user_id {
    type: string
    sql: ${TABLE}.UserId ;;
  }

  dimension: username {
    label: "Username"
    type: string
    sql: ${TABLE}.Username ;;
  }

  dimension: is_active {
    label: "Is Status Active"
    type: string
    sql: ${TABLE}.IsActive ;;
  }

  dimension_group: usr_acc_created_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.Usr_CreatedDate ;;
  }

  dimension_group: usr_acc_last_modified_date {
    type: time
    datatype: datetime
    sql: ${TABLE}.Usr_LastModifiedDate ;;
  }

  dimension: not_login_user_id {
    type: string
    sql: ${TABLE}.Not_Logged_UserId ;;
  }

  dimension: login_user_id {
    type: string
    sql: ${TABLE}.Login_UserId ;;
  }

  dimension: login_application {
    type: string
    sql: ${TABLE}.Application ;;
  }

  dimension_group: EverRecordedLastLogon {
    label: "Ever Recorded Last Logon"
    type: time
    timeframes: [
      date
    ]
    sql: ${TABLE}.EverRecordedLastLogon ;;
  }

  dimension_group: login_time {
    label: "Login Time"
    type: time
    datatype: datetime
    sql: ${TABLE}.LoginTime ;;
  }

  dimension: login_week_selection {
    type: string
    sql: ${TABLE}.LoginWeek ;;
  }

  dimension: login_type {
    type: string
    sql: ${TABLE}.LoginType ;;
  }

  dimension: login_url {
    type: string
    sql: ${TABLE}.LoginUrl ;;
  }

  dimension: year {
    type: string
    sql: case when ${login_time_week_of_year}=52  and ${login_time_month_num}=1 then ${login_time_year}-1 else ${login_time_year} end ;;
  }

  set: detail {
    fields: [
      calendar_month,
      calendar_quarter,
      calendar_year,
      user_id,
      username,
      is_active,
      usr_acc_created_date_time,
      usr_acc_last_modified_date_time,
      login_application,
      login_time_time,
      login_type,
      login_url
    ]
  }
}

  view: user_count_n_login_hist_mth_selection {
    derived_table: {
      sql: SELECT
        Sales_Month as Calendar_Month
       ,Calendar_Quarter
       ,Calendar_Year
       ,CASE Sales_Month
            WHEN format_date('%Y%m', current_date() ) THEN 'Current Month'
            WHEN format_date('%Y%m', date_sub( date_trunc(current_date(),month), interval 1 month) ) THEN 'Last Month'
            WHEN format_date('%Y%m', date_sub( date_trunc(current_date(),month), interval 2 month) ) THEN '2nd Last Month'
            WHEN format_date('%Y%m', date_sub( date_trunc(current_date(),month), interval 3 month) ) THEN '3rd Last Month'
            ELSE Sales_Month END as month_selection
       from `ONEFORCE.OF_SALES_WEEK_MASTER` w
       group by 1, 2, 3
       order by 1
       ;;
      persist_for: "4 hours"
    }

    measure: count {
      type: count
      drill_fields: [detail*]
    }

    dimension: calendar_month {
      type: string
      sql: ${TABLE}.Calendar_Month ;;
    }

    dimension: calendar_quarter {
      type: string
      sql: ${TABLE}.Calendar_Quarter ;;
    }

    dimension: calendar_year {
      type: string
      sql: ${TABLE}.Calendar_Year ;;
    }

    dimension: month_selection {
      type: string
      sql: ${TABLE}.month_selection ;;
    }

    set: detail {
      fields: [calendar_month, calendar_quarter, calendar_year, month_selection]
    }
  }

  # include: "of_user.view"
  view: user_count_n_login_hist_of_user {
    extends: [of_user]

    dimension: tpa_user {
      label: "Is TPA User"
      type: string
      sql: CASE ${TABLE}.TPA_user WHEN 'true' THEN 'Yes' ELSE 'No' END ;;
    }

    dimension: is_crm_trainer {
      label: "Is CRM Trainer"
      type: yesno
      sql: ${crm_trainer} = "true" ;;
    }

    dimension: is_suppressed_in_kpi_dshbrd {
      label: "Suppressed in CRM Usage KPI Dashboard"
      type: yesno
      sql: ${suppressed_in_crm_usage_kpi_dashboard} = "true" ;;
    }

    dimension: current_status{
      label: "Current Status of User Account"
      type: string
      sql: CASE ${TABLE}.isactive WHEN "true" THEN "Active" ELSE "Inactive" END;;
    }

    dimension: user_role_name {
      label: "User Role"
      type: string
      sql: CASE WHEN INSTR( ${TABLE}.User_Role_Name, '-', -1) = 0 THEN ${TABLE}.User_Role_Name
         ELSE TRIM( SUBSTR( ${TABLE}.User_Role_Name, INSTR( ${TABLE}.User_Role_Name, '-', -1 )+1 ) )
         END;;
    }

    dimension: profile_name {
      label: "User Profile"
      type: string
      sql: CASE ${TABLE}.profile_name WHEN 'PT1' THEN 'System Administrator' ELSE ${TABLE}.profile_name  END ;;
    }

    dimension: office_code {
      label: "Office."
      view_label: "User"
      #type: string
      #sql: ${TABLE}.Office_Code ;;
    }

    dimension: country {
      label: "Country"  # programmatically added by LookML modifier
      view_label: "User"
      type: string
      #map_layer_name: countries
      #sql: ${TABLE}.Country ;;
      sql: CASE TRIM( SUBSTR( ${TABLE}.Office_Code, INSTR( ${TABLE}.Office_Code, '-', -1 )+1 ) )
           WHEN 'TSNBB' then 'China North'
           WHEN 'SJWBB' then 'China North'
           WHEN 'DLCBB' then 'China North'
           WHEN 'SHABB' then 'China Central'
           WHEN 'LYGBB' then 'China North'
           WHEN 'NKGBB' then 'China Central'
           WHEN 'SZHBB' then 'China Central'
           WHEN 'HGHBB' then 'China Central'
           WHEN 'JIXBB' then 'China Central'
           WHEN 'NBOBB' then 'China Central'
           WHEN 'HFEBB' then 'China Central'
           WHEN 'FOCBB' then 'HK & China South'
           WHEN 'XMNBB' then 'HK & China South'
           WHEN 'TAOBB' then 'China North'
           WHEN 'CGOBB' then 'China North'
           WHEN 'WUHBB' then 'China Central'
           WHEN 'CANBB' then 'HK & China South'
           WHEN 'SWABA' then 'HK & China South'
           WHEN 'SZPBB' then 'HK & China South'
           WHEN 'ZHOBB' then 'HK & China South'
           WHEN 'ZHUBB' then 'HK & China South'
           WHEN 'CKGBB' then 'China Central'
           WHEN 'CTUBB' then 'China Central'
           WHEN 'SIABB' then 'China North'
           WHEN 'HKGBB' then 'HK & China South'
           WHEN 'HKGHQ' then 'HK & China South'
           WHEN 'MACBA' then 'HK & China South'
        ELSE
          --${TABLE}.Country -- Jack , follow logic in the production version of OF_USER
          TRIM( SUBSTR(${TABLE}.Office_Code, 1, INSTR(${TABLE}.Office_Code, '-')-1 ) )
        END ;;
      drill_fields: [office_code]
    }

    dimension: region_3char {
      label: "Region"
      view_label: "User"
      type: string
      sql:  CASE TRIM( SUBSTR( ${TABLE}.Regional_Head_Office, INSTR( ${TABLE}.Regional_Head_Office, '-', -1 )+1 ) )
          WHEN 'SINHO' THEN 'SINHO' WHEN 'SAOHQ' THEN 'LAM' WHEN 'HKGHQ' THEN 'EAS'
          WHEN 'LONHQ' THEN 'EUA'   WHEN 'RICHQ' THEN 'NAM' WHEN 'SINHQ' THEN 'SAS'
          ELSE NULL END ;;
      drill_fields: [country, office_code]
    }

    dimension: region_3char1 {
      label: "Region1"
      view_label: "User"
      type: string
      sql:  Case WHEN ${region_3char}='SINHO' and  ${office_for_filter}='Singapore - Singapore - SINHO' THEN 'SINHO'
          WHEN ${region_3char}='SINHO' and  ${office_for_filter}!='Singapore - Singapore - SINHO' THEN 'Offshore'
          WHEN ${region_3char}='LAM' THEN 'LAM'
          WHEN ${region_3char}='EAS' THEN 'EAS'
          WHEN ${region_3char}='EUA' THEN 'EUA'
          WHEN ${region_3char}='NAM' THEN 'NAM'
          WHEN ${region_3char}='SAS' THEN 'SAS'  ELSE NULL END ;;
      drill_fields: [country, office_code]
    }

    dimension: Region_order {
      label: "Region Order"
      view_label: "User"
      type: string
      sql:  Case WHEN ${region_3char1}='SINHO' THEN '7'
          WHEN ${region_3char1}='Offshore' THEN '6'
          WHEN ${region_3char1}='LAM' THEN '3'
          WHEN ${region_3char1}='EAS' THEN '1'
          WHEN ${region_3char1}='EUA' THEN '2'
          WHEN ${region_3char1}='NAM' THEN '4'
          WHEN ${region_3char1}='SAS' THEN '5'  ELSE NULL END ;;
      drill_fields: [country, office_code]
    }

    dimension:office_for_filter {
      label: "Office for filter"
      type: string
      sql: ${TABLE}.Office_Code;;
    }


    dimension: is_sales_executive_or_tpa {
      label: "Is Sales Exec or TPA"
      type: yesno
      sql: lower(trim(${profile_name})) in ( "sales executive", "third party agent") ;;
    }

    dimension_group: user_wise_last_logon_date {
      #label: "Ever Recorded Last Logon"
      label: "Last Logon"
      type: time
      timeframes: [
        time,
        date
      ]
      sql: ${TABLE}.LastLoginDate  ;;
      #value_format:
    }
  }

  view: user_count_n_login_hist_of_user_logged {
    extends: [user_count_n_login_hist_of_user]

    dimension: office_code {
      label: "Office."  # programmatically added by LookML modifier
      view_label: "User Logged-in"
    }

    dimension: country {
      label: "Country"  # programmatically added by LookML modifier
      view_label: "User Logged-in"
    }

    dimension: region_3char {
      label: "Region"
      view_label: "User Logged-in"
    }
  }

  view: user_count_n_login_hist_of_user_not_logged {
    extends: [user_count_n_login_hist_of_user]

    dimension: office_code {
      label: "Office."  # programmatically added by LookML modifier
      view_label: "User Not Logged-in"
    }

    dimension: country {
      label: "Country"  # programmatically added by LookML modifier
      view_label: "User Not Logged-in"
    }

    dimension: region_3char {
      label: "Region"
      view_label: "User Not Logged-in"
    }
  }

  view: v_booking_cancellation_teu_drop {
    sql_table_name: `ONEFORCE.V_BOOKING_CANCELLATION_TEU_DROP`
      ;;

    dimension: primary_key {
      primary_key: yes
      hidden: yes
      type: string
      #sql: ${bkg_no_stripped} ;; #Jack: DCN-515
      sql: concat(${bkg_no}, ${cntr_tpsz}) ;;
    }
    # sql: ARRAY_TO_STRING([${bkg_no_stripped}, CAST(${eff_week} as STRING), ${bkg_grp_sts}], '');;

    dimension: bkg_grp_sts {
      label: "OPUS Bkg Status (X, F/W)" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.BKG_GRP_STS ;;
    }

    dimension: Bkg_grp_sts_Description {
      label: "OPUS Bkg Status Description" # programmatically added by LookML modifier
      type: string
      sql: case when ${bkg_grp_sts} = 'X' then 'Cancel'
              when ${bkg_grp_sts} = 'F/W' then 'Firm/Waitlisted'
              else 'N/a' end;;
    }
    #Julio Test
    dimension: bkg_no_stripped {
      hidden: yes
      label: "BKG NO (1st 10 characters)" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.BKG_NO_STRIPPED ;;
    }

    dimension: base_bkg_no {
      description: "BKG NO + 00"
      type: string
      sql: concat(${bkg_no_stripped}, '00') ;;
      hidden: yes
    }

    dimension: cncl_teu {
      label: "TEU Cancelled"  # programmatically added by LookML modifier
      type: number
      sql: ${TABLE}.CNCL_TEU ;;
    }

    dimension: dscr_teu {
      label: "TEU Dropped"  # programmatically added by LookML modifier
      type: number
      sql: ${TABLE}.DSCR_TEU ;;
    }

    dimension: eff_week {
      label: "Reference Sales Week" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.EFF_WEEK ;;
      hidden: yes
    }

    dimension: firm_teu {
      label: "Firm TEU" # programmatically added by LookML modifier
      type: number
      sql: ${TABLE}.FIRM_TEU ;;
    }

    dimension: incr_teu {
      label: "TEU Increased"  # programmatically added by LookML modifier
      type: number
      sql: ${TABLE}.INCR_TEU ;;
    }

    dimension: org_teu {
      label: "Original TEU" # programmatically added by LookML modifier
      type: number
      sql: ${TABLE}.ORG_TEU ;;
    }

#Jack: DCN-515 : start
    dimension: bkg_no {
      label: "Booking No."  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.BKG_NO ;;
    }

    dimension: cntr_tpsz {
      label: "Equipment type size"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CNTR_TPSZ ;;
    }
#Jack: DCN-515 : end

    measure: count {
      hidden: yes
      type: count
      drill_fields: []
    }

    measure: bkg_qty {
      label: "Distinct Count of bkg_no_stripped"
      # hidden: yes
      type: count_distinct
      sql: ${bkg_no_stripped} ;;
    }

    measure: total_cncl_teu {
      label: "Total Cancelled TEU"
      type: sum
      sql: ${cncl_teu} ;;
      value_format_name: decimal_0
      filters: [of_booking.bkg_sts_cd :"X"]  #DCN-692 : applied bkg_sts_cd = X to both total_cancelled_teu and total_cncl_teu
      drill_fields: [of_booking.basic_details*, total_cncl_teu]
    }

    measure: total_dscr_teu {
      label: "Total Reduced Bookings"
      # hidden: yes
      type: sum
      sql: ${dscr_teu} ;;
      value_format_name: decimal_0
      drill_fields: [of_booking.basic_details*, total_dscr_teu]
    }

    measure: total_firm_teu {
      type: sum
      sql: ${firm_teu} ;;
      value_format_name: decimal_0
      filters: [of_booking.bkg_sts_cd :"-X"] #DCN-692 : applied bkg_sts_cd <> X to total_firm_teu
      drill_fields: [of_booking.basic_details*, total_firm_teu]
    }

    measure: total_incr_teu {
      label: "Total Increased TEU"
      type: sum
      sql: ${incr_teu} ;;
      value_format_name: decimal_0
      drill_fields: [of_booking.basic_details*, total_incr_teu]
    }

    measure: total_org_teu {
      label: "Total Original TEU"
      type: sum
      sql: ${org_teu} ;;
      value_format_name: decimal_0
      drill_fields: [of_booking.basic_details*, total_org_teu]
    }

    measure: total_booking_teu {
      description: "Total Original TEU + Total Increased TEU"
      type: number
      sql:  ${total_org_teu} + ${total_incr_teu};;
      value_format_name: decimal_0
      #drill_fields: [of_booking.basic_details*, total_booking_teu, total_incr_teu] #Jack: DCN-515
      drill_fields: [of_booking.basic_details*, total_booking_teu]
    }

    measure: total_cancelled_teu {
      description: "Includes both Cancelled TEU and Decreased TEU"
      #type: number
      #sql: ${total_cncl_teu} + ${total_dscr_teu};; #DCN-692 : turned the definition from ${total_cncl_teu} + ${total_dscr_teu} to sum[ ${cncl_teu} ]
      type: sum
      sql: ${cncl_teu} ;;
      value_format_name: decimal_0
      filters: [of_booking.bkg_sts_cd :"X"] #DCN-692 : applied bkg_sts_cd = X to both total_cancelled_teu and total_cncl_teu
      drill_fields: [of_booking.basic_details*, total_cancelled_teu]
    }

    measure: percent_cancellation {
      description: "Cancelled TEU / Total Booking TEU"
      type: number
      sql: ${total_cancelled_teu} / NULLIF(${total_booking_teu}, 0) ;;
      value_format_name: percent_0
      drill_fields: [of_booking.basic_details*, total_booking_teu, total_cancelled_teu]
    }



    set: primary_key {
      fields: [primary_key, bkg_no_stripped, eff_week, bkg_grp_sts, count]
    }
  }

  view: v_customer_opus_n_prospect {
    sql_table_name: `ONEFORCE.V_CUSTOMER_OPUS_N_PROSPECT` ;;

    dimension: owner_name {
      label: "Owner Name"
      type: string
      sql: ${TABLE}.of_owner_name ;;
    }

    dimension: owner_office_code {
      label: "Owner Office Code"
      type: string
      sql: ${TABLE}.of_owner_office_code ;;
    }

    dimension: owner_name_or_srep_nm {
      label: "Owner (if CRM then Srep)"
      type: string
      sql: CASE WHEN upper(${owner_office_code}) = 'ZZUNCLAIMED - OFFICE' THEN ${srep_nm} ELSE ${owner_name} END ;;
    }

    dimension: oneforce_id {
      label: "Customer"
      primary_key: yes
      type: string
      sql: ${TABLE}.ONEForce_ID ;;
    }

    dimension: cust_cd {
      hidden: no
      label: "Customer Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CUST_CD ;;
      suggest_persist_for: "4 hour"
    }

    dimension: name {
      label: "Customer Name"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.NAME ;;
      suggest_persist_for: "4 hour"
    }

    dimension: customer_cd_and_name {
      label: "Customer Code & Name"
      type: string
      sql: concat(${cust_cd}, " - ", ${name}) ;;
      suggest_persist_for: "4 hour"
    }

    dimension: cust_cnt_cd {
      label: "Country"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CUST_CNT_CD ;;
      suggest_persist_for: "24 hour"
    }

    dimension: cty_nm {
      label: "City" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CTY_NM ;;
    }

    dimension: post_code {
      label: "Zip/Postal Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.POST_CODE ;;
    }

    dimension: cust_fax {
      label: "Fax"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CUST_FAX ;;
    }

    dimension: cust_eml {
      label: "Email Address"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CUST_EML ;;
    }

    dimension: srep_eml {
      label: "Sales Rep Email"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.SREP_EML ;;
    }

    dimension: delt_flg {
      label: "Inactive" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.DELT_FLG ;;
    }

    dimension: cust_grp_hrchy_cd {
      view_label: "Office Information"
      label: "{{ _view._name }}: Office Type Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CUST_GRP_HRCHY_CD ;;
      suggest_persist_for: "24 hour"
    }

    dimension: cust_grp_hrchy_cd_dscr {
      view_label: "Office Information"
      label: "{{ _view._name }}: Office Type"  # programmatically added by LookML modifier
      type: string
      sql:
          CASE WHEN (${cust_grp_hrchy_cd} = 'G') THEN 'Global'
          WHEN (${cust_grp_hrchy_cd} = 'R') THEN 'Regional'
          WHEN (${cust_grp_hrchy_cd} = 'C') THEN 'Country'
          WHEN (${cust_grp_hrchy_cd} = 'I') THEN 'Individual'
          ELSE ${cust_grp_hrchy_cd}
          END
          ;;
      suggest_persist_for: "24 hour"
    }

    dimension: srep_nm {
      label: "Sales Rep Name" # programmatically added by LookML modifier
      type: string
      sql:  initcap(lower(${TABLE}.SREP_NM));;
    }

    dimension: ofc_nm {
      view_label: "Office Information"
      label: "{{ _view._name }}: Sales Person's Office"  # programmatically added by LookML modifier
      type: string
      sql: initcap(lower(${TABLE}.OFC_NM));;
    }

    dimension: ofc_Loc_Cd {
      view_label: "Office Information"
      label: "{{ _view._name }}: Office Code"
      type: string
      sql: ${TABLE}.OFC_CD ;;
    }

    dimension: frt_fwrd {
      label: "Is A Forwarder?"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.FRT_FWRD ;;
    }

    dimension: frt_fwrd_fmc_no {
      label: "Forwarder No."  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.FRT_FWRD_FMC_NO ;;
    }

    dimension: lsr_flg {
      label: "Is a Lessor?" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.LSR_FLG ;;
    }

    dimension: mfr_flg {
      label: "Is a Manufacturer?" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.MFR_FLG ;;
    }

    dimension: shp_agnt_flg {
      label: "Is a Shipping Agent?" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.SHP_AGNT_FLG ;;
    }

    dimension: cust_rgst_no {
      label: "Tax ID" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CUST_RGST_NO ;;
    }

    dimension: cust_grp_id {
      hidden: no
      label: "Customer Group Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CUST_GRP_ID ;;
      suggest_persist_for: "4 hour"
    }

    dimension: cntr_cust_tp_cd {
      label: "Customer Type"  # programmatically added by LookML modifier ...
      type: string
      case: {
        when: {
          sql:${TABLE}.CNTR_CUST_TP_CD = 'B'  ;;
          label: "BCO"
        }
        when: {
          sql:${TABLE}.CNTR_CUST_TP_CD = 'N'  ;;
          label: "NVO"
        }
      }
      alpha_sort: yes
      sql: ${TABLE}.CNTR_CUST_TP_CD ;;
      suggest_persist_for: "24 hour"
    }

    dimension: ofc_cd {
      view_label: "Office Information"
      label: "Sales Rep Office"
      description: "{{ _view._name }}: Admin Office Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.OFC_CD ;;
    }

    dimension: capi_amt {
      label: "Capital Amount" # programmatically added by LookML modifier
      type: number
      sql: ${TABLE}.CAPI_AMT ;;
    }

    dimension: capi_curr_cd {
      label: "Capital Currency Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CAPI_CURR_CD ;;
    }

    dimension: nbs_clss_cd1 {
      label: "Customer Sub Typ Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.NBS_CLSS_CD1 ;;
    }

    dimension: finc_sts_lvl_cd {
      label: "Finance Status Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.FINC_STS_LVL_CD ;;
    }

    dimension: indiv_corp_div_cd {
      label: "Firm/Private Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.INDIV_CORP_DIV_CD ;;
    }

    dimension: key_acct_st_eff_dt {
      label: "GCM Account Effective Date" # programmatically added by LookML modifier
      type: date
      datatype: date
      sql: ${TABLE}.KEY_ACCT_ST_EFF_DT ;;
    }

    dimension: key_acct_end_eff_dt {
      label: "GCM Account Exp Date" # programmatically added by LookML modifier
      type: date
      datatype: date
      sql: ${TABLE}.KEY_ACCT_END_EFF_DT ;;
    }

    dimension: key_acct_flg {
      label: "GCM Account"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.KEY_ACCT_FLG ;;
    }

    dimension: cust_div_cd {
      label: "Individual/Group" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CUST_DIV_CD ;;
    }

    dimension: indus_desc {
      label: "Industry Type Code" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.INDUS_DESC ;;
    }

    dimension: loc_cd {
      label: "Location Code"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.LOC_CD ;;
    }

    dimension: mlt_trd_acct_flg {
      label: "Multi Trade Account"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.MLT_TRD_ACCT_FLG ;;
    }

    dimension: nmd_cust_flg {
      label: "Named Customer" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.NMD_CUST_FLG ;;
    }

    dimension: nbs_clss_cd3 {
      label: "Regional Key Account" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.NBS_CLSS_CD3 ;;
    }

    dimension: crm_if_flg {
      label: "Track in CRM" # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.CRM_IF_FLG ;;
    }

    dimension: crnt_vol_knt {
      label: "Yearly Volume (TEU)"  # programmatically added by LookML modifier
      type: number
      sql: ${TABLE}.CRNT_VOL_KNT ;;
    }

    dimension: Is_ungroup_customer {
      type: yesno
      sql: ${cust_grp_id} IS NULL ;;
    }

    # Jack, Jul 28, moved the definition from this view to of_consolidated.cust_nvo_fak_nac
    # dimension: nvo_fak_nac {
    #   label: "NVO: FAK/NAC"
    #   type: string
    #   sql:
    #     CASE WHEN (${cntr_cust_tp_cd} = 'N' and ${name} is not null)
    #           then 'NAC'
    #     WHEN (${cntr_cust_tp_cd} = 'N' and ${name} is not null)
    #           then 'NAC'
    #     WHEN (${cntr_cust_tp_cd} = 'N')
    #           then 'FAK'
    #     ELSE
    #           null
    #     END
    #   ;;
    # }

    # Jack, Jul 28, moved the definition from this view to of_consolidated.cust_bco_fak_nac
    # dimension: bco_fak_nac {
    #   label: "BCO: FAK/NAC"
    #   type: string
    #   sql:
    #     CASE WHEN ${cust_cd} is null
    #           then 'Tariff / Dummy'
    #     WHEN ${cntr_cust_tp_cd} = 'N' and ${name} is not null
    #           then 'NAC'
    #     WHEN ${cntr_cust_tp_cd} = 'N' and ${cust_cd} is not null
    #           then 'NAC'
    #     WHEN ${cntr_cust_tp_cd} = 'N'
    #           then 'FAK'
    #     ELSE 'BCO'
    #     END
    #   ;;
    # }


    dimension: parent_customer_code {
      label: "Parent Customer"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.Parent_Customer_Code ;;
      suggest_persist_for: "4 hour"
    }

    dimension_group: of_cre_dt {
      label: "Created Date" # programmatically added by LookML modifier
      type: time
      datatype: datetime
      sql: ${TABLE}.OF_CRE_DT ;;
    }

    dimension_group: of_upd_dt {
      label: "Last Modified Date" # programmatically added by LookML modifier
      type: time
      datatype: datetime
      sql: ${TABLE}.OF_UPD_DT ;;
    }

    dimension: of_cre_usr_id {
      label: "Created By Id"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.OF_CRE_USR_ID ;;
    }

    dimension: of_upd_usr_id {
      label: "Last Modified By Id"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.OF_UPD_USR_ID ;;
    }

    dimension: of_owner_id {
      label: "Owner Id, or Sales Person designated to this customer"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.OF_OWNER_ID ;;
    }

    dimension: Commercial {
      label: "Contract Customer"  # programmatically added by LookML modifier
      type: string
      sql: ${TABLE}.Commercial ;;
    }

    dimension: Contract_Customer_Flag{
      label: "Flag to identify Contract Customer"
      type:  string
      sql:
          CASE when ${Commercial} in ("false","N") THEN "No"
          else "Yes" end;;
    }

    dimension: Cust_grp_comp {
      label: "Customer group completion"
      type: string
      sql:
      CASE WHEN ${cust_grp_id} is null
            THEN 'N'
      ELSE 'Y'
      END
    ;;
    }

    dimension: Delete_Flag {
      label: "Delete Flag"
      type: string
      sql:
      case when ${delt_flg} in ("false","N") THEN "No"
      else     "Yes" end;;
    }

    dimension: primary_contact {
      label: "Primary Contact ONEFroce ID"
      type:  string
    }

    parameter: To_Be_Customer {
      type: unquoted
      allowed_value: {
        label: "No"
        value: "Exclude"
      }
      allowed_value: {
        label:  "Yes"
        value:  "Include"
      }
      default_value: "Include"
    }

    parameter: Blacklist_Customer {
      type: unquoted
      allowed_value: {
        label: "Yes"
        value: "Include"
      }
      allowed_value: {
        label:  "No"
        value:  "Exclude"
      }
      default_value: "Include"
    }

    measure: count {
      hidden: yes
      type: count
      drill_fields: [name]
    }

    measure: CountDistinct_Costumers {
      label: "Qty Customers"
      hidden: no
      type: count_distinct
      sql: ${cust_cd} ;;
      drill_fields: [cust_cd,name,cust_grp_hrchy_cd_dscr,cntr_cust_tp_cd]
    }

    measure: Qty_Ungroup_Customers {
      label: "Qty_Ungroup_Customers"
      type: count_distinct
      sql: case when ${Cust_grp_comp} = "N" then ${cust_cd} end ;;

    }

    # Sales Process Landing Page ----- Start -------
    measure: CountDistinct_Costumers1 {
      label: "Qty Customers Landing"
      hidden: no
      type: count_distinct
      value_format: "0.0,\" K\""
      sql: ${cust_cd} ;;
      drill_fields: [name,cust_cd,srep_nm,srep_eml,of_office_custom.office_code,of_office_custom.office_name,of_reg_ref.reg_rhq_abbrev,of_reg_ref.reg_rhq_code,of_customer_fy_teu.total_teu,of_customer_fy_teu.total_cm_amt]
    }
    # Sales Process Landing Page ----- End -------


#
# measure:  {
#   label: "Total TEU"
#   type: sum
#   sql:  ;;
# }


    set: primary_key {
      fields: [oneforce_id, count]
    }
  }

  view: v_tender_actual {
#  sql_table_name: `ONEFORCE.V_TENDER_ACTUAL`
    derived_table: {
      sql: SELECT a.*, b.dominant_flag
              FROM `ONEFORCE.V_TENDER_ACTUAL` a
              LEFT JOIN `ONEFORCE.OF_SVC_SCP` b on a.SVC_SCP = b.SERVICE_SCOPE_CODE
            ;;
    }

    dimension: cust_grp_id {
      type: string
      sql: ${TABLE}.CUST_GRP_ID ;;
    }

    dimension: cust_grp_nm {
      type: string
      sql: ${TABLE}.CUST_GRP_NM ;;
    }

    dimension: record_id {
      type: string
      sql: ${TABLE}.RECORD_ID ;;
    }

    dimension: svc_cont_no {
      type: string
      sql: ${TABLE}.SVC_CONT_NO ;;
    }

    dimension: svc_scp {
      type: string
      sql: ${TABLE}.SVC_SCP ;;
    }

    dimension: svc_scp_grp {
      type: string
      sql: ${TABLE}.SVC_SCP_GRP ;;
    }

    dimension: tender_nm {
      type: string
      sql: ${TABLE}.TENDER_NM ;;
    }

    dimension: teu {
      type: number
      sql: ${TABLE}.TEU ;;
    }

    dimension: year {
      type: string
      sql: ${TABLE}.YEAR ;;
    }

    dimension: dominant_flag {
      type: string
      sql: ${TABLE}.DOMINANT_FLAG ;;
    }

    measure: count {
      type: count
      drill_fields: []
    }
  }
